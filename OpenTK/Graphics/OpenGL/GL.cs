// Type: OpenTK.Graphics.OpenGL.GL
// Assembly: OpenTK, Version=1.1.0.0, Culture=neutral, PublicKeyToken=bad199fe84eb3df4
// MVID: FE2CFFE8-B942-430E-8C15-E783DB6F0AD6
// Assembly location: F:\Program Files (x86)\FEZ\OpenTK.dll

using OpenTK;
using OpenTK.Graphics;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace OpenTK.Graphics.OpenGL
{
  public sealed class GL : GraphicsBindingsBase
  {
    private static SortedList<string, bool> AvailableExtensions = new SortedList<string, bool>();
    private static readonly object sync_root = new object();
    internal const string Library = "opengl32.dll";

    protected override object SyncRoot
    {
      get
      {
        return GL.sync_root;
      }
    }

    static GL()
    {
    }

    [Obsolete("If you are using a context constructed outside of OpenTK, create a new GraphicsContext and pass your context handle to it. Otherwise, there is no need to call this method.")]
    public static void LoadAll()
    {
      new GL().LoadEntryPoints();
    }

    public static void Color3(Color color)
    {
      GL.Color3(color.R, color.G, color.B);
    }

    public static void Color4(Color color)
    {
      GL.Color4(color.R, color.G, color.B, color.A);
    }

    public static void Color3(Vector3 color)
    {
      GL.Color3(color.X, color.Y, color.Z);
    }

    public static void Color4(Vector4 color)
    {
      GL.Color4(color.X, color.Y, color.Z, color.W);
    }

    public static void Color4(Color4 color)
    {
      GL.Color4(color.R, color.G, color.B, color.A);
    }

    public static void ClearColor(Color color)
    {
      GL.ClearColor((float) color.R / (float) byte.MaxValue, (float) color.G / (float) byte.MaxValue, (float) color.B / (float) byte.MaxValue, (float) color.A / (float) byte.MaxValue);
    }

    public static void ClearColor(Color4 color)
    {
      GL.ClearColor(color.R, color.G, color.B, color.A);
    }

    public static void BlendColor(Color color)
    {
      GL.BlendColor((float) color.R / (float) byte.MaxValue, (float) color.G / (float) byte.MaxValue, (float) color.B / (float) byte.MaxValue, (float) color.A / (float) byte.MaxValue);
    }

    public static void BlendColor(Color4 color)
    {
      GL.BlendColor(color.R, color.G, color.B, color.A);
    }

    public static unsafe void Material(MaterialFace face, MaterialParameter pname, Vector4 @params)
    {
      GL.Material(face, pname, &@params.X);
    }

    public static unsafe void Material(MaterialFace face, MaterialParameter pname, Color4 @params)
    {
      GL.Material(face, pname, (float*) &@params);
    }

    public static unsafe void Light(LightName name, LightParameter pname, Vector4 @params)
    {
      GL.Light(name, pname, &@params.X);
    }

    public static unsafe void Light(LightName name, LightParameter pname, Color4 @params)
    {
      GL.Light(name, pname, (float*) &@params);
    }

    public static void Normal3(Vector3 normal)
    {
      GL.Normal3(normal.X, normal.Y, normal.Z);
    }

    public static void RasterPos2(Vector2 pos)
    {
      GL.RasterPos2(pos.X, pos.Y);
    }

    public static void RasterPos3(Vector3 pos)
    {
      GL.RasterPos3(pos.X, pos.Y, pos.Z);
    }

    public static void RasterPos4(Vector4 pos)
    {
      GL.RasterPos4(pos.X, pos.Y, pos.Z, pos.W);
    }

    public static void Vertex2(Vector2 v)
    {
      GL.Vertex2(v.X, v.Y);
    }

    public static void Vertex3(Vector3 v)
    {
      GL.Vertex3(v.X, v.Y, v.Z);
    }

    public static void Vertex4(Vector4 v)
    {
      GL.Vertex4(v.X, v.Y, v.Z, v.W);
    }

    public static void TexCoord2(Vector2 v)
    {
      GL.TexCoord2(v.X, v.Y);
    }

    public static void TexCoord3(Vector3 v)
    {
      GL.TexCoord3(v.X, v.Y, v.Z);
    }

    public static void TexCoord4(Vector4 v)
    {
      GL.TexCoord4(v.X, v.Y, v.Z, v.W);
    }

    public static void Rotate(float angle, Vector3 axis)
    {
      GL.Rotate(angle, axis.X, axis.Y, axis.Z);
    }

    public static void Scale(Vector3 scale)
    {
      GL.Scale(scale.X, scale.Y, scale.Z);
    }

    public static void Translate(Vector3 trans)
    {
      GL.Translate(trans.X, trans.Y, trans.Z);
    }

    public static unsafe void MultMatrix(ref Matrix4 mat)
    {
      fixed (float* m = &mat.Row0.X)
        GL.MultMatrix(m);
    }

    public static unsafe void LoadMatrix(ref Matrix4 mat)
    {
      fixed (float* m = &mat.Row0.X)
        GL.LoadMatrix(m);
    }

    public static unsafe void LoadTransposeMatrix(ref Matrix4 mat)
    {
      fixed (float* m = &mat.Row0.X)
        GL.LoadTransposeMatrix(m);
    }

    public static unsafe void MultTransposeMatrix(ref Matrix4 mat)
    {
      fixed (float* m = &mat.Row0.X)
        GL.MultTransposeMatrix(m);
    }

    public static unsafe void UniformMatrix4(int location, bool transpose, ref Matrix4 matrix)
    {
      fixed (float* numPtr = &matrix.Row0.X)
        GL.UniformMatrix4(location, 1, transpose, numPtr);
    }

    public static void Normal3(Vector3d normal)
    {
      GL.Normal3(normal.X, normal.Y, normal.Z);
    }

    public static void RasterPos2(Vector2d pos)
    {
      GL.RasterPos2(pos.X, pos.Y);
    }

    public static void RasterPos3(Vector3d pos)
    {
      GL.RasterPos3(pos.X, pos.Y, pos.Z);
    }

    public static void RasterPos4(Vector4d pos)
    {
      GL.RasterPos4(pos.X, pos.Y, pos.Z, pos.W);
    }

    public static void Vertex2(Vector2d v)
    {
      GL.Vertex2(v.X, v.Y);
    }

    public static void Vertex3(Vector3d v)
    {
      GL.Vertex3(v.X, v.Y, v.Z);
    }

    public static void Vertex4(Vector4d v)
    {
      GL.Vertex4(v.X, v.Y, v.Z, v.W);
    }

    public static void TexCoord2(Vector2d v)
    {
      GL.TexCoord2(v.X, v.Y);
    }

    public static void TexCoord3(Vector3d v)
    {
      GL.TexCoord3(v.X, v.Y, v.Z);
    }

    public static void TexCoord4(Vector4d v)
    {
      GL.TexCoord4(v.X, v.Y, v.Z, v.W);
    }

    public static void Rotate(double angle, Vector3d axis)
    {
      GL.Rotate(angle, axis.X, axis.Y, axis.Z);
    }

    public static void Scale(Vector3d scale)
    {
      GL.Scale(scale.X, scale.Y, scale.Z);
    }

    public static void Translate(Vector3d trans)
    {
      GL.Translate(trans.X, trans.Y, trans.Z);
    }

    public static unsafe void MultMatrix(ref Matrix4d mat)
    {
      fixed (double* m = &mat.Row0.X)
        GL.MultMatrix(m);
    }

    public static unsafe void LoadMatrix(ref Matrix4d mat)
    {
      fixed (double* m = &mat.Row0.X)
        GL.LoadMatrix(m);
    }

    public static unsafe void LoadTransposeMatrix(ref Matrix4d mat)
    {
      fixed (double* m = &mat.Row0.X)
        GL.LoadTransposeMatrix(m);
    }

    public static unsafe void MultTransposeMatrix(ref Matrix4d mat)
    {
      fixed (double* m = &mat.Row0.X)
        GL.MultTransposeMatrix(m);
    }

    [CLSCompliant(false)]
    public static void Uniform2(int location, ref Vector2 vector)
    {
      GL.Uniform2(location, vector.X, vector.Y);
    }

    [CLSCompliant(false)]
    public static void Uniform3(int location, ref Vector3 vector)
    {
      GL.Uniform3(location, vector.X, vector.Y, vector.Z);
    }

    [CLSCompliant(false)]
    public static void Uniform4(int location, ref Vector4 vector)
    {
      GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
    }

    public static void Uniform2(int location, Vector2 vector)
    {
      GL.Uniform2(location, vector.X, vector.Y);
    }

    public static void Uniform3(int location, Vector3 vector)
    {
      GL.Uniform3(location, vector.X, vector.Y, vector.Z);
    }

    public static void Uniform4(int location, Vector4 vector)
    {
      GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
    }

    public static void Uniform4(int location, Color4 color)
    {
      GL.Uniform4(location, color.R, color.G, color.B, color.A);
    }

    public static void Uniform4(int location, Quaternion quaternion)
    {
      GL.Uniform4(location, quaternion.X, quaternion.Y, quaternion.Z, quaternion.W);
    }

    public static string GetActiveAttrib(int program, int index, out int size, out ActiveAttribType type)
    {
      int num;
      GL.GetProgram(program, ProgramParameter.ActiveAttributeMaxLength, out num);
      StringBuilder name = new StringBuilder(num == 0 ? 1 : num * 2);
      GL.GetActiveAttrib(program, index, name.Capacity, out num, out size, out type, name);
      return ((object) name).ToString();
    }

    public static string GetActiveUniform(int program, int uniformIndex, out int size, out ActiveUniformType type)
    {
      int num;
      GL.GetProgram(program, ProgramParameter.ActiveUniformMaxLength, out num);
      StringBuilder name = new StringBuilder(num == 0 ? 1 : num);
      GL.GetActiveUniform(program, uniformIndex, name.Capacity, out num, out size, out type, name);
      return ((object) name).ToString();
    }

    public static string GetActiveUniformName(int program, int uniformIndex)
    {
      int num;
      GL.GetProgram(program, ProgramParameter.ActiveUniformMaxLength, out num);
      StringBuilder uniformName = new StringBuilder(num == 0 ? 1 : num * 2);
      GL.GetActiveUniformName(program, uniformIndex, uniformName.Capacity, out num, uniformName);
      return ((object) uniformName).ToString();
    }

    public static string GetActiveUniformBlockName(int program, int uniformIndex)
    {
      int num;
      GL.GetProgram(program, ProgramParameter.ActiveUniformBlockMaxNameLength, out num);
      StringBuilder uniformBlockName = new StringBuilder(num == 0 ? 1 : num * 2);
      GL.GetActiveUniformBlockName(program, uniformIndex, uniformBlockName.Capacity, out num, uniformBlockName);
      return ((object) uniformBlockName).ToString();
    }

    public static unsafe void ShaderSource(int shader, string @string)
    {
      int length = @string.Length;
      GL.ShaderSource((uint) shader, 1, new string[1]
      {
        @string
      }, &length);
    }

    public static string GetShaderInfoLog(int shader)
    {
      string info;
      GL.GetShaderInfoLog(shader, out info);
      return info;
    }

    public static unsafe void GetShaderInfoLog(int shader, out string info)
    {
      int @params;
      GL.GetShader(shader, ShaderParameter.InfoLogLength, out @params);
      if (@params == 0)
      {
        info = string.Empty;
      }
      else
      {
        StringBuilder infoLog = new StringBuilder(@params * 2);
        GL.GetShaderInfoLog((uint) shader, infoLog.Capacity, &@params, infoLog);
        info = ((object) infoLog).ToString();
      }
    }

    public static string GetProgramInfoLog(int program)
    {
      string info;
      GL.GetProgramInfoLog(program, out info);
      return info;
    }

    public static unsafe void GetProgramInfoLog(int program, out string info)
    {
      int @params;
      GL.GetProgram(program, ProgramParameter.InfoLogLength, out @params);
      if (@params == 0)
      {
        info = string.Empty;
      }
      else
      {
        StringBuilder infoLog = new StringBuilder(@params * 2);
        GL.GetProgramInfoLog((uint) program, infoLog.Capacity, &@params, infoLog);
        info = ((object) infoLog).ToString();
      }
    }

    public static void PointParameter(PointSpriteCoordOriginParameter param)
    {
      GL.PointParameter(PointParameterName.PointSpriteCoordOrigin, (int) param);
    }

    [CLSCompliant(false)]
    public static void VertexAttrib2(int index, ref Vector2 v)
    {
      GL.VertexAttrib2(index, v.X, v.Y);
    }

    [CLSCompliant(false)]
    public static void VertexAttrib3(int index, ref Vector3 v)
    {
      GL.VertexAttrib3(index, v.X, v.Y, v.Z);
    }

    [CLSCompliant(false)]
    public static void VertexAttrib4(int index, ref Vector4 v)
    {
      GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
    }

    public static void VertexAttrib2(int index, Vector2 v)
    {
      GL.VertexAttrib2(index, v.X, v.Y);
    }

    public static void VertexAttrib3(int index, Vector3 v)
    {
      GL.VertexAttrib3(index, v.X, v.Y, v.Z);
    }

    public static void VertexAttrib4(int index, Vector4 v)
    {
      GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
    }

    public static void MultiTexCoord2(TextureUnit target, ref Vector2 v)
    {
      GL.MultiTexCoord2(target, v.X, v.Y);
    }

    public static void MultiTexCoord3(TextureUnit target, ref Vector3 v)
    {
      GL.MultiTexCoord3(target, v.X, v.Y, v.Z);
    }

    public static void MultiTexCoord4(TextureUnit target, ref Vector4 v)
    {
      GL.MultiTexCoord4(target, v.X, v.Y, v.Z, v.W);
    }

    [CLSCompliant(false)]
    public static void VertexAttrib2(int index, ref Vector2d v)
    {
      GL.VertexAttrib2(index, v.X, v.Y);
    }

    [CLSCompliant(false)]
    public static void VertexAttrib3(int index, ref Vector3d v)
    {
      GL.VertexAttrib3(index, v.X, v.Y, v.Z);
    }

    [CLSCompliant(false)]
    public static void VertexAttrib4(int index, ref Vector4d v)
    {
      GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
    }

    public static void VertexAttrib2(int index, Vector2d v)
    {
      GL.VertexAttrib2(index, v.X, v.Y);
    }

    public static void VertexAttrib3(int index, Vector3d v)
    {
      GL.VertexAttrib3(index, v.X, v.Y, v.Z);
    }

    public static void VertexAttrib4(int index, Vector4d v)
    {
      GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
    }

    public static void MultiTexCoord2(TextureUnit target, ref Vector2d v)
    {
      GL.MultiTexCoord2(target, v.X, v.Y);
    }

    public static void MultiTexCoord3(TextureUnit target, ref Vector3d v)
    {
      GL.MultiTexCoord3(target, v.X, v.Y, v.Z);
    }

    public static void MultiTexCoord4(TextureUnit target, ref Vector4d v)
    {
      GL.MultiTexCoord4(target, v.X, v.Y, v.Z, v.W);
    }

    public static void Rect(RectangleF rect)
    {
      GL.Rect(rect.Left, rect.Top, rect.Right, rect.Bottom);
    }

    public static void Rect(Rectangle rect)
    {
      GL.Rect(rect.Left, rect.Top, rect.Right, rect.Bottom);
    }

    [CLSCompliant(false)]
    public static void Rect(ref RectangleF rect)
    {
      GL.Rect(rect.Left, rect.Top, rect.Right, rect.Bottom);
    }

    [CLSCompliant(false)]
    public static void Rect(ref Rectangle rect)
    {
      GL.Rect(rect.Left, rect.Top, rect.Right, rect.Bottom);
    }

    public static int GenBuffer()
    {
      int buffers;
      GL.GenBuffers(1, out buffers);
      return buffers;
    }

    public static void DeleteBuffer(int id)
    {
      GL.DeleteBuffers(1, ref id);
    }

    [CLSCompliant(false)]
    public static void DeleteBuffer(uint id)
    {
      GL.DeleteBuffers(1, ref id);
    }

    public static int GenFramebuffer()
    {
      int framebuffers;
      GL.GenFramebuffers(1, out framebuffers);
      return framebuffers;
    }

    public static void DeleteFramebuffer(int id)
    {
      GL.DeleteFramebuffers(1, ref id);
    }

    [CLSCompliant(false)]
    public static void DeleteFramebuffer(uint id)
    {
      GL.DeleteFramebuffers(1, ref id);
    }

    public static int GenProgramPipeline()
    {
      int pipelines;
      GL.GenProgramPipelines(1, out pipelines);
      return pipelines;
    }

    public static void DeleteProgramPipeline(int id)
    {
      GL.DeleteProgramPipelines(1, ref id);
    }

    [CLSCompliant(false)]
    public static void DeleteProgramPipeline(uint id)
    {
      GL.DeleteProgramPipelines(1, ref id);
    }

    public static int GenQuery()
    {
      int ids;
      GL.GenQueries(1, out ids);
      return ids;
    }

    public static void DeleteQuery(int id)
    {
      GL.DeleteQueries(1, ref id);
    }

    [CLSCompliant(false)]
    public static void DeleteQuery(uint id)
    {
      GL.DeleteQueries(1, ref id);
    }

    public static int GenRenderbuffer()
    {
      int renderbuffers;
      GL.GenRenderbuffers(1, out renderbuffers);
      return renderbuffers;
    }

    public static void DeleteRenderbuffer(int id)
    {
      GL.DeleteRenderbuffers(1, ref id);
    }

    [CLSCompliant(false)]
    public static void DeleteRenderbuffer(uint id)
    {
      GL.DeleteRenderbuffers(1, ref id);
    }

    public static int GenSampler()
    {
      int samplers;
      GL.GenSamplers(1, out samplers);
      return samplers;
    }

    public static void DeleteSampler(int id)
    {
      GL.DeleteSamplers(1, ref id);
    }

    [CLSCompliant(false)]
    public static void DeleteSampler(uint id)
    {
      GL.DeleteSamplers(1, ref id);
    }

    public static int GenTexture()
    {
      int textures;
      GL.GenTextures(1, out textures);
      return textures;
    }

    public static void DeleteTexture(int id)
    {
      GL.DeleteTextures(1, ref id);
    }

    [CLSCompliant(false)]
    public static void DeleteTexture(uint id)
    {
      GL.DeleteTextures(1, ref id);
    }

    public static int GenTransformFeedback()
    {
      int ids;
      GL.GenTransformFeedback(1, out ids);
      return ids;
    }

    public static void DeleteTransformFeedback(int id)
    {
      GL.DeleteTransformFeedback(1, ref id);
    }

    [CLSCompliant(false)]
    public static void DeleteTransformFeedback(uint id)
    {
      GL.DeleteTransformFeedback(1, ref id);
    }

    public static int GenVertexArray()
    {
      int arrays;
      GL.GenVertexArrays(1, out arrays);
      return arrays;
    }

    public static void DeleteVertexArray(int id)
    {
      GL.DeleteVertexArrays(1, ref id);
    }

    [CLSCompliant(false)]
    public static void DeleteVertexArray(uint id)
    {
      GL.DeleteVertexArrays(1, ref id);
    }

    public static void VertexPointer(int size, VertexPointerType type, int stride, int offset)
    {
      GL.VertexPointer(size, type, stride, (IntPtr) offset);
    }

    public static void NormalPointer(NormalPointerType type, int stride, int offset)
    {
      GL.NormalPointer(type, stride, (IntPtr) offset);
    }

    public static void IndexPointer(IndexPointerType type, int stride, int offset)
    {
      GL.IndexPointer(type, stride, (IntPtr) offset);
    }

    public static void ColorPointer(int size, ColorPointerType type, int stride, int offset)
    {
      GL.ColorPointer(size, type, stride, (IntPtr) offset);
    }

    public static void FogCoordPointer(FogPointerType type, int stride, int offset)
    {
      GL.FogCoordPointer(type, stride, (IntPtr) offset);
    }

    public static void EdgeFlagPointer(int stride, int offset)
    {
      GL.EdgeFlagPointer(stride, (IntPtr) offset);
    }

    public static void TexCoordPointer(int size, TexCoordPointerType type, int stride, int offset)
    {
      GL.TexCoordPointer(size, type, stride, (IntPtr) offset);
    }

    public static void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset)
    {
      GL.VertexAttribPointer(index, size, type, normalized, stride, (IntPtr) offset);
    }

    public static void DrawElements(BeginMode mode, int count, DrawElementsType type, int offset)
    {
      GL.DrawElements(mode, count, type, new IntPtr(offset));
    }

    public static unsafe void GetFloat(GetPName pname, out Vector2 vector)
    {
      fixed (Vector2* vector2Ptr = &vector)
        GL.GetFloat(pname, (float*) vector2Ptr);
    }

    public static unsafe void GetFloat(GetPName pname, out Vector3 vector)
    {
      fixed (Vector3* vector3Ptr = &vector)
        GL.GetFloat(pname, (float*) vector3Ptr);
    }

    public static unsafe void GetFloat(GetPName pname, out Vector4 vector)
    {
      fixed (Vector4* vector4Ptr = &vector)
        GL.GetFloat(pname, (float*) vector4Ptr);
    }

    public static unsafe void GetFloat(GetPName pname, out Matrix4 matrix)
    {
      fixed (Matrix4* matrix4Ptr = &matrix)
        GL.GetFloat(pname, (float*) matrix4Ptr);
    }

    public static unsafe void GetDouble(GetPName pname, out Vector2d vector)
    {
      fixed (Vector2d* vector2dPtr = &vector)
        GL.GetDouble(pname, (double*) vector2dPtr);
    }

    public static unsafe void GetDouble(GetPName pname, out Vector3d vector)
    {
      fixed (Vector3d* vector3dPtr = &vector)
        GL.GetDouble(pname, (double*) vector3dPtr);
    }

    public static unsafe void GetDouble(GetPName pname, out Vector4d vector)
    {
      fixed (Vector4d* vector4dPtr = &vector)
        GL.GetDouble(pname, (double*) vector4dPtr);
    }

    public static unsafe void GetDouble(GetPName pname, out Matrix4d matrix)
    {
      fixed (Matrix4d* matrix4dPtr = &matrix)
        GL.GetDouble(pname, (double*) matrix4dPtr);
    }

    public static void Viewport(Size size)
    {
      GL.Viewport(0, 0, size.Width, size.Height);
    }

    public static void Viewport(Point location, Size size)
    {
      GL.Viewport(location.X, location.Y, size.Width, size.Height);
    }

    public static void Viewport(Rectangle rectangle)
    {
      GL.Viewport(rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height);
    }

    public static unsafe void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Color color)
    {
      Color4 color4 = new Color4(color.R, color.G, color.B, color.A);
      GL.TexEnv(target, pname, &color4.R);
    }

    public static unsafe void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, Color4 color)
    {
      GL.TexEnv(target, pname, &color.R);
    }

    [Obsolete("Use DisableClientState(ArrayCap) instead.")]
    [AutoGenerated(Category = "Version11Deprecated", EntryPoint = "glDisableClientState", Version = "1.1")]
    public static void DisableClientState(EnableCap array)
    {
      GL.DisableClientState((ArrayCap) array);
    }

    [AutoGenerated(Category = "Version11Deprecated", EntryPoint = "glEnableClientState", Version = "1.1")]
    [Obsolete("Use EnableClientState(ArrayCap) instead.")]
    public static void EnableClientState(EnableCap array)
    {
      GL.EnableClientState((ArrayCap) array);
    }

    [Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
    [AutoGenerated(Category = "ArbUniformBufferObject", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    public static void GetActiveUniforms(int program, int uniformCount, int[] uniformIndices, ArbUniformBufferObject pname, [Out] int[] @params)
    {
      GL.GetActiveUniforms(program, uniformCount, uniformIndices, (ActiveUniformParameter) pname, @params);
    }

    [Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
    [AutoGenerated(Category = "ArbUniformBufferObject", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    public static void GetActiveUniforms(int program, int uniformCount, ref int uniformIndices, ArbUniformBufferObject pname, out int @params)
    {
      GL.GetActiveUniforms(program, uniformCount, ref uniformIndices, (ActiveUniformParameter) pname, out @params);
    }

    [AutoGenerated(Category = "ArbUniformBufferObject", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    [CLSCompliant(false)]
    [Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
    public static unsafe void GetActiveUniforms(int program, int uniformCount, int* uniformIndices, ArbUniformBufferObject pname, [Out] int* @params)
    {
      GL.GetActiveUniforms(program, uniformCount, uniformIndices, (ActiveUniformParameter) pname, @params);
    }

    [Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
    [AutoGenerated(Category = "ArbUniformBufferObject", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static void GetActiveUniforms(uint program, int uniformCount, uint[] uniformIndices, ArbUniformBufferObject pname, [Out] int[] @params)
    {
      GL.GetActiveUniforms(program, uniformCount, uniformIndices, (ActiveUniformParameter) pname, @params);
    }

    [Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
    [CLSCompliant(false)]
    [AutoGenerated(Category = "ArbUniformBufferObject", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    public static void GetActiveUniforms(uint program, int uniformCount, ref uint uniformIndices, ArbUniformBufferObject pname, out int @params)
    {
      GL.GetActiveUniforms(program, uniformCount, ref uniformIndices, (ActiveUniformParameter) pname, out @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ArbUniformBufferObject", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    [Obsolete("Use GetActiveUniforms(..., ActiveUniformParameter, ...) instead.")]
    public static unsafe void GetActiveUniforms(uint program, int uniformCount, uint* uniformIndices, ArbUniformBufferObject pname, [Out] int* @params)
    {
      GL.GetActiveUniforms(program, uniformCount, uniformIndices, (ActiveUniformParameter) pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glAccum", Version = "1.0")]
    public static void Accum(AccumOp op, float value)
    {
      GL.Delegates.glAccum(op, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glActiveShaderProgram", Version = "4.1")]
    public static void ActiveShaderProgram(int pipeline, int program)
    {
      GL.Delegates.glActiveShaderProgram((uint) pipeline, (uint) program);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glActiveShaderProgram", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ActiveShaderProgram(uint pipeline, uint program)
    {
      GL.Delegates.glActiveShaderProgram(pipeline, program);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glActiveTexture", Version = "1.3")]
    public static void ActiveTexture(TextureUnit texture)
    {
      GL.Delegates.glActiveTexture(texture);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glAlphaFunc", Version = "1.0")]
    public static void AlphaFunc(AlphaFunction func, float @ref)
    {
      GL.Delegates.glAlphaFunc(func, @ref);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glAreTexturesResident", Version = "1.1")]
    public static unsafe bool AreTexturesResident(int n, int[] textures, [Out] bool[] residences)
    {
      fixed (int* numPtr = textures)
        fixed (bool* residences1 = residences)
          return GL.Delegates.glAreTexturesResident(n, (uint*) numPtr, residences1);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glAreTexturesResident", Version = "1.1")]
    public static unsafe bool AreTexturesResident(int n, ref int textures, out bool residences)
    {
      fixed (int* numPtr = &textures)
        fixed (bool* residences1 = &residences)
        {
          bool flag = GL.Delegates.glAreTexturesResident(n, (uint*) numPtr, residences1);
          residences = *residences1;
          return flag;
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glAreTexturesResident", Version = "1.1")]
    public static unsafe bool AreTexturesResident(int n, int* textures, [Out] bool* residences)
    {
      return GL.Delegates.glAreTexturesResident(n, (uint*) textures, residences);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glAreTexturesResident", Version = "1.1")]
    public static unsafe bool AreTexturesResident(int n, uint[] textures, [Out] bool[] residences)
    {
      fixed (uint* textures1 = textures)
        fixed (bool* residences1 = residences)
          return GL.Delegates.glAreTexturesResident(n, textures1, residences1);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glAreTexturesResident", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe bool AreTexturesResident(int n, ref uint textures, out bool residences)
    {
      fixed (uint* textures1 = &textures)
        fixed (bool* residences1 = &residences)
        {
          bool flag = GL.Delegates.glAreTexturesResident(n, textures1, residences1);
          residences = *residences1;
          return flag;
        }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glAreTexturesResident", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe bool AreTexturesResident(int n, uint* textures, [Out] bool* residences)
    {
      return GL.Delegates.glAreTexturesResident(n, textures, residences);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glArrayElement", Version = "1.1")]
    public static void ArrayElement(int i)
    {
      GL.Delegates.glArrayElement(i);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glAttachShader", Version = "2.0")]
    public static void AttachShader(int program, int shader)
    {
      GL.Delegates.glAttachShader((uint) program, (uint) shader);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glAttachShader", Version = "2.0")]
    public static void AttachShader(uint program, uint shader)
    {
      GL.Delegates.glAttachShader(program, shader);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glBegin", Version = "1.0")]
    public static void Begin(BeginMode mode)
    {
      GL.Delegates.glBegin(mode);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glBeginConditionalRender", Version = "3.0")]
    public static void BeginConditionalRender(int id, ConditionalRenderType mode)
    {
      GL.Delegates.glBeginConditionalRender((uint) id, mode);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glBeginConditionalRender", Version = "3.0")]
    public static void BeginConditionalRender(uint id, ConditionalRenderType mode)
    {
      GL.Delegates.glBeginConditionalRender(id, mode);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBeginQuery", Version = "1.5")]
    public static void BeginQuery(QueryTarget target, int id)
    {
      GL.Delegates.glBeginQuery(target, (uint) id);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBeginQuery", Version = "1.5")]
    [CLSCompliant(false)]
    public static void BeginQuery(QueryTarget target, uint id)
    {
      GL.Delegates.glBeginQuery(target, id);
    }

    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glBeginQueryIndexed", Version = "1.2")]
    public static void BeginQueryIndexed(QueryTarget target, int index, int id)
    {
      GL.Delegates.glBeginQueryIndexed(target, (uint) index, (uint) id);
    }

    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glBeginQueryIndexed", Version = "1.2")]
    [CLSCompliant(false)]
    public static void BeginQueryIndexed(QueryTarget target, uint index, uint id)
    {
      GL.Delegates.glBeginQueryIndexed(target, index, id);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glBeginTransformFeedback", Version = "3.0")]
    public static void BeginTransformFeedback(BeginFeedbackMode primitiveMode)
    {
      GL.Delegates.glBeginTransformFeedback(primitiveMode);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glBindAttribLocation", Version = "2.0")]
    public static void BindAttribLocation(int program, int index, string name)
    {
      GL.Delegates.glBindAttribLocation((uint) program, (uint) index, name);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glBindAttribLocation", Version = "2.0")]
    public static void BindAttribLocation(uint program, uint index, string name)
    {
      GL.Delegates.glBindAttribLocation(program, index, name);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBindBuffer", Version = "1.5")]
    public static void BindBuffer(BufferTarget target, int buffer)
    {
      GL.Delegates.glBindBuffer(target, (uint) buffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBindBuffer", Version = "1.5")]
    public static void BindBuffer(BufferTarget target, uint buffer)
    {
      GL.Delegates.glBindBuffer(target, buffer);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glBindBufferBase", Version = "3.0")]
    public static void BindBufferBase(BufferTarget target, int index, int buffer)
    {
      GL.Delegates.glBindBufferBase(target, (uint) index, (uint) buffer);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glBindBufferBase", Version = "3.0")]
    [CLSCompliant(false)]
    public static void BindBufferBase(BufferTarget target, uint index, uint buffer)
    {
      GL.Delegates.glBindBufferBase(target, index, buffer);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glBindBufferRange", Version = "3.0")]
    public static void BindBufferRange(BufferTarget target, int index, int buffer, IntPtr offset, IntPtr size)
    {
      GL.Delegates.glBindBufferRange(target, (uint) index, (uint) buffer, offset, size);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glBindBufferRange", Version = "3.0")]
    [CLSCompliant(false)]
    public static void BindBufferRange(BufferTarget target, uint index, uint buffer, IntPtr offset, IntPtr size)
    {
      GL.Delegates.glBindBufferRange(target, index, buffer, offset, size);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glBindFragDataLocation", Version = "3.0")]
    public static void BindFragDataLocation(int program, int color, string name)
    {
      GL.Delegates.glBindFragDataLocation((uint) program, (uint) color, name);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glBindFragDataLocation", Version = "3.0")]
    [CLSCompliant(false)]
    public static void BindFragDataLocation(uint program, uint color, string name)
    {
      GL.Delegates.glBindFragDataLocation(program, color, name);
    }

    [AutoGenerated(Category = "ARB_blend_func_extended", EntryPoint = "glBindFragDataLocationIndexed", Version = "1.2")]
    public static void BindFragDataLocationIndexed(int program, int colorNumber, int index, string name)
    {
      GL.Delegates.glBindFragDataLocationIndexed((uint) program, (uint) colorNumber, (uint) index, name);
    }

    [AutoGenerated(Category = "ARB_blend_func_extended", EntryPoint = "glBindFragDataLocationIndexed", Version = "1.2")]
    [CLSCompliant(false)]
    public static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name)
    {
      GL.Delegates.glBindFragDataLocationIndexed(program, colorNumber, index, name);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glBindFramebuffer", Version = "3.0")]
    public static void BindFramebuffer(FramebufferTarget target, int framebuffer)
    {
      GL.Delegates.glBindFramebuffer(target, (uint) framebuffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glBindFramebuffer", Version = "3.0")]
    public static void BindFramebuffer(FramebufferTarget target, uint framebuffer)
    {
      GL.Delegates.glBindFramebuffer(target, framebuffer);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glBindProgramPipeline", Version = "4.1")]
    public static void BindProgramPipeline(int pipeline)
    {
      GL.Delegates.glBindProgramPipeline((uint) pipeline);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glBindProgramPipeline", Version = "4.1")]
    public static void BindProgramPipeline(uint pipeline)
    {
      GL.Delegates.glBindProgramPipeline(pipeline);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glBindRenderbuffer", Version = "3.0")]
    public static void BindRenderbuffer(RenderbufferTarget target, int renderbuffer)
    {
      GL.Delegates.glBindRenderbuffer(target, (uint) renderbuffer);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glBindRenderbuffer", Version = "3.0")]
    [CLSCompliant(false)]
    public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
    {
      GL.Delegates.glBindRenderbuffer(target, renderbuffer);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glBindSampler", Version = "1.2")]
    public static void BindSampler(int unit, int sampler)
    {
      GL.Delegates.glBindSampler((uint) unit, (uint) sampler);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glBindSampler", Version = "1.2")]
    [CLSCompliant(false)]
    public static void BindSampler(uint unit, uint sampler)
    {
      GL.Delegates.glBindSampler(unit, sampler);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glBindTexture", Version = "1.1")]
    public static void BindTexture(TextureTarget target, int texture)
    {
      GL.Delegates.glBindTexture(target, (uint) texture);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glBindTexture", Version = "1.1")]
    [CLSCompliant(false)]
    public static void BindTexture(TextureTarget target, uint texture)
    {
      GL.Delegates.glBindTexture(target, texture);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glBindTransformFeedback", Version = "1.2")]
    public static void BindTransformFeedback(TransformFeedbackTarget target, int id)
    {
      GL.Delegates.glBindTransformFeedback(target, (uint) id);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glBindTransformFeedback", Version = "1.2")]
    [CLSCompliant(false)]
    public static void BindTransformFeedback(TransformFeedbackTarget target, uint id)
    {
      GL.Delegates.glBindTransformFeedback(target, id);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glBindVertexArray", Version = "3.0")]
    public static void BindVertexArray(int array)
    {
      GL.Delegates.glBindVertexArray((uint) array);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glBindVertexArray", Version = "3.0")]
    [CLSCompliant(false)]
    public static void BindVertexArray(uint array)
    {
      GL.Delegates.glBindVertexArray(array);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glBitmap", Version = "1.0")]
    public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap)
    {
      fixed (byte* bitmap1 = bitmap)
        GL.Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glBitmap", Version = "1.0")]
    public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ref byte bitmap)
    {
      fixed (byte* bitmap1 = &bitmap)
        GL.Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glBitmap", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap)
    {
      GL.Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glBlendColor", Version = "1.2")]
    public static void BlendColor(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glBlendColor(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glBlendEquation", Version = "1.2")]
    public static void BlendEquation(BlendEquationMode mode)
    {
      GL.Delegates.glBlendEquation(mode);
    }

    [AutoGenerated(Category = "VERSION_4_0", EntryPoint = "glBlendEquationi", Version = "1.2")]
    public static void BlendEquation(int buf, Version40 mode)
    {
      GL.Delegates.glBlendEquationi((uint) buf, mode);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_4_0", EntryPoint = "glBlendEquationi", Version = "1.2")]
    public static void BlendEquation(uint buf, Version40 mode)
    {
      GL.Delegates.glBlendEquationi(buf, mode);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glBlendEquationSeparate", Version = "2.0")]
    public static void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
    {
      GL.Delegates.glBlendEquationSeparate(modeRGB, modeAlpha);
    }

    [AutoGenerated(Category = "VERSION_4_0", EntryPoint = "glBlendEquationSeparatei", Version = "1.2")]
    public static void BlendEquationSeparate(int buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
    {
      GL.Delegates.glBlendEquationSeparatei((uint) buf, modeRGB, modeAlpha);
    }

    [AutoGenerated(Category = "VERSION_4_0", EntryPoint = "glBlendEquationSeparatei", Version = "1.2")]
    [CLSCompliant(false)]
    public static void BlendEquationSeparate(uint buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
    {
      GL.Delegates.glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glBlendFunc", Version = "1.0")]
    public static void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor)
    {
      GL.Delegates.glBlendFunc(sfactor, dfactor);
    }

    [AutoGenerated(Category = "VERSION_4_0", EntryPoint = "glBlendFunci", Version = "1.2")]
    public static void BlendFunc(int buf, Version40 src, Version40 dst)
    {
      GL.Delegates.glBlendFunci((uint) buf, src, dst);
    }

    [AutoGenerated(Category = "VERSION_4_0", EntryPoint = "glBlendFunci", Version = "1.2")]
    [CLSCompliant(false)]
    public static void BlendFunc(uint buf, Version40 src, Version40 dst)
    {
      GL.Delegates.glBlendFunci(buf, src, dst);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glBlendFuncSeparate", Version = "1.4")]
    public static void BlendFuncSeparate(BlendingFactorSrc sfactorRGB, BlendingFactorDest dfactorRGB, BlendingFactorSrc sfactorAlpha, BlendingFactorDest dfactorAlpha)
    {
      GL.Delegates.glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    }

    [AutoGenerated(Category = "VERSION_4_0", EntryPoint = "glBlendFuncSeparatei", Version = "1.2")]
    public static void BlendFuncSeparate(int buf, Version40 srcRGB, Version40 dstRGB, Version40 srcAlpha, Version40 dstAlpha)
    {
      GL.Delegates.glBlendFuncSeparatei((uint) buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_4_0", EntryPoint = "glBlendFuncSeparatei", Version = "1.2")]
    public static void BlendFuncSeparate(uint buf, Version40 srcRGB, Version40 dstRGB, Version40 srcAlpha, Version40 dstAlpha)
    {
      GL.Delegates.glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glBlitFramebuffer", Version = "3.0")]
    public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter)
    {
      GL.Delegates.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferData", Version = "1.5")]
    public static void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsageHint usage)
    {
      GL.Delegates.glBufferData(target, size, data, usage);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferData", Version = "1.5")]
    public static void BufferData<T2>(BufferTarget target, IntPtr size, [In, Out] T2[] data, BufferUsageHint usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferData", Version = "1.5")]
    public static void BufferData<T2>(BufferTarget target, IntPtr size, [In, Out] T2[,] data, BufferUsageHint usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferData", Version = "1.5")]
    public static void BufferData<T2>(BufferTarget target, IntPtr size, [In, Out] T2[,,] data, BufferUsageHint usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferData", Version = "1.5")]
    public static void BufferData<T2>(BufferTarget target, IntPtr size, [In, Out] ref T2 data, BufferUsageHint usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
        data = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferSubData", Version = "1.5")]
    public static void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
    {
      GL.Delegates.glBufferSubData(target, offset, size, data);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferSubData", Version = "1.5")]
    public static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferSubData", Version = "1.5")]
    public static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferSubData", Version = "1.5")]
    public static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glBufferSubData", Version = "1.5")]
    public static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
        data = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glCallList", Version = "1.0")]
    public static void CallList(int list)
    {
      GL.Delegates.glCallList((uint) list);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glCallList", Version = "1.0")]
    public static void CallList(uint list)
    {
      GL.Delegates.glCallList(list);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glCallLists", Version = "1.0")]
    public static void CallLists(int n, ListNameType type, IntPtr lists)
    {
      GL.Delegates.glCallLists(n, type, lists);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glCallLists", Version = "1.0")]
    public static void CallLists<T2>(int n, ListNameType type, [In, Out] T2[] lists) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) lists, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCallLists(n, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glCallLists", Version = "1.0")]
    public static void CallLists<T2>(int n, ListNameType type, [In, Out] T2[,] lists) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) lists, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCallLists(n, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glCallLists", Version = "1.0")]
    public static void CallLists<T2>(int n, ListNameType type, [In, Out] T2[,,] lists) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) lists, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCallLists(n, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glCallLists", Version = "1.0")]
    public static void CallLists<T2>(int n, ListNameType type, [In, Out] ref T2 lists) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) lists, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCallLists(n, type, gcHandle.AddrOfPinnedObject());
        lists = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glCheckFramebufferStatus", Version = "3.0")]
    public static FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target)
    {
      return GL.Delegates.glCheckFramebufferStatus(target);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClampColor", Version = "3.0")]
    public static void ClampColor(ClampColorTarget target, ClampColorMode clamp)
    {
      GL.Delegates.glClampColor(target, clamp);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glClear", Version = "1.0")]
    public static void Clear(ClearBufferMask mask)
    {
      GL.Delegates.glClear(mask);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glClearAccum", Version = "1.0")]
    public static void ClearAccum(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glClearAccum(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferfi", Version = "3.0")]
    public static void ClearBuffer(ClearBuffer buffer, int drawbuffer, float depth, int stencil)
    {
      GL.Delegates.glClearBufferfi(buffer, drawbuffer, depth, stencil);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferfv", Version = "3.0")]
    public static unsafe void ClearBuffer(ClearBuffer buffer, int drawbuffer, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glClearBufferfv(buffer, drawbuffer, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferfv", Version = "3.0")]
    public static unsafe void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glClearBufferfv(buffer, drawbuffer, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferfv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void ClearBuffer(ClearBuffer buffer, int drawbuffer, float* value)
    {
      GL.Delegates.glClearBufferfv(buffer, drawbuffer, value);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferiv", Version = "3.0")]
    public static unsafe void ClearBuffer(ClearBuffer buffer, int drawbuffer, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glClearBufferiv(buffer, drawbuffer, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferiv", Version = "3.0")]
    public static unsafe void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glClearBufferiv(buffer, drawbuffer, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferiv", Version = "3.0")]
    public static unsafe void ClearBuffer(ClearBuffer buffer, int drawbuffer, int* value)
    {
      GL.Delegates.glClearBufferiv(buffer, drawbuffer, value);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferuiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void ClearBuffer(ClearBuffer buffer, int drawbuffer, uint[] value)
    {
      fixed (uint* numPtr = value)
        GL.Delegates.glClearBufferuiv(buffer, drawbuffer, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferuiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void ClearBuffer(ClearBuffer buffer, int drawbuffer, ref uint value)
    {
      fixed (uint* numPtr = &value)
        GL.Delegates.glClearBufferuiv(buffer, drawbuffer, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glClearBufferuiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void ClearBuffer(ClearBuffer buffer, int drawbuffer, uint* value)
    {
      GL.Delegates.glClearBufferuiv(buffer, drawbuffer, value);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glClearColor", Version = "1.0")]
    public static void ClearColor(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glClearColor(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glClearDepth", Version = "1.0")]
    public static void ClearDepth(double depth)
    {
      GL.Delegates.glClearDepth(depth);
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glClearDepthf", Version = "4.1")]
    public static void ClearDepth(float d)
    {
      GL.Delegates.glClearDepthf(d);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glClearIndex", Version = "1.0")]
    public static void ClearIndex(float c)
    {
      GL.Delegates.glClearIndex(c);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glClearStencil", Version = "1.0")]
    public static void ClearStencil(int s)
    {
      GL.Delegates.glClearStencil(s);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glClientActiveTexture", Version = "1.3")]
    public static void ClientActiveTexture(TextureUnit texture)
    {
      GL.Delegates.glClientActiveTexture(texture);
    }

    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glClientWaitSync", Version = "1.2")]
    public static ArbSync ClientWaitSync(IntPtr sync, int flags, long timeout)
    {
      return GL.Delegates.glClientWaitSync(sync, (uint) flags, (ulong) timeout);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glClientWaitSync", Version = "1.2")]
    public static ArbSync ClientWaitSync(IntPtr sync, uint flags, ulong timeout)
    {
      return GL.Delegates.glClientWaitSync(sync, flags, timeout);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glClipPlane", Version = "1.0")]
    public static unsafe void ClipPlane(ClipPlaneName plane, double[] equation)
    {
      fixed (double* equation1 = equation)
        GL.Delegates.glClipPlane(plane, equation1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glClipPlane", Version = "1.0")]
    public static unsafe void ClipPlane(ClipPlaneName plane, ref double equation)
    {
      fixed (double* equation1 = &equation)
        GL.Delegates.glClipPlane(plane, equation1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glClipPlane", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void ClipPlane(ClipPlaneName plane, double* equation)
    {
      GL.Delegates.glClipPlane(plane, equation);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3b", Version = "1.0")]
    [CLSCompliant(false)]
    public static void Color3(sbyte red, sbyte green, sbyte blue)
    {
      GL.Delegates.glColor3b(red, green, blue);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3bv", Version = "1.0")]
    public static unsafe void Color3(sbyte[] v)
    {
      fixed (sbyte* v1 = v)
        GL.Delegates.glColor3bv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3bv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color3(ref sbyte v)
    {
      fixed (sbyte* v1 = &v)
        GL.Delegates.glColor3bv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3bv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color3(sbyte* v)
    {
      GL.Delegates.glColor3bv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3d", Version = "1.0")]
    public static void Color3(double red, double green, double blue)
    {
      GL.Delegates.glColor3d(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3dv", Version = "1.0")]
    public static unsafe void Color3(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glColor3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3dv", Version = "1.0")]
    public static unsafe void Color3(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glColor3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3dv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color3(double* v)
    {
      GL.Delegates.glColor3dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3f", Version = "1.0")]
    public static void Color3(float red, float green, float blue)
    {
      GL.Delegates.glColor3f(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3fv", Version = "1.0")]
    public static unsafe void Color3(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glColor3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3fv", Version = "1.0")]
    public static unsafe void Color3(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glColor3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3fv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color3(float* v)
    {
      GL.Delegates.glColor3fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3i", Version = "1.0")]
    public static void Color3(int red, int green, int blue)
    {
      GL.Delegates.glColor3i(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3iv", Version = "1.0")]
    public static unsafe void Color3(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glColor3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3iv", Version = "1.0")]
    public static unsafe void Color3(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glColor3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color3(int* v)
    {
      GL.Delegates.glColor3iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3s", Version = "1.0")]
    public static void Color3(short red, short green, short blue)
    {
      GL.Delegates.glColor3s(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3sv", Version = "1.0")]
    public static unsafe void Color3(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glColor3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3sv", Version = "1.0")]
    public static unsafe void Color3(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glColor3sv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3sv", Version = "1.0")]
    public static unsafe void Color3(short* v)
    {
      GL.Delegates.glColor3sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3ub", Version = "1.0")]
    public static void Color3(byte red, byte green, byte blue)
    {
      GL.Delegates.glColor3ub(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3ubv", Version = "1.0")]
    public static unsafe void Color3(byte[] v)
    {
      fixed (byte* v1 = v)
        GL.Delegates.glColor3ubv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3ubv", Version = "1.0")]
    public static unsafe void Color3(ref byte v)
    {
      fixed (byte* v1 = &v)
        GL.Delegates.glColor3ubv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3ubv", Version = "1.0")]
    public static unsafe void Color3(byte* v)
    {
      GL.Delegates.glColor3ubv(v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3ui", Version = "1.0")]
    public static void Color3(uint red, uint green, uint blue)
    {
      GL.Delegates.glColor3ui(red, green, blue);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3uiv", Version = "1.0")]
    public static unsafe void Color3(uint[] v)
    {
      fixed (uint* v1 = v)
        GL.Delegates.glColor3uiv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3uiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color3(ref uint v)
    {
      fixed (uint* v1 = &v)
        GL.Delegates.glColor3uiv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3uiv", Version = "1.0")]
    public static unsafe void Color3(uint* v)
    {
      GL.Delegates.glColor3uiv(v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3us", Version = "1.0")]
    public static void Color3(ushort red, ushort green, ushort blue)
    {
      GL.Delegates.glColor3us(red, green, blue);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3usv", Version = "1.0")]
    public static unsafe void Color3(ushort[] v)
    {
      fixed (ushort* v1 = v)
        GL.Delegates.glColor3usv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3usv", Version = "1.0")]
    public static unsafe void Color3(ref ushort v)
    {
      fixed (ushort* v1 = &v)
        GL.Delegates.glColor3usv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor3usv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color3(ushort* v)
    {
      GL.Delegates.glColor3usv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4b", Version = "1.0")]
    [CLSCompliant(false)]
    public static void Color4(sbyte red, sbyte green, sbyte blue, sbyte alpha)
    {
      GL.Delegates.glColor4b(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4bv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color4(sbyte[] v)
    {
      fixed (sbyte* v1 = v)
        GL.Delegates.glColor4bv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4bv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color4(ref sbyte v)
    {
      fixed (sbyte* v1 = &v)
        GL.Delegates.glColor4bv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4bv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color4(sbyte* v)
    {
      GL.Delegates.glColor4bv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4d", Version = "1.0")]
    public static void Color4(double red, double green, double blue, double alpha)
    {
      GL.Delegates.glColor4d(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4dv", Version = "1.0")]
    public static unsafe void Color4(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glColor4dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4dv", Version = "1.0")]
    public static unsafe void Color4(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glColor4dv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4dv", Version = "1.0")]
    public static unsafe void Color4(double* v)
    {
      GL.Delegates.glColor4dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4f", Version = "1.0")]
    public static void Color4(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glColor4f(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4fv", Version = "1.0")]
    public static unsafe void Color4(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glColor4fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4fv", Version = "1.0")]
    public static unsafe void Color4(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glColor4fv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4fv", Version = "1.0")]
    public static unsafe void Color4(float* v)
    {
      GL.Delegates.glColor4fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4i", Version = "1.0")]
    public static void Color4(int red, int green, int blue, int alpha)
    {
      GL.Delegates.glColor4i(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4iv", Version = "1.0")]
    public static unsafe void Color4(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glColor4iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4iv", Version = "1.0")]
    public static unsafe void Color4(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glColor4iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color4(int* v)
    {
      GL.Delegates.glColor4iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4s", Version = "1.0")]
    public static void Color4(short red, short green, short blue, short alpha)
    {
      GL.Delegates.glColor4s(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4sv", Version = "1.0")]
    public static unsafe void Color4(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glColor4sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4sv", Version = "1.0")]
    public static unsafe void Color4(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glColor4sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4sv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color4(short* v)
    {
      GL.Delegates.glColor4sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4ub", Version = "1.0")]
    public static void Color4(byte red, byte green, byte blue, byte alpha)
    {
      GL.Delegates.glColor4ub(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4ubv", Version = "1.0")]
    public static unsafe void Color4(byte[] v)
    {
      fixed (byte* v1 = v)
        GL.Delegates.glColor4ubv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4ubv", Version = "1.0")]
    public static unsafe void Color4(ref byte v)
    {
      fixed (byte* v1 = &v)
        GL.Delegates.glColor4ubv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4ubv", Version = "1.0")]
    public static unsafe void Color4(byte* v)
    {
      GL.Delegates.glColor4ubv(v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4ui", Version = "1.0")]
    public static void Color4(uint red, uint green, uint blue, uint alpha)
    {
      GL.Delegates.glColor4ui(red, green, blue, alpha);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4uiv", Version = "1.0")]
    public static unsafe void Color4(uint[] v)
    {
      fixed (uint* v1 = v)
        GL.Delegates.glColor4uiv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4uiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color4(ref uint v)
    {
      fixed (uint* v1 = &v)
        GL.Delegates.glColor4uiv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4uiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color4(uint* v)
    {
      GL.Delegates.glColor4uiv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4us", Version = "1.0")]
    [CLSCompliant(false)]
    public static void Color4(ushort red, ushort green, ushort blue, ushort alpha)
    {
      GL.Delegates.glColor4us(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4usv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Color4(ushort[] v)
    {
      fixed (ushort* v1 = v)
        GL.Delegates.glColor4usv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4usv", Version = "1.0")]
    public static unsafe void Color4(ref ushort v)
    {
      fixed (ushort* v1 = &v)
        GL.Delegates.glColor4usv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColor4usv", Version = "1.0")]
    public static unsafe void Color4(ushort* v)
    {
      GL.Delegates.glColor4usv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glColorMask", Version = "1.0")]
    public static void ColorMask(bool red, bool green, bool blue, bool alpha)
    {
      GL.Delegates.glColorMask(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glColorMaski", Version = "3.0")]
    public static void ColorMask(int index, bool r, bool g, bool b, bool a)
    {
      GL.Delegates.glColorMaski((uint) index, r, g, b, a);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glColorMaski", Version = "3.0")]
    [CLSCompliant(false)]
    public static void ColorMask(uint index, bool r, bool g, bool b, bool a)
    {
      GL.Delegates.glColorMaski(index, r, g, b, a);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glColorMaterial", Version = "1.0")]
    public static void ColorMaterial(MaterialFace face, ColorMaterialParameter mode)
    {
      GL.Delegates.glColorMaterial(face, mode);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glColorP3ui", Version = "1.2")]
    public static void ColorP3(PackedPointerType type, int color)
    {
      GL.Delegates.glColorP3ui(type, (uint) color);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glColorP3ui", Version = "1.2")]
    public static void ColorP3(PackedPointerType type, uint color)
    {
      GL.Delegates.glColorP3ui(type, color);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glColorP3uiv", Version = "1.2")]
    public static unsafe void ColorP3(PackedPointerType type, int* color)
    {
      GL.Delegates.glColorP3uiv(type, (uint*) color);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glColorP3uiv", Version = "1.2")]
    public static unsafe void ColorP3(PackedPointerType type, uint* color)
    {
      GL.Delegates.glColorP3uiv(type, color);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glColorP4ui", Version = "1.2")]
    public static void ColorP4(PackedPointerType type, int color)
    {
      GL.Delegates.glColorP4ui(type, (uint) color);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glColorP4ui", Version = "1.2")]
    public static void ColorP4(PackedPointerType type, uint color)
    {
      GL.Delegates.glColorP4ui(type, color);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glColorP4uiv", Version = "1.2")]
    public static unsafe void ColorP4(PackedPointerType type, int* color)
    {
      GL.Delegates.glColorP4uiv(type, (uint*) color);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glColorP4uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void ColorP4(PackedPointerType type, uint* color)
    {
      GL.Delegates.glColorP4uiv(type, color);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glColorPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorSubTable", Version = "1.2")]
    public static void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
    {
      GL.Delegates.glColorSubTable(target, start, count, format, type, data);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorSubTable", Version = "1.2")]
    public static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In, Out] T5[] data) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorSubTable(target, start, count, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorSubTable", Version = "1.2")]
    public static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In, Out] T5[,] data) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorSubTable(target, start, count, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorSubTable", Version = "1.2")]
    public static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In, Out] T5[,,] data) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorSubTable(target, start, count, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorSubTable", Version = "1.2")]
    public static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In, Out] ref T5 data) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorSubTable(target, start, count, format, type, gcHandle.AddrOfPinnedObject());
        data = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTable", Version = "1.2")]
    public static void ColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
    {
      GL.Delegates.glColorTable(target, internalformat, width, format, type, table);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTable", Version = "1.2")]
    public static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[] table) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorTable(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTable", Version = "1.2")]
    public static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[,] table) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorTable(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTable", Version = "1.2")]
    public static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[,,] table) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorTable(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTable", Version = "1.2")]
    public static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] ref T5 table) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorTable(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
        table = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTableParameterfv", Version = "1.2")]
    public static unsafe void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glColorTableParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTableParameterfv", Version = "1.2")]
    public static unsafe void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, ref float @params)
    {
      fixed (float* params1 = &@params)
        GL.Delegates.glColorTableParameterfv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTableParameterfv", Version = "1.2")]
    public static unsafe void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, float* @params)
    {
      GL.Delegates.glColorTableParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTableParameteriv", Version = "1.2")]
    public static unsafe void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glColorTableParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTableParameteriv", Version = "1.2")]
    public static unsafe void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glColorTableParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glColorTableParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void ColorTableParameter(ColorTableTarget target, ColorTableParameterPName pname, int* @params)
    {
      GL.Delegates.glColorTableParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glCompileShader", Version = "2.0")]
    public static void CompileShader(int shader)
    {
      GL.Delegates.glCompileShader((uint) shader);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glCompileShader", Version = "2.0")]
    public static void CompileShader(uint shader)
    {
      GL.Delegates.glCompileShader(shader);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage1D", Version = "1.3")]
    public static void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage1D", Version = "1.3")]
    public static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In, Out] T6[] data) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage1D", Version = "1.3")]
    public static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In, Out] T6[,] data) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage1D", Version = "1.3")]
    public static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In, Out] T6[,,] data) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage1D", Version = "1.3")]
    public static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In, Out] ref T6 data) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T6) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage2D", Version = "1.3")]
    public static void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage2D", Version = "1.3")]
    public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] T7[] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage2D", Version = "1.3")]
    public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage2D", Version = "1.3")]
    public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,,] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage2D", Version = "1.3")]
    public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] ref T7 data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T7) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage3D", Version = "1.3")]
    public static void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage3D", Version = "1.3")]
    public static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T8[] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage3D", Version = "1.3")]
    public static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T8[,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage3D", Version = "1.3")]
    public static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T8[,,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexImage3D", Version = "1.3")]
    public static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] ref T8 data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage1D", Version = "1.3")]
    public static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage1D", Version = "1.3")]
    public static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T6[] data) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage1D", Version = "1.3")]
    public static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T6[,] data) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage1D", Version = "1.3")]
    public static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T6[,,] data) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage1D", Version = "1.3")]
    public static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] ref T6 data) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T6) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage2D", Version = "1.3")]
    public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage2D", Version = "1.3")]
    public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T8[] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage2D", Version = "1.3")]
    public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T8[,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage2D", Version = "1.3")]
    public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T8[,,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage2D", Version = "1.3")]
    public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] ref T8 data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage3D", Version = "1.3")]
    public static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage3D", Version = "1.3")]
    public static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T10[] data) where T10 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage3D", Version = "1.3")]
    public static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T10[,] data) where T10 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage3D", Version = "1.3")]
    public static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T10[,,] data) where T10 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glCompressedTexSubImage3D", Version = "1.3")]
    public static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] ref T10 data) where T10 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T10) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter1D", Version = "1.2")]
    public static void ConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
    {
      GL.Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, image);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter1D", Version = "1.2")]
    public static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[] image) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter1D", Version = "1.2")]
    public static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[,] image) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter1D", Version = "1.2")]
    public static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[,,] image) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter1D", Version = "1.2")]
    public static void ConvolutionFilter1D<T5>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] ref T5 image) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
        image = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter2D", Version = "1.2")]
    public static void ConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
    {
      GL.Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter2D", Version = "1.2")]
    public static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[] image) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter2D", Version = "1.2")]
    public static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,] image) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter2D", Version = "1.2")]
    public static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,,] image) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionFilter2D", Version = "1.2")]
    public static void ConvolutionFilter2D<T6>(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T6 image) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, gcHandle.AddrOfPinnedObject());
        image = (T6) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionParameterf", Version = "1.2")]
    public static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float @params)
    {
      GL.Delegates.glConvolutionParameterf(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionParameterfv", Version = "1.2")]
    public static unsafe void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glConvolutionParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionParameterfv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, float* @params)
    {
      GL.Delegates.glConvolutionParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionParameteri", Version = "1.2")]
    public static void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int @params)
    {
      GL.Delegates.glConvolutionParameteri(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionParameteriv", Version = "1.2")]
    public static unsafe void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glConvolutionParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glConvolutionParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void ConvolutionParameter(ConvolutionTarget target, ConvolutionParameter pname, int* @params)
    {
      GL.Delegates.glConvolutionParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "ARB_copy_buffer", EntryPoint = "glCopyBufferSubData", Version = "3.0")]
    public static void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
    {
      GL.Delegates.glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glCopyColorSubTable", Version = "1.2")]
    public static void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width)
    {
      GL.Delegates.glCopyColorSubTable(target, start, x, y, width);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glCopyColorTable", Version = "1.2")]
    public static void CopyColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int x, int y, int width)
    {
      GL.Delegates.glCopyColorTable(target, internalformat, x, y, width);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glCopyConvolutionFilter1D", Version = "1.2")]
    public static void CopyConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width)
    {
      GL.Delegates.glCopyConvolutionFilter1D(target, internalformat, x, y, width);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glCopyConvolutionFilter2D", Version = "1.2")]
    public static void CopyConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width, int height)
    {
      GL.Delegates.glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glCopyPixels", Version = "1.0")]
    public static void CopyPixels(int x, int y, int width, int height, PixelCopyType type)
    {
      GL.Delegates.glCopyPixels(x, y, width, height, type);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glCopyTexImage1D", Version = "1.1")]
    public static void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border)
    {
      GL.Delegates.glCopyTexImage1D(target, level, internalformat, x, y, width, border);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glCopyTexImage2D", Version = "1.1")]
    public static void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border)
    {
      GL.Delegates.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glCopyTexSubImage1D", Version = "1.1")]
    public static void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width)
    {
      GL.Delegates.glCopyTexSubImage1D(target, level, xoffset, x, y, width);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glCopyTexSubImage2D", Version = "1.1")]
    public static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
    {
      GL.Delegates.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glCopyTexSubImage3D", Version = "1.2")]
    public static void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
    {
      GL.Delegates.glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glCreateProgram", Version = "2.0")]
    public static int CreateProgram()
    {
      return GL.Delegates.glCreateProgram();
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glCreateShader", Version = "2.0")]
    public static int CreateShader(ShaderType type)
    {
      return GL.Delegates.glCreateShader(type);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glCreateShaderProgramv", Version = "4.1")]
    public static int CreateShaderProgram(ShaderType type, int count, string[] strings)
    {
      return GL.Delegates.glCreateShaderProgramv(type, count, strings);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glCullFace", Version = "1.0")]
    public static void CullFace(CullFaceMode mode)
    {
      GL.Delegates.glCullFace(mode);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteBuffers", Version = "1.5")]
    public static unsafe void DeleteBuffers(int n, int[] buffers)
    {
      fixed (int* numPtr = buffers)
        GL.Delegates.glDeleteBuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteBuffers", Version = "1.5")]
    public static unsafe void DeleteBuffers(int n, ref int buffers)
    {
      fixed (int* numPtr = &buffers)
        GL.Delegates.glDeleteBuffers(n, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteBuffers", Version = "1.5")]
    public static unsafe void DeleteBuffers(int n, int* buffers)
    {
      GL.Delegates.glDeleteBuffers(n, (uint*) buffers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteBuffers", Version = "1.5")]
    public static unsafe void DeleteBuffers(int n, uint[] buffers)
    {
      fixed (uint* buffers1 = buffers)
        GL.Delegates.glDeleteBuffers(n, buffers1);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteBuffers", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void DeleteBuffers(int n, ref uint buffers)
    {
      fixed (uint* buffers1 = &buffers)
        GL.Delegates.glDeleteBuffers(n, buffers1);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteBuffers", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void DeleteBuffers(int n, uint* buffers)
    {
      GL.Delegates.glDeleteBuffers(n, buffers);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteFramebuffers", Version = "3.0")]
    public static unsafe void DeleteFramebuffers(int n, int[] framebuffers)
    {
      fixed (int* numPtr = framebuffers)
        GL.Delegates.glDeleteFramebuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteFramebuffers", Version = "3.0")]
    public static unsafe void DeleteFramebuffers(int n, ref int framebuffers)
    {
      fixed (int* numPtr = &framebuffers)
        GL.Delegates.glDeleteFramebuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteFramebuffers", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteFramebuffers(int n, int* framebuffers)
    {
      GL.Delegates.glDeleteFramebuffers(n, (uint*) framebuffers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteFramebuffers", Version = "3.0")]
    public static unsafe void DeleteFramebuffers(int n, uint[] framebuffers)
    {
      fixed (uint* framebuffers1 = framebuffers)
        GL.Delegates.glDeleteFramebuffers(n, framebuffers1);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteFramebuffers", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteFramebuffers(int n, ref uint framebuffers)
    {
      fixed (uint* framebuffers1 = &framebuffers)
        GL.Delegates.glDeleteFramebuffers(n, framebuffers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteFramebuffers", Version = "3.0")]
    public static unsafe void DeleteFramebuffers(int n, uint* framebuffers)
    {
      GL.Delegates.glDeleteFramebuffers(n, framebuffers);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glDeleteLists", Version = "1.0")]
    public static void DeleteLists(int list, int range)
    {
      GL.Delegates.glDeleteLists((uint) list, range);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glDeleteLists", Version = "1.0")]
    public static void DeleteLists(uint list, int range)
    {
      GL.Delegates.glDeleteLists(list, range);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDeleteProgram", Version = "2.0")]
    public static void DeleteProgram(int program)
    {
      GL.Delegates.glDeleteProgram((uint) program);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDeleteProgram", Version = "2.0")]
    [CLSCompliant(false)]
    public static void DeleteProgram(uint program)
    {
      GL.Delegates.glDeleteProgram(program);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glDeleteProgramPipelines", Version = "4.1")]
    public static unsafe void DeleteProgramPipelines(int n, int[] pipelines)
    {
      fixed (int* numPtr = pipelines)
        GL.Delegates.glDeleteProgramPipelines(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glDeleteProgramPipelines", Version = "4.1")]
    public static unsafe void DeleteProgramPipelines(int n, ref int pipelines)
    {
      fixed (int* numPtr = &pipelines)
        GL.Delegates.glDeleteProgramPipelines(n, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glDeleteProgramPipelines", Version = "4.1")]
    public static unsafe void DeleteProgramPipelines(int n, int* pipelines)
    {
      GL.Delegates.glDeleteProgramPipelines(n, (uint*) pipelines);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glDeleteProgramPipelines", Version = "4.1")]
    public static unsafe void DeleteProgramPipelines(int n, uint[] pipelines)
    {
      fixed (uint* pipelines1 = pipelines)
        GL.Delegates.glDeleteProgramPipelines(n, pipelines1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glDeleteProgramPipelines", Version = "4.1")]
    public static unsafe void DeleteProgramPipelines(int n, ref uint pipelines)
    {
      fixed (uint* pipelines1 = &pipelines)
        GL.Delegates.glDeleteProgramPipelines(n, pipelines1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glDeleteProgramPipelines", Version = "4.1")]
    public static unsafe void DeleteProgramPipelines(int n, uint* pipelines)
    {
      GL.Delegates.glDeleteProgramPipelines(n, pipelines);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteQueries", Version = "1.5")]
    public static unsafe void DeleteQueries(int n, int[] ids)
    {
      fixed (int* numPtr = ids)
        GL.Delegates.glDeleteQueries(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteQueries", Version = "1.5")]
    public static unsafe void DeleteQueries(int n, ref int ids)
    {
      fixed (int* numPtr = &ids)
        GL.Delegates.glDeleteQueries(n, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteQueries", Version = "1.5")]
    public static unsafe void DeleteQueries(int n, int* ids)
    {
      GL.Delegates.glDeleteQueries(n, (uint*) ids);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteQueries", Version = "1.5")]
    public static unsafe void DeleteQueries(int n, uint[] ids)
    {
      fixed (uint* ids1 = ids)
        GL.Delegates.glDeleteQueries(n, ids1);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteQueries", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void DeleteQueries(int n, ref uint ids)
    {
      fixed (uint* ids1 = &ids)
        GL.Delegates.glDeleteQueries(n, ids1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glDeleteQueries", Version = "1.5")]
    public static unsafe void DeleteQueries(int n, uint* ids)
    {
      GL.Delegates.glDeleteQueries(n, ids);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteRenderbuffers", Version = "3.0")]
    public static unsafe void DeleteRenderbuffers(int n, int[] renderbuffers)
    {
      fixed (int* numPtr = renderbuffers)
        GL.Delegates.glDeleteRenderbuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteRenderbuffers", Version = "3.0")]
    public static unsafe void DeleteRenderbuffers(int n, ref int renderbuffers)
    {
      fixed (int* numPtr = &renderbuffers)
        GL.Delegates.glDeleteRenderbuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteRenderbuffers", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteRenderbuffers(int n, int* renderbuffers)
    {
      GL.Delegates.glDeleteRenderbuffers(n, (uint*) renderbuffers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteRenderbuffers", Version = "3.0")]
    public static unsafe void DeleteRenderbuffers(int n, uint[] renderbuffers)
    {
      fixed (uint* renderbuffers1 = renderbuffers)
        GL.Delegates.glDeleteRenderbuffers(n, renderbuffers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteRenderbuffers", Version = "3.0")]
    public static unsafe void DeleteRenderbuffers(int n, ref uint renderbuffers)
    {
      fixed (uint* renderbuffers1 = &renderbuffers)
        GL.Delegates.glDeleteRenderbuffers(n, renderbuffers1);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glDeleteRenderbuffers", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteRenderbuffers(int n, uint* renderbuffers)
    {
      GL.Delegates.glDeleteRenderbuffers(n, renderbuffers);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glDeleteSamplers", Version = "1.2")]
    public static unsafe void DeleteSamplers(int count, int[] samplers)
    {
      fixed (int* numPtr = samplers)
        GL.Delegates.glDeleteSamplers(count, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glDeleteSamplers", Version = "1.2")]
    public static unsafe void DeleteSamplers(int count, ref int samplers)
    {
      fixed (int* numPtr = &samplers)
        GL.Delegates.glDeleteSamplers(count, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glDeleteSamplers", Version = "1.2")]
    public static unsafe void DeleteSamplers(int count, int* samplers)
    {
      GL.Delegates.glDeleteSamplers(count, (uint*) samplers);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glDeleteSamplers", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void DeleteSamplers(int count, uint[] samplers)
    {
      fixed (uint* samplers1 = samplers)
        GL.Delegates.glDeleteSamplers(count, samplers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glDeleteSamplers", Version = "1.2")]
    public static unsafe void DeleteSamplers(int count, ref uint samplers)
    {
      fixed (uint* samplers1 = &samplers)
        GL.Delegates.glDeleteSamplers(count, samplers1);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glDeleteSamplers", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void DeleteSamplers(int count, uint* samplers)
    {
      GL.Delegates.glDeleteSamplers(count, samplers);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDeleteShader", Version = "2.0")]
    public static void DeleteShader(int shader)
    {
      GL.Delegates.glDeleteShader((uint) shader);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDeleteShader", Version = "2.0")]
    public static void DeleteShader(uint shader)
    {
      GL.Delegates.glDeleteShader(shader);
    }

    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glDeleteSync", Version = "1.2")]
    public static void DeleteSync(IntPtr sync)
    {
      GL.Delegates.glDeleteSync(sync);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    public static unsafe void DeleteTextures(int n, int[] textures)
    {
      fixed (int* numPtr = textures)
        GL.Delegates.glDeleteTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    public static unsafe void DeleteTextures(int n, ref int textures)
    {
      fixed (int* numPtr = &textures)
        GL.Delegates.glDeleteTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void DeleteTextures(int n, int* textures)
    {
      GL.Delegates.glDeleteTextures(n, (uint*) textures);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void DeleteTextures(int n, uint[] textures)
    {
      fixed (uint* textures1 = textures)
        GL.Delegates.glDeleteTextures(n, textures1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    public static unsafe void DeleteTextures(int n, ref uint textures)
    {
      fixed (uint* textures1 = &textures)
        GL.Delegates.glDeleteTextures(n, textures1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    public static unsafe void DeleteTextures(int n, uint* textures)
    {
      GL.Delegates.glDeleteTextures(n, textures);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacks", Version = "1.2")]
    public static unsafe void DeleteTransformFeedback(int n, int[] ids)
    {
      fixed (int* numPtr = ids)
        GL.Delegates.glDeleteTransformFeedbacks(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacks", Version = "1.2")]
    public static unsafe void DeleteTransformFeedback(int n, ref int ids)
    {
      fixed (int* numPtr = &ids)
        GL.Delegates.glDeleteTransformFeedbacks(n, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacks", Version = "1.2")]
    public static unsafe void DeleteTransformFeedback(int n, int* ids)
    {
      GL.Delegates.glDeleteTransformFeedbacks(n, (uint*) ids);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacks", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void DeleteTransformFeedback(int n, uint[] ids)
    {
      fixed (uint* ids1 = ids)
        GL.Delegates.glDeleteTransformFeedbacks(n, ids1);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacks", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void DeleteTransformFeedback(int n, ref uint ids)
    {
      fixed (uint* ids1 = &ids)
        GL.Delegates.glDeleteTransformFeedbacks(n, ids1);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacks", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void DeleteTransformFeedback(int n, uint* ids)
    {
      GL.Delegates.glDeleteTransformFeedbacks(n, ids);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glDeleteVertexArrays", Version = "3.0")]
    public static unsafe void DeleteVertexArrays(int n, int[] arrays)
    {
      fixed (int* numPtr = arrays)
        GL.Delegates.glDeleteVertexArrays(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glDeleteVertexArrays", Version = "3.0")]
    public static unsafe void DeleteVertexArrays(int n, ref int arrays)
    {
      fixed (int* numPtr = &arrays)
        GL.Delegates.glDeleteVertexArrays(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glDeleteVertexArrays", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteVertexArrays(int n, int* arrays)
    {
      GL.Delegates.glDeleteVertexArrays(n, (uint*) arrays);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glDeleteVertexArrays", Version = "3.0")]
    public static unsafe void DeleteVertexArrays(int n, uint[] arrays)
    {
      fixed (uint* arrays1 = arrays)
        GL.Delegates.glDeleteVertexArrays(n, arrays1);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glDeleteVertexArrays", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteVertexArrays(int n, ref uint arrays)
    {
      fixed (uint* arrays1 = &arrays)
        GL.Delegates.glDeleteVertexArrays(n, arrays1);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glDeleteVertexArrays", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteVertexArrays(int n, uint* arrays)
    {
      GL.Delegates.glDeleteVertexArrays(n, arrays);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glDepthFunc", Version = "1.0")]
    public static void DepthFunc(DepthFunction func)
    {
      GL.Delegates.glDepthFunc(func);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glDepthMask", Version = "1.0")]
    public static void DepthMask(bool flag)
    {
      GL.Delegates.glDepthMask(flag);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glDepthRange", Version = "1.0")]
    public static void DepthRange(double near, double far)
    {
      GL.Delegates.glDepthRange(near, far);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glDepthRangeArrayv", Version = "4.1")]
    public static unsafe void DepthRangeArray(int first, int count, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glDepthRangeArrayv((uint) first, count, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glDepthRangeArrayv", Version = "4.1")]
    public static unsafe void DepthRangeArray(int first, int count, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glDepthRangeArrayv((uint) first, count, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glDepthRangeArrayv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void DepthRangeArray(int first, int count, double* v)
    {
      GL.Delegates.glDepthRangeArrayv((uint) first, count, v);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glDepthRangeArrayv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void DepthRangeArray(uint first, int count, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glDepthRangeArrayv(first, count, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glDepthRangeArrayv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void DepthRangeArray(uint first, int count, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glDepthRangeArrayv(first, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glDepthRangeArrayv", Version = "4.1")]
    public static unsafe void DepthRangeArray(uint first, int count, double* v)
    {
      GL.Delegates.glDepthRangeArrayv(first, count, v);
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glDepthRangef", Version = "4.1")]
    public static void DepthRange(float n, float f)
    {
      GL.Delegates.glDepthRangef(n, f);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glDepthRangeIndexed", Version = "4.1")]
    public static void DepthRangeIndexed(int index, double n, double f)
    {
      GL.Delegates.glDepthRangeIndexed((uint) index, n, f);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glDepthRangeIndexed", Version = "4.1")]
    [CLSCompliant(false)]
    public static void DepthRangeIndexed(uint index, double n, double f)
    {
      GL.Delegates.glDepthRangeIndexed(index, n, f);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDetachShader", Version = "2.0")]
    public static void DetachShader(int program, int shader)
    {
      GL.Delegates.glDetachShader((uint) program, (uint) shader);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDetachShader", Version = "2.0")]
    [CLSCompliant(false)]
    public static void DetachShader(uint program, uint shader)
    {
      GL.Delegates.glDetachShader(program, shader);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glDisable", Version = "1.0")]
    public static void Disable(EnableCap cap)
    {
      GL.Delegates.glDisable(cap);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glDisableClientState", Version = "1.1")]
    public static void DisableClientState(ArrayCap array)
    {
      GL.Delegates.glDisableClientState(array);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glDisablei", Version = "3.0")]
    public static void Disable(IndexedEnableCap target, int index)
    {
      GL.Delegates.glDisablei(target, (uint) index);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glDisablei", Version = "3.0")]
    [CLSCompliant(false)]
    public static void Disable(IndexedEnableCap target, uint index)
    {
      GL.Delegates.glDisablei(target, index);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDisableVertexAttribArray", Version = "2.0")]
    public static void DisableVertexAttribArray(int index)
    {
      GL.Delegates.glDisableVertexAttribArray((uint) index);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDisableVertexAttribArray", Version = "2.0")]
    public static void DisableVertexAttribArray(uint index)
    {
      GL.Delegates.glDisableVertexAttribArray(index);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDrawArrays", Version = "1.1")]
    public static void DrawArrays(BeginMode mode, int first, int count)
    {
      GL.Delegates.glDrawArrays(mode, first, count);
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawArraysIndirect", Version = "1.2")]
    public static void DrawArraysIndirect(ArbDrawIndirect mode, IntPtr indirect)
    {
      GL.Delegates.glDrawArraysIndirect(mode, indirect);
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawArraysIndirect", Version = "1.2")]
    public static void DrawArraysIndirect<T1>(ArbDrawIndirect mode, [In, Out] T1[] indirect) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawArraysIndirect(mode, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawArraysIndirect", Version = "1.2")]
    public static void DrawArraysIndirect<T1>(ArbDrawIndirect mode, [In, Out] T1[,] indirect) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawArraysIndirect(mode, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawArraysIndirect", Version = "1.2")]
    public static void DrawArraysIndirect<T1>(ArbDrawIndirect mode, [In, Out] T1[,,] indirect) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawArraysIndirect(mode, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawArraysIndirect", Version = "1.2")]
    public static void DrawArraysIndirect<T1>(ArbDrawIndirect mode, [In, Out] ref T1 indirect) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawArraysIndirect(mode, gcHandle.AddrOfPinnedObject());
        indirect = (T1) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glDrawArraysInstanced", Version = "3.1")]
    public static void DrawArraysInstanced(BeginMode mode, int first, int count, int primcount)
    {
      GL.Delegates.glDrawArraysInstanced(mode, first, count, primcount);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glDrawBuffer", Version = "1.0")]
    public static void DrawBuffer(DrawBufferMode mode)
    {
      GL.Delegates.glDrawBuffer(mode);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDrawBuffers", Version = "2.0")]
    public static unsafe void DrawBuffers(int n, DrawBuffersEnum[] bufs)
    {
      fixed (DrawBuffersEnum* bufs1 = bufs)
        GL.Delegates.glDrawBuffers(n, bufs1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDrawBuffers", Version = "2.0")]
    public static unsafe void DrawBuffers(int n, ref DrawBuffersEnum bufs)
    {
      fixed (DrawBuffersEnum* bufs1 = &bufs)
        GL.Delegates.glDrawBuffers(n, bufs1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glDrawBuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void DrawBuffers(int n, DrawBuffersEnum* bufs)
    {
      GL.Delegates.glDrawBuffers(n, bufs);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements(BeginMode mode, int count, DrawElementsType type, IntPtr indices)
    {
      GL.Delegates.glDrawElements(mode, count, type, indices);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,,] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] ref T3 indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
        indices = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsBaseVertex", Version = "1.2")]
    public static void DrawElementsBaseVertex(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int basevertex)
    {
      GL.Delegates.glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsBaseVertex", Version = "1.2")]
    public static void DrawElementsBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[] indices, int basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsBaseVertex", Version = "1.2")]
    public static void DrawElementsBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,] indices, int basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsBaseVertex", Version = "1.2")]
    public static void DrawElementsBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,,] indices, int basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsBaseVertex", Version = "1.2")]
    public static void DrawElementsBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] ref T3 indices, int basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
        indices = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawElementsIndirect", Version = "1.2")]
    public static void DrawElementsIndirect(ArbDrawIndirect mode, ArbDrawIndirect type, IntPtr indirect)
    {
      GL.Delegates.glDrawElementsIndirect(mode, type, indirect);
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawElementsIndirect", Version = "1.2")]
    public static void DrawElementsIndirect<T2>(ArbDrawIndirect mode, ArbDrawIndirect type, [In, Out] T2[] indirect) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsIndirect(mode, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawElementsIndirect", Version = "1.2")]
    public static void DrawElementsIndirect<T2>(ArbDrawIndirect mode, ArbDrawIndirect type, [In, Out] T2[,] indirect) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsIndirect(mode, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawElementsIndirect", Version = "1.2")]
    public static void DrawElementsIndirect<T2>(ArbDrawIndirect mode, ArbDrawIndirect type, [In, Out] T2[,,] indirect) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsIndirect(mode, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_indirect", EntryPoint = "glDrawElementsIndirect", Version = "1.2")]
    public static void DrawElementsIndirect<T2>(ArbDrawIndirect mode, ArbDrawIndirect type, [In, Out] ref T2 indirect) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsIndirect(mode, type, gcHandle.AddrOfPinnedObject());
        indirect = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glDrawElementsInstanced", Version = "3.1")]
    public static void DrawElementsInstanced(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount)
    {
      GL.Delegates.glDrawElementsInstanced(mode, count, type, indices, primcount);
    }

    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glDrawElementsInstanced", Version = "3.1")]
    public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[] indices, int primcount) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsInstanced(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glDrawElementsInstanced", Version = "3.1")]
    public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,] indices, int primcount) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsInstanced(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glDrawElementsInstanced", Version = "3.1")]
    public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsInstanced(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glDrawElementsInstanced", Version = "3.1")]
    public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] ref T3 indices, int primcount) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsInstanced(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        indices = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsInstancedBaseVertex", Version = "1.2")]
    public static void DrawElementsInstancedBaseVertex(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount, int basevertex)
    {
      GL.Delegates.glDrawElementsInstancedBaseVertex(mode, count, type, indices, primcount, basevertex);
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsInstancedBaseVertex", Version = "1.2")]
    public static void DrawElementsInstancedBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[] indices, int primcount, int basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsInstancedBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsInstancedBaseVertex", Version = "1.2")]
    public static void DrawElementsInstancedBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,] indices, int primcount, int basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsInstancedBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsInstancedBaseVertex", Version = "1.2")]
    public static void DrawElementsInstancedBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount, int basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsInstancedBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawElementsInstancedBaseVertex", Version = "1.2")]
    public static void DrawElementsInstancedBaseVertex<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] ref T3 indices, int primcount, int basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElementsInstancedBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex);
        indices = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glDrawPixels", Version = "1.0")]
    public static void DrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glDrawPixels(width, height, format, type, pixels);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glDrawPixels", Version = "1.0")]
    public static void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, [In, Out] T4[] pixels) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawPixels(width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glDrawPixels", Version = "1.0")]
    public static void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, [In, Out] T4[,] pixels) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawPixels(width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glDrawPixels", Version = "1.0")]
    public static void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, [In, Out] T4[,,] pixels) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawPixels(width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glDrawPixels", Version = "1.0")]
    public static void DrawPixels<T4>(int width, int height, PixelFormat format, PixelType type, [In, Out] ref T4 pixels) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawPixels(width, height, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    public static void DrawRangeElements(BeginMode mode, int start, int end, int count, DrawElementsType type, IntPtr indices)
    {
      GL.Delegates.glDrawRangeElements(mode, (uint) start, (uint) end, count, type, indices);
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    public static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] T5[] indices) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElements(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    public static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] T5[,] indices) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElements(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    public static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] T5[,,] indices) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElements(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    public static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] ref T5 indices) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElements(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject());
        indices = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    public static void DrawRangeElements(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
    {
      GL.Delegates.glDrawRangeElements(mode, start, end, count, type, indices);
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    [CLSCompliant(false)]
    public static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] T5[] indices) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElements(mode, start, end, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    [CLSCompliant(false)]
    public static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] T5[,] indices) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElements(mode, start, end, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    public static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] T5[,,] indices) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElements(mode, start, end, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glDrawRangeElements", Version = "1.2")]
    [CLSCompliant(false)]
    public static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] ref T5 indices) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElements(mode, start, end, count, type, gcHandle.AddrOfPinnedObject());
        indices = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    public static void DrawRangeElementsBaseVertex(BeginMode mode, int start, int end, int count, DrawElementsType type, IntPtr indices, int basevertex)
    {
      GL.Delegates.glDrawRangeElementsBaseVertex(mode, (uint) start, (uint) end, count, type, indices, basevertex);
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    public static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] T5[] indices, int basevertex) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElementsBaseVertex(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    public static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] T5[,] indices, int basevertex) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElementsBaseVertex(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    public static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] T5[,,] indices, int basevertex) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElementsBaseVertex(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    public static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] ref T5 indices, int basevertex) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElementsBaseVertex(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
        indices = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    public static void DrawRangeElementsBaseVertex(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex)
    {
      GL.Delegates.glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    [CLSCompliant(false)]
    public static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] T5[] indices, int basevertex) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElementsBaseVertex(mode, start, end, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    [CLSCompliant(false)]
    public static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] T5[,] indices, int basevertex) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElementsBaseVertex(mode, start, end, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    [CLSCompliant(false)]
    public static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] T5[,,] indices, int basevertex) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElementsBaseVertex(mode, start, end, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glDrawRangeElementsBaseVertex", Version = "1.2")]
    [CLSCompliant(false)]
    public static void DrawRangeElementsBaseVertex<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] ref T5 indices, int basevertex) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawRangeElementsBaseVertex(mode, start, end, count, type, gcHandle.AddrOfPinnedObject(), basevertex);
        indices = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glDrawTransformFeedback", Version = "1.2")]
    public static void DrawTransformFeedback(BeginMode mode, int id)
    {
      GL.Delegates.glDrawTransformFeedback(mode, (uint) id);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glDrawTransformFeedback", Version = "1.2")]
    [CLSCompliant(false)]
    public static void DrawTransformFeedback(BeginMode mode, uint id)
    {
      GL.Delegates.glDrawTransformFeedback(mode, id);
    }

    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glDrawTransformFeedbackStream", Version = "1.2")]
    public static void DrawTransformFeedbackStream(BeginMode mode, int id, int stream)
    {
      GL.Delegates.glDrawTransformFeedbackStream(mode, (uint) id, (uint) stream);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glDrawTransformFeedbackStream", Version = "1.2")]
    public static void DrawTransformFeedbackStream(BeginMode mode, uint id, uint stream)
    {
      GL.Delegates.glDrawTransformFeedbackStream(mode, id, stream);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEdgeFlag", Version = "1.0")]
    public static void EdgeFlag(bool flag)
    {
      GL.Delegates.glEdgeFlag(flag);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glEdgeFlagPointer", Version = "1.1")]
    public static void EdgeFlagPointer(int stride, IntPtr pointer)
    {
      GL.Delegates.glEdgeFlagPointer(stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glEdgeFlagPointer", Version = "1.1")]
    public static void EdgeFlagPointer<T1>(int stride, [In, Out] T1[] pointer) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glEdgeFlagPointer(stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glEdgeFlagPointer", Version = "1.1")]
    public static void EdgeFlagPointer<T1>(int stride, [In, Out] T1[,] pointer) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glEdgeFlagPointer(stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glEdgeFlagPointer", Version = "1.1")]
    public static void EdgeFlagPointer<T1>(int stride, [In, Out] T1[,,] pointer) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glEdgeFlagPointer(stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glEdgeFlagPointer", Version = "1.1")]
    public static void EdgeFlagPointer<T1>(int stride, [In, Out] ref T1 pointer) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glEdgeFlagPointer(stride, gcHandle.AddrOfPinnedObject());
        pointer = (T1) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEdgeFlagv", Version = "1.0")]
    public static unsafe void EdgeFlag(bool* flag)
    {
      GL.Delegates.glEdgeFlagv(flag);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glEnable", Version = "1.0")]
    public static void Enable(EnableCap cap)
    {
      GL.Delegates.glEnable(cap);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glEnableClientState", Version = "1.1")]
    public static void EnableClientState(ArrayCap array)
    {
      GL.Delegates.glEnableClientState(array);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glEnablei", Version = "3.0")]
    public static void Enable(IndexedEnableCap target, int index)
    {
      GL.Delegates.glEnablei(target, (uint) index);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glEnablei", Version = "3.0")]
    [CLSCompliant(false)]
    public static void Enable(IndexedEnableCap target, uint index)
    {
      GL.Delegates.glEnablei(target, index);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glEnableVertexAttribArray", Version = "2.0")]
    public static void EnableVertexAttribArray(int index)
    {
      GL.Delegates.glEnableVertexAttribArray((uint) index);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glEnableVertexAttribArray", Version = "2.0")]
    [CLSCompliant(false)]
    public static void EnableVertexAttribArray(uint index)
    {
      GL.Delegates.glEnableVertexAttribArray(index);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEnd", Version = "1.0")]
    public static void End()
    {
      GL.Delegates.glEnd();
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glEndConditionalRender", Version = "3.0")]
    public static void EndConditionalRender()
    {
      GL.Delegates.glEndConditionalRender();
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEndList", Version = "1.0")]
    public static void EndList()
    {
      GL.Delegates.glEndList();
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glEndQuery", Version = "1.5")]
    public static void EndQuery(QueryTarget target)
    {
      GL.Delegates.glEndQuery(target);
    }

    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glEndQueryIndexed", Version = "1.2")]
    public static void EndQueryIndexed(QueryTarget target, int index)
    {
      GL.Delegates.glEndQueryIndexed(target, (uint) index);
    }

    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glEndQueryIndexed", Version = "1.2")]
    [CLSCompliant(false)]
    public static void EndQueryIndexed(QueryTarget target, uint index)
    {
      GL.Delegates.glEndQueryIndexed(target, index);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glEndTransformFeedback", Version = "3.0")]
    public static void EndTransformFeedback()
    {
      GL.Delegates.glEndTransformFeedback();
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord1d", Version = "1.0")]
    public static void EvalCoord1(double u)
    {
      GL.Delegates.glEvalCoord1d(u);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord1dv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void EvalCoord1(double* u)
    {
      GL.Delegates.glEvalCoord1dv(u);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord1f", Version = "1.0")]
    public static void EvalCoord1(float u)
    {
      GL.Delegates.glEvalCoord1f(u);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord1fv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void EvalCoord1(float* u)
    {
      GL.Delegates.glEvalCoord1fv(u);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord2d", Version = "1.0")]
    public static void EvalCoord2(double u, double v)
    {
      GL.Delegates.glEvalCoord2d(u, v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord2dv", Version = "1.0")]
    public static unsafe void EvalCoord2(double[] u)
    {
      fixed (double* u1 = u)
        GL.Delegates.glEvalCoord2dv(u1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord2dv", Version = "1.0")]
    public static unsafe void EvalCoord2(ref double u)
    {
      fixed (double* u1 = &u)
        GL.Delegates.glEvalCoord2dv(u1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord2dv", Version = "1.0")]
    public static unsafe void EvalCoord2(double* u)
    {
      GL.Delegates.glEvalCoord2dv(u);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord2f", Version = "1.0")]
    public static void EvalCoord2(float u, float v)
    {
      GL.Delegates.glEvalCoord2f(u, v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord2fv", Version = "1.0")]
    public static unsafe void EvalCoord2(float[] u)
    {
      fixed (float* u1 = u)
        GL.Delegates.glEvalCoord2fv(u1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord2fv", Version = "1.0")]
    public static unsafe void EvalCoord2(ref float u)
    {
      fixed (float* u1 = &u)
        GL.Delegates.glEvalCoord2fv(u1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalCoord2fv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void EvalCoord2(float* u)
    {
      GL.Delegates.glEvalCoord2fv(u);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalMesh1", Version = "1.0")]
    public static void EvalMesh1(MeshMode1 mode, int i1, int i2)
    {
      GL.Delegates.glEvalMesh1(mode, i1, i2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalMesh2", Version = "1.0")]
    public static void EvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2)
    {
      GL.Delegates.glEvalMesh2(mode, i1, i2, j1, j2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalPoint1", Version = "1.0")]
    public static void EvalPoint1(int i)
    {
      GL.Delegates.glEvalPoint1(i);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glEvalPoint2", Version = "1.0")]
    public static void EvalPoint2(int i, int j)
    {
      GL.Delegates.glEvalPoint2(i, j);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFeedbackBuffer", Version = "1.0")]
    public static unsafe void FeedbackBuffer(int size, FeedbackType type, [Out] float[] buffer)
    {
      fixed (float* buffer1 = buffer)
        GL.Delegates.glFeedbackBuffer(size, type, buffer1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFeedbackBuffer", Version = "1.0")]
    public static unsafe void FeedbackBuffer(int size, FeedbackType type, out float buffer)
    {
      fixed (float* buffer1 = &buffer)
      {
        GL.Delegates.glFeedbackBuffer(size, type, buffer1);
        buffer = *buffer1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFeedbackBuffer", Version = "1.0")]
    public static unsafe void FeedbackBuffer(int size, FeedbackType type, [Out] float* buffer)
    {
      GL.Delegates.glFeedbackBuffer(size, type, buffer);
    }

    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glFenceSync", Version = "1.2")]
    public static IntPtr FenceSync(ArbSync condition, int flags)
    {
      return GL.Delegates.glFenceSync(condition, (uint) flags);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glFenceSync", Version = "1.2")]
    public static IntPtr FenceSync(ArbSync condition, uint flags)
    {
      return GL.Delegates.glFenceSync(condition, flags);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glFinish", Version = "1.0")]
    public static void Finish()
    {
      GL.Delegates.glFinish();
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glFlush", Version = "1.0")]
    public static void Flush()
    {
      GL.Delegates.glFlush();
    }

    [AutoGenerated(Category = "ARB_map_buffer_range", EntryPoint = "glFlushMappedBufferRange", Version = "3.0")]
    public static void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr length)
    {
      GL.Delegates.glFlushMappedBufferRange(target, offset, length);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glFogCoordd", Version = "1.4")]
    public static void FogCoord(double coord)
    {
      GL.Delegates.glFogCoordd(coord);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glFogCoorddv", Version = "1.4")]
    public static unsafe void FogCoord(double* coord)
    {
      GL.Delegates.glFogCoorddv(coord);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glFogCoordf", Version = "1.4")]
    public static void FogCoord(float coord)
    {
      GL.Delegates.glFogCoordf(coord);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glFogCoordfv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void FogCoord(float* coord)
    {
      GL.Delegates.glFogCoordfv(coord);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glFogCoordPointer", Version = "1.4")]
    public static void FogCoordPointer(FogPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glFogCoordPointer(type, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glFogCoordPointer", Version = "1.4")]
    public static void FogCoordPointer<T2>(FogPointerType type, int stride, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glFogCoordPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glFogCoordPointer", Version = "1.4")]
    public static void FogCoordPointer<T2>(FogPointerType type, int stride, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glFogCoordPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glFogCoordPointer", Version = "1.4")]
    public static void FogCoordPointer<T2>(FogPointerType type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glFogCoordPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glFogCoordPointer", Version = "1.4")]
    public static void FogCoordPointer<T2>(FogPointerType type, int stride, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glFogCoordPointer(type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFogf", Version = "1.0")]
    public static void Fog(FogParameter pname, float param)
    {
      GL.Delegates.glFogf(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFogfv", Version = "1.0")]
    public static unsafe void Fog(FogParameter pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glFogfv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFogfv", Version = "1.0")]
    public static unsafe void Fog(FogParameter pname, float* @params)
    {
      GL.Delegates.glFogfv(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFogi", Version = "1.0")]
    public static void Fog(FogParameter pname, int param)
    {
      GL.Delegates.glFogi(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFogiv", Version = "1.0")]
    public static unsafe void Fog(FogParameter pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glFogiv(pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFogiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Fog(FogParameter pname, int* @params)
    {
      GL.Delegates.glFogiv(pname, @params);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferRenderbuffer", Version = "3.0")]
    public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
    {
      GL.Delegates.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, (uint) renderbuffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferRenderbuffer", Version = "3.0")]
    public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
    {
      GL.Delegates.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    }

    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glFramebufferTexture", Version = "1.2")]
    public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level)
    {
      GL.Delegates.glFramebufferTexture(target, attachment, (uint) texture, level);
    }

    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glFramebufferTexture", Version = "1.2")]
    [CLSCompliant(false)]
    public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
    {
      GL.Delegates.glFramebufferTexture(target, attachment, texture, level);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferTexture1D", Version = "3.0")]
    public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
    {
      GL.Delegates.glFramebufferTexture1D(target, attachment, textarget, (uint) texture, level);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferTexture1D", Version = "3.0")]
    [CLSCompliant(false)]
    public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
    {
      GL.Delegates.glFramebufferTexture1D(target, attachment, textarget, texture, level);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferTexture2D", Version = "3.0")]
    public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
    {
      GL.Delegates.glFramebufferTexture2D(target, attachment, textarget, (uint) texture, level);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferTexture2D", Version = "3.0")]
    [CLSCompliant(false)]
    public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
    {
      GL.Delegates.glFramebufferTexture2D(target, attachment, textarget, texture, level);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferTexture3D", Version = "3.0")]
    public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level, int zoffset)
    {
      GL.Delegates.glFramebufferTexture3D(target, attachment, textarget, (uint) texture, level, zoffset);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferTexture3D", Version = "3.0")]
    [CLSCompliant(false)]
    public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
    {
      GL.Delegates.glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferTextureLayer", Version = "3.0")]
    public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer)
    {
      GL.Delegates.glFramebufferTextureLayer(target, attachment, (uint) texture, level, layer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glFramebufferTextureLayer", Version = "3.0")]
    public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
    {
      GL.Delegates.glFramebufferTextureLayer(target, attachment, texture, level, layer);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glFrontFace", Version = "1.0")]
    public static void FrontFace(FrontFaceDirection mode)
    {
      GL.Delegates.glFrontFace(mode);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glFrustum", Version = "1.0")]
    public static void Frustum(double left, double right, double bottom, double top, double zNear, double zFar)
    {
      GL.Delegates.glFrustum(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenBuffers", Version = "1.5")]
    public static unsafe void GenBuffers(int n, [Out] int[] buffers)
    {
      fixed (int* numPtr = buffers)
        GL.Delegates.glGenBuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenBuffers", Version = "1.5")]
    public static unsafe void GenBuffers(int n, out int buffers)
    {
      fixed (int* numPtr = &buffers)
      {
        GL.Delegates.glGenBuffers(n, (uint*) numPtr);
        buffers = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenBuffers", Version = "1.5")]
    public static unsafe void GenBuffers(int n, [Out] int* buffers)
    {
      GL.Delegates.glGenBuffers(n, (uint*) buffers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenBuffers", Version = "1.5")]
    public static unsafe void GenBuffers(int n, [Out] uint[] buffers)
    {
      fixed (uint* buffers1 = buffers)
        GL.Delegates.glGenBuffers(n, buffers1);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenBuffers", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void GenBuffers(int n, out uint buffers)
    {
      fixed (uint* buffers1 = &buffers)
      {
        GL.Delegates.glGenBuffers(n, buffers1);
        buffers = *buffers1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenBuffers", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void GenBuffers(int n, [Out] uint* buffers)
    {
      GL.Delegates.glGenBuffers(n, buffers);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenerateMipmap", Version = "3.0")]
    public static void GenerateMipmap(GenerateMipmapTarget target)
    {
      GL.Delegates.glGenerateMipmap(target);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenFramebuffers", Version = "3.0")]
    public static unsafe void GenFramebuffers(int n, [Out] int[] framebuffers)
    {
      fixed (int* numPtr = framebuffers)
        GL.Delegates.glGenFramebuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenFramebuffers", Version = "3.0")]
    public static unsafe void GenFramebuffers(int n, out int framebuffers)
    {
      fixed (int* numPtr = &framebuffers)
      {
        GL.Delegates.glGenFramebuffers(n, (uint*) numPtr);
        framebuffers = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenFramebuffers", Version = "3.0")]
    public static unsafe void GenFramebuffers(int n, [Out] int* framebuffers)
    {
      GL.Delegates.glGenFramebuffers(n, (uint*) framebuffers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenFramebuffers", Version = "3.0")]
    public static unsafe void GenFramebuffers(int n, [Out] uint[] framebuffers)
    {
      fixed (uint* framebuffers1 = framebuffers)
        GL.Delegates.glGenFramebuffers(n, framebuffers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenFramebuffers", Version = "3.0")]
    public static unsafe void GenFramebuffers(int n, out uint framebuffers)
    {
      fixed (uint* framebuffers1 = &framebuffers)
      {
        GL.Delegates.glGenFramebuffers(n, framebuffers1);
        framebuffers = *framebuffers1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenFramebuffers", Version = "3.0")]
    public static unsafe void GenFramebuffers(int n, [Out] uint* framebuffers)
    {
      GL.Delegates.glGenFramebuffers(n, framebuffers);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGenLists", Version = "1.0")]
    public static int GenLists(int range)
    {
      return GL.Delegates.glGenLists(range);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGenProgramPipelines", Version = "4.1")]
    public static unsafe void GenProgramPipelines(int n, [Out] int[] pipelines)
    {
      fixed (int* numPtr = pipelines)
        GL.Delegates.glGenProgramPipelines(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGenProgramPipelines", Version = "4.1")]
    public static unsafe void GenProgramPipelines(int n, out int pipelines)
    {
      fixed (int* numPtr = &pipelines)
      {
        GL.Delegates.glGenProgramPipelines(n, (uint*) numPtr);
        pipelines = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGenProgramPipelines", Version = "4.1")]
    public static unsafe void GenProgramPipelines(int n, [Out] int* pipelines)
    {
      GL.Delegates.glGenProgramPipelines(n, (uint*) pipelines);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGenProgramPipelines", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GenProgramPipelines(int n, [Out] uint[] pipelines)
    {
      fixed (uint* pipelines1 = pipelines)
        GL.Delegates.glGenProgramPipelines(n, pipelines1);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGenProgramPipelines", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GenProgramPipelines(int n, out uint pipelines)
    {
      fixed (uint* pipelines1 = &pipelines)
      {
        GL.Delegates.glGenProgramPipelines(n, pipelines1);
        pipelines = *pipelines1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGenProgramPipelines", Version = "4.1")]
    public static unsafe void GenProgramPipelines(int n, [Out] uint* pipelines)
    {
      GL.Delegates.glGenProgramPipelines(n, pipelines);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenQueries", Version = "1.5")]
    public static unsafe void GenQueries(int n, [Out] int[] ids)
    {
      fixed (int* numPtr = ids)
        GL.Delegates.glGenQueries(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenQueries", Version = "1.5")]
    public static unsafe void GenQueries(int n, out int ids)
    {
      fixed (int* numPtr = &ids)
      {
        GL.Delegates.glGenQueries(n, (uint*) numPtr);
        ids = *numPtr;
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenQueries", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void GenQueries(int n, [Out] int* ids)
    {
      GL.Delegates.glGenQueries(n, (uint*) ids);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenQueries", Version = "1.5")]
    public static unsafe void GenQueries(int n, [Out] uint[] ids)
    {
      fixed (uint* ids1 = ids)
        GL.Delegates.glGenQueries(n, ids1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenQueries", Version = "1.5")]
    public static unsafe void GenQueries(int n, out uint ids)
    {
      fixed (uint* ids1 = &ids)
      {
        GL.Delegates.glGenQueries(n, ids1);
        ids = *ids1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGenQueries", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void GenQueries(int n, [Out] uint* ids)
    {
      GL.Delegates.glGenQueries(n, ids);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenRenderbuffers", Version = "3.0")]
    public static unsafe void GenRenderbuffers(int n, [Out] int[] renderbuffers)
    {
      fixed (int* numPtr = renderbuffers)
        GL.Delegates.glGenRenderbuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenRenderbuffers", Version = "3.0")]
    public static unsafe void GenRenderbuffers(int n, out int renderbuffers)
    {
      fixed (int* numPtr = &renderbuffers)
      {
        GL.Delegates.glGenRenderbuffers(n, (uint*) numPtr);
        renderbuffers = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenRenderbuffers", Version = "3.0")]
    public static unsafe void GenRenderbuffers(int n, [Out] int* renderbuffers)
    {
      GL.Delegates.glGenRenderbuffers(n, (uint*) renderbuffers);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenRenderbuffers", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GenRenderbuffers(int n, [Out] uint[] renderbuffers)
    {
      fixed (uint* renderbuffers1 = renderbuffers)
        GL.Delegates.glGenRenderbuffers(n, renderbuffers1);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenRenderbuffers", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GenRenderbuffers(int n, out uint renderbuffers)
    {
      fixed (uint* renderbuffers1 = &renderbuffers)
      {
        GL.Delegates.glGenRenderbuffers(n, renderbuffers1);
        renderbuffers = *renderbuffers1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGenRenderbuffers", Version = "3.0")]
    public static unsafe void GenRenderbuffers(int n, [Out] uint* renderbuffers)
    {
      GL.Delegates.glGenRenderbuffers(n, renderbuffers);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGenSamplers", Version = "1.2")]
    public static unsafe void GenSamplers(int count, [Out] int[] samplers)
    {
      fixed (int* numPtr = samplers)
        GL.Delegates.glGenSamplers(count, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGenSamplers", Version = "1.2")]
    public static unsafe void GenSamplers(int count, out int samplers)
    {
      fixed (int* numPtr = &samplers)
      {
        GL.Delegates.glGenSamplers(count, (uint*) numPtr);
        samplers = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGenSamplers", Version = "1.2")]
    public static unsafe void GenSamplers(int count, [Out] int* samplers)
    {
      GL.Delegates.glGenSamplers(count, (uint*) samplers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGenSamplers", Version = "1.2")]
    public static unsafe void GenSamplers(int count, [Out] uint[] samplers)
    {
      fixed (uint* samplers1 = samplers)
        GL.Delegates.glGenSamplers(count, samplers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGenSamplers", Version = "1.2")]
    public static unsafe void GenSamplers(int count, out uint samplers)
    {
      fixed (uint* samplers1 = &samplers)
      {
        GL.Delegates.glGenSamplers(count, samplers1);
        samplers = *samplers1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGenSamplers", Version = "1.2")]
    public static unsafe void GenSamplers(int count, [Out] uint* samplers)
    {
      GL.Delegates.glGenSamplers(count, samplers);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGenTextures", Version = "1.1")]
    public static unsafe void GenTextures(int n, [Out] int[] textures)
    {
      fixed (int* numPtr = textures)
        GL.Delegates.glGenTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGenTextures", Version = "1.1")]
    public static unsafe void GenTextures(int n, out int textures)
    {
      fixed (int* numPtr = &textures)
      {
        GL.Delegates.glGenTextures(n, (uint*) numPtr);
        textures = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGenTextures", Version = "1.1")]
    public static unsafe void GenTextures(int n, [Out] int* textures)
    {
      GL.Delegates.glGenTextures(n, (uint*) textures);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGenTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, [Out] uint[] textures)
    {
      fixed (uint* textures1 = textures)
        GL.Delegates.glGenTextures(n, textures1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGenTextures", Version = "1.1")]
    public static unsafe void GenTextures(int n, out uint textures)
    {
      fixed (uint* textures1 = &textures)
      {
        GL.Delegates.glGenTextures(n, textures1);
        textures = *textures1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGenTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, [Out] uint* textures)
    {
      GL.Delegates.glGenTextures(n, textures);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glGenTransformFeedbacks", Version = "1.2")]
    public static unsafe void GenTransformFeedback(int n, [Out] int[] ids)
    {
      fixed (int* numPtr = ids)
        GL.Delegates.glGenTransformFeedbacks(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glGenTransformFeedbacks", Version = "1.2")]
    public static unsafe void GenTransformFeedback(int n, out int ids)
    {
      fixed (int* numPtr = &ids)
      {
        GL.Delegates.glGenTransformFeedbacks(n, (uint*) numPtr);
        ids = *numPtr;
      }
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glGenTransformFeedbacks", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GenTransformFeedback(int n, [Out] int* ids)
    {
      GL.Delegates.glGenTransformFeedbacks(n, (uint*) ids);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glGenTransformFeedbacks", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GenTransformFeedback(int n, [Out] uint[] ids)
    {
      fixed (uint* ids1 = ids)
        GL.Delegates.glGenTransformFeedbacks(n, ids1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glGenTransformFeedbacks", Version = "1.2")]
    public static unsafe void GenTransformFeedback(int n, out uint ids)
    {
      fixed (uint* ids1 = &ids)
      {
        GL.Delegates.glGenTransformFeedbacks(n, ids1);
        ids = *ids1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glGenTransformFeedbacks", Version = "1.2")]
    public static unsafe void GenTransformFeedback(int n, [Out] uint* ids)
    {
      GL.Delegates.glGenTransformFeedbacks(n, ids);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glGenVertexArrays", Version = "3.0")]
    public static unsafe void GenVertexArrays(int n, [Out] int[] arrays)
    {
      fixed (int* numPtr = arrays)
        GL.Delegates.glGenVertexArrays(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glGenVertexArrays", Version = "3.0")]
    public static unsafe void GenVertexArrays(int n, out int arrays)
    {
      fixed (int* numPtr = &arrays)
      {
        GL.Delegates.glGenVertexArrays(n, (uint*) numPtr);
        arrays = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glGenVertexArrays", Version = "3.0")]
    public static unsafe void GenVertexArrays(int n, [Out] int* arrays)
    {
      GL.Delegates.glGenVertexArrays(n, (uint*) arrays);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glGenVertexArrays", Version = "3.0")]
    public static unsafe void GenVertexArrays(int n, [Out] uint[] arrays)
    {
      fixed (uint* arrays1 = arrays)
        GL.Delegates.glGenVertexArrays(n, arrays1);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glGenVertexArrays", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GenVertexArrays(int n, out uint arrays)
    {
      fixed (uint* arrays1 = &arrays)
      {
        GL.Delegates.glGenVertexArrays(n, arrays1);
        arrays = *arrays1;
      }
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glGenVertexArrays", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GenVertexArrays(int n, [Out] uint* arrays)
    {
      GL.Delegates.glGenVertexArrays(n, arrays);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    public static unsafe void GetActiveAttrib(int program, int index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveAttribType* type1 = &type)
          {
            GL.Delegates.glGetActiveAttrib((uint) program, (uint) index, bufSize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveAttrib(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveAttrib((uint) program, (uint) index, bufSize, length, size, type, name);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    public static unsafe void GetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveAttribType* type1 = &type)
          {
            GL.Delegates.glGetActiveAttrib(program, index, bufSize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveAttrib(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveAttrib(program, index, bufSize, length, size, type, name);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineName", Version = "1.2")]
    public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, int index, int bufsize, out int length, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetActiveSubroutineName((uint) program, shadertype, (uint) index, bufsize, length1, name);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineName", Version = "1.2")]
    public static unsafe void GetActiveSubroutineName(int program, ShaderType shadertype, int index, int bufsize, [Out] int* length, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveSubroutineName((uint) program, shadertype, (uint) index, bufsize, length, name);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineName", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufsize, out int length, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetActiveSubroutineName(program, shadertype, index, bufsize, length1, name);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineName", Version = "1.2")]
    public static unsafe void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformiv", Version = "1.2")]
    public static unsafe void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, [Out] int[] values)
    {
      fixed (int* values1 = values)
        GL.Delegates.glGetActiveSubroutineUniformiv((uint) program, shadertype, (uint) index, pname, values1);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformiv", Version = "1.2")]
    public static unsafe void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, out int values)
    {
      fixed (int* values1 = &values)
      {
        GL.Delegates.glGetActiveSubroutineUniformiv((uint) program, shadertype, (uint) index, pname, values1);
        values = *values1;
      }
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveSubroutineUniform(int program, ShaderType shadertype, int index, ActiveSubroutineUniformParameter pname, [Out] int* values)
    {
      GL.Delegates.glGetActiveSubroutineUniformiv((uint) program, shadertype, (uint) index, pname, values);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformiv", Version = "1.2")]
    public static unsafe void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, [Out] int[] values)
    {
      fixed (int* values1 = values)
        GL.Delegates.glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values1);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, out int values)
    {
      fixed (int* values1 = &values)
      {
        GL.Delegates.glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values1);
        values = *values1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformiv", Version = "1.2")]
    public static unsafe void GetActiveSubroutineUniform(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, [Out] int* values)
    {
      GL.Delegates.glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformName", Version = "1.2")]
    public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, int index, int bufsize, out int length, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetActiveSubroutineUniformName((uint) program, shadertype, (uint) index, bufsize, length1, name);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformName", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveSubroutineUniformName(int program, ShaderType shadertype, int index, int bufsize, [Out] int* length, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveSubroutineUniformName((uint) program, shadertype, (uint) index, bufsize, length, name);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformName", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufsize, out int length, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length1, name);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetActiveSubroutineUniformName", Version = "1.2")]
    public static unsafe void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    public static unsafe void GetActiveUniform(int program, int index, int bufSize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveUniformType* type1 = &type)
          {
            GL.Delegates.glGetActiveUniform((uint) program, (uint) index, bufSize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    public static unsafe void GetActiveUniform(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveUniform((uint) program, (uint) index, bufSize, length, size, type, name);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveUniformType* type1 = &type)
          {
            GL.Delegates.glGetActiveUniform(program, index, bufSize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    public static unsafe void GetActiveUniform(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveUniform(program, index, bufSize, length, size, type, name);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockiv", Version = "2.0")]
    public static unsafe void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetActiveUniformBlockiv((uint) program, (uint) uniformBlockIndex, pname, params1);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockiv", Version = "2.0")]
    public static unsafe void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetActiveUniformBlockiv((uint) program, (uint) uniformBlockIndex, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockiv", Version = "2.0")]
    public static unsafe void GetActiveUniformBlock(int program, int uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetActiveUniformBlockiv((uint) program, (uint) uniformBlockIndex, pname, @params);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockiv", Version = "2.0")]
    public static unsafe void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniformBlock(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, @params);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockName", Version = "2.0")]
    public static unsafe void GetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, out int length, [Out] StringBuilder uniformBlockName)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetActiveUniformBlockName((uint) program, (uint) uniformBlockIndex, bufSize, length1, uniformBlockName);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockName", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName)
    {
      GL.Delegates.glGetActiveUniformBlockName((uint) program, (uint) uniformBlockIndex, bufSize, length, uniformBlockName);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockName", Version = "2.0")]
    public static unsafe void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, out int length, [Out] StringBuilder uniformBlockName)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length1, uniformBlockName);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformBlockName", Version = "2.0")]
    public static unsafe void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName)
    {
      GL.Delegates.glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformName", Version = "2.0")]
    public static unsafe void GetActiveUniformName(int program, int uniformIndex, int bufSize, out int length, [Out] StringBuilder uniformName)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetActiveUniformName((uint) program, (uint) uniformIndex, bufSize, length1, uniformName);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformName", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniformName(int program, int uniformIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformName)
    {
      GL.Delegates.glGetActiveUniformName((uint) program, (uint) uniformIndex, bufSize, length, uniformName);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformName", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, out int length, [Out] StringBuilder uniformName)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetActiveUniformName(program, uniformIndex, bufSize, length1, uniformName);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformName", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformName)
    {
      GL.Delegates.glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    public static unsafe void GetActiveUniforms(int program, int uniformCount, int[] uniformIndices, ActiveUniformParameter pname, [Out] int[] @params)
    {
      fixed (int* numPtr = uniformIndices)
        fixed (int* params1 = @params)
          GL.Delegates.glGetActiveUniformsiv((uint) program, uniformCount, (uint*) numPtr, pname, params1);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    public static unsafe void GetActiveUniforms(int program, int uniformCount, ref int uniformIndices, ActiveUniformParameter pname, out int @params)
    {
      fixed (int* numPtr = &uniformIndices)
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetActiveUniformsiv((uint) program, uniformCount, (uint*) numPtr, pname, params1);
          @params = *params1;
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    public static unsafe void GetActiveUniforms(int program, int uniformCount, int* uniformIndices, ActiveUniformParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetActiveUniformsiv((uint) program, uniformCount, (uint*) uniformIndices, pname, @params);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniforms(uint program, int uniformCount, uint[] uniformIndices, ActiveUniformParameter pname, [Out] int[] @params)
    {
      fixed (uint* uniformIndices1 = uniformIndices)
        fixed (int* params1 = @params)
          GL.Delegates.glGetActiveUniformsiv(program, uniformCount, uniformIndices1, pname, params1);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniforms(uint program, int uniformCount, ref uint uniformIndices, ActiveUniformParameter pname, out int @params)
    {
      fixed (uint* uniformIndices1 = &uniformIndices)
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetActiveUniformsiv(program, uniformCount, uniformIndices1, pname, params1);
          @params = *params1;
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetActiveUniformsiv", Version = "2.0")]
    public static unsafe void GetActiveUniforms(uint program, int uniformCount, uint* uniformIndices, ActiveUniformParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    public static unsafe void GetAttachedShaders(int program, int maxCount, out int count, out int obj)
    {
      fixed (int* count1 = &count)
        fixed (int* numPtr = &obj)
        {
          GL.Delegates.glGetAttachedShaders((uint) program, maxCount, count1, (uint*) numPtr);
          count = *count1;
          obj = *numPtr;
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    public static unsafe void GetAttachedShaders(int program, int maxCount, [Out] int* count, [Out] int[] obj)
    {
      fixed (int* numPtr = obj)
        GL.Delegates.glGetAttachedShaders((uint) program, maxCount, count, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetAttachedShaders(int program, int maxCount, [Out] int* count, [Out] int* obj)
    {
      GL.Delegates.glGetAttachedShaders((uint) program, maxCount, count, (uint*) obj);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetAttachedShaders(uint program, int maxCount, out int count, out uint obj)
    {
      fixed (int* count1 = &count)
        fixed (uint* numPtr = &obj)
        {
          GL.Delegates.glGetAttachedShaders(program, maxCount, count1, numPtr);
          count = *count1;
          obj = *numPtr;
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    public static unsafe void GetAttachedShaders(uint program, int maxCount, [Out] int* count, [Out] uint[] obj)
    {
      fixed (uint* numPtr = obj)
        GL.Delegates.glGetAttachedShaders(program, maxCount, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    public static unsafe void GetAttachedShaders(uint program, int maxCount, [Out] int* count, [Out] uint* obj)
    {
      GL.Delegates.glGetAttachedShaders(program, maxCount, count, obj);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetAttribLocation", Version = "2.0")]
    public static int GetAttribLocation(int program, string name)
    {
      return GL.Delegates.glGetAttribLocation((uint) program, name);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetAttribLocation", Version = "2.0")]
    public static int GetAttribLocation(uint program, string name)
    {
      return GL.Delegates.glGetAttribLocation(program, name);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetBooleani_v", Version = "3.0")]
    public static unsafe void GetBoolean(GetIndexedPName target, int index, [Out] bool[] data)
    {
      fixed (bool* data1 = data)
        GL.Delegates.glGetBooleani_v(target, (uint) index, data1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetBooleani_v", Version = "3.0")]
    public static unsafe void GetBoolean(GetIndexedPName target, int index, out bool data)
    {
      fixed (bool* data1 = &data)
      {
        GL.Delegates.glGetBooleani_v(target, (uint) index, data1);
        data = *data1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetBooleani_v", Version = "3.0")]
    public static unsafe void GetBoolean(GetIndexedPName target, int index, [Out] bool* data)
    {
      GL.Delegates.glGetBooleani_v(target, (uint) index, data);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetBooleani_v", Version = "3.0")]
    public static unsafe void GetBoolean(GetIndexedPName target, uint index, [Out] bool[] data)
    {
      fixed (bool* data1 = data)
        GL.Delegates.glGetBooleani_v(target, index, data1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetBooleani_v", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetBoolean(GetIndexedPName target, uint index, out bool data)
    {
      fixed (bool* data1 = &data)
      {
        GL.Delegates.glGetBooleani_v(target, index, data1);
        data = *data1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetBooleani_v", Version = "3.0")]
    public static unsafe void GetBoolean(GetIndexedPName target, uint index, [Out] bool* data)
    {
      GL.Delegates.glGetBooleani_v(target, index, data);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetBooleanv", Version = "1.0")]
    public static unsafe void GetBoolean(GetPName pname, [Out] bool[] @params)
    {
      fixed (bool* params1 = @params)
        GL.Delegates.glGetBooleanv(pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetBooleanv", Version = "1.0")]
    public static unsafe void GetBoolean(GetPName pname, out bool @params)
    {
      fixed (bool* params1 = &@params)
      {
        GL.Delegates.glGetBooleanv(pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetBooleanv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetBoolean(GetPName pname, [Out] bool* @params)
    {
      GL.Delegates.glGetBooleanv(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glGetBufferParameteri64v", Version = "3.2")]
    public static unsafe void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] long[] @params)
    {
      fixed (long* params1 = @params)
        GL.Delegates.glGetBufferParameteri64v(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glGetBufferParameteri64v", Version = "3.2")]
    public static unsafe void GetBufferParameter(BufferTarget target, BufferParameterName pname, out long @params)
    {
      fixed (long* params1 = &@params)
      {
        GL.Delegates.glGetBufferParameteri64v(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glGetBufferParameteri64v", Version = "3.2")]
    public static unsafe void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] long* @params)
    {
      GL.Delegates.glGetBufferParameteri64v(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferParameteriv", Version = "1.5")]
    public static unsafe void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetBufferParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferParameteriv", Version = "1.5")]
    public static unsafe void GetBufferParameter(BufferTarget target, BufferParameterName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetBufferParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferParameteriv", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int* @params)
    {
      GL.Delegates.glGetBufferParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferPointerv", Version = "1.5")]
    public static void GetBufferPointer(BufferTarget target, BufferPointer pname, [Out] IntPtr @params)
    {
      GL.Delegates.glGetBufferPointerv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferPointerv", Version = "1.5")]
    public static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In, Out] T2[] @params) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetBufferPointerv(target, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferPointerv", Version = "1.5")]
    public static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In, Out] T2[,] @params) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetBufferPointerv(target, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferPointerv", Version = "1.5")]
    public static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In, Out] T2[,,] @params) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetBufferPointerv(target, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferPointerv", Version = "1.5")]
    public static void GetBufferPointer<T2>(BufferTarget target, BufferPointer pname, [In, Out] ref T2 @params) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetBufferPointerv(target, pname, gcHandle.AddrOfPinnedObject());
        @params = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferSubData", Version = "1.5")]
    public static void GetBufferSubData(BufferTarget target, IntPtr offset, IntPtr size, [Out] IntPtr data)
    {
      GL.Delegates.glGetBufferSubData(target, offset, size, data);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferSubData", Version = "1.5")]
    public static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferSubData", Version = "1.5")]
    public static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferSubData", Version = "1.5")]
    public static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetBufferSubData", Version = "1.5")]
    public static void GetBufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
        data = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetClipPlane", Version = "1.0")]
    public static unsafe void GetClipPlane(ClipPlaneName plane, [Out] double[] equation)
    {
      fixed (double* equation1 = equation)
        GL.Delegates.glGetClipPlane(plane, equation1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetClipPlane", Version = "1.0")]
    public static unsafe void GetClipPlane(ClipPlaneName plane, out double equation)
    {
      fixed (double* equation1 = &equation)
      {
        GL.Delegates.glGetClipPlane(plane, equation1);
        equation = *equation1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetClipPlane", Version = "1.0")]
    public static unsafe void GetClipPlane(ClipPlaneName plane, [Out] double* equation)
    {
      GL.Delegates.glGetClipPlane(plane, equation);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTable", Version = "1.2")]
    public static void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, [Out] IntPtr table)
    {
      GL.Delegates.glGetColorTable(target, format, type, table);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTable", Version = "1.2")]
    public static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In, Out] T3[] table) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetColorTable(target, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTable", Version = "1.2")]
    public static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In, Out] T3[,] table) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetColorTable(target, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTable", Version = "1.2")]
    public static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In, Out] T3[,,] table) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetColorTable(target, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTable", Version = "1.2")]
    public static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In, Out] ref T3 table) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetColorTable(target, format, type, gcHandle.AddrOfPinnedObject());
        table = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTableParameterfv", Version = "1.2")]
    public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetColorTableParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTableParameterfv", Version = "1.2")]
    public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetColorTableParameterfv(target, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTableParameterfv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float* @params)
    {
      GL.Delegates.glGetColorTableParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTableParameteriv", Version = "1.2")]
    public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetColorTableParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTableParameteriv", Version = "1.2")]
    public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetColorTableParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetColorTableParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int* @params)
    {
      GL.Delegates.glGetColorTableParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glGetCompressedTexImage", Version = "1.3")]
    public static void GetCompressedTexImage(TextureTarget target, int level, [Out] IntPtr img)
    {
      GL.Delegates.glGetCompressedTexImage(target, level, img);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glGetCompressedTexImage", Version = "1.3")]
    public static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In, Out] T2[] img) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetCompressedTexImage(target, level, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glGetCompressedTexImage", Version = "1.3")]
    public static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In, Out] T2[,] img) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetCompressedTexImage(target, level, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glGetCompressedTexImage", Version = "1.3")]
    public static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In, Out] T2[,,] img) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetCompressedTexImage(target, level, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glGetCompressedTexImage", Version = "1.3")]
    public static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In, Out] ref T2 img) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetCompressedTexImage(target, level, gcHandle.AddrOfPinnedObject());
        img = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionFilter", Version = "1.2")]
    public static void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, [Out] IntPtr image)
    {
      GL.Delegates.glGetConvolutionFilter(target, format, type, image);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionFilter", Version = "1.2")]
    public static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In, Out] T3[] image) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetConvolutionFilter(target, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionFilter", Version = "1.2")]
    public static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In, Out] T3[,] image) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetConvolutionFilter(target, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionFilter", Version = "1.2")]
    public static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In, Out] T3[,,] image) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetConvolutionFilter(target, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionFilter", Version = "1.2")]
    public static void GetConvolutionFilter<T3>(ConvolutionTarget target, PixelFormat format, PixelType type, [In, Out] ref T3 image) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetConvolutionFilter(target, format, type, gcHandle.AddrOfPinnedObject());
        image = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionParameterfv", Version = "1.2")]
    public static unsafe void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetConvolutionParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionParameterfv", Version = "1.2")]
    public static unsafe void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetConvolutionParameterfv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionParameterfv", Version = "1.2")]
    public static unsafe void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] float* @params)
    {
      GL.Delegates.glGetConvolutionParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionParameteriv", Version = "1.2")]
    public static unsafe void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetConvolutionParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionParameteriv", Version = "1.2")]
    public static unsafe void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetConvolutionParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetConvolutionParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetConvolutionParameter(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] int* @params)
    {
      GL.Delegates.glGetConvolutionParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetDoublei_v", Version = "4.1")]
    public static unsafe void GetDouble(GetIndexedPName target, int index, [Out] double[] data)
    {
      fixed (double* data1 = data)
        GL.Delegates.glGetDoublei_v(target, (uint) index, data1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetDoublei_v", Version = "4.1")]
    public static unsafe void GetDouble(GetIndexedPName target, int index, out double data)
    {
      fixed (double* data1 = &data)
      {
        GL.Delegates.glGetDoublei_v(target, (uint) index, data1);
        data = *data1;
      }
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetDoublei_v", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetDouble(GetIndexedPName target, int index, [Out] double* data)
    {
      GL.Delegates.glGetDoublei_v(target, (uint) index, data);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetDoublei_v", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetDouble(GetIndexedPName target, uint index, [Out] double[] data)
    {
      fixed (double* data1 = data)
        GL.Delegates.glGetDoublei_v(target, index, data1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetDoublei_v", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetDouble(GetIndexedPName target, uint index, out double data)
    {
      fixed (double* data1 = &data)
      {
        GL.Delegates.glGetDoublei_v(target, index, data1);
        data = *data1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetDoublei_v", Version = "4.1")]
    public static unsafe void GetDouble(GetIndexedPName target, uint index, [Out] double* data)
    {
      GL.Delegates.glGetDoublei_v(target, index, data);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetDoublev", Version = "1.0")]
    public static unsafe void GetDouble(GetPName pname, [Out] double[] @params)
    {
      fixed (double* params1 = @params)
        GL.Delegates.glGetDoublev(pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetDoublev", Version = "1.0")]
    public static unsafe void GetDouble(GetPName pname, out double @params)
    {
      fixed (double* params1 = &@params)
      {
        GL.Delegates.glGetDoublev(pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetDoublev", Version = "1.0")]
    public static unsafe void GetDouble(GetPName pname, [Out] double* @params)
    {
      GL.Delegates.glGetDoublev(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetError", Version = "1.0")]
    public static ErrorCode GetError()
    {
      return GL.Delegates.glGetError();
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetFloati_v", Version = "4.1")]
    public static unsafe void GetFloat(GetIndexedPName target, int index, [Out] float[] data)
    {
      fixed (float* data1 = data)
        GL.Delegates.glGetFloati_v(target, (uint) index, data1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetFloati_v", Version = "4.1")]
    public static unsafe void GetFloat(GetIndexedPName target, int index, out float data)
    {
      fixed (float* data1 = &data)
      {
        GL.Delegates.glGetFloati_v(target, (uint) index, data1);
        data = *data1;
      }
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetFloati_v", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetFloat(GetIndexedPName target, int index, [Out] float* data)
    {
      GL.Delegates.glGetFloati_v(target, (uint) index, data);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetFloati_v", Version = "4.1")]
    public static unsafe void GetFloat(GetIndexedPName target, uint index, [Out] float[] data)
    {
      fixed (float* data1 = data)
        GL.Delegates.glGetFloati_v(target, index, data1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetFloati_v", Version = "4.1")]
    public static unsafe void GetFloat(GetIndexedPName target, uint index, out float data)
    {
      fixed (float* data1 = &data)
      {
        GL.Delegates.glGetFloati_v(target, index, data1);
        data = *data1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glGetFloati_v", Version = "4.1")]
    public static unsafe void GetFloat(GetIndexedPName target, uint index, [Out] float* data)
    {
      GL.Delegates.glGetFloati_v(target, index, data);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetFloatv", Version = "1.0")]
    public static unsafe void GetFloat(GetPName pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetFloatv(pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetFloatv", Version = "1.0")]
    public static unsafe void GetFloat(GetPName pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetFloatv(pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetFloatv", Version = "1.0")]
    public static unsafe void GetFloat(GetPName pname, [Out] float* @params)
    {
      GL.Delegates.glGetFloatv(pname, @params);
    }

    [AutoGenerated(Category = "ARB_blend_func_extended", EntryPoint = "glGetFragDataIndex", Version = "1.2")]
    public static int GetFragDataIndex(int program, string name)
    {
      return GL.Delegates.glGetFragDataIndex((uint) program, name);
    }

    [AutoGenerated(Category = "ARB_blend_func_extended", EntryPoint = "glGetFragDataIndex", Version = "1.2")]
    [CLSCompliant(false)]
    public static int GetFragDataIndex(uint program, string name)
    {
      return GL.Delegates.glGetFragDataIndex(program, name);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetFragDataLocation", Version = "3.0")]
    public static int GetFragDataLocation(int program, string name)
    {
      return GL.Delegates.glGetFragDataLocation((uint) program, name);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetFragDataLocation", Version = "3.0")]
    [CLSCompliant(false)]
    public static int GetFragDataLocation(uint program, string name)
    {
      return GL.Delegates.glGetFragDataLocation(program, name);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGetFramebufferAttachmentParameteriv", Version = "3.0")]
    public static unsafe void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetFramebufferAttachmentParameteriv(target, attachment, pname, params1);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGetFramebufferAttachmentParameteriv", Version = "3.0")]
    public static unsafe void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetFramebufferAttachmentParameteriv(target, attachment, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGetFramebufferAttachmentParameteriv", Version = "3.0")]
    public static unsafe void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params)
    {
      GL.Delegates.glGetFramebufferAttachmentParameteriv(target, attachment, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogram", Version = "1.2")]
    public static void GetHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
    {
      GL.Delegates.glGetHistogram(target, reset, format, type, values);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogram", Version = "1.2")]
    public static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[] values) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetHistogram(target, reset, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogram", Version = "1.2")]
    public static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[,] values) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetHistogram(target, reset, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogram", Version = "1.2")]
    public static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[,,] values) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetHistogram(target, reset, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogram", Version = "1.2")]
    public static void GetHistogram<T4>(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [In, Out] ref T4 values) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetHistogram(target, reset, format, type, gcHandle.AddrOfPinnedObject());
        values = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogramParameterfv", Version = "1.2")]
    public static unsafe void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetHistogramParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogramParameterfv", Version = "1.2")]
    public static unsafe void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetHistogramParameterfv(target, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogramParameterfv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] float* @params)
    {
      GL.Delegates.glGetHistogramParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogramParameteriv", Version = "1.2")]
    public static unsafe void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetHistogramParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogramParameteriv", Version = "1.2")]
    public static unsafe void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetHistogramParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetHistogramParameteriv", Version = "1.2")]
    public static unsafe void GetHistogramParameter(HistogramTarget target, GetHistogramParameterPName pname, [Out] int* @params)
    {
      GL.Delegates.glGetHistogramParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glGetInteger64i_v", Version = "3.2")]
    public static unsafe void GetInteger(GetIndexedPName target, int index, [Out] long[] data)
    {
      fixed (long* data1 = data)
        GL.Delegates.glGetInteger64i_v(target, (uint) index, data1);
    }

    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glGetInteger64i_v", Version = "3.2")]
    public static unsafe void GetInteger(GetIndexedPName target, int index, out long data)
    {
      fixed (long* data1 = &data)
      {
        GL.Delegates.glGetInteger64i_v(target, (uint) index, data1);
        data = *data1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glGetInteger64i_v", Version = "3.2")]
    public static unsafe void GetInteger(GetIndexedPName target, int index, [Out] long* data)
    {
      GL.Delegates.glGetInteger64i_v(target, (uint) index, data);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glGetInteger64i_v", Version = "3.2")]
    public static unsafe void GetInteger(GetIndexedPName target, uint index, [Out] long[] data)
    {
      fixed (long* data1 = data)
        GL.Delegates.glGetInteger64i_v(target, index, data1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glGetInteger64i_v", Version = "3.2")]
    public static unsafe void GetInteger(GetIndexedPName target, uint index, out long data)
    {
      fixed (long* data1 = &data)
      {
        GL.Delegates.glGetInteger64i_v(target, index, data1);
        data = *data1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_2", EntryPoint = "glGetInteger64i_v", Version = "3.2")]
    public static unsafe void GetInteger(GetIndexedPName target, uint index, [Out] long* data)
    {
      GL.Delegates.glGetInteger64i_v(target, index, data);
    }

    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glGetInteger64v", Version = "1.2")]
    public static unsafe void GetInteger64(ArbSync pname, [Out] long[] @params)
    {
      fixed (long* params1 = @params)
        GL.Delegates.glGetInteger64v(pname, params1);
    }

    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glGetInteger64v", Version = "1.2")]
    public static unsafe void GetInteger64(ArbSync pname, out long @params)
    {
      fixed (long* params1 = &@params)
      {
        GL.Delegates.glGetInteger64v(pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glGetInteger64v", Version = "1.2")]
    public static unsafe void GetInteger64(ArbSync pname, [Out] long* @params)
    {
      GL.Delegates.glGetInteger64v(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetIntegeri_v", Version = "3.0")]
    public static unsafe void GetInteger(GetIndexedPName target, int index, [Out] int[] data)
    {
      fixed (int* data1 = data)
        GL.Delegates.glGetIntegeri_v(target, (uint) index, data1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetIntegeri_v", Version = "3.0")]
    public static unsafe void GetInteger(GetIndexedPName target, int index, out int data)
    {
      fixed (int* data1 = &data)
      {
        GL.Delegates.glGetIntegeri_v(target, (uint) index, data1);
        data = *data1;
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetIntegeri_v", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetInteger(GetIndexedPName target, int index, [Out] int* data)
    {
      GL.Delegates.glGetIntegeri_v(target, (uint) index, data);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetIntegeri_v", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetInteger(GetIndexedPName target, uint index, [Out] int[] data)
    {
      fixed (int* data1 = data)
        GL.Delegates.glGetIntegeri_v(target, index, data1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetIntegeri_v", Version = "3.0")]
    public static unsafe void GetInteger(GetIndexedPName target, uint index, out int data)
    {
      fixed (int* data1 = &data)
      {
        GL.Delegates.glGetIntegeri_v(target, index, data1);
        data = *data1;
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetIntegeri_v", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetInteger(GetIndexedPName target, uint index, [Out] int* data)
    {
      GL.Delegates.glGetIntegeri_v(target, index, data);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetIntegerv", Version = "1.0")]
    public static unsafe void GetInteger(GetPName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetIntegerv(pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetIntegerv", Version = "1.0")]
    public static unsafe void GetInteger(GetPName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetIntegerv(pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetIntegerv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetInteger(GetPName pname, [Out] int* @params)
    {
      GL.Delegates.glGetIntegerv(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetLightfv", Version = "1.0")]
    public static unsafe void GetLight(LightName light, LightParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetLightfv(light, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetLightfv", Version = "1.0")]
    public static unsafe void GetLight(LightName light, LightParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetLightfv(light, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetLightfv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetLight(LightName light, LightParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetLightfv(light, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetLightiv", Version = "1.0")]
    public static unsafe void GetLight(LightName light, LightParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetLightiv(light, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetLightiv", Version = "1.0")]
    public static unsafe void GetLight(LightName light, LightParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetLightiv(light, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetLightiv", Version = "1.0")]
    public static unsafe void GetLight(LightName light, LightParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetLightiv(light, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMapdv", Version = "1.0")]
    public static unsafe void GetMap(MapTarget target, GetMapQuery query, [Out] double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glGetMapdv(target, query, v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMapdv", Version = "1.0")]
    public static unsafe void GetMap(MapTarget target, GetMapQuery query, out double v)
    {
      fixed (double* v1 = &v)
      {
        GL.Delegates.glGetMapdv(target, query, v1);
        v = *v1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMapdv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetMap(MapTarget target, GetMapQuery query, [Out] double* v)
    {
      GL.Delegates.glGetMapdv(target, query, v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMapfv", Version = "1.0")]
    public static unsafe void GetMap(MapTarget target, GetMapQuery query, [Out] float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glGetMapfv(target, query, v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMapfv", Version = "1.0")]
    public static unsafe void GetMap(MapTarget target, GetMapQuery query, out float v)
    {
      fixed (float* v1 = &v)
      {
        GL.Delegates.glGetMapfv(target, query, v1);
        v = *v1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMapfv", Version = "1.0")]
    public static unsafe void GetMap(MapTarget target, GetMapQuery query, [Out] float* v)
    {
      GL.Delegates.glGetMapfv(target, query, v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMapiv", Version = "1.0")]
    public static unsafe void GetMap(MapTarget target, GetMapQuery query, [Out] int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glGetMapiv(target, query, v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMapiv", Version = "1.0")]
    public static unsafe void GetMap(MapTarget target, GetMapQuery query, out int v)
    {
      fixed (int* v1 = &v)
      {
        GL.Delegates.glGetMapiv(target, query, v1);
        v = *v1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMapiv", Version = "1.0")]
    public static unsafe void GetMap(MapTarget target, GetMapQuery query, [Out] int* v)
    {
      GL.Delegates.glGetMapiv(target, query, v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMaterialfv", Version = "1.0")]
    public static unsafe void GetMaterial(MaterialFace face, MaterialParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetMaterialfv(face, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMaterialfv", Version = "1.0")]
    public static unsafe void GetMaterial(MaterialFace face, MaterialParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetMaterialfv(face, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMaterialfv", Version = "1.0")]
    public static unsafe void GetMaterial(MaterialFace face, MaterialParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetMaterialfv(face, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMaterialiv", Version = "1.0")]
    public static unsafe void GetMaterial(MaterialFace face, MaterialParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetMaterialiv(face, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMaterialiv", Version = "1.0")]
    public static unsafe void GetMaterial(MaterialFace face, MaterialParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetMaterialiv(face, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetMaterialiv", Version = "1.0")]
    public static unsafe void GetMaterial(MaterialFace face, MaterialParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetMaterialiv(face, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmax", Version = "1.2")]
    public static void GetMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
    {
      GL.Delegates.glGetMinmax(target, reset, format, type, values);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmax", Version = "1.2")]
    public static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[] values) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetMinmax(target, reset, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmax", Version = "1.2")]
    public static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[,] values) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetMinmax(target, reset, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmax", Version = "1.2")]
    public static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[,,] values) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetMinmax(target, reset, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmax", Version = "1.2")]
    public static void GetMinmax<T4>(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [In, Out] ref T4 values) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetMinmax(target, reset, format, type, gcHandle.AddrOfPinnedObject());
        values = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmaxParameterfv", Version = "1.2")]
    public static unsafe void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetMinmaxParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmaxParameterfv", Version = "1.2")]
    public static unsafe void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetMinmaxParameterfv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmaxParameterfv", Version = "1.2")]
    public static unsafe void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] float* @params)
    {
      GL.Delegates.glGetMinmaxParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmaxParameteriv", Version = "1.2")]
    public static unsafe void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetMinmaxParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmaxParameteriv", Version = "1.2")]
    public static unsafe void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetMinmaxParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetMinmaxParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetMinmaxParameter(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] int* @params)
    {
      GL.Delegates.glGetMinmaxParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glGetMultisamplefv", Version = "1.2")]
    public static unsafe void GetMultisample(GetMultisamplePName pname, int index, [Out] float[] val)
    {
      fixed (float* val1 = val)
        GL.Delegates.glGetMultisamplefv(pname, (uint) index, val1);
    }

    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glGetMultisamplefv", Version = "1.2")]
    public static unsafe void GetMultisample(GetMultisamplePName pname, int index, out float val)
    {
      fixed (float* val1 = &val)
      {
        GL.Delegates.glGetMultisamplefv(pname, (uint) index, val1);
        val = *val1;
      }
    }

    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glGetMultisamplefv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetMultisample(GetMultisamplePName pname, int index, [Out] float* val)
    {
      GL.Delegates.glGetMultisamplefv(pname, (uint) index, val);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glGetMultisamplefv", Version = "1.2")]
    public static unsafe void GetMultisample(GetMultisamplePName pname, uint index, [Out] float[] val)
    {
      fixed (float* val1 = val)
        GL.Delegates.glGetMultisamplefv(pname, index, val1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glGetMultisamplefv", Version = "1.2")]
    public static unsafe void GetMultisample(GetMultisamplePName pname, uint index, out float val)
    {
      fixed (float* val1 = &val)
      {
        GL.Delegates.glGetMultisamplefv(pname, index, val1);
        val = *val1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glGetMultisamplefv", Version = "1.2")]
    public static unsafe void GetMultisample(GetMultisamplePName pname, uint index, [Out] float* val)
    {
      GL.Delegates.glGetMultisamplefv(pname, index, val);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapfv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, [Out] float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glGetPixelMapfv(map, values1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapfv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, out float values)
    {
      fixed (float* values1 = &values)
      {
        GL.Delegates.glGetPixelMapfv(map, values1);
        values = *values1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapfv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, [Out] float* values)
    {
      GL.Delegates.glGetPixelMapfv(map, values);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapuiv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, [Out] int[] values)
    {
      fixed (int* numPtr = values)
        GL.Delegates.glGetPixelMapuiv(map, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapuiv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, out int values)
    {
      fixed (int* numPtr = &values)
      {
        GL.Delegates.glGetPixelMapuiv(map, (uint*) numPtr);
        values = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapuiv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, [Out] int* values)
    {
      GL.Delegates.glGetPixelMapuiv(map, (uint*) values);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapuiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetPixelMap(PixelMap map, [Out] uint[] values)
    {
      fixed (uint* values1 = values)
        GL.Delegates.glGetPixelMapuiv(map, values1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapuiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetPixelMap(PixelMap map, out uint values)
    {
      fixed (uint* values1 = &values)
      {
        GL.Delegates.glGetPixelMapuiv(map, values1);
        values = *values1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapuiv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, [Out] uint* values)
    {
      GL.Delegates.glGetPixelMapuiv(map, values);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapusv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, [Out] short[] values)
    {
      fixed (short* numPtr = values)
        GL.Delegates.glGetPixelMapusv(map, (ushort*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapusv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, out short values)
    {
      fixed (short* numPtr = &values)
      {
        GL.Delegates.glGetPixelMapusv(map, (ushort*) numPtr);
        values = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapusv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, [Out] short* values)
    {
      GL.Delegates.glGetPixelMapusv(map, (ushort*) values);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapusv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, [Out] ushort[] values)
    {
      fixed (ushort* values1 = values)
        GL.Delegates.glGetPixelMapusv(map, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapusv", Version = "1.0")]
    public static unsafe void GetPixelMap(PixelMap map, out ushort values)
    {
      fixed (ushort* values1 = &values)
      {
        GL.Delegates.glGetPixelMapusv(map, values1);
        values = *values1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPixelMapusv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetPixelMap(PixelMap map, [Out] ushort* values)
    {
      GL.Delegates.glGetPixelMapusv(map, values);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer(GetPointervPName pname, [Out] IntPtr @params)
    {
      GL.Delegates.glGetPointerv(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer<T1>(GetPointervPName pname, [In, Out] T1[] @params) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetPointerv(pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer<T1>(GetPointervPName pname, [In, Out] T1[,] @params) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetPointerv(pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer<T1>(GetPointervPName pname, [In, Out] T1[,,] @params) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetPointerv(pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer<T1>(GetPointervPName pname, [In, Out] ref T1 @params) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetPointerv(pname, gcHandle.AddrOfPinnedObject());
        @params = (T1) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPolygonStipple", Version = "1.0")]
    public static unsafe void GetPolygonStipple([Out] byte[] mask)
    {
      fixed (byte* mask1 = mask)
        GL.Delegates.glGetPolygonStipple(mask1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPolygonStipple", Version = "1.0")]
    public static unsafe void GetPolygonStipple(out byte mask)
    {
      fixed (byte* mask1 = &mask)
      {
        GL.Delegates.glGetPolygonStipple(mask1);
        mask = *mask1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetPolygonStipple", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetPolygonStipple([Out] byte* mask)
    {
      GL.Delegates.glGetPolygonStipple(mask);
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [Out] IntPtr binary)
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GL.Delegates.glGetProgramBinary((uint) program, bufSize, length1, binaryFormat1, binary);
          length = *length1;
          binaryFormat = *binaryFormat1;
        }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In, Out] T4[] binary) where T4 : struct
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glGetProgramBinary((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            length = *length1;
            binaryFormat = *binaryFormat1;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In, Out] T4[,] binary) where T4 : struct
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glGetProgramBinary((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            length = *length1;
            binaryFormat = *binaryFormat1;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glGetProgramBinary((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            length = *length1;
            binaryFormat = *binaryFormat1;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(int program, int bufSize, out int length, out BinaryFormat binaryFormat, [In, Out] ref T4 binary) where T4 : struct
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glGetProgramBinary((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            length = *length1;
            binaryFormat = *binaryFormat1;
            binary = (T4) gcHandle.Target;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [Out] IntPtr binary)
    {
      GL.Delegates.glGetProgramBinary((uint) program, bufSize, length, binaryFormat, binary);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In, Out] T4[] binary) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetProgramBinary((uint) program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In, Out] T4[,] binary) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetProgramBinary((uint) program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetProgramBinary((uint) program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In, Out] ref T4 binary) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetProgramBinary((uint) program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
        binary = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [Out] IntPtr binary)
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GL.Delegates.glGetProgramBinary(program, bufSize, length1, binaryFormat1, binary);
          length = *length1;
          binaryFormat = *binaryFormat1;
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In, Out] T4[] binary) where T4 : struct
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glGetProgramBinary(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            length = *length1;
            binaryFormat = *binaryFormat1;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In, Out] T4[,] binary) where T4 : struct
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glGetProgramBinary(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            length = *length1;
            binaryFormat = *binaryFormat1;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glGetProgramBinary(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            length = *length1;
            binaryFormat = *binaryFormat1;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, out int length, out BinaryFormat binaryFormat, [In, Out] ref T4 binary) where T4 : struct
    {
      fixed (int* length1 = &length)
        fixed (BinaryFormat* binaryFormat1 = &binaryFormat)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glGetProgramBinary(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            length = *length1;
            binaryFormat = *binaryFormat1;
            binary = (T4) gcHandle.Target;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramBinary(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [Out] IntPtr binary)
    {
      GL.Delegates.glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In, Out] T4[] binary) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetProgramBinary(program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In, Out] T4[,] binary) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetProgramBinary(program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetProgramBinary(program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glGetProgramBinary", Version = "4.1")]
    public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [In, Out] ref T4 binary) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetProgramBinary(program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
        binary = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    public static unsafe void GetProgramInfoLog(int program, int bufSize, out int length, [Out] StringBuilder infoLog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetProgramInfoLog((uint) program, bufSize, length1, infoLog);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramInfoLog(int program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
    {
      GL.Delegates.glGetProgramInfoLog((uint) program, bufSize, length, infoLog);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    public static unsafe void GetProgramInfoLog(uint program, int bufSize, out int length, [Out] StringBuilder infoLog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetProgramInfoLog(program, bufSize, length1, infoLog);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramInfoLog(uint program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
    {
      GL.Delegates.glGetProgramInfoLog(program, bufSize, length, infoLog);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    public static unsafe void GetProgram(int program, ProgramParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetProgramiv((uint) program, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    public static unsafe void GetProgram(int program, ProgramParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetProgramiv((uint) program, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    public static unsafe void GetProgram(int program, ProgramParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetProgramiv((uint) program, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    public static unsafe void GetProgram(uint program, ProgramParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetProgramiv(program, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetProgram(uint program, ProgramParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetProgramiv(program, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetProgram(uint program, ProgramParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetProgramiv(program, pname, @params);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineInfoLog", Version = "4.1")]
    public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetProgramPipelineInfoLog((uint) pipeline, bufSize, length1, infoLog);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineInfoLog", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramPipelineInfoLog(int pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
    {
      GL.Delegates.glGetProgramPipelineInfoLog((uint) pipeline, bufSize, length, infoLog);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineInfoLog", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramPipelineInfoLog(uint pipeline, int bufSize, out int length, [Out] StringBuilder infoLog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetProgramPipelineInfoLog(pipeline, bufSize, length1, infoLog);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineInfoLog", Version = "4.1")]
    public static unsafe void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
    {
      GL.Delegates.glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineiv", Version = "4.1")]
    public static unsafe void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetProgramPipelineiv((uint) pipeline, pname, params1);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineiv", Version = "4.1")]
    public static unsafe void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetProgramPipelineiv((uint) pipeline, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineiv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramPipeline(int pipeline, ProgramPipelineParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetProgramPipelineiv((uint) pipeline, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineiv", Version = "4.1")]
    public static unsafe void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetProgramPipelineiv(pipeline, pname, params1);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineiv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetProgramPipelineiv(pipeline, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glGetProgramPipelineiv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramPipeline(uint pipeline, ProgramPipelineParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetProgramPipelineiv(pipeline, pname, @params);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetProgramStageiv", Version = "1.2")]
    public static unsafe void GetProgramStage(int program, ShaderType shadertype, ProgramStageParameter pname, out int values)
    {
      fixed (int* values1 = &values)
      {
        GL.Delegates.glGetProgramStageiv((uint) program, shadertype, pname, values1);
        values = *values1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetProgramStageiv", Version = "1.2")]
    public static unsafe void GetProgramStage(int program, ShaderType shadertype, ProgramStageParameter pname, [Out] int* values)
    {
      GL.Delegates.glGetProgramStageiv((uint) program, shadertype, pname, values);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetProgramStageiv", Version = "1.2")]
    public static unsafe void GetProgramStage(uint program, ShaderType shadertype, ProgramStageParameter pname, out int values)
    {
      fixed (int* values1 = &values)
      {
        GL.Delegates.glGetProgramStageiv(program, shadertype, pname, values1);
        values = *values1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetProgramStageiv", Version = "1.2")]
    public static unsafe void GetProgramStage(uint program, ShaderType shadertype, ProgramStageParameter pname, [Out] int* values)
    {
      GL.Delegates.glGetProgramStageiv(program, shadertype, pname, values);
    }

    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glGetQueryIndexediv", Version = "1.2")]
    public static unsafe void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetQueryIndexediv(target, (uint) index, pname, params1);
    }

    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glGetQueryIndexediv", Version = "1.2")]
    public static unsafe void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetQueryIndexediv(target, (uint) index, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glGetQueryIndexediv", Version = "1.2")]
    public static unsafe void GetQueryIndexed(QueryTarget target, int index, GetQueryParam pname, [Out] int* @params)
    {
      GL.Delegates.glGetQueryIndexediv(target, (uint) index, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glGetQueryIndexediv", Version = "1.2")]
    public static unsafe void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetQueryIndexediv(target, index, pname, params1);
    }

    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glGetQueryIndexediv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetQueryIndexediv(target, index, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_transform_feedback3", EntryPoint = "glGetQueryIndexediv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetQueryIndexed(QueryTarget target, uint index, GetQueryParam pname, [Out] int* @params)
    {
      GL.Delegates.glGetQueryIndexediv(target, index, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryiv", Version = "1.5")]
    public static unsafe void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetQueryiv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryiv", Version = "1.5")]
    public static unsafe void GetQuery(QueryTarget target, GetQueryParam pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetQueryiv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryiv", Version = "1.5")]
    public static unsafe void GetQuery(QueryTarget target, GetQueryParam pname, [Out] int* @params)
    {
      GL.Delegates.glGetQueryiv(target, pname, @params);
    }

    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glGetQueryObjecti64v", Version = "1.2")]
    public static unsafe void GetQueryObject(int id, GetQueryObjectParam pname, [Out] long[] @params)
    {
      fixed (long* params1 = @params)
        GL.Delegates.glGetQueryObjecti64v((uint) id, pname, params1);
    }

    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glGetQueryObjecti64v", Version = "1.2")]
    public static unsafe void GetQueryObject(int id, GetQueryObjectParam pname, out long @params)
    {
      fixed (long* params1 = &@params)
      {
        GL.Delegates.glGetQueryObjecti64v((uint) id, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glGetQueryObjecti64v", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetQueryObject(int id, GetQueryObjectParam pname, [Out] long* @params)
    {
      GL.Delegates.glGetQueryObjecti64v((uint) id, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glGetQueryObjecti64v", Version = "1.2")]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] long[] @params)
    {
      fixed (long* params1 = @params)
        GL.Delegates.glGetQueryObjecti64v(id, pname, params1);
    }

    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glGetQueryObjecti64v", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, out long @params)
    {
      fixed (long* params1 = &@params)
      {
        GL.Delegates.glGetQueryObjecti64v(id, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glGetQueryObjecti64v", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] long* @params)
    {
      GL.Delegates.glGetQueryObjecti64v(id, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryObjectiv", Version = "1.5")]
    public static unsafe void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetQueryObjectiv((uint) id, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryObjectiv", Version = "1.5")]
    public static unsafe void GetQueryObject(int id, GetQueryObjectParam pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetQueryObjectiv((uint) id, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryObjectiv", Version = "1.5")]
    public static unsafe void GetQueryObject(int id, GetQueryObjectParam pname, [Out] int* @params)
    {
      GL.Delegates.glGetQueryObjectiv((uint) id, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryObjectiv", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetQueryObjectiv(id, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryObjectiv", Version = "1.5")]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetQueryObjectiv(id, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryObjectiv", Version = "1.5")]
    [CLSCompliant(false)]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] int* @params)
    {
      GL.Delegates.glGetQueryObjectiv(id, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glGetQueryObjectui64v", Version = "1.2")]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] ulong[] @params)
    {
      fixed (ulong* params1 = @params)
        GL.Delegates.glGetQueryObjectui64v(id, pname, params1);
    }

    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glGetQueryObjectui64v", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, out ulong @params)
    {
      fixed (ulong* params1 = &@params)
      {
        GL.Delegates.glGetQueryObjectui64v(id, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glGetQueryObjectui64v", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] ulong* @params)
    {
      GL.Delegates.glGetQueryObjectui64v(id, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryObjectuiv", Version = "1.5")]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint[] @params)
    {
      fixed (uint* params1 = @params)
        GL.Delegates.glGetQueryObjectuiv(id, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryObjectuiv", Version = "1.5")]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, out uint @params)
    {
      fixed (uint* params1 = &@params)
      {
        GL.Delegates.glGetQueryObjectuiv(id, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glGetQueryObjectuiv", Version = "1.5")]
    public static unsafe void GetQueryObject(uint id, GetQueryObjectParam pname, [Out] uint* @params)
    {
      GL.Delegates.glGetQueryObjectuiv(id, pname, @params);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGetRenderbufferParameteriv", Version = "3.0")]
    public static unsafe void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetRenderbufferParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGetRenderbufferParameteriv", Version = "3.0")]
    public static unsafe void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetRenderbufferParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glGetRenderbufferParameteriv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params)
    {
      GL.Delegates.glGetRenderbufferParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterfv", Version = "1.2")]
    public static unsafe void GetSamplerParameter(int sampler, SamplerParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetSamplerParameterfv((uint) sampler, pname, params1);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterfv", Version = "1.2")]
    public static unsafe void GetSamplerParameter(int sampler, SamplerParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetSamplerParameterfv((uint) sampler, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterfv", Version = "1.2")]
    public static unsafe void GetSamplerParameter(int sampler, SamplerParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetSamplerParameterfv((uint) sampler, pname, @params);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterfv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetSamplerParameter(uint sampler, SamplerParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetSamplerParameterfv(sampler, pname, params1);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterfv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetSamplerParameter(uint sampler, SamplerParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetSamplerParameterfv(sampler, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterfv", Version = "1.2")]
    public static unsafe void GetSamplerParameter(uint sampler, SamplerParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetSamplerParameterfv(sampler, pname, @params);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterIiv", Version = "1.2")]
    public static unsafe void GetSamplerParameterI(int sampler, ArbSamplerObjects pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetSamplerParameterIiv((uint) sampler, pname, params1);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterIiv", Version = "1.2")]
    public static unsafe void GetSamplerParameterI(int sampler, ArbSamplerObjects pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetSamplerParameterIiv((uint) sampler, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterIiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetSamplerParameterI(int sampler, ArbSamplerObjects pname, [Out] int* @params)
    {
      GL.Delegates.glGetSamplerParameterIiv((uint) sampler, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterIiv", Version = "1.2")]
    public static unsafe void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetSamplerParameterIiv(sampler, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterIiv", Version = "1.2")]
    public static unsafe void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetSamplerParameterIiv(sampler, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterIiv", Version = "1.2")]
    public static unsafe void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, [Out] int* @params)
    {
      GL.Delegates.glGetSamplerParameterIiv(sampler, pname, @params);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterIuiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, [Out] uint[] @params)
    {
      fixed (uint* params1 = @params)
        GL.Delegates.glGetSamplerParameterIuiv(sampler, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterIuiv", Version = "1.2")]
    public static unsafe void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, out uint @params)
    {
      fixed (uint* params1 = &@params)
      {
        GL.Delegates.glGetSamplerParameterIuiv(sampler, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameterIuiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetSamplerParameterI(uint sampler, ArbSamplerObjects pname, [Out] uint* @params)
    {
      GL.Delegates.glGetSamplerParameterIuiv(sampler, pname, @params);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameteriv", Version = "1.2")]
    public static unsafe void GetSamplerParameter(int sampler, SamplerParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetSamplerParameteriv((uint) sampler, pname, params1);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameteriv", Version = "1.2")]
    public static unsafe void GetSamplerParameter(int sampler, SamplerParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetSamplerParameteriv((uint) sampler, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetSamplerParameter(int sampler, SamplerParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetSamplerParameteriv((uint) sampler, pname, @params);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetSamplerParameter(uint sampler, SamplerParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetSamplerParameteriv(sampler, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameteriv", Version = "1.2")]
    public static unsafe void GetSamplerParameter(uint sampler, SamplerParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetSamplerParameteriv(sampler, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glGetSamplerParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetSamplerParameter(uint sampler, SamplerParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetSamplerParameteriv(sampler, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
    {
      GL.Delegates.glGetSeparableFilter(target, format, type, row, column, span);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] T5[] span) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, row, column, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] T5[,] span) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, row, column, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] T5[,,] span) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, row, column, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] ref T5 span) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, row, column, gcHandle.AddrOfPinnedObject());
        span = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [In, Out] T4[] column, [In, Out] T5[,,] span) where T4 : struct where T5 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, row, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [In, Out] T4[,] column, [In, Out] T5[,,] span) where T4 : struct where T5 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, row, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T4 : struct where T5 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, row, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [In, Out] ref T4 column, [In, Out] T5[,,] span) where T4 : struct where T5 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, row, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        column = (T4) gcHandle1.Target;
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In, Out] T3[] row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
        gcHandle3.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In, Out] T3[,] row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
        gcHandle3.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In, Out] T3[,,] row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
        gcHandle3.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glGetSeparableFilter", Version = "1.2")]
    public static void GetSeparableFilter<T3, T4, T5>(SeparableTarget target, PixelFormat format, PixelType type, [In, Out] ref T3 row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetSeparableFilter(target, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
        row = (T3) gcHandle1.Target;
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
        gcHandle3.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    public static unsafe void GetShaderInfoLog(int shader, int bufSize, out int length, [Out] StringBuilder infoLog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetShaderInfoLog((uint) shader, bufSize, length1, infoLog);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    public static unsafe void GetShaderInfoLog(int shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
    {
      GL.Delegates.glGetShaderInfoLog((uint) shader, bufSize, length, infoLog);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    public static unsafe void GetShaderInfoLog(uint shader, int bufSize, out int length, [Out] StringBuilder infoLog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetShaderInfoLog(shader, bufSize, length1, infoLog);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetShaderInfoLog(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog)
    {
      GL.Delegates.glGetShaderInfoLog(shader, bufSize, length, infoLog);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(int shader, ShaderParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetShaderiv((uint) shader, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(int shader, ShaderParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetShaderiv((uint) shader, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(int shader, ShaderParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetShaderiv((uint) shader, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(uint shader, ShaderParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetShaderiv(shader, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(uint shader, ShaderParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetShaderiv(shader, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetShader(uint shader, ShaderParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetShaderiv(shader, pname, @params);
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glGetShaderPrecisionFormat", Version = "4.1")]
    public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecisionType precisiontype, [Out] int[] range, [Out] int[] precision)
    {
      fixed (int* range1 = range)
        fixed (int* precision1 = precision)
          GL.Delegates.glGetShaderPrecisionFormat(shadertype, precisiontype, range1, precision1);
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glGetShaderPrecisionFormat", Version = "4.1")]
    public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecisionType precisiontype, out int range, out int precision)
    {
      fixed (int* range1 = &range)
        fixed (int* precision1 = &precision)
        {
          GL.Delegates.glGetShaderPrecisionFormat(shadertype, precisiontype, range1, precision1);
          range = *range1;
          precision = *precision1;
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glGetShaderPrecisionFormat", Version = "4.1")]
    public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecisionType precisiontype, [Out] int* range, [Out] int* precision)
    {
      GL.Delegates.glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    public static unsafe void GetShaderSource(int shader, int bufSize, out int length, [Out] StringBuilder source)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetShaderSource((uint) shader, bufSize, length1, source);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetShaderSource(int shader, int bufSize, [Out] int* length, [Out] StringBuilder source)
    {
      GL.Delegates.glGetShaderSource((uint) shader, bufSize, length, source);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    public static unsafe void GetShaderSource(uint shader, int bufSize, out int length, [Out] StringBuilder source)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetShaderSource(shader, bufSize, length1, source);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    public static unsafe void GetShaderSource(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder source)
    {
      GL.Delegates.glGetShaderSource(shader, bufSize, length, source);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetString", Version = "1.0")]
    public static unsafe string GetString(StringName name)
    {
      return new string((sbyte*) (void*) GL.Delegates.glGetString(name));
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetStringi", Version = "3.0")]
    public static unsafe string GetString(StringName name, int index)
    {
      return new string((sbyte*) (void*) GL.Delegates.glGetStringi(name, (uint) index));
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetStringi", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe string GetString(StringName name, uint index)
    {
      return new string((sbyte*) (void*) GL.Delegates.glGetStringi(name, index));
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetSubroutineIndex", Version = "1.2")]
    public static int GetSubroutineIndex(int program, ShaderType shadertype, string name)
    {
      return GL.Delegates.glGetSubroutineIndex((uint) program, shadertype, name);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetSubroutineIndex", Version = "1.2")]
    [CLSCompliant(false)]
    public static int GetSubroutineIndex(uint program, ShaderType shadertype, string name)
    {
      return GL.Delegates.glGetSubroutineIndex(program, shadertype, name);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetSubroutineUniformLocation", Version = "1.2")]
    public static int GetSubroutineUniformLocation(int program, ShaderType shadertype, string name)
    {
      return GL.Delegates.glGetSubroutineUniformLocation((uint) program, shadertype, name);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetSubroutineUniformLocation", Version = "1.2")]
    [CLSCompliant(false)]
    public static int GetSubroutineUniformLocation(uint program, ShaderType shadertype, string name)
    {
      return GL.Delegates.glGetSubroutineUniformLocation(program, shadertype, name);
    }

    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glGetSynciv", Version = "1.2")]
    public static unsafe void GetSync(IntPtr sync, ArbSync pname, int bufSize, out int length, out int values)
    {
      fixed (int* length1 = &length)
        fixed (int* values1 = &values)
        {
          GL.Delegates.glGetSynciv(sync, pname, bufSize, length1, values1);
          length = *length1;
          values = *values1;
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glGetSynciv", Version = "1.2")]
    public static unsafe void GetSync(IntPtr sync, ArbSync pname, int bufSize, [Out] int* length, [Out] int[] values)
    {
      fixed (int* values1 = values)
        GL.Delegates.glGetSynciv(sync, pname, bufSize, length, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glGetSynciv", Version = "1.2")]
    public static unsafe void GetSync(IntPtr sync, ArbSync pname, int bufSize, [Out] int* length, [Out] int* values)
    {
      GL.Delegates.glGetSynciv(sync, pname, bufSize, length, values);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexEnvfv", Version = "1.0")]
    public static unsafe void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetTexEnvfv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexEnvfv", Version = "1.0")]
    public static unsafe void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetTexEnvfv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexEnvfv", Version = "1.0")]
    public static unsafe void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetTexEnvfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexEnviv", Version = "1.0")]
    public static unsafe void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexEnviv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexEnviv", Version = "1.0")]
    public static unsafe void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetTexEnviv(target, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexEnviv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetTexEnv(TextureEnvTarget target, TextureEnvParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetTexEnviv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexGendv", Version = "1.0")]
    public static unsafe void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] double[] @params)
    {
      fixed (double* params1 = @params)
        GL.Delegates.glGetTexGendv(coord, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexGendv", Version = "1.0")]
    public static unsafe void GetTexGen(TextureCoordName coord, TextureGenParameter pname, out double @params)
    {
      fixed (double* params1 = &@params)
      {
        GL.Delegates.glGetTexGendv(coord, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexGendv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] double* @params)
    {
      GL.Delegates.glGetTexGendv(coord, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexGenfv", Version = "1.0")]
    public static unsafe void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetTexGenfv(coord, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexGenfv", Version = "1.0")]
    public static unsafe void GetTexGen(TextureCoordName coord, TextureGenParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetTexGenfv(coord, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexGenfv", Version = "1.0")]
    public static unsafe void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetTexGenfv(coord, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexGeniv", Version = "1.0")]
    public static unsafe void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexGeniv(coord, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexGeniv", Version = "1.0")]
    public static unsafe void GetTexGen(TextureCoordName coord, TextureGenParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetTexGeniv(coord, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glGetTexGeniv", Version = "1.0")]
    public static unsafe void GetTexGen(TextureCoordName coord, TextureGenParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetTexGeniv(coord, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexImage", Version = "1.0")]
    public static void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels)
    {
      GL.Delegates.glGetTexImage(target, level, format, type, pixels);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexImage", Version = "1.0")]
    public static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T4[] pixels) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetTexImage(target, level, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexImage", Version = "1.0")]
    public static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T4[,] pixels) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetTexImage(target, level, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexImage", Version = "1.0")]
    public static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T4[,,] pixels) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetTexImage(target, level, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexImage", Version = "1.0")]
    public static void GetTexImage<T4>(TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] ref T4 pixels) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetTexImage(target, level, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexLevelParameterfv", Version = "1.0")]
    public static unsafe void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetTexLevelParameterfv(target, level, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexLevelParameterfv", Version = "1.0")]
    public static unsafe void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetTexLevelParameterfv(target, level, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexLevelParameterfv", Version = "1.0")]
    public static unsafe void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetTexLevelParameterfv(target, level, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexLevelParameteriv", Version = "1.0")]
    public static unsafe void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexLevelParameteriv(target, level, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexLevelParameteriv", Version = "1.0")]
    public static unsafe void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetTexLevelParameteriv(target, level, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexLevelParameteriv", Version = "1.0")]
    public static unsafe void GetTexLevelParameter(TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetTexLevelParameteriv(target, level, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexParameterfv", Version = "1.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetTexParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexParameterfv", Version = "1.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetTexParameterfv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexParameterfv", Version = "1.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetTexParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTexParameterIiv", Version = "3.0")]
    public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexParameterIiv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTexParameterIiv", Version = "3.0")]
    public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetTexParameterIiv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTexParameterIiv", Version = "3.0")]
    public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetTexParameterIiv(target, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTexParameterIuiv", Version = "3.0")]
    public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
    {
      fixed (uint* params1 = @params)
        GL.Delegates.glGetTexParameterIuiv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTexParameterIuiv", Version = "3.0")]
    public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out uint @params)
    {
      fixed (uint* params1 = &@params)
      {
        GL.Delegates.glGetTexParameterIuiv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTexParameterIuiv", Version = "3.0")]
    public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
    {
      GL.Delegates.glGetTexParameterIuiv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexParameteriv", Version = "1.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexParameteriv", Version = "1.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetTexParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glGetTexParameteriv", Version = "1.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetTexParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTransformFeedbackVarying", Version = "3.0")]
    public static unsafe void GetTransformFeedbackVarying(int program, int index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveAttribType* type1 = &type)
          {
            GL.Delegates.glGetTransformFeedbackVarying((uint) program, (uint) index, bufSize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTransformFeedbackVarying", Version = "3.0")]
    public static unsafe void GetTransformFeedbackVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetTransformFeedbackVarying((uint) program, (uint) index, bufSize, length, size, type, name);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTransformFeedbackVarying", Version = "3.0")]
    public static unsafe void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveAttribType* type1 = &type)
          {
            GL.Delegates.glGetTransformFeedbackVarying(program, index, bufSize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetTransformFeedbackVarying", Version = "3.0")]
    public static unsafe void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetUniformBlockIndex", Version = "2.0")]
    public static int GetUniformBlockIndex(int program, string uniformBlockName)
    {
      return GL.Delegates.glGetUniformBlockIndex((uint) program, uniformBlockName);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetUniformBlockIndex", Version = "2.0")]
    public static int GetUniformBlockIndex(uint program, string uniformBlockName)
    {
      return GL.Delegates.glGetUniformBlockIndex(program, uniformBlockName);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glGetUniformdv", Version = "1.2")]
    public static unsafe void GetUniform(int program, int location, [Out] double[] @params)
    {
      fixed (double* params1 = @params)
        GL.Delegates.glGetUniformdv((uint) program, location, params1);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glGetUniformdv", Version = "1.2")]
    public static unsafe void GetUniform(int program, int location, out double @params)
    {
      fixed (double* params1 = &@params)
      {
        GL.Delegates.glGetUniformdv((uint) program, location, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glGetUniformdv", Version = "1.2")]
    public static unsafe void GetUniform(int program, int location, [Out] double* @params)
    {
      GL.Delegates.glGetUniformdv((uint) program, location, @params);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glGetUniformdv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(uint program, int location, [Out] double[] @params)
    {
      fixed (double* params1 = @params)
        GL.Delegates.glGetUniformdv(program, location, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glGetUniformdv", Version = "1.2")]
    public static unsafe void GetUniform(uint program, int location, out double @params)
    {
      fixed (double* params1 = &@params)
      {
        GL.Delegates.glGetUniformdv(program, location, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glGetUniformdv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(uint program, int location, [Out] double* @params)
    {
      GL.Delegates.glGetUniformdv(program, location, @params);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    public static unsafe void GetUniform(int program, int location, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetUniformfv((uint) program, location, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    public static unsafe void GetUniform(int program, int location, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetUniformfv((uint) program, location, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(int program, int location, [Out] float* @params)
    {
      GL.Delegates.glGetUniformfv((uint) program, location, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    public static unsafe void GetUniform(uint program, int location, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetUniformfv(program, location, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(uint program, int location, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetUniformfv(program, location, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    public static unsafe void GetUniform(uint program, int location, [Out] float* @params)
    {
      GL.Delegates.glGetUniformfv(program, location, @params);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetUniformIndices", Version = "2.0")]
    public static unsafe void GetUniformIndices(int program, int uniformCount, string[] uniformNames, [Out] int[] uniformIndices)
    {
      fixed (int* numPtr = uniformIndices)
        GL.Delegates.glGetUniformIndices((uint) program, uniformCount, uniformNames, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetUniformIndices", Version = "2.0")]
    public static unsafe void GetUniformIndices(int program, int uniformCount, string[] uniformNames, out int uniformIndices)
    {
      fixed (int* numPtr = &uniformIndices)
      {
        GL.Delegates.glGetUniformIndices((uint) program, uniformCount, uniformNames, (uint*) numPtr);
        uniformIndices = *numPtr;
      }
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetUniformIndices", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniformIndices(int program, int uniformCount, string[] uniformNames, [Out] int* uniformIndices)
    {
      GL.Delegates.glGetUniformIndices((uint) program, uniformCount, uniformNames, (uint*) uniformIndices);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetUniformIndices", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint[] uniformIndices)
    {
      fixed (uint* uniformIndices1 = uniformIndices)
        GL.Delegates.glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetUniformIndices", Version = "2.0")]
    public static unsafe void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, out uint uniformIndices)
    {
      fixed (uint* uniformIndices1 = &uniformIndices)
      {
        GL.Delegates.glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices1);
        uniformIndices = *uniformIndices1;
      }
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glGetUniformIndices", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint* uniformIndices)
    {
      GL.Delegates.glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    public static unsafe void GetUniform(int program, int location, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetUniformiv((uint) program, location, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    public static unsafe void GetUniform(int program, int location, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetUniformiv((uint) program, location, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(int program, int location, [Out] int* @params)
    {
      GL.Delegates.glGetUniformiv((uint) program, location, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    public static unsafe void GetUniform(uint program, int location, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetUniformiv(program, location, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    public static unsafe void GetUniform(uint program, int location, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetUniformiv(program, location, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    public static unsafe void GetUniform(uint program, int location, [Out] int* @params)
    {
      GL.Delegates.glGetUniformiv(program, location, @params);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformLocation", Version = "2.0")]
    public static int GetUniformLocation(int program, string name)
    {
      return GL.Delegates.glGetUniformLocation((uint) program, name);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetUniformLocation", Version = "2.0")]
    [CLSCompliant(false)]
    public static int GetUniformLocation(uint program, string name)
    {
      return GL.Delegates.glGetUniformLocation(program, name);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetUniformSubroutineuiv", Version = "1.2")]
    public static unsafe void GetUniformSubroutine(ShaderType shadertype, int location, out int @params)
    {
      fixed (int* numPtr = &@params)
      {
        GL.Delegates.glGetUniformSubroutineuiv(shadertype, location, (uint*) numPtr);
        @params = *numPtr;
      }
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetUniformSubroutineuiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetUniformSubroutine(ShaderType shadertype, int location, [Out] int* @params)
    {
      GL.Delegates.glGetUniformSubroutineuiv(shadertype, location, (uint*) @params);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetUniformSubroutineuiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetUniformSubroutine(ShaderType shadertype, int location, out uint @params)
    {
      fixed (uint* params1 = &@params)
      {
        GL.Delegates.glGetUniformSubroutineuiv(shadertype, location, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glGetUniformSubroutineuiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void GetUniformSubroutine(ShaderType shadertype, int location, [Out] uint* @params)
    {
      GL.Delegates.glGetUniformSubroutineuiv(shadertype, location, @params);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetUniformuiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(uint program, int location, [Out] uint[] @params)
    {
      fixed (uint* params1 = @params)
        GL.Delegates.glGetUniformuiv(program, location, params1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetUniformuiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(uint program, int location, out uint @params)
    {
      fixed (uint* params1 = &@params)
      {
        GL.Delegates.glGetUniformuiv(program, location, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetUniformuiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(uint program, int location, [Out] uint* @params)
    {
      GL.Delegates.glGetUniformuiv(program, location, @params);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribdv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] double[] @params)
    {
      fixed (double* params1 = @params)
        GL.Delegates.glGetVertexAttribdv((uint) index, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribdv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, out double @params)
    {
      fixed (double* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribdv((uint) index, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribdv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] double* @params)
    {
      GL.Delegates.glGetVertexAttribdv((uint) index, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribdv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] double[] @params)
    {
      fixed (double* params1 = @params)
        GL.Delegates.glGetVertexAttribdv(index, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribdv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, out double @params)
    {
      fixed (double* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribdv(index, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribdv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] double* @params)
    {
      GL.Delegates.glGetVertexAttribdv(index, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetVertexAttribfv((uint) index, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribfv((uint) index, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetVertexAttribfv((uint) index, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetVertexAttribfv(index, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribfv(index, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetVertexAttribfv(index, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetVertexAttribIiv", Version = "3.0")]
    public static unsafe void GetVertexAttribI(int index, VertexAttribParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribIiv((uint) index, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetVertexAttribIiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttribI(int index, VertexAttribParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetVertexAttribIiv((uint) index, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetVertexAttribIiv", Version = "3.0")]
    public static unsafe void GetVertexAttribI(uint index, VertexAttribParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribIiv(index, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetVertexAttribIiv", Version = "3.0")]
    public static unsafe void GetVertexAttribI(uint index, VertexAttribParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetVertexAttribIiv(index, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetVertexAttribIuiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttribI(uint index, VertexAttribParameter pname, out uint @params)
    {
      fixed (uint* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribIuiv(index, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glGetVertexAttribIuiv", Version = "3.0")]
    public static unsafe void GetVertexAttribI(uint index, VertexAttribParameter pname, [Out] uint* @params)
    {
      GL.Delegates.glGetVertexAttribIuiv(index, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetVertexAttribiv((uint) index, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribiv((uint) index, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetVertexAttribiv((uint) index, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetVertexAttribiv(index, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribiv(index, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetVertexAttribiv(index, pname, @params);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdv", Version = "4.1")]
    public static unsafe void GetVertexAttribL(int index, VertexAttribParameter pname, [Out] double[] @params)
    {
      fixed (double* params1 = @params)
        GL.Delegates.glGetVertexAttribLdv((uint) index, pname, params1);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdv", Version = "4.1")]
    public static unsafe void GetVertexAttribL(int index, VertexAttribParameter pname, out double @params)
    {
      fixed (double* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribLdv((uint) index, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdv", Version = "4.1")]
    public static unsafe void GetVertexAttribL(int index, VertexAttribParameter pname, [Out] double* @params)
    {
      GL.Delegates.glGetVertexAttribLdv((uint) index, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdv", Version = "4.1")]
    public static unsafe void GetVertexAttribL(uint index, VertexAttribParameter pname, [Out] double[] @params)
    {
      fixed (double* params1 = @params)
        GL.Delegates.glGetVertexAttribLdv(index, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdv", Version = "4.1")]
    public static unsafe void GetVertexAttribL(uint index, VertexAttribParameter pname, out double @params)
    {
      fixed (double* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribLdv(index, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdv", Version = "4.1")]
    public static unsafe void GetVertexAttribL(uint index, VertexAttribParameter pname, [Out] double* @params)
    {
      GL.Delegates.glGetVertexAttribLdv(index, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer(int index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
    {
      GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, pointer);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    [CLSCompliant(false)]
    public static void GetVertexAttribPointer(uint index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
    {
      GL.Delegates.glGetVertexAttribPointerv(index, pname, pointer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv(index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv(index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    [CLSCompliant(false)]
    public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv(index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv(index, pname, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glHint", Version = "1.0")]
    public static void Hint(HintTarget target, HintMode mode)
    {
      GL.Delegates.glHint(target, mode);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glHistogram", Version = "1.2")]
    public static void Histogram(HistogramTarget target, int width, PixelInternalFormat internalformat, bool sink)
    {
      GL.Delegates.glHistogram(target, width, internalformat, sink);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexd", Version = "1.0")]
    public static void Index(double c)
    {
      GL.Delegates.glIndexd(c);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexdv", Version = "1.0")]
    public static unsafe void Index(double* c)
    {
      GL.Delegates.glIndexdv(c);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexf", Version = "1.0")]
    public static void Index(float c)
    {
      GL.Delegates.glIndexf(c);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexfv", Version = "1.0")]
    public static unsafe void Index(float* c)
    {
      GL.Delegates.glIndexfv(c);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexi", Version = "1.0")]
    public static void Index(int c)
    {
      GL.Delegates.glIndexi(c);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexiv", Version = "1.0")]
    public static unsafe void Index(int* c)
    {
      GL.Delegates.glIndexiv(c);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexMask", Version = "1.0")]
    public static void IndexMask(int mask)
    {
      GL.Delegates.glIndexMask((uint) mask);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexMask", Version = "1.0")]
    [CLSCompliant(false)]
    public static void IndexMask(uint mask)
    {
      GL.Delegates.glIndexMask(mask);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glIndexPointer", Version = "1.1")]
    public static void IndexPointer(IndexPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glIndexPointer(type, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glIndexPointer", Version = "1.1")]
    public static void IndexPointer<T2>(IndexPointerType type, int stride, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glIndexPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glIndexPointer", Version = "1.1")]
    public static void IndexPointer<T2>(IndexPointerType type, int stride, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glIndexPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glIndexPointer", Version = "1.1")]
    public static void IndexPointer<T2>(IndexPointerType type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glIndexPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glIndexPointer", Version = "1.1")]
    public static void IndexPointer<T2>(IndexPointerType type, int stride, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glIndexPointer(type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexs", Version = "1.0")]
    public static void Index(short c)
    {
      GL.Delegates.glIndexs(c);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIndexsv", Version = "1.0")]
    public static unsafe void Index(short* c)
    {
      GL.Delegates.glIndexsv(c);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glIndexub", Version = "1.1")]
    public static void Index(byte c)
    {
      GL.Delegates.glIndexub(c);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glIndexubv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void Index(byte* c)
    {
      GL.Delegates.glIndexubv(c);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glInitNames", Version = "1.0")]
    public static void InitNames()
    {
      GL.Delegates.glInitNames();
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glInterleavedArrays", Version = "1.1")]
    public static void InterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer)
    {
      GL.Delegates.glInterleavedArrays(format, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glInterleavedArrays", Version = "1.1")]
    public static void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glInterleavedArrays(format, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glInterleavedArrays", Version = "1.1")]
    public static void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glInterleavedArrays(format, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glInterleavedArrays", Version = "1.1")]
    public static void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glInterleavedArrays(format, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glInterleavedArrays", Version = "1.1")]
    public static void InterleavedArrays<T2>(InterleavedArrayFormat format, int stride, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glInterleavedArrays(format, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glIsBuffer", Version = "1.5")]
    public static bool IsBuffer(int buffer)
    {
      return GL.Delegates.glIsBuffer((uint) buffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glIsBuffer", Version = "1.5")]
    public static bool IsBuffer(uint buffer)
    {
      return GL.Delegates.glIsBuffer(buffer);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glIsEnabled", Version = "1.0")]
    public static bool IsEnabled(EnableCap cap)
    {
      return GL.Delegates.glIsEnabled(cap);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glIsEnabledi", Version = "3.0")]
    public static bool IsEnabled(IndexedEnableCap target, int index)
    {
      return GL.Delegates.glIsEnabledi(target, (uint) index);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glIsEnabledi", Version = "3.0")]
    [CLSCompliant(false)]
    public static bool IsEnabled(IndexedEnableCap target, uint index)
    {
      return GL.Delegates.glIsEnabledi(target, index);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glIsFramebuffer", Version = "3.0")]
    public static bool IsFramebuffer(int framebuffer)
    {
      return GL.Delegates.glIsFramebuffer((uint) framebuffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glIsFramebuffer", Version = "3.0")]
    public static bool IsFramebuffer(uint framebuffer)
    {
      return GL.Delegates.glIsFramebuffer(framebuffer);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIsList", Version = "1.0")]
    public static bool IsList(int list)
    {
      return GL.Delegates.glIsList((uint) list);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glIsList", Version = "1.0")]
    [CLSCompliant(false)]
    public static bool IsList(uint list)
    {
      return GL.Delegates.glIsList(list);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glIsProgram", Version = "2.0")]
    public static bool IsProgram(int program)
    {
      return GL.Delegates.glIsProgram((uint) program);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glIsProgram", Version = "2.0")]
    public static bool IsProgram(uint program)
    {
      return GL.Delegates.glIsProgram(program);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glIsProgramPipeline", Version = "4.1")]
    public static bool IsProgramPipeline(int pipeline)
    {
      return GL.Delegates.glIsProgramPipeline((uint) pipeline);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glIsProgramPipeline", Version = "4.1")]
    public static bool IsProgramPipeline(uint pipeline)
    {
      return GL.Delegates.glIsProgramPipeline(pipeline);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glIsQuery", Version = "1.5")]
    public static bool IsQuery(int id)
    {
      return GL.Delegates.glIsQuery((uint) id);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glIsQuery", Version = "1.5")]
    public static bool IsQuery(uint id)
    {
      return GL.Delegates.glIsQuery(id);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glIsRenderbuffer", Version = "3.0")]
    public static bool IsRenderbuffer(int renderbuffer)
    {
      return GL.Delegates.glIsRenderbuffer((uint) renderbuffer);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glIsRenderbuffer", Version = "3.0")]
    [CLSCompliant(false)]
    public static bool IsRenderbuffer(uint renderbuffer)
    {
      return GL.Delegates.glIsRenderbuffer(renderbuffer);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glIsSampler", Version = "1.2")]
    public static bool IsSampler(int sampler)
    {
      return GL.Delegates.glIsSampler((uint) sampler);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glIsSampler", Version = "1.2")]
    [CLSCompliant(false)]
    public static bool IsSampler(uint sampler)
    {
      return GL.Delegates.glIsSampler(sampler);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glIsShader", Version = "2.0")]
    public static bool IsShader(int shader)
    {
      return GL.Delegates.glIsShader((uint) shader);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glIsShader", Version = "2.0")]
    [CLSCompliant(false)]
    public static bool IsShader(uint shader)
    {
      return GL.Delegates.glIsShader(shader);
    }

    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glIsSync", Version = "1.2")]
    public static bool IsSync(IntPtr sync)
    {
      return GL.Delegates.glIsSync(sync);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glIsTexture", Version = "1.1")]
    public static bool IsTexture(int texture)
    {
      return GL.Delegates.glIsTexture((uint) texture);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glIsTexture", Version = "1.1")]
    [CLSCompliant(false)]
    public static bool IsTexture(uint texture)
    {
      return GL.Delegates.glIsTexture(texture);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glIsTransformFeedback", Version = "1.2")]
    public static bool IsTransformFeedback(int id)
    {
      return GL.Delegates.glIsTransformFeedback((uint) id);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glIsTransformFeedback", Version = "1.2")]
    [CLSCompliant(false)]
    public static bool IsTransformFeedback(uint id)
    {
      return GL.Delegates.glIsTransformFeedback(id);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glIsVertexArray", Version = "3.0")]
    public static bool IsVertexArray(int array)
    {
      return GL.Delegates.glIsVertexArray((uint) array);
    }

    [AutoGenerated(Category = "ARB_vertex_array_object", EntryPoint = "glIsVertexArray", Version = "3.0")]
    [CLSCompliant(false)]
    public static bool IsVertexArray(uint array)
    {
      return GL.Delegates.glIsVertexArray(array);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightf", Version = "1.0")]
    public static void Light(LightName light, LightParameter pname, float param)
    {
      GL.Delegates.glLightf(light, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightfv", Version = "1.0")]
    public static unsafe void Light(LightName light, LightParameter pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glLightfv(light, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightfv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Light(LightName light, LightParameter pname, float* @params)
    {
      GL.Delegates.glLightfv(light, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLighti", Version = "1.0")]
    public static void Light(LightName light, LightParameter pname, int param)
    {
      GL.Delegates.glLighti(light, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightiv", Version = "1.0")]
    public static unsafe void Light(LightName light, LightParameter pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glLightiv(light, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Light(LightName light, LightParameter pname, int* @params)
    {
      GL.Delegates.glLightiv(light, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightModelf", Version = "1.0")]
    public static void LightModel(LightModelParameter pname, float param)
    {
      GL.Delegates.glLightModelf(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightModelfv", Version = "1.0")]
    public static unsafe void LightModel(LightModelParameter pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glLightModelfv(pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightModelfv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void LightModel(LightModelParameter pname, float* @params)
    {
      GL.Delegates.glLightModelfv(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightModeli", Version = "1.0")]
    public static void LightModel(LightModelParameter pname, int param)
    {
      GL.Delegates.glLightModeli(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightModeliv", Version = "1.0")]
    public static unsafe void LightModel(LightModelParameter pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glLightModeliv(pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLightModeliv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void LightModel(LightModelParameter pname, int* @params)
    {
      GL.Delegates.glLightModeliv(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLineStipple", Version = "1.0")]
    public static void LineStipple(int factor, short pattern)
    {
      GL.Delegates.glLineStipple(factor, (ushort) pattern);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLineStipple", Version = "1.0")]
    [CLSCompliant(false)]
    public static void LineStipple(int factor, ushort pattern)
    {
      GL.Delegates.glLineStipple(factor, pattern);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glLineWidth", Version = "1.0")]
    public static void LineWidth(float width)
    {
      GL.Delegates.glLineWidth(width);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glLinkProgram", Version = "2.0")]
    public static void LinkProgram(int program)
    {
      GL.Delegates.glLinkProgram((uint) program);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glLinkProgram", Version = "2.0")]
    public static void LinkProgram(uint program)
    {
      GL.Delegates.glLinkProgram(program);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glListBase", Version = "1.0")]
    public static void ListBase(int @base)
    {
      GL.Delegates.glListBase((uint) @base);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glListBase", Version = "1.0")]
    [CLSCompliant(false)]
    public static void ListBase(uint @base)
    {
      GL.Delegates.glListBase(@base);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLoadIdentity", Version = "1.0")]
    public static void LoadIdentity()
    {
      GL.Delegates.glLoadIdentity();
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLoadMatrixd", Version = "1.0")]
    public static unsafe void LoadMatrix(double[] m)
    {
      fixed (double* m1 = m)
        GL.Delegates.glLoadMatrixd(m1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLoadMatrixd", Version = "1.0")]
    public static unsafe void LoadMatrix(ref double m)
    {
      fixed (double* m1 = &m)
        GL.Delegates.glLoadMatrixd(m1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLoadMatrixd", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void LoadMatrix(double* m)
    {
      GL.Delegates.glLoadMatrixd(m);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLoadMatrixf", Version = "1.0")]
    public static unsafe void LoadMatrix(float[] m)
    {
      fixed (float* m1 = m)
        GL.Delegates.glLoadMatrixf(m1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLoadMatrixf", Version = "1.0")]
    public static unsafe void LoadMatrix(ref float m)
    {
      fixed (float* m1 = &m)
        GL.Delegates.glLoadMatrixf(m1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLoadMatrixf", Version = "1.0")]
    public static unsafe void LoadMatrix(float* m)
    {
      GL.Delegates.glLoadMatrixf(m);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLoadName", Version = "1.0")]
    public static void LoadName(int name)
    {
      GL.Delegates.glLoadName((uint) name);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glLoadName", Version = "1.0")]
    [CLSCompliant(false)]
    public static void LoadName(uint name)
    {
      GL.Delegates.glLoadName(name);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glLoadTransposeMatrixd", Version = "1.3")]
    public static unsafe void LoadTransposeMatrix(double[] m)
    {
      fixed (double* m1 = m)
        GL.Delegates.glLoadTransposeMatrixd(m1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glLoadTransposeMatrixd", Version = "1.3")]
    public static unsafe void LoadTransposeMatrix(ref double m)
    {
      fixed (double* m1 = &m)
        GL.Delegates.glLoadTransposeMatrixd(m1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glLoadTransposeMatrixd", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void LoadTransposeMatrix(double* m)
    {
      GL.Delegates.glLoadTransposeMatrixd(m);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glLoadTransposeMatrixf", Version = "1.3")]
    public static unsafe void LoadTransposeMatrix(float[] m)
    {
      fixed (float* m1 = m)
        GL.Delegates.glLoadTransposeMatrixf(m1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glLoadTransposeMatrixf", Version = "1.3")]
    public static unsafe void LoadTransposeMatrix(ref float m)
    {
      fixed (float* m1 = &m)
        GL.Delegates.glLoadTransposeMatrixf(m1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glLoadTransposeMatrixf", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void LoadTransposeMatrix(float* m)
    {
      GL.Delegates.glLoadTransposeMatrixf(m);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glLogicOp", Version = "1.0")]
    public static void LogicOp(LogicOp opcode)
    {
      GL.Delegates.glLogicOp(opcode);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap1d", Version = "1.0")]
    public static unsafe void Map1(MapTarget target, double u1, double u2, int stride, int order, double[] points)
    {
      fixed (double* points1 = points)
        GL.Delegates.glMap1d(target, u1, u2, stride, order, points1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap1d", Version = "1.0")]
    public static unsafe void Map1(MapTarget target, double u1, double u2, int stride, int order, ref double points)
    {
      fixed (double* points1 = &points)
        GL.Delegates.glMap1d(target, u1, u2, stride, order, points1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap1d", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Map1(MapTarget target, double u1, double u2, int stride, int order, double* points)
    {
      GL.Delegates.glMap1d(target, u1, u2, stride, order, points);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap1f", Version = "1.0")]
    public static unsafe void Map1(MapTarget target, float u1, float u2, int stride, int order, float[] points)
    {
      fixed (float* points1 = points)
        GL.Delegates.glMap1f(target, u1, u2, stride, order, points1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap1f", Version = "1.0")]
    public static unsafe void Map1(MapTarget target, float u1, float u2, int stride, int order, ref float points)
    {
      fixed (float* points1 = &points)
        GL.Delegates.glMap1f(target, u1, u2, stride, order, points1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap1f", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Map1(MapTarget target, float u1, float u2, int stride, int order, float* points)
    {
      GL.Delegates.glMap1f(target, u1, u2, stride, order, points);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap2d", Version = "1.0")]
    public static unsafe void Map2(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
    {
      fixed (double* points1 = points)
        GL.Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap2d", Version = "1.0")]
    public static unsafe void Map2(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
    {
      fixed (double* points1 = &points)
        GL.Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap2d", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Map2(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
    {
      GL.Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap2f", Version = "1.0")]
    public static unsafe void Map2(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
    {
      fixed (float* points1 = points)
        GL.Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap2f", Version = "1.0")]
    public static unsafe void Map2(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
    {
      fixed (float* points1 = &points)
        GL.Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMap2f", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Map2(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
    {
      GL.Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glMapBuffer", Version = "1.5")]
    public static IntPtr MapBuffer(BufferTarget target, BufferAccess access)
    {
      return GL.Delegates.glMapBuffer(target, access);
    }

    [AutoGenerated(Category = "ARB_map_buffer_range", EntryPoint = "glMapBufferRange", Version = "3.0")]
    [CLSCompliant(false)]
    public static IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, BufferAccessMask access)
    {
      return GL.Delegates.glMapBufferRange(target, offset, length, access);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMapGrid1d", Version = "1.0")]
    public static void MapGrid1(int un, double u1, double u2)
    {
      GL.Delegates.glMapGrid1d(un, u1, u2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMapGrid1f", Version = "1.0")]
    public static void MapGrid1(int un, float u1, float u2)
    {
      GL.Delegates.glMapGrid1f(un, u1, u2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMapGrid2d", Version = "1.0")]
    public static void MapGrid2(int un, double u1, double u2, int vn, double v1, double v2)
    {
      GL.Delegates.glMapGrid2d(un, u1, u2, vn, v1, v2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMapGrid2f", Version = "1.0")]
    public static void MapGrid2(int un, float u1, float u2, int vn, float v1, float v2)
    {
      GL.Delegates.glMapGrid2f(un, u1, u2, vn, v1, v2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMaterialf", Version = "1.0")]
    public static void Material(MaterialFace face, MaterialParameter pname, float param)
    {
      GL.Delegates.glMaterialf(face, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMaterialfv", Version = "1.0")]
    public static unsafe void Material(MaterialFace face, MaterialParameter pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glMaterialfv(face, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMaterialfv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Material(MaterialFace face, MaterialParameter pname, float* @params)
    {
      GL.Delegates.glMaterialfv(face, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMateriali", Version = "1.0")]
    public static void Material(MaterialFace face, MaterialParameter pname, int param)
    {
      GL.Delegates.glMateriali(face, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMaterialiv", Version = "1.0")]
    public static unsafe void Material(MaterialFace face, MaterialParameter pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glMaterialiv(face, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMaterialiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Material(MaterialFace face, MaterialParameter pname, int* @params)
    {
      GL.Delegates.glMaterialiv(face, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMatrixMode", Version = "1.0")]
    public static void MatrixMode(MatrixMode mode)
    {
      GL.Delegates.glMatrixMode(mode);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glMinmax", Version = "1.2")]
    public static void Minmax(MinmaxTarget target, PixelInternalFormat internalformat, bool sink)
    {
      GL.Delegates.glMinmax(target, internalformat, sink);
    }

    [AutoGenerated(Category = "VERSION_4_0", EntryPoint = "glMinSampleShading", Version = "1.2")]
    public static void MinSampleShading(float value)
    {
      GL.Delegates.glMinSampleShading(value);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawArrays", Version = "1.4")]
    public static unsafe void MultiDrawArrays(BeginMode mode, int[] first, int[] count, int primcount)
    {
      fixed (int* first1 = first)
        fixed (int* count1 = count)
          GL.Delegates.glMultiDrawArrays(mode, first1, count1, primcount);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawArrays", Version = "1.4")]
    public static unsafe void MultiDrawArrays(BeginMode mode, ref int first, ref int count, int primcount)
    {
      fixed (int* first1 = &first)
        fixed (int* count1 = &count)
          GL.Delegates.glMultiDrawArrays(mode, first1, count1, primcount);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawArrays", Version = "1.4")]
    public static unsafe void MultiDrawArrays(BeginMode mode, int* first, int* count, int primcount)
    {
      GL.Delegates.glMultiDrawArrays(mode, first, count, primcount);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements(BeginMode mode, int[] count, DrawElementsType type, IntPtr indices, int primcount)
    {
      fixed (int* count1 = count)
        GL.Delegates.glMultiDrawElements(mode, count1, type, indices, primcount);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] T3[] indices, int primcount) where T3 : struct
    {
      fixed (int* count1 = count)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElements(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] T3[,] indices, int primcount) where T3 : struct
    {
      fixed (int* count1 = count)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElements(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
    {
      fixed (int* count1 = count)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElements(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] ref T3 indices, int primcount) where T3 : struct
    {
      fixed (int* count1 = count)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElements(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
          indices = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements(BeginMode mode, ref int count, DrawElementsType type, IntPtr indices, int primcount)
    {
      fixed (int* count1 = &count)
        GL.Delegates.glMultiDrawElements(mode, count1, type, indices, primcount);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[] indices, int primcount) where T3 : struct
    {
      fixed (int* count1 = &count)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElements(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[,] indices, int primcount) where T3 : struct
    {
      fixed (int* count1 = &count)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElements(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
    {
      fixed (int* count1 = &count)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElements(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] ref T3 indices, int primcount) where T3 : struct
    {
      fixed (int* count1 = &count)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElements(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
          indices = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount)
    {
      GL.Delegates.glMultiDrawElements(mode, count, type, indices, primcount);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] T3[] indices, int primcount) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glMultiDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] T3[,] indices, int primcount) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glMultiDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glMultiDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glMultiDrawElements", Version = "1.4")]
    public static unsafe void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] ref T3 indices, int primcount) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glMultiDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        indices = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex(BeginMode mode, int[] count, DrawElementsType type, IntPtr indices, int primcount, int[] basevertex)
    {
      fixed (int* count1 = count)
        fixed (int* basevertex1 = basevertex)
          GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, indices, primcount, basevertex1);
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] T3[] indices, int primcount, int[] basevertex) where T3 : struct
    {
      fixed (int* count1 = count)
        fixed (int* basevertex1 = basevertex)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] T3[,] indices, int primcount, int[] basevertex) where T3 : struct
    {
      fixed (int* count1 = count)
        fixed (int* basevertex1 = basevertex)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount, int[] basevertex) where T3 : struct
    {
      fixed (int* count1 = count)
        fixed (int* basevertex1 = basevertex)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] ref T3 indices, int primcount, int[] basevertex) where T3 : struct
    {
      fixed (int* count1 = count)
        fixed (int* basevertex1 = basevertex)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex1);
            indices = (T3) gcHandle.Target;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex(BeginMode mode, ref int count, DrawElementsType type, IntPtr indices, int primcount, ref int basevertex)
    {
      fixed (int* count1 = &count)
        fixed (int* basevertex1 = &basevertex)
          GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, indices, primcount, basevertex1);
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[] indices, int primcount, ref int basevertex) where T3 : struct
    {
      fixed (int* count1 = &count)
        fixed (int* basevertex1 = &basevertex)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[,] indices, int primcount, ref int basevertex) where T3 : struct
    {
      fixed (int* count1 = &count)
        fixed (int* basevertex1 = &basevertex)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount, ref int basevertex) where T3 : struct
    {
      fixed (int* count1 = &count)
        fixed (int* basevertex1 = &basevertex)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] ref T3 indices, int primcount, ref int basevertex) where T3 : struct
    {
      fixed (int* count1 = &count)
        fixed (int* basevertex1 = &basevertex)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsBaseVertex(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex1);
            indices = (T3) gcHandle.Target;
          }
          finally
          {
            gcHandle.Free();
          }
        }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void MultiDrawElementsBaseVertex(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount, int* basevertex)
    {
      GL.Delegates.glMultiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] T3[] indices, int primcount, int* basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glMultiDrawElementsBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] T3[,] indices, int primcount, int* basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glMultiDrawElementsBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount, int* basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glMultiDrawElementsBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_draw_elements_base_vertex", EntryPoint = "glMultiDrawElementsBaseVertex", Version = "1.2")]
    public static unsafe void MultiDrawElementsBaseVertex<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] ref T3 indices, int primcount, int* basevertex) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glMultiDrawElementsBaseVertex(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, basevertex);
        indices = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord1d", Version = "1.3")]
    public static void MultiTexCoord1(TextureUnit target, double s)
    {
      GL.Delegates.glMultiTexCoord1d(target, s);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord1dv", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoord1(TextureUnit target, double* v)
    {
      GL.Delegates.glMultiTexCoord1dv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord1f", Version = "1.3")]
    public static void MultiTexCoord1(TextureUnit target, float s)
    {
      GL.Delegates.glMultiTexCoord1f(target, s);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord1fv", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoord1(TextureUnit target, float* v)
    {
      GL.Delegates.glMultiTexCoord1fv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord1i", Version = "1.3")]
    public static void MultiTexCoord1(TextureUnit target, int s)
    {
      GL.Delegates.glMultiTexCoord1i(target, s);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord1iv", Version = "1.3")]
    public static unsafe void MultiTexCoord1(TextureUnit target, int* v)
    {
      GL.Delegates.glMultiTexCoord1iv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord1s", Version = "1.3")]
    public static void MultiTexCoord1(TextureUnit target, short s)
    {
      GL.Delegates.glMultiTexCoord1s(target, s);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord1sv", Version = "1.3")]
    public static unsafe void MultiTexCoord1(TextureUnit target, short* v)
    {
      GL.Delegates.glMultiTexCoord1sv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2d", Version = "1.3")]
    public static void MultiTexCoord2(TextureUnit target, double s, double t)
    {
      GL.Delegates.glMultiTexCoord2d(target, s, t);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2dv", Version = "1.3")]
    public static unsafe void MultiTexCoord2(TextureUnit target, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glMultiTexCoord2dv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2dv", Version = "1.3")]
    public static unsafe void MultiTexCoord2(TextureUnit target, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glMultiTexCoord2dv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2dv", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoord2(TextureUnit target, double* v)
    {
      GL.Delegates.glMultiTexCoord2dv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2f", Version = "1.3")]
    public static void MultiTexCoord2(TextureUnit target, float s, float t)
    {
      GL.Delegates.glMultiTexCoord2f(target, s, t);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2fv", Version = "1.3")]
    public static unsafe void MultiTexCoord2(TextureUnit target, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glMultiTexCoord2fv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2fv", Version = "1.3")]
    public static unsafe void MultiTexCoord2(TextureUnit target, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glMultiTexCoord2fv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2fv", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoord2(TextureUnit target, float* v)
    {
      GL.Delegates.glMultiTexCoord2fv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2i", Version = "1.3")]
    public static void MultiTexCoord2(TextureUnit target, int s, int t)
    {
      GL.Delegates.glMultiTexCoord2i(target, s, t);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2iv", Version = "1.3")]
    public static unsafe void MultiTexCoord2(TextureUnit target, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glMultiTexCoord2iv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2iv", Version = "1.3")]
    public static unsafe void MultiTexCoord2(TextureUnit target, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glMultiTexCoord2iv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2iv", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoord2(TextureUnit target, int* v)
    {
      GL.Delegates.glMultiTexCoord2iv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2s", Version = "1.3")]
    public static void MultiTexCoord2(TextureUnit target, short s, short t)
    {
      GL.Delegates.glMultiTexCoord2s(target, s, t);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2sv", Version = "1.3")]
    public static unsafe void MultiTexCoord2(TextureUnit target, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glMultiTexCoord2sv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2sv", Version = "1.3")]
    public static unsafe void MultiTexCoord2(TextureUnit target, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glMultiTexCoord2sv(target, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord2sv", Version = "1.3")]
    public static unsafe void MultiTexCoord2(TextureUnit target, short* v)
    {
      GL.Delegates.glMultiTexCoord2sv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3d", Version = "1.3")]
    public static void MultiTexCoord3(TextureUnit target, double s, double t, double r)
    {
      GL.Delegates.glMultiTexCoord3d(target, s, t, r);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3dv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glMultiTexCoord3dv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3dv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glMultiTexCoord3dv(target, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3dv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, double* v)
    {
      GL.Delegates.glMultiTexCoord3dv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3f", Version = "1.3")]
    public static void MultiTexCoord3(TextureUnit target, float s, float t, float r)
    {
      GL.Delegates.glMultiTexCoord3f(target, s, t, r);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3fv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glMultiTexCoord3fv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3fv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glMultiTexCoord3fv(target, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3fv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, float* v)
    {
      GL.Delegates.glMultiTexCoord3fv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3i", Version = "1.3")]
    public static void MultiTexCoord3(TextureUnit target, int s, int t, int r)
    {
      GL.Delegates.glMultiTexCoord3i(target, s, t, r);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3iv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glMultiTexCoord3iv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3iv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glMultiTexCoord3iv(target, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3iv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, int* v)
    {
      GL.Delegates.glMultiTexCoord3iv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3s", Version = "1.3")]
    public static void MultiTexCoord3(TextureUnit target, short s, short t, short r)
    {
      GL.Delegates.glMultiTexCoord3s(target, s, t, r);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3sv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glMultiTexCoord3sv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3sv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glMultiTexCoord3sv(target, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord3sv", Version = "1.3")]
    public static unsafe void MultiTexCoord3(TextureUnit target, short* v)
    {
      GL.Delegates.glMultiTexCoord3sv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4d", Version = "1.3")]
    public static void MultiTexCoord4(TextureUnit target, double s, double t, double r, double q)
    {
      GL.Delegates.glMultiTexCoord4d(target, s, t, r, q);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4dv", Version = "1.3")]
    public static unsafe void MultiTexCoord4(TextureUnit target, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glMultiTexCoord4dv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4dv", Version = "1.3")]
    public static unsafe void MultiTexCoord4(TextureUnit target, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glMultiTexCoord4dv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4dv", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoord4(TextureUnit target, double* v)
    {
      GL.Delegates.glMultiTexCoord4dv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4f", Version = "1.3")]
    public static void MultiTexCoord4(TextureUnit target, float s, float t, float r, float q)
    {
      GL.Delegates.glMultiTexCoord4f(target, s, t, r, q);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4fv", Version = "1.3")]
    public static unsafe void MultiTexCoord4(TextureUnit target, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glMultiTexCoord4fv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4fv", Version = "1.3")]
    public static unsafe void MultiTexCoord4(TextureUnit target, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glMultiTexCoord4fv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4fv", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoord4(TextureUnit target, float* v)
    {
      GL.Delegates.glMultiTexCoord4fv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4i", Version = "1.3")]
    public static void MultiTexCoord4(TextureUnit target, int s, int t, int r, int q)
    {
      GL.Delegates.glMultiTexCoord4i(target, s, t, r, q);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4iv", Version = "1.3")]
    public static unsafe void MultiTexCoord4(TextureUnit target, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glMultiTexCoord4iv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4iv", Version = "1.3")]
    public static unsafe void MultiTexCoord4(TextureUnit target, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glMultiTexCoord4iv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4iv", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoord4(TextureUnit target, int* v)
    {
      GL.Delegates.glMultiTexCoord4iv(target, v);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4s", Version = "1.3")]
    public static void MultiTexCoord4(TextureUnit target, short s, short t, short r, short q)
    {
      GL.Delegates.glMultiTexCoord4s(target, s, t, r, q);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4sv", Version = "1.3")]
    public static unsafe void MultiTexCoord4(TextureUnit target, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glMultiTexCoord4sv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4sv", Version = "1.3")]
    public static unsafe void MultiTexCoord4(TextureUnit target, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glMultiTexCoord4sv(target, v1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultiTexCoord4sv", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoord4(TextureUnit target, short* v)
    {
      GL.Delegates.glMultiTexCoord4sv(target, v);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP1ui", Version = "1.2")]
    public static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, int coords)
    {
      GL.Delegates.glMultiTexCoordP1ui(texture, type, (uint) coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP1ui", Version = "1.2")]
    [CLSCompliant(false)]
    public static void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, uint coords)
    {
      GL.Delegates.glMultiTexCoordP1ui(texture, type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP1uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, int* coords)
    {
      GL.Delegates.glMultiTexCoordP1uiv(texture, type, (uint*) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP1uiv", Version = "1.2")]
    public static unsafe void MultiTexCoordP1(TextureUnit texture, PackedPointerType type, uint* coords)
    {
      GL.Delegates.glMultiTexCoordP1uiv(texture, type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP2ui", Version = "1.2")]
    public static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, int coords)
    {
      GL.Delegates.glMultiTexCoordP2ui(texture, type, (uint) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP2ui", Version = "1.2")]
    public static void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, uint coords)
    {
      GL.Delegates.glMultiTexCoordP2ui(texture, type, coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP2uiv", Version = "1.2")]
    public static unsafe void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, int* coords)
    {
      GL.Delegates.glMultiTexCoordP2uiv(texture, type, (uint*) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP2uiv", Version = "1.2")]
    public static unsafe void MultiTexCoordP2(TextureUnit texture, PackedPointerType type, uint* coords)
    {
      GL.Delegates.glMultiTexCoordP2uiv(texture, type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP3ui", Version = "1.2")]
    public static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, int coords)
    {
      GL.Delegates.glMultiTexCoordP3ui(texture, type, (uint) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP3ui", Version = "1.2")]
    public static void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, uint coords)
    {
      GL.Delegates.glMultiTexCoordP3ui(texture, type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP3uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, int* coords)
    {
      GL.Delegates.glMultiTexCoordP3uiv(texture, type, (uint*) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP3uiv", Version = "1.2")]
    public static unsafe void MultiTexCoordP3(TextureUnit texture, PackedPointerType type, uint* coords)
    {
      GL.Delegates.glMultiTexCoordP3uiv(texture, type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP4ui", Version = "1.2")]
    public static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, int coords)
    {
      GL.Delegates.glMultiTexCoordP4ui(texture, type, (uint) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP4ui", Version = "1.2")]
    public static void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, uint coords)
    {
      GL.Delegates.glMultiTexCoordP4ui(texture, type, coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP4uiv", Version = "1.2")]
    public static unsafe void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, int* coords)
    {
      GL.Delegates.glMultiTexCoordP4uiv(texture, type, (uint*) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glMultiTexCoordP4uiv", Version = "1.2")]
    public static unsafe void MultiTexCoordP4(TextureUnit texture, PackedPointerType type, uint* coords)
    {
      GL.Delegates.glMultiTexCoordP4uiv(texture, type, coords);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMultMatrixd", Version = "1.0")]
    public static unsafe void MultMatrix(double[] m)
    {
      fixed (double* m1 = m)
        GL.Delegates.glMultMatrixd(m1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMultMatrixd", Version = "1.0")]
    public static unsafe void MultMatrix(ref double m)
    {
      fixed (double* m1 = &m)
        GL.Delegates.glMultMatrixd(m1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMultMatrixd", Version = "1.0")]
    public static unsafe void MultMatrix(double* m)
    {
      GL.Delegates.glMultMatrixd(m);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMultMatrixf", Version = "1.0")]
    public static unsafe void MultMatrix(float[] m)
    {
      fixed (float* m1 = m)
        GL.Delegates.glMultMatrixf(m1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMultMatrixf", Version = "1.0")]
    public static unsafe void MultMatrix(ref float m)
    {
      fixed (float* m1 = &m)
        GL.Delegates.glMultMatrixf(m1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glMultMatrixf", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void MultMatrix(float* m)
    {
      GL.Delegates.glMultMatrixf(m);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultTransposeMatrixd", Version = "1.3")]
    public static unsafe void MultTransposeMatrix(double[] m)
    {
      fixed (double* m1 = m)
        GL.Delegates.glMultTransposeMatrixd(m1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultTransposeMatrixd", Version = "1.3")]
    public static unsafe void MultTransposeMatrix(ref double m)
    {
      fixed (double* m1 = &m)
        GL.Delegates.glMultTransposeMatrixd(m1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultTransposeMatrixd", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultTransposeMatrix(double* m)
    {
      GL.Delegates.glMultTransposeMatrixd(m);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultTransposeMatrixf", Version = "1.3")]
    public static unsafe void MultTransposeMatrix(float[] m)
    {
      fixed (float* m1 = m)
        GL.Delegates.glMultTransposeMatrixf(m1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultTransposeMatrixf", Version = "1.3")]
    public static unsafe void MultTransposeMatrix(ref float m)
    {
      fixed (float* m1 = &m)
        GL.Delegates.glMultTransposeMatrixf(m1);
    }

    [AutoGenerated(Category = "VERSION_1_3_DEPRECATED", EntryPoint = "glMultTransposeMatrixf", Version = "1.3")]
    [CLSCompliant(false)]
    public static unsafe void MultTransposeMatrix(float* m)
    {
      GL.Delegates.glMultTransposeMatrixf(m);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNewList", Version = "1.0")]
    public static void NewList(int list, ListMode mode)
    {
      GL.Delegates.glNewList((uint) list, mode);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNewList", Version = "1.0")]
    public static void NewList(uint list, ListMode mode)
    {
      GL.Delegates.glNewList(list, mode);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3b", Version = "1.0")]
    public static void Normal3(byte nx, byte ny, byte nz)
    {
      GL.Delegates.glNormal3b((sbyte) nx, (sbyte) ny, (sbyte) nz);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3b", Version = "1.0")]
    [CLSCompliant(false)]
    public static void Normal3(sbyte nx, sbyte ny, sbyte nz)
    {
      GL.Delegates.glNormal3b(nx, ny, nz);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3bv", Version = "1.0")]
    public static unsafe void Normal3(byte[] v)
    {
      fixed (byte* numPtr = v)
        GL.Delegates.glNormal3bv((sbyte*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3bv", Version = "1.0")]
    public static unsafe void Normal3(ref byte v)
    {
      fixed (byte* numPtr = &v)
        GL.Delegates.glNormal3bv((sbyte*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3bv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Normal3(byte* v)
    {
      GL.Delegates.glNormal3bv((sbyte*) v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3bv", Version = "1.0")]
    public static unsafe void Normal3(sbyte[] v)
    {
      fixed (sbyte* v1 = v)
        GL.Delegates.glNormal3bv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3bv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Normal3(ref sbyte v)
    {
      fixed (sbyte* v1 = &v)
        GL.Delegates.glNormal3bv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3bv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Normal3(sbyte* v)
    {
      GL.Delegates.glNormal3bv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3d", Version = "1.0")]
    public static void Normal3(double nx, double ny, double nz)
    {
      GL.Delegates.glNormal3d(nx, ny, nz);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3dv", Version = "1.0")]
    public static unsafe void Normal3(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glNormal3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3dv", Version = "1.0")]
    public static unsafe void Normal3(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glNormal3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3dv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Normal3(double* v)
    {
      GL.Delegates.glNormal3dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3f", Version = "1.0")]
    public static void Normal3(float nx, float ny, float nz)
    {
      GL.Delegates.glNormal3f(nx, ny, nz);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3fv", Version = "1.0")]
    public static unsafe void Normal3(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glNormal3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3fv", Version = "1.0")]
    public static unsafe void Normal3(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glNormal3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3fv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Normal3(float* v)
    {
      GL.Delegates.glNormal3fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3i", Version = "1.0")]
    public static void Normal3(int nx, int ny, int nz)
    {
      GL.Delegates.glNormal3i(nx, ny, nz);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3iv", Version = "1.0")]
    public static unsafe void Normal3(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glNormal3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3iv", Version = "1.0")]
    public static unsafe void Normal3(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glNormal3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Normal3(int* v)
    {
      GL.Delegates.glNormal3iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3s", Version = "1.0")]
    public static void Normal3(short nx, short ny, short nz)
    {
      GL.Delegates.glNormal3s(nx, ny, nz);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3sv", Version = "1.0")]
    public static unsafe void Normal3(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glNormal3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3sv", Version = "1.0")]
    public static unsafe void Normal3(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glNormal3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glNormal3sv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Normal3(short* v)
    {
      GL.Delegates.glNormal3sv(v);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glNormalP3ui", Version = "1.2")]
    public static void NormalP3(PackedPointerType type, int coords)
    {
      GL.Delegates.glNormalP3ui(type, (uint) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glNormalP3ui", Version = "1.2")]
    public static void NormalP3(PackedPointerType type, uint coords)
    {
      GL.Delegates.glNormalP3ui(type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glNormalP3uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void NormalP3(PackedPointerType type, int* coords)
    {
      GL.Delegates.glNormalP3uiv(type, (uint*) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glNormalP3uiv", Version = "1.2")]
    public static unsafe void NormalP3(PackedPointerType type, uint* coords)
    {
      GL.Delegates.glNormalP3uiv(type, coords);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer(NormalPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glNormalPointer(type, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer<T2>(NormalPointerType type, int stride, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer<T2>(NormalPointerType type, int stride, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer<T2>(NormalPointerType type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer<T2>(NormalPointerType type, int stride, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glOrtho", Version = "1.0")]
    public static void Ortho(double left, double right, double bottom, double top, double zNear, double zFar)
    {
      GL.Delegates.glOrtho(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPassThrough", Version = "1.0")]
    public static void PassThrough(float token)
    {
      GL.Delegates.glPassThrough(token);
    }

    [AutoGenerated(Category = "ARB_tessellation_shader", EntryPoint = "glPatchParameterfv", Version = "1.2")]
    public static unsafe void PatchParameter(PatchParameterFloat pname, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glPatchParameterfv(pname, values1);
    }

    [AutoGenerated(Category = "ARB_tessellation_shader", EntryPoint = "glPatchParameterfv", Version = "1.2")]
    public static unsafe void PatchParameter(PatchParameterFloat pname, ref float values)
    {
      fixed (float* values1 = &values)
        GL.Delegates.glPatchParameterfv(pname, values1);
    }

    [AutoGenerated(Category = "ARB_tessellation_shader", EntryPoint = "glPatchParameterfv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void PatchParameter(PatchParameterFloat pname, float* values)
    {
      GL.Delegates.glPatchParameterfv(pname, values);
    }

    [AutoGenerated(Category = "ARB_tessellation_shader", EntryPoint = "glPatchParameteri", Version = "1.2")]
    public static void PatchParameter(PatchParameterInt pname, int value)
    {
      GL.Delegates.glPatchParameteri(pname, value);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glPauseTransformFeedback", Version = "1.2")]
    public static void PauseTransformFeedback()
    {
      GL.Delegates.glPauseTransformFeedback();
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapfv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glPixelMapfv(map, mapsize, values1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapfv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, ref float values)
    {
      fixed (float* values1 = &values)
        GL.Delegates.glPixelMapfv(map, mapsize, values1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapfv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void PixelMap(PixelMap map, int mapsize, float* values)
    {
      GL.Delegates.glPixelMapfv(map, mapsize, values);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapuiv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, int[] values)
    {
      fixed (int* numPtr = values)
        GL.Delegates.glPixelMapuiv(map, mapsize, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapuiv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, ref int values)
    {
      fixed (int* numPtr = &values)
        GL.Delegates.glPixelMapuiv(map, mapsize, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapuiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void PixelMap(PixelMap map, int mapsize, int* values)
    {
      GL.Delegates.glPixelMapuiv(map, mapsize, (uint*) values);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapuiv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, uint[] values)
    {
      fixed (uint* values1 = values)
        GL.Delegates.glPixelMapuiv(map, mapsize, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapuiv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, ref uint values)
    {
      fixed (uint* values1 = &values)
        GL.Delegates.glPixelMapuiv(map, mapsize, values1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapuiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void PixelMap(PixelMap map, int mapsize, uint* values)
    {
      GL.Delegates.glPixelMapuiv(map, mapsize, values);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapusv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, short[] values)
    {
      fixed (short* numPtr = values)
        GL.Delegates.glPixelMapusv(map, mapsize, (ushort*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapusv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, ref short values)
    {
      fixed (short* numPtr = &values)
        GL.Delegates.glPixelMapusv(map, mapsize, (ushort*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapusv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, short* values)
    {
      GL.Delegates.glPixelMapusv(map, mapsize, (ushort*) values);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapusv", Version = "1.0")]
    public static unsafe void PixelMap(PixelMap map, int mapsize, ushort[] values)
    {
      fixed (ushort* values1 = values)
        GL.Delegates.glPixelMapusv(map, mapsize, values1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapusv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void PixelMap(PixelMap map, int mapsize, ref ushort values)
    {
      fixed (ushort* values1 = &values)
        GL.Delegates.glPixelMapusv(map, mapsize, values1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelMapusv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void PixelMap(PixelMap map, int mapsize, ushort* values)
    {
      GL.Delegates.glPixelMapusv(map, mapsize, values);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glPixelStoref", Version = "1.0")]
    public static void PixelStore(PixelStoreParameter pname, float param)
    {
      GL.Delegates.glPixelStoref(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glPixelStorei", Version = "1.0")]
    public static void PixelStore(PixelStoreParameter pname, int param)
    {
      GL.Delegates.glPixelStorei(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelTransferf", Version = "1.0")]
    public static void PixelTransfer(PixelTransferParameter pname, float param)
    {
      GL.Delegates.glPixelTransferf(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelTransferi", Version = "1.0")]
    public static void PixelTransfer(PixelTransferParameter pname, int param)
    {
      GL.Delegates.glPixelTransferi(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPixelZoom", Version = "1.0")]
    public static void PixelZoom(float xfactor, float yfactor)
    {
      GL.Delegates.glPixelZoom(xfactor, yfactor);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glPointParameterf", Version = "1.4")]
    public static void PointParameter(PointParameterName pname, float param)
    {
      GL.Delegates.glPointParameterf(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glPointParameterfv", Version = "1.4")]
    public static unsafe void PointParameter(PointParameterName pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glPointParameterfv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glPointParameterfv", Version = "1.4")]
    public static unsafe void PointParameter(PointParameterName pname, float* @params)
    {
      GL.Delegates.glPointParameterfv(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glPointParameteri", Version = "1.4")]
    public static void PointParameter(PointParameterName pname, int param)
    {
      GL.Delegates.glPointParameteri(pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glPointParameteriv", Version = "1.4")]
    public static unsafe void PointParameter(PointParameterName pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glPointParameteriv(pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_4", EntryPoint = "glPointParameteriv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void PointParameter(PointParameterName pname, int* @params)
    {
      GL.Delegates.glPointParameteriv(pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glPointSize", Version = "1.0")]
    public static void PointSize(float size)
    {
      GL.Delegates.glPointSize(size);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glPolygonMode", Version = "1.0")]
    public static void PolygonMode(MaterialFace face, PolygonMode mode)
    {
      GL.Delegates.glPolygonMode(face, mode);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glPolygonOffset", Version = "1.1")]
    public static void PolygonOffset(float factor, float units)
    {
      GL.Delegates.glPolygonOffset(factor, units);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPolygonStipple", Version = "1.0")]
    public static unsafe void PolygonStipple(byte[] mask)
    {
      fixed (byte* mask1 = mask)
        GL.Delegates.glPolygonStipple(mask1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPolygonStipple", Version = "1.0")]
    public static unsafe void PolygonStipple(ref byte mask)
    {
      fixed (byte* mask1 = &mask)
        GL.Delegates.glPolygonStipple(mask1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPolygonStipple", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void PolygonStipple(byte* mask)
    {
      GL.Delegates.glPolygonStipple(mask);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPopAttrib", Version = "1.0")]
    public static void PopAttrib()
    {
      GL.Delegates.glPopAttrib();
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glPopClientAttrib", Version = "1.1")]
    public static void PopClientAttrib()
    {
      GL.Delegates.glPopClientAttrib();
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPopMatrix", Version = "1.0")]
    public static void PopMatrix()
    {
      GL.Delegates.glPopMatrix();
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPopName", Version = "1.0")]
    public static void PopName()
    {
      GL.Delegates.glPopName();
    }

    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glPrimitiveRestartIndex", Version = "3.1")]
    public static void PrimitiveRestartIndex(int index)
    {
      GL.Delegates.glPrimitiveRestartIndex((uint) index);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glPrimitiveRestartIndex", Version = "3.1")]
    public static void PrimitiveRestartIndex(uint index)
    {
      GL.Delegates.glPrimitiveRestartIndex(index);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glPrioritizeTextures", Version = "1.1")]
    public static unsafe void PrioritizeTextures(int n, int[] textures, float[] priorities)
    {
      fixed (int* numPtr = textures)
        fixed (float* priorities1 = priorities)
          GL.Delegates.glPrioritizeTextures(n, (uint*) numPtr, priorities1);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glPrioritizeTextures", Version = "1.1")]
    public static unsafe void PrioritizeTextures(int n, ref int textures, ref float priorities)
    {
      fixed (int* numPtr = &textures)
        fixed (float* priorities1 = &priorities)
          GL.Delegates.glPrioritizeTextures(n, (uint*) numPtr, priorities1);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glPrioritizeTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void PrioritizeTextures(int n, int* textures, float* priorities)
    {
      GL.Delegates.glPrioritizeTextures(n, (uint*) textures, priorities);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glPrioritizeTextures", Version = "1.1")]
    public static unsafe void PrioritizeTextures(int n, uint[] textures, float[] priorities)
    {
      fixed (uint* textures1 = textures)
        fixed (float* priorities1 = priorities)
          GL.Delegates.glPrioritizeTextures(n, textures1, priorities1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glPrioritizeTextures", Version = "1.1")]
    public static unsafe void PrioritizeTextures(int n, ref uint textures, ref float priorities)
    {
      fixed (uint* textures1 = &textures)
        fixed (float* priorities1 = &priorities)
          GL.Delegates.glPrioritizeTextures(n, textures1, priorities1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glPrioritizeTextures", Version = "1.1")]
    public static unsafe void PrioritizeTextures(int n, uint* textures, float* priorities)
    {
      GL.Delegates.glPrioritizeTextures(n, textures, priorities);
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    public static void ProgramBinary(int program, BinaryFormat binaryFormat, IntPtr binary, int length)
    {
      GL.Delegates.glProgramBinary((uint) program, binaryFormat, binary, length);
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    public static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In, Out] T2[] binary, int length) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glProgramBinary((uint) program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    public static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In, Out] T2[,] binary, int length) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glProgramBinary((uint) program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    public static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In, Out] T2[,,] binary, int length) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glProgramBinary((uint) program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    public static void ProgramBinary<T2>(int program, BinaryFormat binaryFormat, [In, Out] ref T2 binary, int length) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glProgramBinary((uint) program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
        binary = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    public static void ProgramBinary(uint program, BinaryFormat binaryFormat, IntPtr binary, int length)
    {
      GL.Delegates.glProgramBinary(program, binaryFormat, binary, length);
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In, Out] T2[] binary, int length) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glProgramBinary(program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    public static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In, Out] T2[,] binary, int length) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glProgramBinary(program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    public static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In, Out] T2[,,] binary, int length) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glProgramBinary(program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ProgramBinary<T2>(uint program, BinaryFormat binaryFormat, [In, Out] ref T2 binary, int length) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glProgramBinary(program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
        binary = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramParameteri", Version = "3.0")]
    public static void ProgramParameter(int program, AssemblyProgramParameterArb pname, int value)
    {
      GL.Delegates.glProgramParameteri((uint) program, pname, value);
    }

    [AutoGenerated(Category = "ARB_get_program_binary", EntryPoint = "glProgramParameteri", Version = "3.0")]
    [CLSCompliant(false)]
    public static void ProgramParameter(uint program, AssemblyProgramParameterArb pname, int value)
    {
      GL.Delegates.glProgramParameteri(program, pname, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1d", Version = "4.1")]
    public static void ProgramUniform1(int program, int location, double v0)
    {
      GL.Delegates.glProgramUniform1d((uint) program, location, v0);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1d", Version = "4.1")]
    public static void ProgramUniform1(uint program, int location, double v0)
    {
      GL.Delegates.glProgramUniform1d(program, location, v0);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1dv", Version = "4.1")]
    public static unsafe void ProgramUniform1(int program, int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniform1dv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform1(int program, int location, int count, double* value)
    {
      GL.Delegates.glProgramUniform1dv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform1(uint program, int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniform1dv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1dv", Version = "4.1")]
    public static unsafe void ProgramUniform1(uint program, int location, int count, double* value)
    {
      GL.Delegates.glProgramUniform1dv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1f", Version = "4.1")]
    public static void ProgramUniform1(int program, int location, float v0)
    {
      GL.Delegates.glProgramUniform1f((uint) program, location, v0);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1f", Version = "4.1")]
    public static void ProgramUniform1(uint program, int location, float v0)
    {
      GL.Delegates.glProgramUniform1f(program, location, v0);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1fv", Version = "4.1")]
    public static unsafe void ProgramUniform1(int program, int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniform1fv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform1(int program, int location, int count, float* value)
    {
      GL.Delegates.glProgramUniform1fv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform1(uint program, int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniform1fv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1fv", Version = "4.1")]
    public static unsafe void ProgramUniform1(uint program, int location, int count, float* value)
    {
      GL.Delegates.glProgramUniform1fv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1i", Version = "4.1")]
    public static void ProgramUniform1(int program, int location, int v0)
    {
      GL.Delegates.glProgramUniform1i((uint) program, location, v0);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1i", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ProgramUniform1(uint program, int location, int v0)
    {
      GL.Delegates.glProgramUniform1i(program, location, v0);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1iv", Version = "4.1")]
    public static unsafe void ProgramUniform1(int program, int location, int count, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glProgramUniform1iv((uint) program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1iv", Version = "4.1")]
    public static unsafe void ProgramUniform1(int program, int location, int count, int* value)
    {
      GL.Delegates.glProgramUniform1iv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1iv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform1(uint program, int location, int count, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glProgramUniform1iv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1iv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform1(uint program, int location, int count, int* value)
    {
      GL.Delegates.glProgramUniform1iv(program, location, count, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1ui", Version = "4.1")]
    public static void ProgramUniform1(uint program, int location, uint v0)
    {
      GL.Delegates.glProgramUniform1ui(program, location, v0);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1uiv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform1(uint program, int location, int count, ref uint value)
    {
      fixed (uint* numPtr = &value)
        GL.Delegates.glProgramUniform1uiv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform1uiv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform1(uint program, int location, int count, uint* value)
    {
      GL.Delegates.glProgramUniform1uiv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2d", Version = "4.1")]
    public static void ProgramUniform2(int program, int location, double v0, double v1)
    {
      GL.Delegates.glProgramUniform2d((uint) program, location, v0, v1);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2d", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ProgramUniform2(uint program, int location, double v0, double v1)
    {
      GL.Delegates.glProgramUniform2d(program, location, v0, v1);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2dv", Version = "4.1")]
    public static unsafe void ProgramUniform2(int program, int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniform2dv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2dv", Version = "4.1")]
    public static unsafe void ProgramUniform2(int program, int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniform2dv((uint) program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2dv", Version = "4.1")]
    public static unsafe void ProgramUniform2(int program, int location, int count, double* value)
    {
      GL.Delegates.glProgramUniform2dv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(uint program, int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniform2dv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(uint program, int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniform2dv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(uint program, int location, int count, double* value)
    {
      GL.Delegates.glProgramUniform2dv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2f", Version = "4.1")]
    public static void ProgramUniform2(int program, int location, float v0, float v1)
    {
      GL.Delegates.glProgramUniform2f((uint) program, location, v0, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2f", Version = "4.1")]
    public static void ProgramUniform2(uint program, int location, float v0, float v1)
    {
      GL.Delegates.glProgramUniform2f(program, location, v0, v1);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2fv", Version = "4.1")]
    public static unsafe void ProgramUniform2(int program, int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniform2fv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2fv", Version = "4.1")]
    public static unsafe void ProgramUniform2(int program, int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniform2fv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(int program, int location, int count, float* value)
    {
      GL.Delegates.glProgramUniform2fv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(uint program, int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniform2fv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(uint program, int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniform2fv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(uint program, int location, int count, float* value)
    {
      GL.Delegates.glProgramUniform2fv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2i", Version = "4.1")]
    public static void ProgramUniform2(int program, int location, int v0, int v1)
    {
      GL.Delegates.glProgramUniform2i((uint) program, location, v0, v1);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2i", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ProgramUniform2(uint program, int location, int v0, int v1)
    {
      GL.Delegates.glProgramUniform2i(program, location, v0, v1);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2iv", Version = "4.1")]
    public static unsafe void ProgramUniform2(int program, int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glProgramUniform2iv((uint) program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2iv", Version = "4.1")]
    public static unsafe void ProgramUniform2(int program, int location, int count, int* value)
    {
      GL.Delegates.glProgramUniform2iv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2iv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(uint program, int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glProgramUniform2iv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2iv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(uint program, int location, int count, int* value)
    {
      GL.Delegates.glProgramUniform2iv(program, location, count, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2ui", Version = "4.1")]
    public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
    {
      GL.Delegates.glProgramUniform2ui(program, location, v0, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2uiv", Version = "4.1")]
    public static unsafe void ProgramUniform2(uint program, int location, int count, uint[] value)
    {
      fixed (uint* numPtr = value)
        GL.Delegates.glProgramUniform2uiv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2uiv", Version = "4.1")]
    public static unsafe void ProgramUniform2(uint program, int location, int count, ref uint value)
    {
      fixed (uint* numPtr = &value)
        GL.Delegates.glProgramUniform2uiv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform2uiv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform2(uint program, int location, int count, uint* value)
    {
      GL.Delegates.glProgramUniform2uiv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3d", Version = "4.1")]
    public static void ProgramUniform3(int program, int location, double v0, double v1, double v2)
    {
      GL.Delegates.glProgramUniform3d((uint) program, location, v0, v1, v2);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3d", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ProgramUniform3(uint program, int location, double v0, double v1, double v2)
    {
      GL.Delegates.glProgramUniform3d(program, location, v0, v1, v2);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3dv", Version = "4.1")]
    public static unsafe void ProgramUniform3(int program, int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniform3dv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3dv", Version = "4.1")]
    public static unsafe void ProgramUniform3(int program, int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniform3dv((uint) program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3dv", Version = "4.1")]
    public static unsafe void ProgramUniform3(int program, int location, int count, double* value)
    {
      GL.Delegates.glProgramUniform3dv((uint) program, location, count, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3dv", Version = "4.1")]
    public static unsafe void ProgramUniform3(uint program, int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniform3dv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3dv", Version = "4.1")]
    public static unsafe void ProgramUniform3(uint program, int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniform3dv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3dv", Version = "4.1")]
    public static unsafe void ProgramUniform3(uint program, int location, int count, double* value)
    {
      GL.Delegates.glProgramUniform3dv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3f", Version = "4.1")]
    public static void ProgramUniform3(int program, int location, float v0, float v1, float v2)
    {
      GL.Delegates.glProgramUniform3f((uint) program, location, v0, v1, v2);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3f", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
    {
      GL.Delegates.glProgramUniform3f(program, location, v0, v1, v2);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3fv", Version = "4.1")]
    public static unsafe void ProgramUniform3(int program, int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniform3fv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3fv", Version = "4.1")]
    public static unsafe void ProgramUniform3(int program, int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniform3fv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform3(int program, int location, int count, float* value)
    {
      GL.Delegates.glProgramUniform3fv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform3(uint program, int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniform3fv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform3(uint program, int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniform3fv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform3(uint program, int location, int count, float* value)
    {
      GL.Delegates.glProgramUniform3fv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3i", Version = "4.1")]
    public static void ProgramUniform3(int program, int location, int v0, int v1, int v2)
    {
      GL.Delegates.glProgramUniform3i((uint) program, location, v0, v1, v2);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3i", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
    {
      GL.Delegates.glProgramUniform3i(program, location, v0, v1, v2);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3iv", Version = "4.1")]
    public static unsafe void ProgramUniform3(int program, int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glProgramUniform3iv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3iv", Version = "4.1")]
    public static unsafe void ProgramUniform3(int program, int location, int count, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glProgramUniform3iv((uint) program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3iv", Version = "4.1")]
    public static unsafe void ProgramUniform3(int program, int location, int count, int* value)
    {
      GL.Delegates.glProgramUniform3iv((uint) program, location, count, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3iv", Version = "4.1")]
    public static unsafe void ProgramUniform3(uint program, int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glProgramUniform3iv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3iv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform3(uint program, int location, int count, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glProgramUniform3iv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3iv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform3(uint program, int location, int count, int* value)
    {
      GL.Delegates.glProgramUniform3iv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3ui", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
    {
      GL.Delegates.glProgramUniform3ui(program, location, v0, v1, v2);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3uiv", Version = "4.1")]
    public static unsafe void ProgramUniform3(uint program, int location, int count, uint[] value)
    {
      fixed (uint* numPtr = value)
        GL.Delegates.glProgramUniform3uiv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3uiv", Version = "4.1")]
    public static unsafe void ProgramUniform3(uint program, int location, int count, ref uint value)
    {
      fixed (uint* numPtr = &value)
        GL.Delegates.glProgramUniform3uiv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform3uiv", Version = "4.1")]
    public static unsafe void ProgramUniform3(uint program, int location, int count, uint* value)
    {
      GL.Delegates.glProgramUniform3uiv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4d", Version = "4.1")]
    public static void ProgramUniform4(int program, int location, double v0, double v1, double v2, double v3)
    {
      GL.Delegates.glProgramUniform4d((uint) program, location, v0, v1, v2, v3);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4d", Version = "4.1")]
    public static void ProgramUniform4(uint program, int location, double v0, double v1, double v2, double v3)
    {
      GL.Delegates.glProgramUniform4d(program, location, v0, v1, v2, v3);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4dv", Version = "4.1")]
    public static unsafe void ProgramUniform4(int program, int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniform4dv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4dv", Version = "4.1")]
    public static unsafe void ProgramUniform4(int program, int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniform4dv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform4(int program, int location, int count, double* value)
    {
      GL.Delegates.glProgramUniform4dv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform4(uint program, int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniform4dv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform4(uint program, int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniform4dv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform4(uint program, int location, int count, double* value)
    {
      GL.Delegates.glProgramUniform4dv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4f", Version = "4.1")]
    public static void ProgramUniform4(int program, int location, float v0, float v1, float v2, float v3)
    {
      GL.Delegates.glProgramUniform4f((uint) program, location, v0, v1, v2, v3);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4f", Version = "4.1")]
    public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
    {
      GL.Delegates.glProgramUniform4f(program, location, v0, v1, v2, v3);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4fv", Version = "4.1")]
    public static unsafe void ProgramUniform4(int program, int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniform4fv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4fv", Version = "4.1")]
    public static unsafe void ProgramUniform4(int program, int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniform4fv((uint) program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4fv", Version = "4.1")]
    public static unsafe void ProgramUniform4(int program, int location, int count, float* value)
    {
      GL.Delegates.glProgramUniform4fv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform4(uint program, int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniform4fv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4fv", Version = "4.1")]
    public static unsafe void ProgramUniform4(uint program, int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniform4fv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform4(uint program, int location, int count, float* value)
    {
      GL.Delegates.glProgramUniform4fv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4i", Version = "4.1")]
    public static void ProgramUniform4(int program, int location, int v0, int v1, int v2, int v3)
    {
      GL.Delegates.glProgramUniform4i((uint) program, location, v0, v1, v2, v3);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4i", Version = "4.1")]
    public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
    {
      GL.Delegates.glProgramUniform4i(program, location, v0, v1, v2, v3);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4iv", Version = "4.1")]
    public static unsafe void ProgramUniform4(int program, int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glProgramUniform4iv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4iv", Version = "4.1")]
    public static unsafe void ProgramUniform4(int program, int location, int count, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glProgramUniform4iv((uint) program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4iv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform4(int program, int location, int count, int* value)
    {
      GL.Delegates.glProgramUniform4iv((uint) program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4iv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform4(uint program, int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glProgramUniform4iv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4iv", Version = "4.1")]
    public static unsafe void ProgramUniform4(uint program, int location, int count, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glProgramUniform4iv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4iv", Version = "4.1")]
    public static unsafe void ProgramUniform4(uint program, int location, int count, int* value)
    {
      GL.Delegates.glProgramUniform4iv(program, location, count, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4ui", Version = "4.1")]
    public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
    {
      GL.Delegates.glProgramUniform4ui(program, location, v0, v1, v2, v3);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4uiv", Version = "4.1")]
    public static unsafe void ProgramUniform4(uint program, int location, int count, uint[] value)
    {
      fixed (uint* numPtr = value)
        GL.Delegates.glProgramUniform4uiv(program, location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4uiv", Version = "4.1")]
    public static unsafe void ProgramUniform4(uint program, int location, int count, ref uint value)
    {
      fixed (uint* numPtr = &value)
        GL.Delegates.glProgramUniform4uiv(program, location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniform4uiv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniform4(uint program, int location, int count, uint* value)
    {
      GL.Delegates.glProgramUniform4uiv(program, location, count, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2dv((uint) program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix2dv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2dv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix2dv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix2fv((uint) program, location, count, transpose, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2fv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix2fv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2x3dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2x3dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix2x3dv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2x3dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2x3dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2x3fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2x3fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix2x3fv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2x3fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2x3fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2x4dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2x4dv((uint) program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix2x4dv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2x4dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2x4dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2x4fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2x4fv((uint) program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix2x4fv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix2x4fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix2x4fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix2x4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix3dv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3dv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix3dv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3fv((uint) program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix3fv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3fv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix3fv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3x2dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3x2dv((uint) program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix3x2dv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3x2dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3x2dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3x2fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3x2fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix3x2fv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3x2fv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3x2fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3x4dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3x4dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix3x4dv((uint) program, location, count, transpose, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3x4dv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3x4dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3x4fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3x4fv((uint) program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix3x4fv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix3x4fv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix3x4fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix3x4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4dv((uint) program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix4dv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix4dv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix4fv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4fv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix4fv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4x2dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4x2dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix4x2dv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4x2dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4x2dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4x2fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4x2fv((uint) program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix4x2fv((uint) program, location, count, transpose, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4x2fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4x2fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x2fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4x3dv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4x3dv((uint) program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3dv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix4x3dv((uint) program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4x3dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4x3dv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4x3fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4x3fv((uint) program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix4x3fv((uint) program, location, count, transpose, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glProgramUniformMatrix4x3fv(program, location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3fv", Version = "4.1")]
    public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glProgramUniformMatrix4x3fv(program, location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glProgramUniformMatrix4x3fv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_provoking_vertex", EntryPoint = "glProvokingVertex", Version = "1.2")]
    public static void ProvokingVertex(ProvokingVertexMode mode)
    {
      GL.Delegates.glProvokingVertex(mode);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPushAttrib", Version = "1.0")]
    public static void PushAttrib(AttribMask mask)
    {
      GL.Delegates.glPushAttrib(mask);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glPushClientAttrib", Version = "1.1")]
    public static void PushClientAttrib(ClientAttribMask mask)
    {
      GL.Delegates.glPushClientAttrib(mask);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPushMatrix", Version = "1.0")]
    public static void PushMatrix()
    {
      GL.Delegates.glPushMatrix();
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPushName", Version = "1.0")]
    public static void PushName(int name)
    {
      GL.Delegates.glPushName((uint) name);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glPushName", Version = "1.0")]
    public static void PushName(uint name)
    {
      GL.Delegates.glPushName(name);
    }

    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glQueryCounter", Version = "1.2")]
    public static void QueryCounter(int id, QueryCounterTarget target)
    {
      GL.Delegates.glQueryCounter((uint) id, target);
    }

    [AutoGenerated(Category = "ARB_timer_query", EntryPoint = "glQueryCounter", Version = "1.2")]
    [CLSCompliant(false)]
    public static void QueryCounter(uint id, QueryCounterTarget target)
    {
      GL.Delegates.glQueryCounter(id, target);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2d", Version = "1.0")]
    public static void RasterPos2(double x, double y)
    {
      GL.Delegates.glRasterPos2d(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2dv", Version = "1.0")]
    public static unsafe void RasterPos2(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glRasterPos2dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2dv", Version = "1.0")]
    public static unsafe void RasterPos2(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glRasterPos2dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2dv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void RasterPos2(double* v)
    {
      GL.Delegates.glRasterPos2dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2f", Version = "1.0")]
    public static void RasterPos2(float x, float y)
    {
      GL.Delegates.glRasterPos2f(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2fv", Version = "1.0")]
    public static unsafe void RasterPos2(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glRasterPos2fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2fv", Version = "1.0")]
    public static unsafe void RasterPos2(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glRasterPos2fv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2fv", Version = "1.0")]
    public static unsafe void RasterPos2(float* v)
    {
      GL.Delegates.glRasterPos2fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2i", Version = "1.0")]
    public static void RasterPos2(int x, int y)
    {
      GL.Delegates.glRasterPos2i(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2iv", Version = "1.0")]
    public static unsafe void RasterPos2(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glRasterPos2iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2iv", Version = "1.0")]
    public static unsafe void RasterPos2(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glRasterPos2iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void RasterPos2(int* v)
    {
      GL.Delegates.glRasterPos2iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2s", Version = "1.0")]
    public static void RasterPos2(short x, short y)
    {
      GL.Delegates.glRasterPos2s(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2sv", Version = "1.0")]
    public static unsafe void RasterPos2(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glRasterPos2sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2sv", Version = "1.0")]
    public static unsafe void RasterPos2(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glRasterPos2sv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos2sv", Version = "1.0")]
    public static unsafe void RasterPos2(short* v)
    {
      GL.Delegates.glRasterPos2sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3d", Version = "1.0")]
    public static void RasterPos3(double x, double y, double z)
    {
      GL.Delegates.glRasterPos3d(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3dv", Version = "1.0")]
    public static unsafe void RasterPos3(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glRasterPos3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3dv", Version = "1.0")]
    public static unsafe void RasterPos3(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glRasterPos3dv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3dv", Version = "1.0")]
    public static unsafe void RasterPos3(double* v)
    {
      GL.Delegates.glRasterPos3dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3f", Version = "1.0")]
    public static void RasterPos3(float x, float y, float z)
    {
      GL.Delegates.glRasterPos3f(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3fv", Version = "1.0")]
    public static unsafe void RasterPos3(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glRasterPos3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3fv", Version = "1.0")]
    public static unsafe void RasterPos3(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glRasterPos3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3fv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void RasterPos3(float* v)
    {
      GL.Delegates.glRasterPos3fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3i", Version = "1.0")]
    public static void RasterPos3(int x, int y, int z)
    {
      GL.Delegates.glRasterPos3i(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3iv", Version = "1.0")]
    public static unsafe void RasterPos3(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glRasterPos3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3iv", Version = "1.0")]
    public static unsafe void RasterPos3(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glRasterPos3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void RasterPos3(int* v)
    {
      GL.Delegates.glRasterPos3iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3s", Version = "1.0")]
    public static void RasterPos3(short x, short y, short z)
    {
      GL.Delegates.glRasterPos3s(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3sv", Version = "1.0")]
    public static unsafe void RasterPos3(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glRasterPos3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3sv", Version = "1.0")]
    public static unsafe void RasterPos3(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glRasterPos3sv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos3sv", Version = "1.0")]
    public static unsafe void RasterPos3(short* v)
    {
      GL.Delegates.glRasterPos3sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4d", Version = "1.0")]
    public static void RasterPos4(double x, double y, double z, double w)
    {
      GL.Delegates.glRasterPos4d(x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4dv", Version = "1.0")]
    public static unsafe void RasterPos4(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glRasterPos4dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4dv", Version = "1.0")]
    public static unsafe void RasterPos4(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glRasterPos4dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4dv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void RasterPos4(double* v)
    {
      GL.Delegates.glRasterPos4dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4f", Version = "1.0")]
    public static void RasterPos4(float x, float y, float z, float w)
    {
      GL.Delegates.glRasterPos4f(x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4fv", Version = "1.0")]
    public static unsafe void RasterPos4(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glRasterPos4fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4fv", Version = "1.0")]
    public static unsafe void RasterPos4(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glRasterPos4fv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4fv", Version = "1.0")]
    public static unsafe void RasterPos4(float* v)
    {
      GL.Delegates.glRasterPos4fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4i", Version = "1.0")]
    public static void RasterPos4(int x, int y, int z, int w)
    {
      GL.Delegates.glRasterPos4i(x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4iv", Version = "1.0")]
    public static unsafe void RasterPos4(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glRasterPos4iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4iv", Version = "1.0")]
    public static unsafe void RasterPos4(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glRasterPos4iv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4iv", Version = "1.0")]
    public static unsafe void RasterPos4(int* v)
    {
      GL.Delegates.glRasterPos4iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4s", Version = "1.0")]
    public static void RasterPos4(short x, short y, short z, short w)
    {
      GL.Delegates.glRasterPos4s(x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4sv", Version = "1.0")]
    public static unsafe void RasterPos4(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glRasterPos4sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4sv", Version = "1.0")]
    public static unsafe void RasterPos4(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glRasterPos4sv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRasterPos4sv", Version = "1.0")]
    public static unsafe void RasterPos4(short* v)
    {
      GL.Delegates.glRasterPos4sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glReadBuffer", Version = "1.0")]
    public static void ReadBuffer(ReadBufferMode mode)
    {
      GL.Delegates.glReadBuffer(mode);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, [Out] IntPtr pixels)
    {
      GL.Delegates.glReadPixels(x, y, width, height, format, type, pixels);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T6 pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T6) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectd", Version = "1.0")]
    public static void Rect(double x1, double y1, double x2, double y2)
    {
      GL.Delegates.glRectd(x1, y1, x2, y2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectdv", Version = "1.0")]
    public static unsafe void Rect(double[] v1, double[] v2)
    {
      fixed (double* v1_1 = v1)
        fixed (double* v2_1 = v2)
          GL.Delegates.glRectdv(v1_1, v2_1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectdv", Version = "1.0")]
    public static unsafe void Rect(ref double v1, ref double v2)
    {
      fixed (double* v1_1 = &v1)
        fixed (double* v2_1 = &v2)
          GL.Delegates.glRectdv(v1_1, v2_1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectdv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Rect(double* v1, double* v2)
    {
      GL.Delegates.glRectdv(v1, v2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectf", Version = "1.0")]
    public static void Rect(float x1, float y1, float x2, float y2)
    {
      GL.Delegates.glRectf(x1, y1, x2, y2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectfv", Version = "1.0")]
    public static unsafe void Rect(float[] v1, float[] v2)
    {
      fixed (float* v1_1 = v1)
        fixed (float* v2_1 = v2)
          GL.Delegates.glRectfv(v1_1, v2_1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectfv", Version = "1.0")]
    public static unsafe void Rect(ref float v1, ref float v2)
    {
      fixed (float* v1_1 = &v1)
        fixed (float* v2_1 = &v2)
          GL.Delegates.glRectfv(v1_1, v2_1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectfv", Version = "1.0")]
    public static unsafe void Rect(float* v1, float* v2)
    {
      GL.Delegates.glRectfv(v1, v2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRecti", Version = "1.0")]
    public static void Rect(int x1, int y1, int x2, int y2)
    {
      GL.Delegates.glRecti(x1, y1, x2, y2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectiv", Version = "1.0")]
    public static unsafe void Rect(int[] v1, int[] v2)
    {
      fixed (int* v1_1 = v1)
        fixed (int* v2_1 = v2)
          GL.Delegates.glRectiv(v1_1, v2_1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectiv", Version = "1.0")]
    public static unsafe void Rect(ref int v1, ref int v2)
    {
      fixed (int* v1_1 = &v1)
        fixed (int* v2_1 = &v2)
          GL.Delegates.glRectiv(v1_1, v2_1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectiv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Rect(int* v1, int* v2)
    {
      GL.Delegates.glRectiv(v1, v2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRects", Version = "1.0")]
    public static void Rects(short x1, short y1, short x2, short y2)
    {
      GL.Delegates.glRects(x1, y1, x2, y2);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectsv", Version = "1.0")]
    public static unsafe void Rect(short[] v1, short[] v2)
    {
      fixed (short* v1_1 = v1)
        fixed (short* v2_1 = v2)
          GL.Delegates.glRectsv(v1_1, v2_1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectsv", Version = "1.0")]
    public static unsafe void Rect(ref short v1, ref short v2)
    {
      fixed (short* v1_1 = &v1)
        fixed (short* v2_1 = &v2)
          GL.Delegates.glRectsv(v1_1, v2_1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRectsv", Version = "1.0")]
    public static unsafe void Rect(short* v1, short* v2)
    {
      GL.Delegates.glRectsv(v1, v2);
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glReleaseShaderCompiler", Version = "4.1")]
    public static void ReleaseShaderCompiler()
    {
      GL.Delegates.glReleaseShaderCompiler();
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glRenderbufferStorage", Version = "3.0")]
    public static void RenderbufferStorage(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height)
    {
      GL.Delegates.glRenderbufferStorage(target, internalformat, width, height);
    }

    [AutoGenerated(Category = "ARB_framebuffer_object", EntryPoint = "glRenderbufferStorageMultisample", Version = "3.0")]
    public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferStorage internalformat, int width, int height)
    {
      GL.Delegates.glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRenderMode", Version = "1.0")]
    public static int RenderMode(RenderingMode mode)
    {
      return GL.Delegates.glRenderMode(mode);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glResetHistogram", Version = "1.2")]
    public static void ResetHistogram(HistogramTarget target)
    {
      GL.Delegates.glResetHistogram(target);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glResetMinmax", Version = "1.2")]
    public static void ResetMinmax(MinmaxTarget target)
    {
      GL.Delegates.glResetMinmax(target);
    }

    [AutoGenerated(Category = "ARB_transform_feedback2", EntryPoint = "glResumeTransformFeedback", Version = "1.2")]
    public static void ResumeTransformFeedback()
    {
      GL.Delegates.glResumeTransformFeedback();
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRotated", Version = "1.0")]
    public static void Rotate(double angle, double x, double y, double z)
    {
      GL.Delegates.glRotated(angle, x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glRotatef", Version = "1.0")]
    public static void Rotate(float angle, float x, float y, float z)
    {
      GL.Delegates.glRotatef(angle, x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_3", EntryPoint = "glSampleCoverage", Version = "1.3")]
    public static void SampleCoverage(float value, bool invert)
    {
      GL.Delegates.glSampleCoverage(value, invert);
    }

    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glSampleMaski", Version = "1.2")]
    public static void SampleMask(int index, int mask)
    {
      GL.Delegates.glSampleMaski((uint) index, (uint) mask);
    }

    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glSampleMaski", Version = "1.2")]
    [CLSCompliant(false)]
    public static void SampleMask(uint index, uint mask)
    {
      GL.Delegates.glSampleMaski(index, mask);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterf", Version = "1.2")]
    public static void SamplerParameter(int sampler, SamplerParameter pname, float param)
    {
      GL.Delegates.glSamplerParameterf((uint) sampler, pname, param);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterf", Version = "1.2")]
    public static void SamplerParameter(uint sampler, SamplerParameter pname, float param)
    {
      GL.Delegates.glSamplerParameterf(sampler, pname, param);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterfv", Version = "1.2")]
    public static unsafe void SamplerParameter(int sampler, SamplerParameter pname, float[] param)
    {
      fixed (float* numPtr = param)
        GL.Delegates.glSamplerParameterfv((uint) sampler, pname, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterfv", Version = "1.2")]
    public static unsafe void SamplerParameter(int sampler, SamplerParameter pname, float* param)
    {
      GL.Delegates.glSamplerParameterfv((uint) sampler, pname, param);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterfv", Version = "1.2")]
    public static unsafe void SamplerParameter(uint sampler, SamplerParameter pname, float[] param)
    {
      fixed (float* numPtr = param)
        GL.Delegates.glSamplerParameterfv(sampler, pname, numPtr);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterfv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void SamplerParameter(uint sampler, SamplerParameter pname, float* param)
    {
      GL.Delegates.glSamplerParameterfv(sampler, pname, param);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameteri", Version = "1.2")]
    public static void SamplerParameter(int sampler, SamplerParameter pname, int param)
    {
      GL.Delegates.glSamplerParameteri((uint) sampler, pname, param);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameteri", Version = "1.2")]
    [CLSCompliant(false)]
    public static void SamplerParameter(uint sampler, SamplerParameter pname, int param)
    {
      GL.Delegates.glSamplerParameteri(sampler, pname, param);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterIiv", Version = "1.2")]
    public static unsafe void SamplerParameterI(int sampler, ArbSamplerObjects pname, int[] param)
    {
      fixed (int* numPtr = param)
        GL.Delegates.glSamplerParameterIiv((uint) sampler, pname, numPtr);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterIiv", Version = "1.2")]
    public static unsafe void SamplerParameterI(int sampler, ArbSamplerObjects pname, ref int param)
    {
      fixed (int* numPtr = &param)
        GL.Delegates.glSamplerParameterIiv((uint) sampler, pname, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterIiv", Version = "1.2")]
    public static unsafe void SamplerParameterI(int sampler, ArbSamplerObjects pname, int* param)
    {
      GL.Delegates.glSamplerParameterIiv((uint) sampler, pname, param);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterIiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void SamplerParameterI(uint sampler, ArbSamplerObjects pname, int[] param)
    {
      fixed (int* numPtr = param)
        GL.Delegates.glSamplerParameterIiv(sampler, pname, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterIiv", Version = "1.2")]
    public static unsafe void SamplerParameterI(uint sampler, ArbSamplerObjects pname, ref int param)
    {
      fixed (int* numPtr = &param)
        GL.Delegates.glSamplerParameterIiv(sampler, pname, numPtr);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterIiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void SamplerParameterI(uint sampler, ArbSamplerObjects pname, int* param)
    {
      GL.Delegates.glSamplerParameterIiv(sampler, pname, param);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterIuiv", Version = "1.2")]
    public static unsafe void SamplerParameterI(uint sampler, ArbSamplerObjects pname, uint[] param)
    {
      fixed (uint* numPtr = param)
        GL.Delegates.glSamplerParameterIuiv(sampler, pname, numPtr);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterIuiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void SamplerParameterI(uint sampler, ArbSamplerObjects pname, ref uint param)
    {
      fixed (uint* numPtr = &param)
        GL.Delegates.glSamplerParameterIuiv(sampler, pname, numPtr);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameterIuiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void SamplerParameterI(uint sampler, ArbSamplerObjects pname, uint* param)
    {
      GL.Delegates.glSamplerParameterIuiv(sampler, pname, param);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameteriv", Version = "1.2")]
    public static unsafe void SamplerParameter(int sampler, SamplerParameter pname, int[] param)
    {
      fixed (int* numPtr = param)
        GL.Delegates.glSamplerParameteriv((uint) sampler, pname, numPtr);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void SamplerParameter(int sampler, SamplerParameter pname, int* param)
    {
      GL.Delegates.glSamplerParameteriv((uint) sampler, pname, param);
    }

    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameteriv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void SamplerParameter(uint sampler, SamplerParameter pname, int[] param)
    {
      fixed (int* numPtr = param)
        GL.Delegates.glSamplerParameteriv(sampler, pname, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_sampler_objects", EntryPoint = "glSamplerParameteriv", Version = "1.2")]
    public static unsafe void SamplerParameter(uint sampler, SamplerParameter pname, int* param)
    {
      GL.Delegates.glSamplerParameteriv(sampler, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glScaled", Version = "1.0")]
    public static void Scale(double x, double y, double z)
    {
      GL.Delegates.glScaled(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glScalef", Version = "1.0")]
    public static void Scale(float x, float y, float z)
    {
      GL.Delegates.glScalef(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glScissor", Version = "1.0")]
    public static void Scissor(int x, int y, int width, int height)
    {
      GL.Delegates.glScissor(x, y, width, height);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorArrayv", Version = "4.1")]
    public static unsafe void ScissorArray(int first, int count, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glScissorArrayv((uint) first, count, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorArrayv", Version = "4.1")]
    public static unsafe void ScissorArray(int first, int count, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glScissorArrayv((uint) first, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorArrayv", Version = "4.1")]
    public static unsafe void ScissorArray(int first, int count, int* v)
    {
      GL.Delegates.glScissorArrayv((uint) first, count, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorArrayv", Version = "4.1")]
    public static unsafe void ScissorArray(uint first, int count, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glScissorArrayv(first, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorArrayv", Version = "4.1")]
    public static unsafe void ScissorArray(uint first, int count, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glScissorArrayv(first, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorArrayv", Version = "4.1")]
    public static unsafe void ScissorArray(uint first, int count, int* v)
    {
      GL.Delegates.glScissorArrayv(first, count, v);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorIndexed", Version = "4.1")]
    public static void ScissorIndexed(int index, int left, int bottom, int width, int height)
    {
      GL.Delegates.glScissorIndexed((uint) index, left, bottom, width, height);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorIndexed", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
    {
      GL.Delegates.glScissorIndexed(index, left, bottom, width, height);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorIndexedv", Version = "4.1")]
    public static unsafe void ScissorIndexed(int index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glScissorIndexedv((uint) index, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorIndexedv", Version = "4.1")]
    public static unsafe void ScissorIndexed(int index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glScissorIndexedv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorIndexedv", Version = "4.1")]
    public static unsafe void ScissorIndexed(int index, int* v)
    {
      GL.Delegates.glScissorIndexedv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorIndexedv", Version = "4.1")]
    public static unsafe void ScissorIndexed(uint index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glScissorIndexedv(index, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorIndexedv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ScissorIndexed(uint index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glScissorIndexedv(index, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glScissorIndexedv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ScissorIndexed(uint index, int* v)
    {
      GL.Delegates.glScissorIndexedv(index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3b", Version = "1.4")]
    public static void SecondaryColor3(sbyte red, sbyte green, sbyte blue)
    {
      GL.Delegates.glSecondaryColor3b(red, green, blue);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3bv", Version = "1.4")]
    public static unsafe void SecondaryColor3(sbyte[] v)
    {
      fixed (sbyte* v1 = v)
        GL.Delegates.glSecondaryColor3bv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3bv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void SecondaryColor3(ref sbyte v)
    {
      fixed (sbyte* v1 = &v)
        GL.Delegates.glSecondaryColor3bv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3bv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void SecondaryColor3(sbyte* v)
    {
      GL.Delegates.glSecondaryColor3bv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3d", Version = "1.4")]
    public static void SecondaryColor3(double red, double green, double blue)
    {
      GL.Delegates.glSecondaryColor3d(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3dv", Version = "1.4")]
    public static unsafe void SecondaryColor3(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glSecondaryColor3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3dv", Version = "1.4")]
    public static unsafe void SecondaryColor3(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glSecondaryColor3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3dv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void SecondaryColor3(double* v)
    {
      GL.Delegates.glSecondaryColor3dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3f", Version = "1.4")]
    public static void SecondaryColor3(float red, float green, float blue)
    {
      GL.Delegates.glSecondaryColor3f(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3fv", Version = "1.4")]
    public static unsafe void SecondaryColor3(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glSecondaryColor3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3fv", Version = "1.4")]
    public static unsafe void SecondaryColor3(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glSecondaryColor3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3fv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void SecondaryColor3(float* v)
    {
      GL.Delegates.glSecondaryColor3fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3i", Version = "1.4")]
    public static void SecondaryColor3(int red, int green, int blue)
    {
      GL.Delegates.glSecondaryColor3i(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3iv", Version = "1.4")]
    public static unsafe void SecondaryColor3(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glSecondaryColor3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3iv", Version = "1.4")]
    public static unsafe void SecondaryColor3(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glSecondaryColor3iv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3iv", Version = "1.4")]
    public static unsafe void SecondaryColor3(int* v)
    {
      GL.Delegates.glSecondaryColor3iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3s", Version = "1.4")]
    public static void SecondaryColor3(short red, short green, short blue)
    {
      GL.Delegates.glSecondaryColor3s(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3sv", Version = "1.4")]
    public static unsafe void SecondaryColor3(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glSecondaryColor3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3sv", Version = "1.4")]
    public static unsafe void SecondaryColor3(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glSecondaryColor3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3sv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void SecondaryColor3(short* v)
    {
      GL.Delegates.glSecondaryColor3sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3ub", Version = "1.4")]
    public static void SecondaryColor3(byte red, byte green, byte blue)
    {
      GL.Delegates.glSecondaryColor3ub(red, green, blue);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3ubv", Version = "1.4")]
    public static unsafe void SecondaryColor3(byte[] v)
    {
      fixed (byte* v1 = v)
        GL.Delegates.glSecondaryColor3ubv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3ubv", Version = "1.4")]
    public static unsafe void SecondaryColor3(ref byte v)
    {
      fixed (byte* v1 = &v)
        GL.Delegates.glSecondaryColor3ubv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3ubv", Version = "1.4")]
    public static unsafe void SecondaryColor3(byte* v)
    {
      GL.Delegates.glSecondaryColor3ubv(v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3ui", Version = "1.4")]
    public static void SecondaryColor3(uint red, uint green, uint blue)
    {
      GL.Delegates.glSecondaryColor3ui(red, green, blue);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3uiv", Version = "1.4")]
    public static unsafe void SecondaryColor3(uint[] v)
    {
      fixed (uint* v1 = v)
        GL.Delegates.glSecondaryColor3uiv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3uiv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void SecondaryColor3(ref uint v)
    {
      fixed (uint* v1 = &v)
        GL.Delegates.glSecondaryColor3uiv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3uiv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void SecondaryColor3(uint* v)
    {
      GL.Delegates.glSecondaryColor3uiv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3us", Version = "1.4")]
    [CLSCompliant(false)]
    public static void SecondaryColor3(ushort red, ushort green, ushort blue)
    {
      GL.Delegates.glSecondaryColor3us(red, green, blue);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3usv", Version = "1.4")]
    public static unsafe void SecondaryColor3(ushort[] v)
    {
      fixed (ushort* v1 = v)
        GL.Delegates.glSecondaryColor3usv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3usv", Version = "1.4")]
    public static unsafe void SecondaryColor3(ref ushort v)
    {
      fixed (ushort* v1 = &v)
        GL.Delegates.glSecondaryColor3usv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColor3usv", Version = "1.4")]
    public static unsafe void SecondaryColor3(ushort* v)
    {
      GL.Delegates.glSecondaryColor3usv(v);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glSecondaryColorP3ui", Version = "1.2")]
    public static void SecondaryColorP3(PackedPointerType type, int color)
    {
      GL.Delegates.glSecondaryColorP3ui(type, (uint) color);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glSecondaryColorP3ui", Version = "1.2")]
    public static void SecondaryColorP3(PackedPointerType type, uint color)
    {
      GL.Delegates.glSecondaryColorP3ui(type, color);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glSecondaryColorP3uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void SecondaryColorP3(PackedPointerType type, int* color)
    {
      GL.Delegates.glSecondaryColorP3uiv(type, (uint*) color);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glSecondaryColorP3uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void SecondaryColorP3(PackedPointerType type, uint* color)
    {
      GL.Delegates.glSecondaryColorP3uiv(type, color);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColorPointer", Version = "1.4")]
    public static void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glSecondaryColorPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColorPointer", Version = "1.4")]
    public static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSecondaryColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColorPointer", Version = "1.4")]
    public static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSecondaryColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColorPointer", Version = "1.4")]
    public static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSecondaryColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glSecondaryColorPointer", Version = "1.4")]
    public static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSecondaryColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glSelectBuffer", Version = "1.0")]
    public static unsafe void SelectBuffer(int size, [Out] int[] buffer)
    {
      fixed (int* numPtr = buffer)
        GL.Delegates.glSelectBuffer(size, (uint*) numPtr);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glSelectBuffer", Version = "1.0")]
    public static unsafe void SelectBuffer(int size, out int buffer)
    {
      fixed (int* numPtr = &buffer)
      {
        GL.Delegates.glSelectBuffer(size, (uint*) numPtr);
        buffer = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glSelectBuffer", Version = "1.0")]
    public static unsafe void SelectBuffer(int size, [Out] int* buffer)
    {
      GL.Delegates.glSelectBuffer(size, (uint*) buffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glSelectBuffer", Version = "1.0")]
    public static unsafe void SelectBuffer(int size, [Out] uint[] buffer)
    {
      fixed (uint* buffer1 = buffer)
        GL.Delegates.glSelectBuffer(size, buffer1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glSelectBuffer", Version = "1.0")]
    public static unsafe void SelectBuffer(int size, out uint buffer)
    {
      fixed (uint* buffer1 = &buffer)
      {
        GL.Delegates.glSelectBuffer(size, buffer1);
        buffer = *buffer1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glSelectBuffer", Version = "1.0")]
    public static unsafe void SelectBuffer(int size, [Out] uint* buffer)
    {
      GL.Delegates.glSelectBuffer(size, buffer);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glSeparableFilter2D", Version = "1.2")]
    public static void SeparableFilter2D(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
    {
      GL.Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glSeparableFilter2D", Version = "1.2")]
    public static void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In, Out] T7[] column) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glSeparableFilter2D", Version = "1.2")]
    public static void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In, Out] T7[,] column) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glSeparableFilter2D", Version = "1.2")]
    public static void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In, Out] T7[,,] column) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glSeparableFilter2D", Version = "1.2")]
    public static void SeparableFilter2D<T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In, Out] ref T7 column) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, gcHandle.AddrOfPinnedObject());
        column = (T7) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glSeparableFilter2D", Version = "1.2")]
    public static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[] row, [In, Out] T7[,,] column) where T6 : struct where T7 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glSeparableFilter2D", Version = "1.2")]
    public static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,] row, [In, Out] T7[,,] column) where T6 : struct where T7 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glSeparableFilter2D", Version = "1.2")]
    public static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,,] row, [In, Out] T7[,,] column) where T6 : struct where T7 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2_DEPRECATED", EntryPoint = "glSeparableFilter2D", Version = "1.2")]
    public static void SeparableFilter2D<T6, T7>(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T6 row, [In, Out] T7[,,] column) where T6 : struct where T7 : struct
    {
      GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
      GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        row = (T6) gcHandle1.Target;
      }
      finally
      {
        gcHandle1.Free();
        gcHandle2.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glShadeModel", Version = "1.0")]
    public static void ShadeModel(ShadingModel mode)
    {
      GL.Delegates.glShadeModel(mode);
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary(int count, int[] shaders, BinaryFormat binaryformat, IntPtr binary, int length)
    {
      fixed (int* numPtr = shaders)
        GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, binary, length);
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, int[] shaders, BinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      fixed (int* numPtr = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary(int count, ref int shaders, BinaryFormat binaryformat, IntPtr binary, int length)
    {
      fixed (int* numPtr = &shaders)
        GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, binary, length);
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, ref int shaders, BinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      fixed (int* numPtr = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary(int count, int* shaders, BinaryFormat binaryformat, IntPtr binary, int length)
    {
      GL.Delegates.glShaderBinary(count, (uint*) shaders, binaryformat, binary, length);
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(count, (uint*) shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(count, (uint*) shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(count, (uint*) shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int count, int* shaders, BinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(count, (uint*) shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        binary = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary(int count, uint[] shaders, BinaryFormat binaryformat, IntPtr binary, int length)
    {
      fixed (uint* shaders1 = shaders)
        GL.Delegates.glShaderBinary(count, shaders1, binaryformat, binary, length);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, uint[] shaders, BinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary(int count, ref uint shaders, BinaryFormat binaryformat, IntPtr binary, int length)
    {
      fixed (uint* shaders1 = &shaders)
        GL.Delegates.glShaderBinary(count, shaders1, binaryformat, binary, length);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int count, ref uint shaders, BinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(count, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary(int count, uint* shaders, BinaryFormat binaryformat, IntPtr binary, int length)
    {
      GL.Delegates.glShaderBinary(count, shaders, binaryformat, binary, length);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(count, shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(count, shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(count, shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_ES2_compatibility", EntryPoint = "glShaderBinary", Version = "4.1")]
    public static unsafe void ShaderBinary<T3>(int count, uint* shaders, BinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(count, shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        binary = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glShaderSource", Version = "2.0")]
    public static unsafe void ShaderSource(int shader, int count, string[] @string, ref int length)
    {
      fixed (int* length1 = &length)
        GL.Delegates.glShaderSource((uint) shader, count, @string, length1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glShaderSource", Version = "2.0")]
    public static unsafe void ShaderSource(int shader, int count, string[] @string, int* length)
    {
      GL.Delegates.glShaderSource((uint) shader, count, @string, length);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glShaderSource", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderSource(uint shader, int count, string[] @string, ref int length)
    {
      fixed (int* length1 = &length)
        GL.Delegates.glShaderSource(shader, count, @string, length1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glShaderSource", Version = "2.0")]
    public static unsafe void ShaderSource(uint shader, int count, string[] @string, int* length)
    {
      GL.Delegates.glShaderSource(shader, count, @string, length);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glStencilFunc", Version = "1.0")]
    public static void StencilFunc(StencilFunction func, int @ref, int mask)
    {
      GL.Delegates.glStencilFunc(func, @ref, (uint) mask);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glStencilFunc", Version = "1.0")]
    public static void StencilFunc(StencilFunction func, int @ref, uint mask)
    {
      GL.Delegates.glStencilFunc(func, @ref, mask);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glStencilFuncSeparate", Version = "2.0")]
    public static void StencilFuncSeparate(Version20 face, StencilFunction func, int @ref, int mask)
    {
      GL.Delegates.glStencilFuncSeparate(face, func, @ref, (uint) mask);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glStencilFuncSeparate", Version = "2.0")]
    public static void StencilFuncSeparate(Version20 face, StencilFunction func, int @ref, uint mask)
    {
      GL.Delegates.glStencilFuncSeparate(face, func, @ref, mask);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glStencilMask", Version = "1.0")]
    public static void StencilMask(int mask)
    {
      GL.Delegates.glStencilMask((uint) mask);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glStencilMask", Version = "1.0")]
    public static void StencilMask(uint mask)
    {
      GL.Delegates.glStencilMask(mask);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glStencilMaskSeparate", Version = "2.0")]
    public static void StencilMaskSeparate(StencilFace face, int mask)
    {
      GL.Delegates.glStencilMaskSeparate(face, (uint) mask);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glStencilMaskSeparate", Version = "2.0")]
    [CLSCompliant(false)]
    public static void StencilMaskSeparate(StencilFace face, uint mask)
    {
      GL.Delegates.glStencilMaskSeparate(face, mask);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glStencilOp", Version = "1.0")]
    public static void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass)
    {
      GL.Delegates.glStencilOp(fail, zfail, zpass);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glStencilOpSeparate", Version = "2.0")]
    public static void StencilOpSeparate(StencilFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
    {
      GL.Delegates.glStencilOpSeparate(face, sfail, dpfail, dppass);
    }

    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glTexBuffer", Version = "3.1")]
    public static void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, int buffer)
    {
      GL.Delegates.glTexBuffer(target, internalformat, (uint) buffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_1", EntryPoint = "glTexBuffer", Version = "3.1")]
    public static void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer)
    {
      GL.Delegates.glTexBuffer(target, internalformat, buffer);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord1d", Version = "1.0")]
    public static void TexCoord1(double s)
    {
      GL.Delegates.glTexCoord1d(s);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord1dv", Version = "1.0")]
    public static unsafe void TexCoord1(double* v)
    {
      GL.Delegates.glTexCoord1dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord1f", Version = "1.0")]
    public static void TexCoord1(float s)
    {
      GL.Delegates.glTexCoord1f(s);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord1fv", Version = "1.0")]
    public static unsafe void TexCoord1(float* v)
    {
      GL.Delegates.glTexCoord1fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord1i", Version = "1.0")]
    public static void TexCoord1(int s)
    {
      GL.Delegates.glTexCoord1i(s);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord1iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord1(int* v)
    {
      GL.Delegates.glTexCoord1iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord1s", Version = "1.0")]
    public static void TexCoord1(short s)
    {
      GL.Delegates.glTexCoord1s(s);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord1sv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord1(short* v)
    {
      GL.Delegates.glTexCoord1sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2d", Version = "1.0")]
    public static void TexCoord2(double s, double t)
    {
      GL.Delegates.glTexCoord2d(s, t);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2dv", Version = "1.0")]
    public static unsafe void TexCoord2(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glTexCoord2dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2dv", Version = "1.0")]
    public static unsafe void TexCoord2(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glTexCoord2dv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2dv", Version = "1.0")]
    public static unsafe void TexCoord2(double* v)
    {
      GL.Delegates.glTexCoord2dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2f", Version = "1.0")]
    public static void TexCoord2(float s, float t)
    {
      GL.Delegates.glTexCoord2f(s, t);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2fv", Version = "1.0")]
    public static unsafe void TexCoord2(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glTexCoord2fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2fv", Version = "1.0")]
    public static unsafe void TexCoord2(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glTexCoord2fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2fv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord2(float* v)
    {
      GL.Delegates.glTexCoord2fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2i", Version = "1.0")]
    public static void TexCoord2(int s, int t)
    {
      GL.Delegates.glTexCoord2i(s, t);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2iv", Version = "1.0")]
    public static unsafe void TexCoord2(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glTexCoord2iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2iv", Version = "1.0")]
    public static unsafe void TexCoord2(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glTexCoord2iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord2(int* v)
    {
      GL.Delegates.glTexCoord2iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2s", Version = "1.0")]
    public static void TexCoord2(short s, short t)
    {
      GL.Delegates.glTexCoord2s(s, t);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2sv", Version = "1.0")]
    public static unsafe void TexCoord2(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glTexCoord2sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2sv", Version = "1.0")]
    public static unsafe void TexCoord2(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glTexCoord2sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord2sv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord2(short* v)
    {
      GL.Delegates.glTexCoord2sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3d", Version = "1.0")]
    public static void TexCoord3(double s, double t, double r)
    {
      GL.Delegates.glTexCoord3d(s, t, r);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3dv", Version = "1.0")]
    public static unsafe void TexCoord3(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glTexCoord3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3dv", Version = "1.0")]
    public static unsafe void TexCoord3(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glTexCoord3dv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3dv", Version = "1.0")]
    public static unsafe void TexCoord3(double* v)
    {
      GL.Delegates.glTexCoord3dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3f", Version = "1.0")]
    public static void TexCoord3(float s, float t, float r)
    {
      GL.Delegates.glTexCoord3f(s, t, r);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3fv", Version = "1.0")]
    public static unsafe void TexCoord3(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glTexCoord3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3fv", Version = "1.0")]
    public static unsafe void TexCoord3(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glTexCoord3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3fv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord3(float* v)
    {
      GL.Delegates.glTexCoord3fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3i", Version = "1.0")]
    public static void TexCoord3(int s, int t, int r)
    {
      GL.Delegates.glTexCoord3i(s, t, r);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3iv", Version = "1.0")]
    public static unsafe void TexCoord3(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glTexCoord3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3iv", Version = "1.0")]
    public static unsafe void TexCoord3(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glTexCoord3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord3(int* v)
    {
      GL.Delegates.glTexCoord3iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3s", Version = "1.0")]
    public static void TexCoord3(short s, short t, short r)
    {
      GL.Delegates.glTexCoord3s(s, t, r);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3sv", Version = "1.0")]
    public static unsafe void TexCoord3(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glTexCoord3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3sv", Version = "1.0")]
    public static unsafe void TexCoord3(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glTexCoord3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord3sv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord3(short* v)
    {
      GL.Delegates.glTexCoord3sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4d", Version = "1.0")]
    public static void TexCoord4(double s, double t, double r, double q)
    {
      GL.Delegates.glTexCoord4d(s, t, r, q);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4dv", Version = "1.0")]
    public static unsafe void TexCoord4(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glTexCoord4dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4dv", Version = "1.0")]
    public static unsafe void TexCoord4(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glTexCoord4dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4dv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord4(double* v)
    {
      GL.Delegates.glTexCoord4dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4f", Version = "1.0")]
    public static void TexCoord4(float s, float t, float r, float q)
    {
      GL.Delegates.glTexCoord4f(s, t, r, q);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4fv", Version = "1.0")]
    public static unsafe void TexCoord4(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glTexCoord4fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4fv", Version = "1.0")]
    public static unsafe void TexCoord4(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glTexCoord4fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4fv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord4(float* v)
    {
      GL.Delegates.glTexCoord4fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4i", Version = "1.0")]
    public static void TexCoord4(int s, int t, int r, int q)
    {
      GL.Delegates.glTexCoord4i(s, t, r, q);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4iv", Version = "1.0")]
    public static unsafe void TexCoord4(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glTexCoord4iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4iv", Version = "1.0")]
    public static unsafe void TexCoord4(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glTexCoord4iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord4(int* v)
    {
      GL.Delegates.glTexCoord4iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4s", Version = "1.0")]
    public static void TexCoord4(short s, short t, short r, short q)
    {
      GL.Delegates.glTexCoord4s(s, t, r, q);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4sv", Version = "1.0")]
    public static unsafe void TexCoord4(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glTexCoord4sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4sv", Version = "1.0")]
    public static unsafe void TexCoord4(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glTexCoord4sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexCoord4sv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexCoord4(short* v)
    {
      GL.Delegates.glTexCoord4sv(v);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP1ui", Version = "1.2")]
    public static void TexCoordP1(PackedPointerType type, int coords)
    {
      GL.Delegates.glTexCoordP1ui(type, (uint) coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP1ui", Version = "1.2")]
    [CLSCompliant(false)]
    public static void TexCoordP1(PackedPointerType type, uint coords)
    {
      GL.Delegates.glTexCoordP1ui(type, coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP1uiv", Version = "1.2")]
    public static unsafe void TexCoordP1(PackedPointerType type, int* coords)
    {
      GL.Delegates.glTexCoordP1uiv(type, (uint*) coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP1uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void TexCoordP1(PackedPointerType type, uint* coords)
    {
      GL.Delegates.glTexCoordP1uiv(type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP2ui", Version = "1.2")]
    public static void TexCoordP2(PackedPointerType type, int coords)
    {
      GL.Delegates.glTexCoordP2ui(type, (uint) coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP2ui", Version = "1.2")]
    [CLSCompliant(false)]
    public static void TexCoordP2(PackedPointerType type, uint coords)
    {
      GL.Delegates.glTexCoordP2ui(type, coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP2uiv", Version = "1.2")]
    public static unsafe void TexCoordP2(PackedPointerType type, int* coords)
    {
      GL.Delegates.glTexCoordP2uiv(type, (uint*) coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP2uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void TexCoordP2(PackedPointerType type, uint* coords)
    {
      GL.Delegates.glTexCoordP2uiv(type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP3ui", Version = "1.2")]
    public static void TexCoordP3(PackedPointerType type, int coords)
    {
      GL.Delegates.glTexCoordP3ui(type, (uint) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP3ui", Version = "1.2")]
    public static void TexCoordP3(PackedPointerType type, uint coords)
    {
      GL.Delegates.glTexCoordP3ui(type, coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP3uiv", Version = "1.2")]
    public static unsafe void TexCoordP3(PackedPointerType type, int* coords)
    {
      GL.Delegates.glTexCoordP3uiv(type, (uint*) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP3uiv", Version = "1.2")]
    public static unsafe void TexCoordP3(PackedPointerType type, uint* coords)
    {
      GL.Delegates.glTexCoordP3uiv(type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP4ui", Version = "1.2")]
    public static void TexCoordP4(PackedPointerType type, int coords)
    {
      GL.Delegates.glTexCoordP4ui(type, (uint) coords);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP4ui", Version = "1.2")]
    public static void TexCoordP4(PackedPointerType type, uint coords)
    {
      GL.Delegates.glTexCoordP4ui(type, coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP4uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void TexCoordP4(PackedPointerType type, int* coords)
    {
      GL.Delegates.glTexCoordP4uiv(type, (uint*) coords);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glTexCoordP4uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void TexCoordP4(PackedPointerType type, uint* coords)
    {
      GL.Delegates.glTexCoordP4uiv(type, coords);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glTexCoordPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer<T3>(int size, TexCoordPointerType type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexEnvf", Version = "1.0")]
    public static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float param)
    {
      GL.Delegates.glTexEnvf(target, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexEnvfv", Version = "1.0")]
    public static unsafe void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glTexEnvfv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexEnvfv", Version = "1.0")]
    public static unsafe void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, float* @params)
    {
      GL.Delegates.glTexEnvfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexEnvi", Version = "1.0")]
    public static void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int param)
    {
      GL.Delegates.glTexEnvi(target, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexEnviv", Version = "1.0")]
    public static unsafe void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexEnviv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexEnviv", Version = "1.0")]
    public static unsafe void TexEnv(TextureEnvTarget target, TextureEnvParameter pname, int* @params)
    {
      GL.Delegates.glTexEnviv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGend", Version = "1.0")]
    public static void TexGend(TextureCoordName coord, TextureGenParameter pname, double param)
    {
      GL.Delegates.glTexGend(coord, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGendv", Version = "1.0")]
    public static unsafe void TexGen(TextureCoordName coord, TextureGenParameter pname, double[] @params)
    {
      fixed (double* params1 = @params)
        GL.Delegates.glTexGendv(coord, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGendv", Version = "1.0")]
    public static unsafe void TexGen(TextureCoordName coord, TextureGenParameter pname, ref double @params)
    {
      fixed (double* params1 = &@params)
        GL.Delegates.glTexGendv(coord, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGendv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexGen(TextureCoordName coord, TextureGenParameter pname, double* @params)
    {
      GL.Delegates.glTexGendv(coord, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGenf", Version = "1.0")]
    public static void TexGen(TextureCoordName coord, TextureGenParameter pname, float param)
    {
      GL.Delegates.glTexGenf(coord, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGenfv", Version = "1.0")]
    public static unsafe void TexGen(TextureCoordName coord, TextureGenParameter pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glTexGenfv(coord, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGenfv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexGen(TextureCoordName coord, TextureGenParameter pname, float* @params)
    {
      GL.Delegates.glTexGenfv(coord, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGeni", Version = "1.0")]
    public static void TexGen(TextureCoordName coord, TextureGenParameter pname, int param)
    {
      GL.Delegates.glTexGeni(coord, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGeniv", Version = "1.0")]
    public static unsafe void TexGen(TextureCoordName coord, TextureGenParameter pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexGeniv(coord, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTexGeniv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexGen(TextureCoordName coord, TextureGenParameter pname, int* @params)
    {
      GL.Delegates.glTexGeniv(coord, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage1D", Version = "1.0")]
    public static void TexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage1D", Version = "1.0")]
    public static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T7[] pixels) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage1D", Version = "1.0")]
    public static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T7[,] pixels) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage1D", Version = "1.0")]
    public static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T7[,,] pixels) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage1D", Version = "1.0")]
    public static void TexImage1D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] ref T7 pixels) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T7) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T8[] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T8[,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T8[,,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] ref T8 pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glTexImage2DMultisample", Version = "1.2")]
    public static void TexImage2DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations)
    {
      GL.Delegates.glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexImage3D", Version = "1.2")]
    public static void TexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexImage3D", Version = "1.2")]
    public static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T9[] pixels) where T9 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexImage3D", Version = "1.2")]
    public static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T9[,] pixels) where T9 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexImage3D", Version = "1.2")]
    public static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T9[,,] pixels) where T9 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexImage3D", Version = "1.2")]
    public static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] ref T9 pixels) where T9 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T9) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_texture_multisample", EntryPoint = "glTexImage3DMultisample", Version = "1.2")]
    public static void TexImage3DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations)
    {
      GL.Delegates.glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexParameterf", Version = "1.0")]
    public static void TexParameter(TextureTarget target, TextureParameterName pname, float param)
    {
      GL.Delegates.glTexParameterf(target, pname, param);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexParameterfv", Version = "1.0")]
    public static unsafe void TexParameter(TextureTarget target, TextureParameterName pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glTexParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexParameterfv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexParameter(TextureTarget target, TextureParameterName pname, float* @params)
    {
      GL.Delegates.glTexParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexParameteri", Version = "1.0")]
    public static void TexParameter(TextureTarget target, TextureParameterName pname, int param)
    {
      GL.Delegates.glTexParameteri(target, pname, param);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glTexParameterIiv", Version = "3.0")]
    public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexParameterIiv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glTexParameterIiv", Version = "3.0")]
    public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glTexParameterIiv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glTexParameterIiv", Version = "3.0")]
    public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, int* @params)
    {
      GL.Delegates.glTexParameterIiv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glTexParameterIuiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, uint[] @params)
    {
      fixed (uint* params1 = @params)
        GL.Delegates.glTexParameterIuiv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glTexParameterIuiv", Version = "3.0")]
    public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, ref uint @params)
    {
      fixed (uint* params1 = &@params)
        GL.Delegates.glTexParameterIuiv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glTexParameterIuiv", Version = "3.0")]
    public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, uint* @params)
    {
      GL.Delegates.glTexParameterIuiv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexParameteriv", Version = "1.0")]
    public static unsafe void TexParameter(TextureTarget target, TextureParameterName pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glTexParameteriv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexParameter(TextureTarget target, TextureParameterName pname, int* @params)
    {
      GL.Delegates.glTexParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage1D", Version = "1.1")]
    public static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage1D", Version = "1.1")]
    public static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T6[] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage1D", Version = "1.1")]
    public static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T6[,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage1D", Version = "1.1")]
    public static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T6[,,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage1D", Version = "1.1")]
    public static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] ref T6 pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T6) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T8[] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T8[,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T8[,,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T8 pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexSubImage3D", Version = "1.2")]
    public static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexSubImage3D", Version = "1.2")]
    public static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T10[] pixels) where T10 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexSubImage3D", Version = "1.2")]
    public static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T10[,] pixels) where T10 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexSubImage3D", Version = "1.2")]
    public static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T10[,,] pixels) where T10 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_2", EntryPoint = "glTexSubImage3D", Version = "1.2")]
    public static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] ref T10 pixels) where T10 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T10) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glTransformFeedbackVaryings", Version = "3.0")]
    public static void TransformFeedbackVaryings(int program, int count, string[] varyings, TransformFeedbackMode bufferMode)
    {
      GL.Delegates.glTransformFeedbackVaryings((uint) program, count, varyings, bufferMode);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glTransformFeedbackVaryings", Version = "3.0")]
    [CLSCompliant(false)]
    public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, TransformFeedbackMode bufferMode)
    {
      GL.Delegates.glTransformFeedbackVaryings(program, count, varyings, bufferMode);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTranslated", Version = "1.0")]
    public static void Translate(double x, double y, double z)
    {
      GL.Delegates.glTranslated(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glTranslatef", Version = "1.0")]
    public static void Translate(float x, float y, float z)
    {
      GL.Delegates.glTranslatef(x, y, z);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform1d", Version = "1.2")]
    public static void Uniform1(int location, double x)
    {
      GL.Delegates.glUniform1d(location, x);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform1dv", Version = "1.2")]
    public static unsafe void Uniform1(int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniform1dv(location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform1dv", Version = "1.2")]
    public static unsafe void Uniform1(int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniform1dv(location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform1dv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void Uniform1(int location, int count, double* value)
    {
      GL.Delegates.glUniform1dv(location, count, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform1f", Version = "2.0")]
    public static void Uniform1(int location, float v0)
    {
      GL.Delegates.glUniform1f(location, v0);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform1fv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniform1fv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform1fv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniform1fv(location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform1fv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, float* value)
    {
      GL.Delegates.glUniform1fv(location, count, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform1i", Version = "2.0")]
    public static void Uniform1(int location, int v0)
    {
      GL.Delegates.glUniform1i(location, v0);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform1iv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glUniform1iv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform1iv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glUniform1iv(location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform1iv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, int* value)
    {
      GL.Delegates.glUniform1iv(location, count, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform1ui", Version = "3.0")]
    public static void Uniform1(int location, uint v0)
    {
      GL.Delegates.glUniform1ui(location, v0);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform1uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform1(int location, int count, uint[] value)
    {
      fixed (uint* numPtr = value)
        GL.Delegates.glUniform1uiv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform1uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform1(int location, int count, ref uint value)
    {
      fixed (uint* numPtr = &value)
        GL.Delegates.glUniform1uiv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform1uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform1(int location, int count, uint* value)
    {
      GL.Delegates.glUniform1uiv(location, count, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform2d", Version = "1.2")]
    public static void Uniform2(int location, double x, double y)
    {
      GL.Delegates.glUniform2d(location, x, y);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform2dv", Version = "1.2")]
    public static unsafe void Uniform2(int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniform2dv(location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform2dv", Version = "1.2")]
    public static unsafe void Uniform2(int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniform2dv(location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform2dv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void Uniform2(int location, int count, double* value)
    {
      GL.Delegates.glUniform2dv(location, count, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform2f", Version = "2.0")]
    public static void Uniform2(int location, float v0, float v1)
    {
      GL.Delegates.glUniform2f(location, v0, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform2fv", Version = "2.0")]
    public static unsafe void Uniform2(int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniform2fv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform2fv", Version = "2.0")]
    public static unsafe void Uniform2(int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniform2fv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform2fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform2(int location, int count, float* value)
    {
      GL.Delegates.glUniform2fv(location, count, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform2i", Version = "2.0")]
    public static void Uniform2(int location, int v0, int v1)
    {
      GL.Delegates.glUniform2i(location, v0, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform2iv", Version = "2.0")]
    public static unsafe void Uniform2(int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glUniform2iv(location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform2iv", Version = "2.0")]
    public static unsafe void Uniform2(int location, int count, int* value)
    {
      GL.Delegates.glUniform2iv(location, count, value);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform2ui", Version = "3.0")]
    [CLSCompliant(false)]
    public static void Uniform2(int location, uint v0, uint v1)
    {
      GL.Delegates.glUniform2ui(location, v0, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform2uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform2(int location, int count, uint[] value)
    {
      fixed (uint* numPtr = value)
        GL.Delegates.glUniform2uiv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform2uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform2(int location, int count, ref uint value)
    {
      fixed (uint* numPtr = &value)
        GL.Delegates.glUniform2uiv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform2uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform2(int location, int count, uint* value)
    {
      GL.Delegates.glUniform2uiv(location, count, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform3d", Version = "1.2")]
    public static void Uniform3(int location, double x, double y, double z)
    {
      GL.Delegates.glUniform3d(location, x, y, z);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform3dv", Version = "1.2")]
    public static unsafe void Uniform3(int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniform3dv(location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform3dv", Version = "1.2")]
    public static unsafe void Uniform3(int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniform3dv(location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform3dv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void Uniform3(int location, int count, double* value)
    {
      GL.Delegates.glUniform3dv(location, count, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform3f", Version = "2.0")]
    public static void Uniform3(int location, float v0, float v1, float v2)
    {
      GL.Delegates.glUniform3f(location, v0, v1, v2);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform3fv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniform3fv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform3fv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniform3fv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform3fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform3(int location, int count, float* value)
    {
      GL.Delegates.glUniform3fv(location, count, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform3i", Version = "2.0")]
    public static void Uniform3(int location, int v0, int v1, int v2)
    {
      GL.Delegates.glUniform3i(location, v0, v1, v2);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform3iv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glUniform3iv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform3iv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glUniform3iv(location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform3iv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, int* value)
    {
      GL.Delegates.glUniform3iv(location, count, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform3ui", Version = "3.0")]
    public static void Uniform3(int location, uint v0, uint v1, uint v2)
    {
      GL.Delegates.glUniform3ui(location, v0, v1, v2);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform3uiv", Version = "3.0")]
    public static unsafe void Uniform3(int location, int count, uint[] value)
    {
      fixed (uint* numPtr = value)
        GL.Delegates.glUniform3uiv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform3uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform3(int location, int count, ref uint value)
    {
      fixed (uint* numPtr = &value)
        GL.Delegates.glUniform3uiv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform3uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform3(int location, int count, uint* value)
    {
      GL.Delegates.glUniform3uiv(location, count, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform4d", Version = "1.2")]
    public static void Uniform4(int location, double x, double y, double z, double w)
    {
      GL.Delegates.glUniform4d(location, x, y, z, w);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform4dv", Version = "1.2")]
    public static unsafe void Uniform4(int location, int count, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniform4dv(location, count, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform4dv", Version = "1.2")]
    public static unsafe void Uniform4(int location, int count, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniform4dv(location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniform4dv", Version = "1.2")]
    public static unsafe void Uniform4(int location, int count, double* value)
    {
      GL.Delegates.glUniform4dv(location, count, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform4f", Version = "2.0")]
    public static void Uniform4(int location, float v0, float v1, float v2, float v3)
    {
      GL.Delegates.glUniform4f(location, v0, v1, v2, v3);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform4fv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniform4fv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform4fv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniform4fv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform4fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform4(int location, int count, float* value)
    {
      GL.Delegates.glUniform4fv(location, count, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform4i", Version = "2.0")]
    public static void Uniform4(int location, int v0, int v1, int v2, int v3)
    {
      GL.Delegates.glUniform4i(location, v0, v1, v2, v3);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform4iv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, int[] value)
    {
      fixed (int* numPtr = value)
        GL.Delegates.glUniform4iv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform4iv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, ref int value)
    {
      fixed (int* numPtr = &value)
        GL.Delegates.glUniform4iv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniform4iv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform4(int location, int count, int* value)
    {
      GL.Delegates.glUniform4iv(location, count, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform4ui", Version = "3.0")]
    public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
    {
      GL.Delegates.glUniform4ui(location, v0, v1, v2, v3);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform4uiv", Version = "3.0")]
    public static unsafe void Uniform4(int location, int count, uint[] value)
    {
      fixed (uint* numPtr = value)
        GL.Delegates.glUniform4uiv(location, count, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform4uiv", Version = "3.0")]
    public static unsafe void Uniform4(int location, int count, ref uint value)
    {
      fixed (uint* numPtr = &value)
        GL.Delegates.glUniform4uiv(location, count, numPtr);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glUniform4uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform4(int location, int count, uint* value)
    {
      GL.Delegates.glUniform4uiv(location, count, value);
    }

    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glUniformBlockBinding", Version = "2.0")]
    public static void UniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding)
    {
      GL.Delegates.glUniformBlockBinding((uint) program, (uint) uniformBlockIndex, (uint) uniformBlockBinding);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_uniform_buffer_object", EntryPoint = "glUniformBlockBinding", Version = "2.0")]
    public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
    {
      GL.Delegates.glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix2dv", Version = "1.2")]
    public static unsafe void UniformMatrix2(int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniformMatrix2dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix2dv", Version = "1.2")]
    public static unsafe void UniformMatrix2(int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniformMatrix2dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix2dv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix2(int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glUniformMatrix2dv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniformMatrix2fv", Version = "2.0")]
    public static unsafe void UniformMatrix2(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix2fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniformMatrix2fv", Version = "2.0")]
    public static unsafe void UniformMatrix2(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix2fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniformMatrix2fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix2(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix2fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix2x3dv", Version = "1.2")]
    public static unsafe void UniformMatrix2x3(int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniformMatrix2x3dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix2x3dv", Version = "1.2")]
    public static unsafe void UniformMatrix2x3(int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniformMatrix2x3dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix2x3dv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix2x3(int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glUniformMatrix2x3dv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix2x3fv", Version = "2.1")]
    public static unsafe void UniformMatrix2x3(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix2x3fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix2x3fv", Version = "2.1")]
    public static unsafe void UniformMatrix2x3(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix2x3fv(location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix2x3fv", Version = "2.1")]
    public static unsafe void UniformMatrix2x3(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix2x3fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix2x4dv", Version = "1.2")]
    public static unsafe void UniformMatrix2x4(int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniformMatrix2x4dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix2x4dv", Version = "1.2")]
    public static unsafe void UniformMatrix2x4(int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniformMatrix2x4dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix2x4dv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix2x4(int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glUniformMatrix2x4dv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix2x4fv", Version = "2.1")]
    public static unsafe void UniformMatrix2x4(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix2x4fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix2x4fv", Version = "2.1")]
    public static unsafe void UniformMatrix2x4(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix2x4fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix2x4fv", Version = "2.1")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix2x4(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix2x4fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix3dv", Version = "1.2")]
    public static unsafe void UniformMatrix3(int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniformMatrix3dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix3dv", Version = "1.2")]
    public static unsafe void UniformMatrix3(int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniformMatrix3dv(location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix3dv", Version = "1.2")]
    public static unsafe void UniformMatrix3(int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glUniformMatrix3dv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniformMatrix3fv", Version = "2.0")]
    public static unsafe void UniformMatrix3(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix3fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniformMatrix3fv", Version = "2.0")]
    public static unsafe void UniformMatrix3(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix3fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniformMatrix3fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix3(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix3fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix3x2dv", Version = "1.2")]
    public static unsafe void UniformMatrix3x2(int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniformMatrix3x2dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix3x2dv", Version = "1.2")]
    public static unsafe void UniformMatrix3x2(int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniformMatrix3x2dv(location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix3x2dv", Version = "1.2")]
    public static unsafe void UniformMatrix3x2(int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glUniformMatrix3x2dv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix3x2fv", Version = "2.1")]
    public static unsafe void UniformMatrix3x2(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix3x2fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix3x2fv", Version = "2.1")]
    public static unsafe void UniformMatrix3x2(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix3x2fv(location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix3x2fv", Version = "2.1")]
    public static unsafe void UniformMatrix3x2(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix3x2fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix3x4dv", Version = "1.2")]
    public static unsafe void UniformMatrix3x4(int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniformMatrix3x4dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix3x4dv", Version = "1.2")]
    public static unsafe void UniformMatrix3x4(int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniformMatrix3x4dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix3x4dv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix3x4(int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glUniformMatrix3x4dv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix3x4fv", Version = "2.1")]
    public static unsafe void UniformMatrix3x4(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix3x4fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix3x4fv", Version = "2.1")]
    public static unsafe void UniformMatrix3x4(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix3x4fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix3x4fv", Version = "2.1")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix3x4(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix3x4fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix4dv", Version = "1.2")]
    public static unsafe void UniformMatrix4(int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniformMatrix4dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix4dv", Version = "1.2")]
    public static unsafe void UniformMatrix4(int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniformMatrix4dv(location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix4dv", Version = "1.2")]
    public static unsafe void UniformMatrix4(int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glUniformMatrix4dv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniformMatrix4fv", Version = "2.0")]
    public static unsafe void UniformMatrix4(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix4fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniformMatrix4fv", Version = "2.0")]
    public static unsafe void UniformMatrix4(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix4fv(location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUniformMatrix4fv", Version = "2.0")]
    public static unsafe void UniformMatrix4(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix4fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix4x2dv", Version = "1.2")]
    public static unsafe void UniformMatrix4x2(int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniformMatrix4x2dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix4x2dv", Version = "1.2")]
    public static unsafe void UniformMatrix4x2(int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniformMatrix4x2dv(location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix4x2dv", Version = "1.2")]
    public static unsafe void UniformMatrix4x2(int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glUniformMatrix4x2dv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix4x2fv", Version = "2.1")]
    public static unsafe void UniformMatrix4x2(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix4x2fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix4x2fv", Version = "2.1")]
    public static unsafe void UniformMatrix4x2(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix4x2fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix4x2fv", Version = "2.1")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix4x2(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix4x2fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix4x3dv", Version = "1.2")]
    public static unsafe void UniformMatrix4x3(int location, int count, bool transpose, double[] value)
    {
      fixed (double* numPtr = value)
        GL.Delegates.glUniformMatrix4x3dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix4x3dv", Version = "1.2")]
    public static unsafe void UniformMatrix4x3(int location, int count, bool transpose, ref double value)
    {
      fixed (double* numPtr = &value)
        GL.Delegates.glUniformMatrix4x3dv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "ARB_gpu_shader_fp64", EntryPoint = "glUniformMatrix4x3dv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix4x3(int location, int count, bool transpose, double* value)
    {
      GL.Delegates.glUniformMatrix4x3dv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix4x3fv", Version = "2.1")]
    public static unsafe void UniformMatrix4x3(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix4x3fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix4x3fv", Version = "2.1")]
    public static unsafe void UniformMatrix4x3(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix4x3fv(location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_1", EntryPoint = "glUniformMatrix4x3fv", Version = "2.1")]
    public static unsafe void UniformMatrix4x3(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix4x3fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glUniformSubroutinesuiv", Version = "1.2")]
    public static unsafe void UniformSubroutines(ShaderType shadertype, int count, int[] indices)
    {
      fixed (int* numPtr = indices)
        GL.Delegates.glUniformSubroutinesuiv(shadertype, count, (uint*) numPtr);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glUniformSubroutinesuiv", Version = "1.2")]
    public static unsafe void UniformSubroutines(ShaderType shadertype, int count, ref int indices)
    {
      fixed (int* numPtr = &indices)
        GL.Delegates.glUniformSubroutinesuiv(shadertype, count, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glUniformSubroutinesuiv", Version = "1.2")]
    public static unsafe void UniformSubroutines(ShaderType shadertype, int count, int* indices)
    {
      GL.Delegates.glUniformSubroutinesuiv(shadertype, count, (uint*) indices);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glUniformSubroutinesuiv", Version = "1.2")]
    public static unsafe void UniformSubroutines(ShaderType shadertype, int count, uint[] indices)
    {
      fixed (uint* indices1 = indices)
        GL.Delegates.glUniformSubroutinesuiv(shadertype, count, indices1);
    }

    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glUniformSubroutinesuiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void UniformSubroutines(ShaderType shadertype, int count, ref uint indices)
    {
      fixed (uint* indices1 = &indices)
        GL.Delegates.glUniformSubroutinesuiv(shadertype, count, indices1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_shader_subroutine", EntryPoint = "glUniformSubroutinesuiv", Version = "1.2")]
    public static unsafe void UniformSubroutines(ShaderType shadertype, int count, uint* indices)
    {
      GL.Delegates.glUniformSubroutinesuiv(shadertype, count, indices);
    }

    [AutoGenerated(Category = "VERSION_1_5", EntryPoint = "glUnmapBuffer", Version = "1.5")]
    public static bool UnmapBuffer(BufferTarget target)
    {
      return GL.Delegates.glUnmapBuffer(target);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUseProgram", Version = "2.0")]
    public static void UseProgram(int program)
    {
      GL.Delegates.glUseProgram((uint) program);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glUseProgram", Version = "2.0")]
    public static void UseProgram(uint program)
    {
      GL.Delegates.glUseProgram(program);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glUseProgramStages", Version = "4.1")]
    public static void UseProgramStages(int pipeline, ProgramStageMask stages, int program)
    {
      GL.Delegates.glUseProgramStages((uint) pipeline, stages, (uint) program);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glUseProgramStages", Version = "4.1")]
    public static void UseProgramStages(uint pipeline, ProgramStageMask stages, uint program)
    {
      GL.Delegates.glUseProgramStages(pipeline, stages, program);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glValidateProgram", Version = "2.0")]
    public static void ValidateProgram(int program)
    {
      GL.Delegates.glValidateProgram((uint) program);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glValidateProgram", Version = "2.0")]
    [CLSCompliant(false)]
    public static void ValidateProgram(uint program)
    {
      GL.Delegates.glValidateProgram(program);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glValidateProgramPipeline", Version = "4.1")]
    public static void ValidateProgramPipeline(int pipeline)
    {
      GL.Delegates.glValidateProgramPipeline((uint) pipeline);
    }

    [AutoGenerated(Category = "ARB_separate_shader_objects", EntryPoint = "glValidateProgramPipeline", Version = "4.1")]
    [CLSCompliant(false)]
    public static void ValidateProgramPipeline(uint pipeline)
    {
      GL.Delegates.glValidateProgramPipeline(pipeline);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2d", Version = "1.0")]
    public static void Vertex2(double x, double y)
    {
      GL.Delegates.glVertex2d(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2dv", Version = "1.0")]
    public static unsafe void Vertex2(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertex2dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2dv", Version = "1.0")]
    public static unsafe void Vertex2(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertex2dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2dv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Vertex2(double* v)
    {
      GL.Delegates.glVertex2dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2f", Version = "1.0")]
    public static void Vertex2(float x, float y)
    {
      GL.Delegates.glVertex2f(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2fv", Version = "1.0")]
    public static unsafe void Vertex2(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glVertex2fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2fv", Version = "1.0")]
    public static unsafe void Vertex2(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glVertex2fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2fv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Vertex2(float* v)
    {
      GL.Delegates.glVertex2fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2i", Version = "1.0")]
    public static void Vertex2(int x, int y)
    {
      GL.Delegates.glVertex2i(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2iv", Version = "1.0")]
    public static unsafe void Vertex2(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertex2iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2iv", Version = "1.0")]
    public static unsafe void Vertex2(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertex2iv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2iv", Version = "1.0")]
    public static unsafe void Vertex2(int* v)
    {
      GL.Delegates.glVertex2iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2s", Version = "1.0")]
    public static void Vertex2(short x, short y)
    {
      GL.Delegates.glVertex2s(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2sv", Version = "1.0")]
    public static unsafe void Vertex2(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertex2sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2sv", Version = "1.0")]
    public static unsafe void Vertex2(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertex2sv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex2sv", Version = "1.0")]
    public static unsafe void Vertex2(short* v)
    {
      GL.Delegates.glVertex2sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3d", Version = "1.0")]
    public static void Vertex3(double x, double y, double z)
    {
      GL.Delegates.glVertex3d(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3dv", Version = "1.0")]
    public static unsafe void Vertex3(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertex3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3dv", Version = "1.0")]
    public static unsafe void Vertex3(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertex3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3dv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Vertex3(double* v)
    {
      GL.Delegates.glVertex3dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3f", Version = "1.0")]
    public static void Vertex3(float x, float y, float z)
    {
      GL.Delegates.glVertex3f(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3fv", Version = "1.0")]
    public static unsafe void Vertex3(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glVertex3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3fv", Version = "1.0")]
    public static unsafe void Vertex3(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glVertex3fv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3fv", Version = "1.0")]
    public static unsafe void Vertex3(float* v)
    {
      GL.Delegates.glVertex3fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3i", Version = "1.0")]
    public static void Vertex3(int x, int y, int z)
    {
      GL.Delegates.glVertex3i(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3iv", Version = "1.0")]
    public static unsafe void Vertex3(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertex3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3iv", Version = "1.0")]
    public static unsafe void Vertex3(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertex3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3iv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Vertex3(int* v)
    {
      GL.Delegates.glVertex3iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3s", Version = "1.0")]
    public static void Vertex3(short x, short y, short z)
    {
      GL.Delegates.glVertex3s(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3sv", Version = "1.0")]
    public static unsafe void Vertex3(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertex3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3sv", Version = "1.0")]
    public static unsafe void Vertex3(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertex3sv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex3sv", Version = "1.0")]
    public static unsafe void Vertex3(short* v)
    {
      GL.Delegates.glVertex3sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4d", Version = "1.0")]
    public static void Vertex4(double x, double y, double z, double w)
    {
      GL.Delegates.glVertex4d(x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4dv", Version = "1.0")]
    public static unsafe void Vertex4(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertex4dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4dv", Version = "1.0")]
    public static unsafe void Vertex4(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertex4dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4dv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Vertex4(double* v)
    {
      GL.Delegates.glVertex4dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4f", Version = "1.0")]
    public static void Vertex4(float x, float y, float z, float w)
    {
      GL.Delegates.glVertex4f(x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4fv", Version = "1.0")]
    public static unsafe void Vertex4(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glVertex4fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4fv", Version = "1.0")]
    public static unsafe void Vertex4(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glVertex4fv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4fv", Version = "1.0")]
    public static unsafe void Vertex4(float* v)
    {
      GL.Delegates.glVertex4fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4i", Version = "1.0")]
    public static void Vertex4(int x, int y, int z, int w)
    {
      GL.Delegates.glVertex4i(x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4iv", Version = "1.0")]
    public static unsafe void Vertex4(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertex4iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4iv", Version = "1.0")]
    public static unsafe void Vertex4(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertex4iv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4iv", Version = "1.0")]
    public static unsafe void Vertex4(int* v)
    {
      GL.Delegates.glVertex4iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4s", Version = "1.0")]
    public static void Vertex4(short x, short y, short z, short w)
    {
      GL.Delegates.glVertex4s(x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4sv", Version = "1.0")]
    public static unsafe void Vertex4(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertex4sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4sv", Version = "1.0")]
    public static unsafe void Vertex4(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertex4sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_0_DEPRECATED", EntryPoint = "glVertex4sv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Vertex4(short* v)
    {
      GL.Delegates.glVertex4sv(v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1d", Version = "2.0")]
    public static void VertexAttrib1(int index, double x)
    {
      GL.Delegates.glVertexAttrib1d((uint) index, x);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1d", Version = "2.0")]
    public static void VertexAttrib1(uint index, double x)
    {
      GL.Delegates.glVertexAttrib1d(index, x);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1dv", Version = "2.0")]
    public static unsafe void VertexAttrib1(int index, double* v)
    {
      GL.Delegates.glVertexAttrib1dv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib1(uint index, double* v)
    {
      GL.Delegates.glVertexAttrib1dv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1f", Version = "2.0")]
    public static void VertexAttrib1(int index, float x)
    {
      GL.Delegates.glVertexAttrib1f((uint) index, x);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1f", Version = "2.0")]
    public static void VertexAttrib1(uint index, float x)
    {
      GL.Delegates.glVertexAttrib1f(index, x);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1fv", Version = "2.0")]
    public static unsafe void VertexAttrib1(int index, float* v)
    {
      GL.Delegates.glVertexAttrib1fv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1fv", Version = "2.0")]
    public static unsafe void VertexAttrib1(uint index, float* v)
    {
      GL.Delegates.glVertexAttrib1fv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1s", Version = "2.0")]
    public static void VertexAttrib1(int index, short x)
    {
      GL.Delegates.glVertexAttrib1s((uint) index, x);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1s", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttrib1(uint index, short x)
    {
      GL.Delegates.glVertexAttrib1s(index, x);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1sv", Version = "2.0")]
    public static unsafe void VertexAttrib1(int index, short* v)
    {
      GL.Delegates.glVertexAttrib1sv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib1sv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib1(uint index, short* v)
    {
      GL.Delegates.glVertexAttrib1sv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2d", Version = "2.0")]
    public static void VertexAttrib2(int index, double x, double y)
    {
      GL.Delegates.glVertexAttrib2d((uint) index, x, y);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2d", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttrib2(uint index, double x, double y)
    {
      GL.Delegates.glVertexAttrib2d(index, x, y);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2dv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttrib2dv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2dv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttrib2dv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2dv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int index, double* v)
    {
      GL.Delegates.glVertexAttrib2dv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib2(uint index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttrib2dv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib2(uint index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttrib2dv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib2(uint index, double* v)
    {
      GL.Delegates.glVertexAttrib2dv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2f", Version = "2.0")]
    public static void VertexAttrib2(int index, float x, float y)
    {
      GL.Delegates.glVertexAttrib2f((uint) index, x, y);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2f", Version = "2.0")]
    public static void VertexAttrib2(uint index, float x, float y)
    {
      GL.Delegates.glVertexAttrib2f(index, x, y);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int index, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glVertexAttrib2fv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int index, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glVertexAttrib2fv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib2(int index, float* v)
    {
      GL.Delegates.glVertexAttrib2fv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    public static unsafe void VertexAttrib2(uint index, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glVertexAttrib2fv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib2(uint index, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glVertexAttrib2fv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    public static unsafe void VertexAttrib2(uint index, float* v)
    {
      GL.Delegates.glVertexAttrib2fv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2s", Version = "2.0")]
    public static void VertexAttrib2(int index, short x, short y)
    {
      GL.Delegates.glVertexAttrib2s((uint) index, x, y);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2s", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttrib2(uint index, short x, short y)
    {
      GL.Delegates.glVertexAttrib2s(index, x, y);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2sv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttrib2sv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2sv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttrib2sv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2sv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib2(int index, short* v)
    {
      GL.Delegates.glVertexAttrib2sv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2sv", Version = "2.0")]
    public static unsafe void VertexAttrib2(uint index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttrib2sv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2sv", Version = "2.0")]
    public static unsafe void VertexAttrib2(uint index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttrib2sv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib2sv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib2(uint index, short* v)
    {
      GL.Delegates.glVertexAttrib2sv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3d", Version = "2.0")]
    public static void VertexAttrib3(int index, double x, double y, double z)
    {
      GL.Delegates.glVertexAttrib3d((uint) index, x, y, z);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3d", Version = "2.0")]
    public static void VertexAttrib3(uint index, double x, double y, double z)
    {
      GL.Delegates.glVertexAttrib3d(index, x, y, z);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3dv", Version = "2.0")]
    public static unsafe void VertexAttrib3(int index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttrib3dv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3dv", Version = "2.0")]
    public static unsafe void VertexAttrib3(int index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttrib3dv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(int index, double* v)
    {
      GL.Delegates.glVertexAttrib3dv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(uint index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttrib3dv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(uint index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttrib3dv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(uint index, double* v)
    {
      GL.Delegates.glVertexAttrib3dv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3f", Version = "2.0")]
    public static void VertexAttrib3(int index, float x, float y, float z)
    {
      GL.Delegates.glVertexAttrib3f((uint) index, x, y, z);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3f", Version = "2.0")]
    public static void VertexAttrib3(uint index, float x, float y, float z)
    {
      GL.Delegates.glVertexAttrib3f(index, x, y, z);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    public static unsafe void VertexAttrib3(int index, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glVertexAttrib3fv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    public static unsafe void VertexAttrib3(int index, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glVertexAttrib3fv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(int index, float* v)
    {
      GL.Delegates.glVertexAttrib3fv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(uint index, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glVertexAttrib3fv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    public static unsafe void VertexAttrib3(uint index, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glVertexAttrib3fv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(uint index, float* v)
    {
      GL.Delegates.glVertexAttrib3fv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3s", Version = "2.0")]
    public static void VertexAttrib3(int index, short x, short y, short z)
    {
      GL.Delegates.glVertexAttrib3s((uint) index, x, y, z);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3s", Version = "2.0")]
    public static void VertexAttrib3(uint index, short x, short y, short z)
    {
      GL.Delegates.glVertexAttrib3s(index, x, y, z);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3sv", Version = "2.0")]
    public static unsafe void VertexAttrib3(int index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttrib3sv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3sv", Version = "2.0")]
    public static unsafe void VertexAttrib3(int index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttrib3sv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3sv", Version = "2.0")]
    public static unsafe void VertexAttrib3(int index, short* v)
    {
      GL.Delegates.glVertexAttrib3sv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3sv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(uint index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttrib3sv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3sv", Version = "2.0")]
    public static unsafe void VertexAttrib3(uint index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttrib3sv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib3sv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(uint index, short* v)
    {
      GL.Delegates.glVertexAttrib3sv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4bv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, sbyte[] v)
    {
      fixed (sbyte* v1 = v)
        GL.Delegates.glVertexAttrib4bv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4bv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, ref sbyte v)
    {
      fixed (sbyte* v1 = &v)
        GL.Delegates.glVertexAttrib4bv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4bv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, sbyte* v)
    {
      GL.Delegates.glVertexAttrib4bv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4d", Version = "2.0")]
    public static void VertexAttrib4(int index, double x, double y, double z, double w)
    {
      GL.Delegates.glVertexAttrib4d((uint) index, x, y, z, w);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4d", Version = "2.0")]
    public static void VertexAttrib4(uint index, double x, double y, double z, double w)
    {
      GL.Delegates.glVertexAttrib4d(index, x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4dv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttrib4dv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4dv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttrib4dv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(int index, double* v)
    {
      GL.Delegates.glVertexAttrib4dv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttrib4dv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4dv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttrib4dv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4dv", Version = "2.0")]
    public static unsafe void VertexAttrib4(uint index, double* v)
    {
      GL.Delegates.glVertexAttrib4dv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4f", Version = "2.0")]
    public static void VertexAttrib4(int index, float x, float y, float z, float w)
    {
      GL.Delegates.glVertexAttrib4f((uint) index, x, y, z, w);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4f", Version = "2.0")]
    public static void VertexAttrib4(uint index, float x, float y, float z, float w)
    {
      GL.Delegates.glVertexAttrib4f(index, x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glVertexAttrib4fv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glVertexAttrib4fv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(int index, float* v)
    {
      GL.Delegates.glVertexAttrib4fv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    public static unsafe void VertexAttrib4(uint index, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glVertexAttrib4fv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glVertexAttrib4fv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    public static unsafe void VertexAttrib4(uint index, float* v)
    {
      GL.Delegates.glVertexAttrib4fv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4iv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttrib4iv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4iv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttrib4iv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4iv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, int* v)
    {
      GL.Delegates.glVertexAttrib4iv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4iv", Version = "2.0")]
    public static unsafe void VertexAttrib4(uint index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttrib4iv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4iv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttrib4iv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4iv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, int* v)
    {
      GL.Delegates.glVertexAttrib4iv(index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nbv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, sbyte[] v)
    {
      fixed (sbyte* v1 = v)
        GL.Delegates.glVertexAttrib4Nbv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nbv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, ref sbyte v)
    {
      fixed (sbyte* v1 = &v)
        GL.Delegates.glVertexAttrib4Nbv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nbv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4N(uint index, sbyte* v)
    {
      GL.Delegates.glVertexAttrib4Nbv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Niv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(int index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttrib4Niv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Niv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(int index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttrib4Niv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Niv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4N(int index, int* v)
    {
      GL.Delegates.glVertexAttrib4Niv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Niv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttrib4Niv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Niv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttrib4Niv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Niv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4N(uint index, int* v)
    {
      GL.Delegates.glVertexAttrib4Niv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nsv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(int index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttrib4Nsv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nsv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(int index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttrib4Nsv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nsv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(int index, short* v)
    {
      GL.Delegates.glVertexAttrib4Nsv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nsv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttrib4Nsv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nsv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttrib4Nsv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nsv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, short* v)
    {
      GL.Delegates.glVertexAttrib4Nsv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nub", Version = "2.0")]
    public static void VertexAttrib4N(int index, byte x, byte y, byte z, byte w)
    {
      GL.Delegates.glVertexAttrib4Nub((uint) index, x, y, z, w);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nub", Version = "2.0")]
    public static void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
    {
      GL.Delegates.glVertexAttrib4Nub(index, x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nubv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(int index, byte[] v)
    {
      fixed (byte* v1 = v)
        GL.Delegates.glVertexAttrib4Nubv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nubv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(int index, ref byte v)
    {
      fixed (byte* v1 = &v)
        GL.Delegates.glVertexAttrib4Nubv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nubv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4N(int index, byte* v)
    {
      GL.Delegates.glVertexAttrib4Nubv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nubv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, byte[] v)
    {
      fixed (byte* v1 = v)
        GL.Delegates.glVertexAttrib4Nubv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nubv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, ref byte v)
    {
      fixed (byte* v1 = &v)
        GL.Delegates.glVertexAttrib4Nubv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nubv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4N(uint index, byte* v)
    {
      GL.Delegates.glVertexAttrib4Nubv(index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nuiv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, uint[] v)
    {
      fixed (uint* v1 = v)
        GL.Delegates.glVertexAttrib4Nuiv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nuiv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, ref uint v)
    {
      fixed (uint* v1 = &v)
        GL.Delegates.glVertexAttrib4Nuiv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nuiv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, uint* v)
    {
      GL.Delegates.glVertexAttrib4Nuiv(index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nusv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, ushort[] v)
    {
      fixed (ushort* v1 = v)
        GL.Delegates.glVertexAttrib4Nusv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nusv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, ref ushort v)
    {
      fixed (ushort* v1 = &v)
        GL.Delegates.glVertexAttrib4Nusv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4Nusv", Version = "2.0")]
    public static unsafe void VertexAttrib4N(uint index, ushort* v)
    {
      GL.Delegates.glVertexAttrib4Nusv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4s", Version = "2.0")]
    public static void VertexAttrib4(int index, short x, short y, short z, short w)
    {
      GL.Delegates.glVertexAttrib4s((uint) index, x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4s", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttrib4(uint index, short x, short y, short z, short w)
    {
      GL.Delegates.glVertexAttrib4s(index, x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4sv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttrib4sv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4sv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttrib4sv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4sv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, short* v)
    {
      GL.Delegates.glVertexAttrib4sv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4sv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttrib4sv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4sv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttrib4sv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4sv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, short* v)
    {
      GL.Delegates.glVertexAttrib4sv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4ubv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, byte[] v)
    {
      fixed (byte* v1 = v)
        GL.Delegates.glVertexAttrib4ubv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4ubv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int index, ref byte v)
    {
      fixed (byte* v1 = &v)
        GL.Delegates.glVertexAttrib4ubv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4ubv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(int index, byte* v)
    {
      GL.Delegates.glVertexAttrib4ubv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4ubv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, byte[] v)
    {
      fixed (byte* v1 = v)
        GL.Delegates.glVertexAttrib4ubv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4ubv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, ref byte v)
    {
      fixed (byte* v1 = &v)
        GL.Delegates.glVertexAttrib4ubv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4ubv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, byte* v)
    {
      GL.Delegates.glVertexAttrib4ubv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4uiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, uint[] v)
    {
      fixed (uint* v1 = v)
        GL.Delegates.glVertexAttrib4uiv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4uiv", Version = "2.0")]
    public static unsafe void VertexAttrib4(uint index, ref uint v)
    {
      fixed (uint* v1 = &v)
        GL.Delegates.glVertexAttrib4uiv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4uiv", Version = "2.0")]
    public static unsafe void VertexAttrib4(uint index, uint* v)
    {
      GL.Delegates.glVertexAttrib4uiv(index, v);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4usv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, ushort[] v)
    {
      fixed (ushort* v1 = v)
        GL.Delegates.glVertexAttrib4usv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4usv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, ref ushort v)
    {
      fixed (ushort* v1 = &v)
        GL.Delegates.glVertexAttrib4usv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttrib4usv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint index, ushort* v)
    {
      GL.Delegates.glVertexAttrib4usv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_3", EntryPoint = "glVertexAttribDivisor", Version = "1.1")]
    public static void VertexAttribDivisor(int index, int divisor)
    {
      GL.Delegates.glVertexAttribDivisor((uint) index, (uint) divisor);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_3", EntryPoint = "glVertexAttribDivisor", Version = "1.1")]
    public static void VertexAttribDivisor(uint index, uint divisor)
    {
      GL.Delegates.glVertexAttribDivisor(index, divisor);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI1i", Version = "3.0")]
    public static void VertexAttribI1(int index, int x)
    {
      GL.Delegates.glVertexAttribI1i((uint) index, x);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI1i", Version = "3.0")]
    [CLSCompliant(false)]
    public static void VertexAttribI1(uint index, int x)
    {
      GL.Delegates.glVertexAttribI1i(index, x);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI1iv", Version = "3.0")]
    public static unsafe void VertexAttribI1(int index, int* v)
    {
      GL.Delegates.glVertexAttribI1iv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI1iv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI1(uint index, int* v)
    {
      GL.Delegates.glVertexAttribI1iv(index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI1ui", Version = "3.0")]
    public static void VertexAttribI1(uint index, uint x)
    {
      GL.Delegates.glVertexAttribI1ui(index, x);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI1uiv", Version = "3.0")]
    public static unsafe void VertexAttribI1(uint index, uint* v)
    {
      GL.Delegates.glVertexAttribI1uiv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2i", Version = "3.0")]
    public static void VertexAttribI2(int index, int x, int y)
    {
      GL.Delegates.glVertexAttribI2i((uint) index, x, y);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2i", Version = "3.0")]
    [CLSCompliant(false)]
    public static void VertexAttribI2(uint index, int x, int y)
    {
      GL.Delegates.glVertexAttribI2i(index, x, y);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2iv", Version = "3.0")]
    public static unsafe void VertexAttribI2(int index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttribI2iv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2iv", Version = "3.0")]
    public static unsafe void VertexAttribI2(int index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttribI2iv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2iv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI2(int index, int* v)
    {
      GL.Delegates.glVertexAttribI2iv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2iv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI2(uint index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttribI2iv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2iv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI2(uint index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttribI2iv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2iv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI2(uint index, int* v)
    {
      GL.Delegates.glVertexAttribI2iv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2ui", Version = "3.0")]
    [CLSCompliant(false)]
    public static void VertexAttribI2(uint index, uint x, uint y)
    {
      GL.Delegates.glVertexAttribI2ui(index, x, y);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI2(uint index, uint[] v)
    {
      fixed (uint* v1 = v)
        GL.Delegates.glVertexAttribI2uiv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI2(uint index, ref uint v)
    {
      fixed (uint* v1 = &v)
        GL.Delegates.glVertexAttribI2uiv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI2uiv", Version = "3.0")]
    public static unsafe void VertexAttribI2(uint index, uint* v)
    {
      GL.Delegates.glVertexAttribI2uiv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3i", Version = "3.0")]
    public static void VertexAttribI3(int index, int x, int y, int z)
    {
      GL.Delegates.glVertexAttribI3i((uint) index, x, y, z);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3i", Version = "3.0")]
    public static void VertexAttribI3(uint index, int x, int y, int z)
    {
      GL.Delegates.glVertexAttribI3i(index, x, y, z);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3iv", Version = "3.0")]
    public static unsafe void VertexAttribI3(int index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttribI3iv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3iv", Version = "3.0")]
    public static unsafe void VertexAttribI3(int index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttribI3iv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3iv", Version = "3.0")]
    public static unsafe void VertexAttribI3(int index, int* v)
    {
      GL.Delegates.glVertexAttribI3iv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3iv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI3(uint index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttribI3iv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3iv", Version = "3.0")]
    public static unsafe void VertexAttribI3(uint index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttribI3iv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3iv", Version = "3.0")]
    public static unsafe void VertexAttribI3(uint index, int* v)
    {
      GL.Delegates.glVertexAttribI3iv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3ui", Version = "3.0")]
    [CLSCompliant(false)]
    public static void VertexAttribI3(uint index, uint x, uint y, uint z)
    {
      GL.Delegates.glVertexAttribI3ui(index, x, y, z);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI3(uint index, uint[] v)
    {
      fixed (uint* v1 = v)
        GL.Delegates.glVertexAttribI3uiv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3uiv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI3(uint index, ref uint v)
    {
      fixed (uint* v1 = &v)
        GL.Delegates.glVertexAttribI3uiv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI3uiv", Version = "3.0")]
    public static unsafe void VertexAttribI3(uint index, uint* v)
    {
      GL.Delegates.glVertexAttribI3uiv(index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4bv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, sbyte[] v)
    {
      fixed (sbyte* v1 = v)
        GL.Delegates.glVertexAttribI4bv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4bv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, ref sbyte v)
    {
      fixed (sbyte* v1 = &v)
        GL.Delegates.glVertexAttribI4bv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4bv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, sbyte* v)
    {
      GL.Delegates.glVertexAttribI4bv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4i", Version = "3.0")]
    public static void VertexAttribI4(int index, int x, int y, int z, int w)
    {
      GL.Delegates.glVertexAttribI4i((uint) index, x, y, z, w);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4i", Version = "3.0")]
    public static void VertexAttribI4(uint index, int x, int y, int z, int w)
    {
      GL.Delegates.glVertexAttribI4i(index, x, y, z, w);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4iv", Version = "3.0")]
    public static unsafe void VertexAttribI4(int index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttribI4iv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4iv", Version = "3.0")]
    public static unsafe void VertexAttribI4(int index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttribI4iv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4iv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI4(int index, int* v)
    {
      GL.Delegates.glVertexAttribI4iv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4iv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glVertexAttribI4iv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4iv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI4(uint index, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glVertexAttribI4iv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4iv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI4(uint index, int* v)
    {
      GL.Delegates.glVertexAttribI4iv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4sv", Version = "3.0")]
    public static unsafe void VertexAttribI4(int index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttribI4sv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4sv", Version = "3.0")]
    public static unsafe void VertexAttribI4(int index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttribI4sv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4sv", Version = "3.0")]
    public static unsafe void VertexAttribI4(int index, short* v)
    {
      GL.Delegates.glVertexAttribI4sv((uint) index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4sv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI4(uint index, short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glVertexAttribI4sv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4sv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI4(uint index, ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glVertexAttribI4sv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4sv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, short* v)
    {
      GL.Delegates.glVertexAttribI4sv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4ubv", Version = "3.0")]
    public static unsafe void VertexAttribI4(int index, byte[] v)
    {
      fixed (byte* v1 = v)
        GL.Delegates.glVertexAttribI4ubv((uint) index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4ubv", Version = "3.0")]
    public static unsafe void VertexAttribI4(int index, ref byte v)
    {
      fixed (byte* v1 = &v)
        GL.Delegates.glVertexAttribI4ubv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4ubv", Version = "3.0")]
    public static unsafe void VertexAttribI4(int index, byte* v)
    {
      GL.Delegates.glVertexAttribI4ubv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4ubv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, byte[] v)
    {
      fixed (byte* v1 = v)
        GL.Delegates.glVertexAttribI4ubv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4ubv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, ref byte v)
    {
      fixed (byte* v1 = &v)
        GL.Delegates.glVertexAttribI4ubv(index, v1);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4ubv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI4(uint index, byte* v)
    {
      GL.Delegates.glVertexAttribI4ubv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4ui", Version = "3.0")]
    [CLSCompliant(false)]
    public static void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
    {
      GL.Delegates.glVertexAttribI4ui(index, x, y, z, w);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4uiv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, uint[] v)
    {
      fixed (uint* v1 = v)
        GL.Delegates.glVertexAttribI4uiv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4uiv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, ref uint v)
    {
      fixed (uint* v1 = &v)
        GL.Delegates.glVertexAttribI4uiv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4uiv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, uint* v)
    {
      GL.Delegates.glVertexAttribI4uiv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4usv", Version = "3.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribI4(uint index, ushort[] v)
    {
      fixed (ushort* v1 = v)
        GL.Delegates.glVertexAttribI4usv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4usv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, ref ushort v)
    {
      fixed (ushort* v1 = &v)
        GL.Delegates.glVertexAttribI4usv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribI4usv", Version = "3.0")]
    public static unsafe void VertexAttribI4(uint index, ushort* v)
    {
      GL.Delegates.glVertexAttribI4usv(index, v);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    public static void VertexAttribIPointer(int index, int size, VertexAttribIPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glVertexAttribIPointer((uint) index, size, type, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    public static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIPointerType type, int stride, [In, Out] T4[] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribIPointer((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    public static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIPointerType type, int stride, [In, Out] T4[,] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribIPointer((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    public static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIPointerType type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribIPointer((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    public static void VertexAttribIPointer<T4>(int index, int size, VertexAttribIPointerType type, int stride, [In, Out] ref T4 pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribIPointer((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    public static void VertexAttribIPointer(uint index, int size, VertexAttribIPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glVertexAttribIPointer(index, size, type, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    [CLSCompliant(false)]
    public static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIPointerType type, int stride, [In, Out] T4[] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribIPointer(index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    [CLSCompliant(false)]
    public static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIPointerType type, int stride, [In, Out] T4[,] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribIPointer(index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    [CLSCompliant(false)]
    public static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIPointerType type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribIPointer(index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_3_0", EntryPoint = "glVertexAttribIPointer", Version = "3.0")]
    public static void VertexAttribIPointer<T4>(uint index, int size, VertexAttribIPointerType type, int stride, [In, Out] ref T4 pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribIPointer(index, size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1d", Version = "4.1")]
    public static void VertexAttribL1(int index, double x)
    {
      GL.Delegates.glVertexAttribL1d((uint) index, x);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1d", Version = "4.1")]
    public static void VertexAttribL1(uint index, double x)
    {
      GL.Delegates.glVertexAttribL1d(index, x);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1dv", Version = "4.1")]
    public static unsafe void VertexAttribL1(int index, double* v)
    {
      GL.Delegates.glVertexAttribL1dv((uint) index, v);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribL1(uint index, double* v)
    {
      GL.Delegates.glVertexAttribL1dv(index, v);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2d", Version = "4.1")]
    public static void VertexAttribL2(int index, double x, double y)
    {
      GL.Delegates.glVertexAttribL2d((uint) index, x, y);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2d", Version = "4.1")]
    [CLSCompliant(false)]
    public static void VertexAttribL2(uint index, double x, double y)
    {
      GL.Delegates.glVertexAttribL2d(index, x, y);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dv", Version = "4.1")]
    public static unsafe void VertexAttribL2(int index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttribL2dv((uint) index, v1);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dv", Version = "4.1")]
    public static unsafe void VertexAttribL2(int index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttribL2dv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dv", Version = "4.1")]
    public static unsafe void VertexAttribL2(int index, double* v)
    {
      GL.Delegates.glVertexAttribL2dv((uint) index, v);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribL2(uint index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttribL2dv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dv", Version = "4.1")]
    public static unsafe void VertexAttribL2(uint index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttribL2dv(index, v1);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribL2(uint index, double* v)
    {
      GL.Delegates.glVertexAttribL2dv(index, v);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3d", Version = "4.1")]
    public static void VertexAttribL3(int index, double x, double y, double z)
    {
      GL.Delegates.glVertexAttribL3d((uint) index, x, y, z);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3d", Version = "4.1")]
    [CLSCompliant(false)]
    public static void VertexAttribL3(uint index, double x, double y, double z)
    {
      GL.Delegates.glVertexAttribL3d(index, x, y, z);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dv", Version = "4.1")]
    public static unsafe void VertexAttribL3(int index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttribL3dv((uint) index, v1);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dv", Version = "4.1")]
    public static unsafe void VertexAttribL3(int index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttribL3dv((uint) index, v1);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribL3(int index, double* v)
    {
      GL.Delegates.glVertexAttribL3dv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dv", Version = "4.1")]
    public static unsafe void VertexAttribL3(uint index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttribL3dv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dv", Version = "4.1")]
    public static unsafe void VertexAttribL3(uint index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttribL3dv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dv", Version = "4.1")]
    public static unsafe void VertexAttribL3(uint index, double* v)
    {
      GL.Delegates.glVertexAttribL3dv(index, v);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4d", Version = "4.1")]
    public static void VertexAttribL4(int index, double x, double y, double z, double w)
    {
      GL.Delegates.glVertexAttribL4d((uint) index, x, y, z, w);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4d", Version = "4.1")]
    public static void VertexAttribL4(uint index, double x, double y, double z, double w)
    {
      GL.Delegates.glVertexAttribL4d(index, x, y, z, w);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dv", Version = "4.1")]
    public static unsafe void VertexAttribL4(int index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttribL4dv((uint) index, v1);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dv", Version = "4.1")]
    public static unsafe void VertexAttribL4(int index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttribL4dv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dv", Version = "4.1")]
    public static unsafe void VertexAttribL4(int index, double* v)
    {
      GL.Delegates.glVertexAttribL4dv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dv", Version = "4.1")]
    public static unsafe void VertexAttribL4(uint index, double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glVertexAttribL4dv(index, v1);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribL4(uint index, ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glVertexAttribL4dv(index, v1);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribL4(uint index, double* v)
    {
      GL.Delegates.glVertexAttribL4dv(index, v);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    public static void VertexAttribLPointer(int index, int size, VertexAttribDPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glVertexAttribLPointer((uint) index, size, type, stride, pointer);
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    public static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDPointerType type, int stride, [In, Out] T4[] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribLPointer((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    public static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDPointerType type, int stride, [In, Out] T4[,] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribLPointer((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    public static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDPointerType type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribLPointer((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    public static void VertexAttribLPointer<T4>(int index, int size, VertexAttribDPointerType type, int stride, [In, Out] ref T4 pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribLPointer((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    public static void VertexAttribLPointer(uint index, int size, VertexAttribDPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glVertexAttribLPointer(index, size, type, stride, pointer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    public static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDPointerType type, int stride, [In, Out] T4[] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribLPointer(index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    [CLSCompliant(false)]
    public static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDPointerType type, int stride, [In, Out] T4[,] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribLPointer(index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    [CLSCompliant(false)]
    public static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDPointerType type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribLPointer(index, size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointer", Version = "4.1")]
    [CLSCompliant(false)]
    public static void VertexAttribLPointer<T4>(uint index, int size, VertexAttribDPointerType type, int stride, [In, Out] ref T4 pointer) where T4 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribLPointer(index, size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T4) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP1ui", Version = "1.2")]
    public static void VertexAttribP1(int index, PackedPointerType type, bool normalized, int value)
    {
      GL.Delegates.glVertexAttribP1ui((uint) index, type, normalized, (uint) value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP1ui", Version = "1.2")]
    [CLSCompliant(false)]
    public static void VertexAttribP1(uint index, PackedPointerType type, bool normalized, uint value)
    {
      GL.Delegates.glVertexAttribP1ui(index, type, normalized, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP1uiv", Version = "1.2")]
    public static unsafe void VertexAttribP1(int index, PackedPointerType type, bool normalized, int* value)
    {
      GL.Delegates.glVertexAttribP1uiv((uint) index, type, normalized, (uint*) value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP1uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribP1(uint index, PackedPointerType type, bool normalized, uint* value)
    {
      GL.Delegates.glVertexAttribP1uiv(index, type, normalized, value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP2ui", Version = "1.2")]
    public static void VertexAttribP2(int index, PackedPointerType type, bool normalized, int value)
    {
      GL.Delegates.glVertexAttribP2ui((uint) index, type, normalized, (uint) value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP2ui", Version = "1.2")]
    public static void VertexAttribP2(uint index, PackedPointerType type, bool normalized, uint value)
    {
      GL.Delegates.glVertexAttribP2ui(index, type, normalized, value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP2uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribP2(int index, PackedPointerType type, bool normalized, int* value)
    {
      GL.Delegates.glVertexAttribP2uiv((uint) index, type, normalized, (uint*) value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP2uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribP2(uint index, PackedPointerType type, bool normalized, uint* value)
    {
      GL.Delegates.glVertexAttribP2uiv(index, type, normalized, value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP3ui", Version = "1.2")]
    public static void VertexAttribP3(int index, PackedPointerType type, bool normalized, int value)
    {
      GL.Delegates.glVertexAttribP3ui((uint) index, type, normalized, (uint) value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP3ui", Version = "1.2")]
    public static void VertexAttribP3(uint index, PackedPointerType type, bool normalized, uint value)
    {
      GL.Delegates.glVertexAttribP3ui(index, type, normalized, value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP3uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribP3(int index, PackedPointerType type, bool normalized, int* value)
    {
      GL.Delegates.glVertexAttribP3uiv((uint) index, type, normalized, (uint*) value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP3uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribP3(uint index, PackedPointerType type, bool normalized, uint* value)
    {
      GL.Delegates.glVertexAttribP3uiv(index, type, normalized, value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP4ui", Version = "1.2")]
    public static void VertexAttribP4(int index, PackedPointerType type, bool normalized, int value)
    {
      GL.Delegates.glVertexAttribP4ui((uint) index, type, normalized, (uint) value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP4ui", Version = "1.2")]
    public static void VertexAttribP4(uint index, PackedPointerType type, bool normalized, uint value)
    {
      GL.Delegates.glVertexAttribP4ui(index, type, normalized, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP4uiv", Version = "1.2")]
    public static unsafe void VertexAttribP4(int index, PackedPointerType type, bool normalized, int* value)
    {
      GL.Delegates.glVertexAttribP4uiv((uint) index, type, normalized, (uint*) value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexAttribP4uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttribP4(uint index, PackedPointerType type, bool normalized, uint* value)
    {
      GL.Delegates.glVertexAttribP4uiv(index, type, normalized, value);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
    {
      GL.Delegates.glVertexAttribPointer((uint) index, size, type, normalized, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[] pointer) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer((uint) index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[,] pointer) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer((uint) index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[,,] pointer) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer((uint) index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] ref T5 pointer) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer((uint) index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer)
    {
      GL.Delegates.glVertexAttribPointer(index, size, type, normalized, stride, pointer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[] pointer) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer(index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[,] pointer) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer(index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[,,] pointer) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer(index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_2_0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] ref T5 pointer) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer(index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP2ui", Version = "1.2")]
    public static void VertexP2(PackedPointerType type, int value)
    {
      GL.Delegates.glVertexP2ui(type, (uint) value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP2ui", Version = "1.2")]
    [CLSCompliant(false)]
    public static void VertexP2(PackedPointerType type, uint value)
    {
      GL.Delegates.glVertexP2ui(type, value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP2uiv", Version = "1.2")]
    public static unsafe void VertexP2(PackedPointerType type, int* value)
    {
      GL.Delegates.glVertexP2uiv(type, (uint*) value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP2uiv", Version = "1.2")]
    public static unsafe void VertexP2(PackedPointerType type, uint* value)
    {
      GL.Delegates.glVertexP2uiv(type, value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP3ui", Version = "1.2")]
    public static void VertexP3(PackedPointerType type, int value)
    {
      GL.Delegates.glVertexP3ui(type, (uint) value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP3ui", Version = "1.2")]
    public static void VertexP3(PackedPointerType type, uint value)
    {
      GL.Delegates.glVertexP3ui(type, value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP3uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexP3(PackedPointerType type, int* value)
    {
      GL.Delegates.glVertexP3uiv(type, (uint*) value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP3uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexP3(PackedPointerType type, uint* value)
    {
      GL.Delegates.glVertexP3uiv(type, value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP4ui", Version = "1.2")]
    public static void VertexP4(PackedPointerType type, int value)
    {
      GL.Delegates.glVertexP4ui(type, (uint) value);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP4ui", Version = "1.2")]
    public static void VertexP4(PackedPointerType type, uint value)
    {
      GL.Delegates.glVertexP4ui(type, value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP4uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexP4(PackedPointerType type, int* value)
    {
      GL.Delegates.glVertexP4uiv(type, (uint*) value);
    }

    [AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", EntryPoint = "glVertexP4uiv", Version = "1.2")]
    [CLSCompliant(false)]
    public static unsafe void VertexP4(PackedPointerType type, uint* value)
    {
      GL.Delegates.glVertexP4uiv(type, value);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer)
    {
      GL.Delegates.glVertexPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer<T3>(int size, VertexPointerType type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer<T3>(int size, VertexPointerType type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer<T3>(int size, VertexPointerType type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_1_DEPRECATED", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer<T3>(int size, VertexPointerType type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "VERSION_1_0", EntryPoint = "glViewport", Version = "1.0")]
    public static void Viewport(int x, int y, int width, int height)
    {
      GL.Delegates.glViewport(x, y, width, height);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportArrayv", Version = "4.1")]
    public static unsafe void ViewportArray(int first, int count, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glViewportArrayv((uint) first, count, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportArrayv", Version = "4.1")]
    public static unsafe void ViewportArray(int first, int count, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glViewportArrayv((uint) first, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportArrayv", Version = "4.1")]
    public static unsafe void ViewportArray(int first, int count, float* v)
    {
      GL.Delegates.glViewportArrayv((uint) first, count, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportArrayv", Version = "4.1")]
    public static unsafe void ViewportArray(uint first, int count, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glViewportArrayv(first, count, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportArrayv", Version = "4.1")]
    [CLSCompliant(false)]
    public static unsafe void ViewportArray(uint first, int count, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glViewportArrayv(first, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportArrayv", Version = "4.1")]
    public static unsafe void ViewportArray(uint first, int count, float* v)
    {
      GL.Delegates.glViewportArrayv(first, count, v);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportIndexedf", Version = "4.1")]
    public static void ViewportIndexed(int index, float x, float y, float w, float h)
    {
      GL.Delegates.glViewportIndexedf((uint) index, x, y, w, h);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportIndexedf", Version = "4.1")]
    public static void ViewportIndexed(uint index, float x, float y, float w, float h)
    {
      GL.Delegates.glViewportIndexedf(index, x, y, w, h);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportIndexedfv", Version = "4.1")]
    public static unsafe void ViewportIndexed(int index, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glViewportIndexedfv((uint) index, v1);
    }

    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportIndexedfv", Version = "4.1")]
    public static unsafe void ViewportIndexed(int index, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glViewportIndexedfv((uint) index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportIndexedfv", Version = "4.1")]
    public static unsafe void ViewportIndexed(int index, float* v)
    {
      GL.Delegates.glViewportIndexedfv((uint) index, v);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportIndexedfv", Version = "4.1")]
    public static unsafe void ViewportIndexed(uint index, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glViewportIndexedfv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportIndexedfv", Version = "4.1")]
    public static unsafe void ViewportIndexed(uint index, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glViewportIndexedfv(index, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "ARB_viewport_array", EntryPoint = "glViewportIndexedfv", Version = "4.1")]
    public static unsafe void ViewportIndexed(uint index, float* v)
    {
      GL.Delegates.glViewportIndexedfv(index, v);
    }

    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glWaitSync", Version = "1.2")]
    public static void WaitSync(IntPtr sync, int flags, long timeout)
    {
      GL.Delegates.glWaitSync(sync, (uint) flags, (ulong) timeout);
    }

    [AutoGenerated(Category = "ARB_sync", EntryPoint = "glWaitSync", Version = "1.2")]
    [CLSCompliant(false)]
    public static void WaitSync(IntPtr sync, uint flags, ulong timeout)
    {
      GL.Delegates.glWaitSync(sync, flags, timeout);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2d", Version = "1.4")]
    public static void WindowPos2(double x, double y)
    {
      GL.Delegates.glWindowPos2d(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2dv", Version = "1.4")]
    public static unsafe void WindowPos2(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glWindowPos2dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2dv", Version = "1.4")]
    public static unsafe void WindowPos2(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glWindowPos2dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2dv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void WindowPos2(double* v)
    {
      GL.Delegates.glWindowPos2dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2f", Version = "1.4")]
    public static void WindowPos2(float x, float y)
    {
      GL.Delegates.glWindowPos2f(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2fv", Version = "1.4")]
    public static unsafe void WindowPos2(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glWindowPos2fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2fv", Version = "1.4")]
    public static unsafe void WindowPos2(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glWindowPos2fv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2fv", Version = "1.4")]
    public static unsafe void WindowPos2(float* v)
    {
      GL.Delegates.glWindowPos2fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2i", Version = "1.4")]
    public static void WindowPos2(int x, int y)
    {
      GL.Delegates.glWindowPos2i(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2iv", Version = "1.4")]
    public static unsafe void WindowPos2(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glWindowPos2iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2iv", Version = "1.4")]
    public static unsafe void WindowPos2(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glWindowPos2iv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2iv", Version = "1.4")]
    public static unsafe void WindowPos2(int* v)
    {
      GL.Delegates.glWindowPos2iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2s", Version = "1.4")]
    public static void WindowPos2(short x, short y)
    {
      GL.Delegates.glWindowPos2s(x, y);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2sv", Version = "1.4")]
    public static unsafe void WindowPos2(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glWindowPos2sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2sv", Version = "1.4")]
    public static unsafe void WindowPos2(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glWindowPos2sv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos2sv", Version = "1.4")]
    public static unsafe void WindowPos2(short* v)
    {
      GL.Delegates.glWindowPos2sv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3d", Version = "1.4")]
    public static void WindowPos3(double x, double y, double z)
    {
      GL.Delegates.glWindowPos3d(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3dv", Version = "1.4")]
    public static unsafe void WindowPos3(double[] v)
    {
      fixed (double* v1 = v)
        GL.Delegates.glWindowPos3dv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3dv", Version = "1.4")]
    public static unsafe void WindowPos3(ref double v)
    {
      fixed (double* v1 = &v)
        GL.Delegates.glWindowPos3dv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3dv", Version = "1.4")]
    public static unsafe void WindowPos3(double* v)
    {
      GL.Delegates.glWindowPos3dv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3f", Version = "1.4")]
    public static void WindowPos3(float x, float y, float z)
    {
      GL.Delegates.glWindowPos3f(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3fv", Version = "1.4")]
    public static unsafe void WindowPos3(float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glWindowPos3fv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3fv", Version = "1.4")]
    public static unsafe void WindowPos3(ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glWindowPos3fv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3fv", Version = "1.4")]
    public static unsafe void WindowPos3(float* v)
    {
      GL.Delegates.glWindowPos3fv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3i", Version = "1.4")]
    public static void WindowPos3(int x, int y, int z)
    {
      GL.Delegates.glWindowPos3i(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3iv", Version = "1.4")]
    public static unsafe void WindowPos3(int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glWindowPos3iv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3iv", Version = "1.4")]
    public static unsafe void WindowPos3(ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glWindowPos3iv(v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3iv", Version = "1.4")]
    public static unsafe void WindowPos3(int* v)
    {
      GL.Delegates.glWindowPos3iv(v);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3s", Version = "1.4")]
    public static void WindowPos3(short x, short y, short z)
    {
      GL.Delegates.glWindowPos3s(x, y, z);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3sv", Version = "1.4")]
    public static unsafe void WindowPos3(short[] v)
    {
      fixed (short* v1 = v)
        GL.Delegates.glWindowPos3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3sv", Version = "1.4")]
    public static unsafe void WindowPos3(ref short v)
    {
      fixed (short* v1 = &v)
        GL.Delegates.glWindowPos3sv(v1);
    }

    [AutoGenerated(Category = "VERSION_1_4_DEPRECATED", EntryPoint = "glWindowPos3sv", Version = "1.4")]
    [CLSCompliant(false)]
    public static unsafe void WindowPos3(short* v)
    {
      GL.Delegates.glWindowPos3sv(v);
    }

    internal static class Core
    {
      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAccum")]
      internal static void Accum(AccumOp op, float value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glActiveProgramEXT")]
      internal static void ActiveProgramEXT(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glActiveShaderProgram")]
      internal static void ActiveShaderProgram(uint pipeline, uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glActiveStencilFaceEXT")]
      internal static void ActiveStencilFaceEXT(ExtStencilTwoSide face);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glActiveTexture")]
      internal static void ActiveTexture(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glActiveTextureARB")]
      internal static void ActiveTextureARB(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glActiveVaryingNV")]
      internal static void ActiveVaryingNV(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAlphaFragmentOp1ATI")]
      internal static void AlphaFragmentOp1ATI(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAlphaFragmentOp2ATI")]
      internal static void AlphaFragmentOp2ATI(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAlphaFragmentOp3ATI")]
      internal static void AlphaFragmentOp3ATI(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAlphaFunc")]
      internal static void AlphaFunc(AlphaFunction func, float @ref);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glApplyTextureEXT")]
      internal static void ApplyTextureEXT(ExtLightTexture mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAreProgramsResidentNV")]
      internal static bool AreProgramsResidentNV(int n, uint* programs, [Out] bool* residences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResident")]
      internal static bool AreTexturesResident(int n, uint* textures, [Out] bool* residences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAreTexturesResidentEXT")]
      internal static bool AreTexturesResidentEXT(int n, uint* textures, [Out] bool* residences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glArrayElement")]
      internal static void ArrayElement(int i);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glArrayElementEXT")]
      internal static void ArrayElementEXT(int i);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glArrayObjectATI")]
      internal static void ArrayObjectATI(EnableCap array, int size, AtiVertexArrayObject type, int stride, uint buffer, uint offset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAsyncMarkerSGIX")]
      internal static void AsyncMarkerSGIX(uint marker);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAttachObjectARB")]
      internal static void AttachObjectARB(uint containerObj, uint obj);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glAttachShader")]
      internal static void AttachShader(uint program, uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBegin")]
      internal static void Begin(BeginMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginConditionalRender")]
      internal static void BeginConditionalRender(uint id, ConditionalRenderType mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginConditionalRenderNV")]
      internal static void BeginConditionalRenderNV(uint id, NvConditionalRender mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginFragmentShaderATI")]
      internal static void BeginFragmentShaderATI();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginOcclusionQueryNV")]
      internal static void BeginOcclusionQueryNV(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginPerfMonitorAMD")]
      internal static void BeginPerfMonitorAMD(uint monitor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginQuery")]
      internal static void BeginQuery(QueryTarget target, uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginQueryARB")]
      internal static void BeginQueryARB(ArbOcclusionQuery target, uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginQueryIndexed")]
      internal static void BeginQueryIndexed(QueryTarget target, uint index, uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginTransformFeedback")]
      internal static void BeginTransformFeedback(BeginFeedbackMode primitiveMode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginTransformFeedbackEXT")]
      internal static void BeginTransformFeedbackEXT(ExtTransformFeedback primitiveMode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginTransformFeedbackNV")]
      internal static void BeginTransformFeedbackNV(NvTransformFeedback primitiveMode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginVertexShaderEXT")]
      internal static void BeginVertexShaderEXT();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBeginVideoCaptureNV")]
      internal static void BeginVideoCaptureNV(uint video_capture_slot);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindAttribLocation")]
      internal static void BindAttribLocation(uint program, uint index, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindAttribLocationARB")]
      internal static void BindAttribLocationARB(uint programObj, uint index, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBuffer")]
      internal static void BindBuffer(BufferTarget target, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBufferARB")]
      internal static void BindBufferARB(BufferTargetArb target, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBufferBase")]
      internal static void BindBufferBase(BufferTarget target, uint index, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBufferBaseEXT")]
      internal static void BindBufferBaseEXT(ExtTransformFeedback target, uint index, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBufferBaseNV")]
      internal static void BindBufferBaseNV(NvTransformFeedback target, uint index, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBufferOffsetEXT")]
      internal static void BindBufferOffsetEXT(ExtTransformFeedback target, uint index, uint buffer, IntPtr offset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBufferOffsetNV")]
      internal static void BindBufferOffsetNV(NvTransformFeedback target, uint index, uint buffer, IntPtr offset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBufferRange")]
      internal static void BindBufferRange(BufferTarget target, uint index, uint buffer, IntPtr offset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBufferRangeEXT")]
      internal static void BindBufferRangeEXT(ExtTransformFeedback target, uint index, uint buffer, IntPtr offset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindBufferRangeNV")]
      internal static void BindBufferRangeNV(NvTransformFeedback target, uint index, uint buffer, IntPtr offset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindFragDataLocation")]
      internal static void BindFragDataLocation(uint program, uint color, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindFragDataLocationEXT")]
      internal static void BindFragDataLocationEXT(uint program, uint color, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindFragDataLocationIndexed")]
      internal static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindFragmentShaderATI")]
      internal static void BindFragmentShaderATI(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindFramebuffer")]
      internal static void BindFramebuffer(FramebufferTarget target, uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindFramebufferEXT")]
      internal static void BindFramebufferEXT(FramebufferTarget target, uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindImageTextureEXT")]
      internal static void BindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, ExtShaderImageLoadStore access, int format);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindLightParameterEXT")]
      internal static int BindLightParameterEXT(LightName light, LightParameter value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindMaterialParameterEXT")]
      internal static int BindMaterialParameterEXT(MaterialFace face, MaterialParameter value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindMultiTextureEXT")]
      internal static void BindMultiTextureEXT(TextureUnit texunit, TextureTarget target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindParameterEXT")]
      internal static int BindParameterEXT(ExtVertexShader value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindProgramARB")]
      internal static void BindProgramARB(AssemblyProgramTargetArb target, uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindProgramNV")]
      internal static void BindProgramNV(AssemblyProgramTargetArb target, uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindProgramPipeline")]
      internal static void BindProgramPipeline(uint pipeline);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindRenderbuffer")]
      internal static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindRenderbufferEXT")]
      internal static void BindRenderbufferEXT(RenderbufferTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindSampler")]
      internal static void BindSampler(uint unit, uint sampler);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindTexGenParameterEXT")]
      internal static int BindTexGenParameterEXT(TextureUnit unit, TextureCoordName coord, TextureGenParameter value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindTexture")]
      internal static void BindTexture(TextureTarget target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindTextureEXT")]
      internal static void BindTextureEXT(TextureTarget target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindTextureUnitParameterEXT")]
      internal static int BindTextureUnitParameterEXT(TextureUnit unit, ExtVertexShader value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindTransformFeedback")]
      internal static void BindTransformFeedback(TransformFeedbackTarget target, uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindTransformFeedbackNV")]
      internal static void BindTransformFeedbackNV(NvTransformFeedback2 target, uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindVertexArray")]
      internal static void BindVertexArray(uint array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindVertexArrayAPPLE")]
      internal static void BindVertexArrayAPPLE(uint array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindVertexShaderEXT")]
      internal static void BindVertexShaderEXT(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindVideoCaptureStreamBufferNV")]
      internal static void BindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, NvVideoCapture frame_region, IntPtr offset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBindVideoCaptureStreamTextureNV")]
      internal static void BindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, NvVideoCapture frame_region, NvVideoCapture target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3bEXT")]
      internal static void Binormal3bEXT(sbyte bx, sbyte by, sbyte bz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3bvEXT")]
      internal static void Binormal3bvEXT(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3dEXT")]
      internal static void Binormal3dEXT(double bx, double by, double bz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3dvEXT")]
      internal static void Binormal3dvEXT(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3fEXT")]
      internal static void Binormal3fEXT(float bx, float by, float bz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3fvEXT")]
      internal static void Binormal3fvEXT(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3iEXT")]
      internal static void Binormal3iEXT(int bx, int by, int bz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3ivEXT")]
      internal static void Binormal3ivEXT(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3sEXT")]
      internal static void Binormal3sEXT(short bx, short by, short bz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormal3svEXT")]
      internal static void Binormal3svEXT(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBinormalPointerEXT")]
      internal static void BinormalPointerEXT(NormalPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBitmap")]
      internal static void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendColor")]
      internal static void BlendColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendColorEXT")]
      internal static void BlendColorEXT(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquation")]
      internal static void BlendEquation(BlendEquationMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquationEXT")]
      internal static void BlendEquationEXT(ExtBlendMinmax mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquationi")]
      internal static void BlendEquationi(uint buf, Version40 mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquationiARB")]
      internal static void BlendEquationiARB(uint buf, ArbDrawBuffersBlend mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquationIndexedAMD")]
      internal static void BlendEquationIndexedAMD(uint buf, AmdDrawBuffersBlend mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquationSeparate")]
      internal static void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquationSeparateEXT")]
      internal static void BlendEquationSeparateEXT(ExtBlendEquationSeparate modeRGB, ExtBlendEquationSeparate modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquationSeparatei")]
      internal static void BlendEquationSeparatei(uint buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquationSeparateiARB")]
      internal static void BlendEquationSeparateiARB(uint buf, ArbDrawBuffersBlend modeRGB, ArbDrawBuffersBlend modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendEquationSeparateIndexedAMD")]
      internal static void BlendEquationSeparateIndexedAMD(uint buf, AmdDrawBuffersBlend modeRGB, AmdDrawBuffersBlend modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFunc")]
      internal static void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFunci")]
      internal static void BlendFunci(uint buf, Version40 src, Version40 dst);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFunciARB")]
      internal static void BlendFunciARB(uint buf, ArbDrawBuffersBlend src, ArbDrawBuffersBlend dst);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFuncIndexedAMD")]
      internal static void BlendFuncIndexedAMD(uint buf, AmdDrawBuffersBlend src, AmdDrawBuffersBlend dst);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFuncSeparate")]
      internal static void BlendFuncSeparate(BlendingFactorSrc sfactorRGB, BlendingFactorDest dfactorRGB, BlendingFactorSrc sfactorAlpha, BlendingFactorDest dfactorAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFuncSeparateEXT")]
      internal static void BlendFuncSeparateEXT(ExtBlendFuncSeparate sfactorRGB, ExtBlendFuncSeparate dfactorRGB, ExtBlendFuncSeparate sfactorAlpha, ExtBlendFuncSeparate dfactorAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFuncSeparatei")]
      internal static void BlendFuncSeparatei(uint buf, Version40 srcRGB, Version40 dstRGB, Version40 srcAlpha, Version40 dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFuncSeparateiARB")]
      internal static void BlendFuncSeparateiARB(uint buf, ArbDrawBuffersBlend srcRGB, ArbDrawBuffersBlend dstRGB, ArbDrawBuffersBlend srcAlpha, ArbDrawBuffersBlend dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFuncSeparateIndexedAMD")]
      internal static void BlendFuncSeparateIndexedAMD(uint buf, AmdDrawBuffersBlend srcRGB, AmdDrawBuffersBlend dstRGB, AmdDrawBuffersBlend srcAlpha, AmdDrawBuffersBlend dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlendFuncSeparateINGR")]
      internal static void BlendFuncSeparateINGR(All sfactorRGB, All dfactorRGB, All sfactorAlpha, All dfactorAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlitFramebuffer")]
      internal static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBlitFramebufferEXT")]
      internal static void BlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, ExtFramebufferBlit filter);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBufferAddressRangeNV")]
      internal static void BufferAddressRangeNV(NvVertexBufferUnifiedMemory pname, uint index, ulong address, IntPtr length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBufferData")]
      internal static void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsageHint usage);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBufferDataARB")]
      internal static void BufferDataARB(BufferTargetArb target, IntPtr size, IntPtr data, BufferUsageArb usage);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBufferParameteriAPPLE")]
      internal static void BufferParameteriAPPLE(BufferTarget target, BufferParameterApple pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBufferSubData")]
      internal static void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glBufferSubDataARB")]
      internal static void BufferSubDataARB(BufferTargetArb target, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCallList")]
      internal static void CallList(uint list);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCallLists")]
      internal static void CallLists(int n, ListNameType type, IntPtr lists);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCheckFramebufferStatus")]
      internal static FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCheckFramebufferStatusEXT")]
      internal static FramebufferErrorCode CheckFramebufferStatusEXT(FramebufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCheckNamedFramebufferStatusEXT")]
      internal static ExtDirectStateAccess CheckNamedFramebufferStatusEXT(uint framebuffer, FramebufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClampColor")]
      internal static void ClampColor(ClampColorTarget target, ClampColorMode clamp);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClampColorARB")]
      internal static void ClampColorARB(ArbColorBufferFloat target, ArbColorBufferFloat clamp);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClear")]
      internal static void Clear(ClearBufferMask mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearAccum")]
      internal static void ClearAccum(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearBufferfi")]
      internal static void ClearBufferfi(ClearBuffer buffer, int drawbuffer, float depth, int stencil);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearBufferfv")]
      internal static void ClearBufferfv(ClearBuffer buffer, int drawbuffer, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearBufferiv")]
      internal static void ClearBufferiv(ClearBuffer buffer, int drawbuffer, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearBufferuiv")]
      internal static void ClearBufferuiv(ClearBuffer buffer, int drawbuffer, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearColor")]
      internal static void ClearColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearColorIiEXT")]
      internal static void ClearColorIiEXT(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearColorIuiEXT")]
      internal static void ClearColorIuiEXT(uint red, uint green, uint blue, uint alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearDepth")]
      internal static void ClearDepth(double depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearDepthdNV")]
      internal static void ClearDepthdNV(double depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearDepthf")]
      internal static void ClearDepthf(float d);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearIndex")]
      internal static void ClearIndex(float c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClearStencil")]
      internal static void ClearStencil(int s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClientActiveTexture")]
      internal static void ClientActiveTexture(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClientActiveTextureARB")]
      internal static void ClientActiveTextureARB(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClientActiveVertexStreamATI")]
      internal static void ClientActiveVertexStreamATI(AtiVertexStreams stream);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClientAttribDefaultEXT")]
      internal static void ClientAttribDefaultEXT(ClientAttribMask mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClientWaitSync")]
      internal static ArbSync ClientWaitSync(IntPtr sync, uint flags, ulong timeout);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glClipPlane")]
      internal static void ClipPlane(ClipPlaneName plane, double* equation);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3b")]
      internal static void Color3b(sbyte red, sbyte green, sbyte blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3bv")]
      internal static void Color3bv(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3d")]
      internal static void Color3d(double red, double green, double blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3dv")]
      internal static void Color3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3f")]
      internal static void Color3f(float red, float green, float blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3fv")]
      internal static void Color3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3fVertex3fSUN")]
      internal static void Color3fVertex3fSUN(float r, float g, float b, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3fVertex3fvSUN")]
      internal static void Color3fVertex3fvSUN(float* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3hNV")]
      internal static void Color3hNV(Half red, Half green, Half blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3hvNV")]
      internal static void Color3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3i")]
      internal static void Color3i(int red, int green, int blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3iv")]
      internal static void Color3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3s")]
      internal static void Color3s(short red, short green, short blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3sv")]
      internal static void Color3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3ub")]
      internal static void Color3ub(byte red, byte green, byte blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3ubv")]
      internal static void Color3ubv(byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3ui")]
      internal static void Color3ui(uint red, uint green, uint blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3uiv")]
      internal static void Color3uiv(uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3us")]
      internal static void Color3us(ushort red, ushort green, ushort blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor3usv")]
      internal static void Color3usv(ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4b")]
      internal static void Color4b(sbyte red, sbyte green, sbyte blue, sbyte alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4bv")]
      internal static void Color4bv(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4d")]
      internal static void Color4d(double red, double green, double blue, double alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4dv")]
      internal static void Color4dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4f")]
      internal static void Color4f(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4fNormal3fVertex3fSUN")]
      internal static void Color4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4fNormal3fVertex3fvSUN")]
      internal static void Color4fNormal3fVertex3fvSUN(float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4fv")]
      internal static void Color4fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4hNV")]
      internal static void Color4hNV(Half red, Half green, Half blue, Half alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4hvNV")]
      internal static void Color4hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4i")]
      internal static void Color4i(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4iv")]
      internal static void Color4iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4s")]
      internal static void Color4s(short red, short green, short blue, short alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4sv")]
      internal static void Color4sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4ub")]
      internal static void Color4ub(byte red, byte green, byte blue, byte alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4ubv")]
      internal static void Color4ubv(byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4ubVertex2fSUN")]
      internal static void Color4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4ubVertex2fvSUN")]
      internal static void Color4ubVertex2fvSUN(byte* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4ubVertex3fSUN")]
      internal static void Color4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4ubVertex3fvSUN")]
      internal static void Color4ubVertex3fvSUN(byte* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4ui")]
      internal static void Color4ui(uint red, uint green, uint blue, uint alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4uiv")]
      internal static void Color4uiv(uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4us")]
      internal static void Color4us(ushort red, ushort green, ushort blue, ushort alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColor4usv")]
      internal static void Color4usv(ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorFormatNV")]
      internal static void ColorFormatNV(int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorFragmentOp1ATI")]
      internal static void ColorFragmentOp1ATI(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorFragmentOp2ATI")]
      internal static void ColorFragmentOp2ATI(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorFragmentOp3ATI")]
      internal static void ColorFragmentOp3ATI(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorMask")]
      internal static void ColorMask(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorMaski")]
      internal static void ColorMaski(uint index, bool r, bool g, bool b, bool a);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorMaskIndexedEXT")]
      internal static void ColorMaskIndexedEXT(uint index, bool r, bool g, bool b, bool a);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorMaterial")]
      internal static void ColorMaterial(MaterialFace face, ColorMaterialParameter mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorP3ui")]
      internal static void ColorP3ui(PackedPointerType type, uint color);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorP3uiv")]
      internal static void ColorP3uiv(PackedPointerType type, uint* color);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorP4ui")]
      internal static void ColorP4ui(PackedPointerType type, uint color);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorP4uiv")]
      internal static void ColorP4uiv(PackedPointerType type, uint* color);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorPointer")]
      internal static void ColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorPointerEXT")]
      internal static void ColorPointerEXT(int size, ColorPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorPointerListIBM")]
      internal static void ColorPointerListIBM(int size, ColorPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorPointervINTEL")]
      internal static void ColorPointervINTEL(int size, VertexPointerType type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorSubTable")]
      internal static void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorSubTableEXT")]
      internal static void ColorSubTableEXT(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorTable")]
      internal static void ColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorTableEXT")]
      internal static void ColorTableEXT(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorTableParameterfv")]
      internal static void ColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorTableParameterfvSGI")]
      internal static void ColorTableParameterfvSGI(SgiColorTable target, SgiColorTable pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorTableParameteriv")]
      internal static void ColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorTableParameterivSGI")]
      internal static void ColorTableParameterivSGI(SgiColorTable target, SgiColorTable pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glColorTableSGI")]
      internal static void ColorTableSGI(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCombinerInputNV")]
      internal static void CombinerInputNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners input, NvRegisterCombiners mapping, NvRegisterCombiners componentUsage);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCombinerOutputNV")]
      internal static void CombinerOutputNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners abOutput, NvRegisterCombiners cdOutput, NvRegisterCombiners sumOutput, NvRegisterCombiners scale, NvRegisterCombiners bias, bool abDotProduct, bool cdDotProduct, bool muxSum);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCombinerParameterfNV")]
      internal static void CombinerParameterfNV(NvRegisterCombiners pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCombinerParameterfvNV")]
      internal static void CombinerParameterfvNV(NvRegisterCombiners pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCombinerParameteriNV")]
      internal static void CombinerParameteriNV(NvRegisterCombiners pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCombinerParameterivNV")]
      internal static void CombinerParameterivNV(NvRegisterCombiners pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCombinerStageParameterfvNV")]
      internal static void CombinerStageParameterfvNV(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompileShader")]
      internal static void CompileShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompileShaderARB")]
      internal static void CompileShaderARB(uint shaderObj);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompileShaderIncludeARB")]
      internal static void CompileShaderIncludeARB(uint shader, int count, string[] path, int* length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedMultiTexImage1DEXT")]
      internal static void CompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedMultiTexImage2DEXT")]
      internal static void CompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedMultiTexImage3DEXT")]
      internal static void CompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedMultiTexSubImage1DEXT")]
      internal static void CompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedMultiTexSubImage2DEXT")]
      internal static void CompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedMultiTexSubImage3DEXT")]
      internal static void CompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexImage1D")]
      internal static void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexImage1DARB")]
      internal static void CompressedTexImage1DARB(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexImage2D")]
      internal static void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexImage2DARB")]
      internal static void CompressedTexImage2DARB(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexImage3D")]
      internal static void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexImage3DARB")]
      internal static void CompressedTexImage3DARB(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexSubImage1D")]
      internal static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexSubImage1DARB")]
      internal static void CompressedTexSubImage1DARB(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexSubImage2D")]
      internal static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexSubImage2DARB")]
      internal static void CompressedTexSubImage2DARB(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexSubImage3D")]
      internal static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTexSubImage3DARB")]
      internal static void CompressedTexSubImage3DARB(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTextureImage1DEXT")]
      internal static void CompressedTextureImage1DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTextureImage2DEXT")]
      internal static void CompressedTextureImage2DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTextureImage3DEXT")]
      internal static void CompressedTextureImage3DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTextureSubImage1DEXT")]
      internal static void CompressedTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTextureSubImage2DEXT")]
      internal static void CompressedTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCompressedTextureSubImage3DEXT")]
      internal static void CompressedTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionFilter1D")]
      internal static void ConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionFilter1DEXT")]
      internal static void ConvolutionFilter1DEXT(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionFilter2D")]
      internal static void ConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionFilter2DEXT")]
      internal static void ConvolutionFilter2DEXT(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameterf")]
      internal static void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameterfEXT")]
      internal static void ConvolutionParameterfEXT(ExtConvolution target, ExtConvolution pname, float @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameterfv")]
      internal static void ConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameterfvEXT")]
      internal static void ConvolutionParameterfvEXT(ExtConvolution target, ExtConvolution pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameteri")]
      internal static void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameteriEXT")]
      internal static void ConvolutionParameteriEXT(ExtConvolution target, ExtConvolution pname, int @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameteriv")]
      internal static void ConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glConvolutionParameterivEXT")]
      internal static void ConvolutionParameterivEXT(ExtConvolution target, ExtConvolution pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyBufferSubData")]
      internal static void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyColorSubTable")]
      internal static void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyColorSubTableEXT")]
      internal static void CopyColorSubTableEXT(ColorTableTarget target, int start, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyColorTable")]
      internal static void CopyColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyColorTableSGI")]
      internal static void CopyColorTableSGI(SgiColorTable target, PixelInternalFormat internalformat, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyConvolutionFilter1D")]
      internal static void CopyConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyConvolutionFilter1DEXT")]
      internal static void CopyConvolutionFilter1DEXT(ExtConvolution target, PixelInternalFormat internalformat, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyConvolutionFilter2D")]
      internal static void CopyConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyConvolutionFilter2DEXT")]
      internal static void CopyConvolutionFilter2DEXT(ExtConvolution target, PixelInternalFormat internalformat, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyImageSubDataNV")]
      internal static void CopyImageSubDataNV(uint srcName, NvCopyImage srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, NvCopyImage dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyMultiTexImage1DEXT")]
      internal static void CopyMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyMultiTexImage2DEXT")]
      internal static void CopyMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyMultiTexSubImage1DEXT")]
      internal static void CopyMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyMultiTexSubImage2DEXT")]
      internal static void CopyMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyMultiTexSubImage3DEXT")]
      internal static void CopyMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyPixels")]
      internal static void CopyPixels(int x, int y, int width, int height, PixelCopyType type);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexImage1D")]
      internal static void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexImage1DEXT")]
      internal static void CopyTexImage1DEXT(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexImage2D")]
      internal static void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexImage2DEXT")]
      internal static void CopyTexImage2DEXT(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage1D")]
      internal static void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage1DEXT")]
      internal static void CopyTexSubImage1DEXT(TextureTarget target, int level, int xoffset, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage2D")]
      internal static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage2DEXT")]
      internal static void CopyTexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage3D")]
      internal static void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTexSubImage3DEXT")]
      internal static void CopyTexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTextureImage1DEXT")]
      internal static void CopyTextureImage1DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTextureImage2DEXT")]
      internal static void CopyTextureImage2DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTextureSubImage1DEXT")]
      internal static void CopyTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTextureSubImage2DEXT")]
      internal static void CopyTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCopyTextureSubImage3DEXT")]
      internal static void CopyTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCreateProgram")]
      internal static int CreateProgram();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCreateProgramObjectARB")]
      internal static int CreateProgramObjectARB();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCreateShader")]
      internal static int CreateShader(ShaderType type);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCreateShaderObjectARB")]
      internal static int CreateShaderObjectARB(ArbShaderObjects shaderType);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCreateShaderProgramEXT")]
      internal static int CreateShaderProgramEXT(ExtSeparateShaderObjects type, string @string);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCreateShaderProgramv")]
      internal static int CreateShaderProgramv(ShaderType type, int count, string[] strings);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCreateSyncFromCLeventARB")]
      internal static IntPtr CreateSyncFromCLeventARB(IntPtr context, IntPtr @event, uint flags);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCullFace")]
      internal static void CullFace(CullFaceMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCullParameterdvEXT")]
      internal static void CullParameterdvEXT(ExtCullVertex pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCullParameterfvEXT")]
      internal static void CullParameterfvEXT(ExtCullVertex pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glCurrentPaletteMatrixARB")]
      internal static void CurrentPaletteMatrixARB(int index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDebugMessageCallbackAMD")]
      internal static void DebugMessageCallbackAMD(DebugProcAmd callback, [Out] IntPtr userParam);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDebugMessageCallbackARB")]
      internal static void DebugMessageCallbackARB(DebugProcArb callback, IntPtr userParam);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDebugMessageControlARB")]
      internal static void DebugMessageControlARB(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, uint* ids, bool enabled);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDebugMessageEnableAMD")]
      internal static void DebugMessageEnableAMD(AmdDebugOutput category, AmdDebugOutput severity, int count, uint* ids, bool enabled);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDebugMessageInsertAMD")]
      internal static void DebugMessageInsertAMD(AmdDebugOutput category, AmdDebugOutput severity, uint id, int length, string buf);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDebugMessageInsertARB")]
      internal static void DebugMessageInsertARB(ArbDebugOutput source, ArbDebugOutput type, uint id, ArbDebugOutput severity, int length, string buf);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeformationMap3dSGIX")]
      internal static void DeformationMap3dSGIX(SgixPolynomialFfd target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeformationMap3fSGIX")]
      internal static void DeformationMap3fSGIX(SgixPolynomialFfd target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeformSGIX")]
      internal static void DeformSGIX(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteAsyncMarkersSGIX")]
      internal static void DeleteAsyncMarkersSGIX(uint marker, int range);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteBuffers")]
      internal static void DeleteBuffers(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteBuffersARB")]
      internal static void DeleteBuffersARB(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteFencesAPPLE")]
      internal static void DeleteFencesAPPLE(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteFencesNV")]
      internal static void DeleteFencesNV(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteFragmentShaderATI")]
      internal static void DeleteFragmentShaderATI(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteFramebuffers")]
      internal static void DeleteFramebuffers(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteFramebuffersEXT")]
      internal static void DeleteFramebuffersEXT(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteLists")]
      internal static void DeleteLists(uint list, int range);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteNamedStringARB")]
      internal static void DeleteNamedStringARB(int namelen, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteNamesAMD")]
      internal static void DeleteNamesAMD(AmdNameGenDelete identifier, uint num, uint* names);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteObjectARB")]
      internal static void DeleteObjectARB(uint obj);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteOcclusionQueriesNV")]
      internal static void DeleteOcclusionQueriesNV(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeletePerfMonitorsAMD")]
      internal static void DeletePerfMonitorsAMD(int n, [Out] uint* monitors);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteProgram")]
      internal static void DeleteProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteProgramPipelines")]
      internal static void DeleteProgramPipelines(int n, uint* pipelines);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteProgramsARB")]
      internal static void DeleteProgramsARB(int n, uint* programs);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteProgramsNV")]
      internal static void DeleteProgramsNV(int n, uint* programs);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteQueries")]
      internal static void DeleteQueries(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteQueriesARB")]
      internal static void DeleteQueriesARB(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteRenderbuffers")]
      internal static void DeleteRenderbuffers(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteRenderbuffersEXT")]
      internal static void DeleteRenderbuffersEXT(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteSamplers")]
      internal static void DeleteSamplers(int count, uint* samplers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteShader")]
      internal static void DeleteShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteSync")]
      internal static void DeleteSync(IntPtr sync);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteTextures")]
      internal static void DeleteTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteTexturesEXT")]
      internal static void DeleteTexturesEXT(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteTransformFeedbacks")]
      internal static void DeleteTransformFeedbacks(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteTransformFeedbacksNV")]
      internal static void DeleteTransformFeedbacksNV(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteVertexArrays")]
      internal static void DeleteVertexArrays(int n, uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteVertexArraysAPPLE")]
      internal static void DeleteVertexArraysAPPLE(int n, uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDeleteVertexShaderEXT")]
      internal static void DeleteVertexShaderEXT(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDepthBoundsdNV")]
      internal static void DepthBoundsdNV(double zmin, double zmax);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDepthBoundsEXT")]
      internal static void DepthBoundsEXT(double zmin, double zmax);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDepthFunc")]
      internal static void DepthFunc(DepthFunction func);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDepthMask")]
      internal static void DepthMask(bool flag);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDepthRange")]
      internal static void DepthRange(double near, double far);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDepthRangeArrayv")]
      internal static void DepthRangeArrayv(uint first, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDepthRangedNV")]
      internal static void DepthRangedNV(double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDepthRangef")]
      internal static void DepthRangef(float n, float f);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDepthRangeIndexed")]
      internal static void DepthRangeIndexed(uint index, double n, double f);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDetachObjectARB")]
      internal static void DetachObjectARB(uint containerObj, uint attachedObj);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDetachShader")]
      internal static void DetachShader(uint program, uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDetailTexFuncSGIS")]
      internal static void DetailTexFuncSGIS(TextureTarget target, int n, float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDisable")]
      internal static void Disable(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDisableClientState")]
      internal static void DisableClientState(ArrayCap array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDisableClientStateIndexedEXT")]
      internal static void DisableClientStateIndexedEXT(EnableCap array, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDisablei")]
      internal static void Disablei(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDisableIndexedEXT")]
      internal static void DisableIndexedEXT(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDisableVariantClientStateEXT")]
      internal static void DisableVariantClientStateEXT(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDisableVertexAttribAPPLE")]
      internal static void DisableVertexAttribAPPLE(uint index, AppleVertexProgramEvaluators pname);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDisableVertexAttribArray")]
      internal static void DisableVertexAttribArray(uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDisableVertexAttribArrayARB")]
      internal static void DisableVertexAttribArrayARB(uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawArrays")]
      internal static void DrawArrays(BeginMode mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawArraysEXT")]
      internal static void DrawArraysEXT(BeginMode mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawArraysIndirect")]
      internal static void DrawArraysIndirect(ArbDrawIndirect mode, IntPtr indirect);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawArraysInstanced")]
      internal static void DrawArraysInstanced(BeginMode mode, int first, int count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawArraysInstancedARB")]
      internal static void DrawArraysInstancedARB(BeginMode mode, int first, int count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawArraysInstancedEXT")]
      internal static void DrawArraysInstancedEXT(BeginMode mode, int start, int count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawBuffer")]
      internal static void DrawBuffer(DrawBufferMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawBuffers")]
      internal static void DrawBuffers(int n, DrawBuffersEnum* bufs);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawBuffersARB")]
      internal static void DrawBuffersARB(int n, ArbDrawBuffers* bufs);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawBuffersATI")]
      internal static void DrawBuffersATI(int n, AtiDrawBuffers* bufs);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawElementArrayAPPLE")]
      internal static void DrawElementArrayAPPLE(BeginMode mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawElementArrayATI")]
      internal static void DrawElementArrayATI(BeginMode mode, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawElements")]
      internal static void DrawElements(BeginMode mode, int count, DrawElementsType type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawElementsBaseVertex")]
      internal static void DrawElementsBaseVertex(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int basevertex);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawElementsIndirect")]
      internal static void DrawElementsIndirect(ArbDrawIndirect mode, ArbDrawIndirect type, IntPtr indirect);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawElementsInstanced")]
      internal static void DrawElementsInstanced(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawElementsInstancedARB")]
      internal static void DrawElementsInstancedARB(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawElementsInstancedBaseVertex")]
      internal static void DrawElementsInstancedBaseVertex(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount, int basevertex);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawElementsInstancedEXT")]
      internal static void DrawElementsInstancedEXT(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawMeshArraysSUN")]
      internal static void DrawMeshArraysSUN(BeginMode mode, int first, int count, int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawPixels")]
      internal static void DrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawRangeElementArrayAPPLE")]
      internal static void DrawRangeElementArrayAPPLE(BeginMode mode, uint start, uint end, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawRangeElementArrayATI")]
      internal static void DrawRangeElementArrayATI(BeginMode mode, uint start, uint end, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawRangeElements")]
      internal static void DrawRangeElements(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawRangeElementsBaseVertex")]
      internal static void DrawRangeElementsBaseVertex(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawRangeElementsEXT")]
      internal static void DrawRangeElementsEXT(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawTransformFeedback")]
      internal static void DrawTransformFeedback(BeginMode mode, uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawTransformFeedbackNV")]
      internal static void DrawTransformFeedbackNV(NvTransformFeedback2 mode, uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glDrawTransformFeedbackStream")]
      internal static void DrawTransformFeedbackStream(BeginMode mode, uint id, uint stream);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEdgeFlag")]
      internal static void EdgeFlag(bool flag);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagFormatNV")]
      internal static void EdgeFlagFormatNV(int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointer")]
      internal static void EdgeFlagPointer(int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointerEXT")]
      internal static void EdgeFlagPointerEXT(int stride, int count, bool* pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagPointerListIBM")]
      internal static void EdgeFlagPointerListIBM(int stride, bool* pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEdgeFlagv")]
      internal static void EdgeFlagv(bool* flag);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glElementPointerAPPLE")]
      internal static void ElementPointerAPPLE(AppleElementArray type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glElementPointerATI")]
      internal static void ElementPointerATI(AtiElementArray type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnable")]
      internal static void Enable(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnableClientState")]
      internal static void EnableClientState(ArrayCap array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnableClientStateIndexedEXT")]
      internal static void EnableClientStateIndexedEXT(EnableCap array, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnablei")]
      internal static void Enablei(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnableIndexedEXT")]
      internal static void EnableIndexedEXT(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnableVariantClientStateEXT")]
      internal static void EnableVariantClientStateEXT(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnableVertexAttribAPPLE")]
      internal static void EnableVertexAttribAPPLE(uint index, AppleVertexProgramEvaluators pname);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnableVertexAttribArray")]
      internal static void EnableVertexAttribArray(uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnableVertexAttribArrayARB")]
      internal static void EnableVertexAttribArrayARB(uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEnd")]
      internal static void End();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndConditionalRender")]
      internal static void EndConditionalRender();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndConditionalRenderNV")]
      internal static void EndConditionalRenderNV();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndFragmentShaderATI")]
      internal static void EndFragmentShaderATI();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndList")]
      internal static void EndList();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndOcclusionQueryNV")]
      internal static void EndOcclusionQueryNV();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndPerfMonitorAMD")]
      internal static void EndPerfMonitorAMD(uint monitor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndQuery")]
      internal static void EndQuery(QueryTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndQueryARB")]
      internal static void EndQueryARB(ArbOcclusionQuery target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndQueryIndexed")]
      internal static void EndQueryIndexed(QueryTarget target, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndTransformFeedback")]
      internal static void EndTransformFeedback();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndTransformFeedbackEXT")]
      internal static void EndTransformFeedbackEXT();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndTransformFeedbackNV")]
      internal static void EndTransformFeedbackNV();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndVertexShaderEXT")]
      internal static void EndVertexShaderEXT();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEndVideoCaptureNV")]
      internal static void EndVideoCaptureNV(uint video_capture_slot);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1d")]
      internal static void EvalCoord1d(double u);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1dv")]
      internal static void EvalCoord1dv(double* u);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1f")]
      internal static void EvalCoord1f(float u);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalCoord1fv")]
      internal static void EvalCoord1fv(float* u);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2d")]
      internal static void EvalCoord2d(double u, double v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2dv")]
      internal static void EvalCoord2dv(double* u);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2f")]
      internal static void EvalCoord2f(float u, float v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalCoord2fv")]
      internal static void EvalCoord2fv(float* u);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalMapsNV")]
      internal static void EvalMapsNV(NvEvaluators target, NvEvaluators mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalMesh1")]
      internal static void EvalMesh1(MeshMode1 mode, int i1, int i2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalMesh2")]
      internal static void EvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalPoint1")]
      internal static void EvalPoint1(int i);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glEvalPoint2")]
      internal static void EvalPoint2(int i, int j);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glExecuteProgramNV")]
      internal static void ExecuteProgramNV(AssemblyProgramTargetArb target, uint id, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glExtractComponentEXT")]
      internal static void ExtractComponentEXT(uint res, uint src, uint num);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFeedbackBuffer")]
      internal static void FeedbackBuffer(int size, FeedbackType type, [Out] float* buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFenceSync")]
      internal static IntPtr FenceSync(ArbSync condition, uint flags);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFinalCombinerInputNV")]
      internal static void FinalCombinerInputNV(NvRegisterCombiners variable, NvRegisterCombiners input, NvRegisterCombiners mapping, NvRegisterCombiners componentUsage);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFinish")]
      internal static void Finish();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFinishAsyncSGIX")]
      internal static int FinishAsyncSGIX([Out] uint* markerp);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFinishFenceAPPLE")]
      internal static void FinishFenceAPPLE(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFinishFenceNV")]
      internal static void FinishFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFinishObjectAPPLE")]
      internal static void FinishObjectAPPLE(AppleFence @object, int name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFinishTextureSUNX")]
      internal static void FinishTextureSUNX();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFlush")]
      internal static void Flush();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFlushMappedBufferRange")]
      internal static void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFlushMappedBufferRangeAPPLE")]
      internal static void FlushMappedBufferRangeAPPLE(BufferTarget target, IntPtr offset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFlushMappedNamedBufferRangeEXT")]
      internal static void FlushMappedNamedBufferRangeEXT(uint buffer, IntPtr offset, IntPtr length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFlushPixelDataRangeNV")]
      internal static void FlushPixelDataRangeNV(NvPixelDataRange target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFlushRasterSGIX")]
      internal static void FlushRasterSGIX();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFlushVertexArrayRangeAPPLE")]
      internal static void FlushVertexArrayRangeAPPLE(int length, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFlushVertexArrayRangeNV")]
      internal static void FlushVertexArrayRangeNV();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordd")]
      internal static void FogCoordd(double coord);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoorddEXT")]
      internal static void FogCoorddEXT(double coord);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoorddv")]
      internal static void FogCoorddv(double* coord);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoorddvEXT")]
      internal static void FogCoorddvEXT(double* coord);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordf")]
      internal static void FogCoordf(float coord);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordfEXT")]
      internal static void FogCoordfEXT(float coord);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordFormatNV")]
      internal static void FogCoordFormatNV(NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordfv")]
      internal static void FogCoordfv(float* coord);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordfvEXT")]
      internal static void FogCoordfvEXT(float* coord);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordhNV")]
      internal static void FogCoordhNV(Half fog);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordhvNV")]
      internal static void FogCoordhvNV(Half* fog);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordPointer")]
      internal static void FogCoordPointer(FogPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordPointerEXT")]
      internal static void FogCoordPointerEXT(ExtFogCoord type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogCoordPointerListIBM")]
      internal static void FogCoordPointerListIBM(IbmVertexArrayLists type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogf")]
      internal static void Fogf(FogParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogFuncSGIS")]
      internal static void FogFuncSGIS(int n, float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogfv")]
      internal static void Fogfv(FogParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogi")]
      internal static void Fogi(FogParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFogiv")]
      internal static void Fogiv(FogParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentColorMaterialSGIX")]
      internal static void FragmentColorMaterialSGIX(MaterialFace face, MaterialParameter mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentLightfSGIX")]
      internal static void FragmentLightfSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentLightfvSGIX")]
      internal static void FragmentLightfvSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentLightiSGIX")]
      internal static void FragmentLightiSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentLightivSGIX")]
      internal static void FragmentLightivSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentLightModelfSGIX")]
      internal static void FragmentLightModelfSGIX(SgixFragmentLighting pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentLightModelfvSGIX")]
      internal static void FragmentLightModelfvSGIX(SgixFragmentLighting pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentLightModeliSGIX")]
      internal static void FragmentLightModeliSGIX(SgixFragmentLighting pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentLightModelivSGIX")]
      internal static void FragmentLightModelivSGIX(SgixFragmentLighting pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentMaterialfSGIX")]
      internal static void FragmentMaterialfSGIX(MaterialFace face, MaterialParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentMaterialfvSGIX")]
      internal static void FragmentMaterialfvSGIX(MaterialFace face, MaterialParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentMaterialiSGIX")]
      internal static void FragmentMaterialiSGIX(MaterialFace face, MaterialParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFragmentMaterialivSGIX")]
      internal static void FragmentMaterialivSGIX(MaterialFace face, MaterialParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferDrawBufferEXT")]
      internal static void FramebufferDrawBufferEXT(uint framebuffer, DrawBufferMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferDrawBuffersEXT")]
      internal static void FramebufferDrawBuffersEXT(uint framebuffer, int n, DrawBufferMode* bufs);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferReadBufferEXT")]
      internal static void FramebufferReadBufferEXT(uint framebuffer, ReadBufferMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferRenderbuffer")]
      internal static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferRenderbufferEXT")]
      internal static void FramebufferRenderbufferEXT(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTexture")]
      internal static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTexture1D")]
      internal static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTexture1DEXT")]
      internal static void FramebufferTexture1DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTexture2D")]
      internal static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTexture2DEXT")]
      internal static void FramebufferTexture2DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTexture3D")]
      internal static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTexture3DEXT")]
      internal static void FramebufferTexture3DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTextureARB")]
      internal static void FramebufferTextureARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTextureEXT")]
      internal static void FramebufferTextureEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTextureFaceARB")]
      internal static void FramebufferTextureFaceARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTextureFaceEXT")]
      internal static void FramebufferTextureFaceEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTextureLayer")]
      internal static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTextureLayerARB")]
      internal static void FramebufferTextureLayerARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFramebufferTextureLayerEXT")]
      internal static void FramebufferTextureLayerEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFrameTerminatorGREMEDY")]
      internal static void FrameTerminatorGREMEDY();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFrameZoomSGIX")]
      internal static void FrameZoomSGIX(int factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFreeObjectBufferATI")]
      internal static void FreeObjectBufferATI(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFrontFace")]
      internal static void FrontFace(FrontFaceDirection mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glFrustum")]
      internal static void Frustum(double left, double right, double bottom, double top, double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenAsyncMarkersSGIX")]
      internal static int GenAsyncMarkersSGIX(int range);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenBuffers")]
      internal static void GenBuffers(int n, [Out] uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenBuffersARB")]
      internal static void GenBuffersARB(int n, [Out] uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenerateMipmap")]
      internal static void GenerateMipmap(GenerateMipmapTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenerateMipmapEXT")]
      internal static void GenerateMipmapEXT(GenerateMipmapTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenerateMultiTexMipmapEXT")]
      internal static void GenerateMultiTexMipmapEXT(TextureUnit texunit, TextureTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenerateTextureMipmapEXT")]
      internal static void GenerateTextureMipmapEXT(uint texture, TextureTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenFencesAPPLE")]
      internal static void GenFencesAPPLE(int n, [Out] uint* fences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenFencesNV")]
      internal static void GenFencesNV(int n, [Out] uint* fences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenFragmentShadersATI")]
      internal static int GenFragmentShadersATI(uint range);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenFramebuffers")]
      internal static void GenFramebuffers(int n, [Out] uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenFramebuffersEXT")]
      internal static void GenFramebuffersEXT(int n, [Out] uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenLists")]
      internal static int GenLists(int range);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenNamesAMD")]
      internal static void GenNamesAMD(AmdNameGenDelete identifier, uint num, [Out] uint* names);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenOcclusionQueriesNV")]
      internal static void GenOcclusionQueriesNV(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenPerfMonitorsAMD")]
      internal static void GenPerfMonitorsAMD(int n, [Out] uint* monitors);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenProgramPipelines")]
      internal static void GenProgramPipelines(int n, [Out] uint* pipelines);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenProgramsARB")]
      internal static void GenProgramsARB(int n, [Out] uint* programs);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenProgramsNV")]
      internal static void GenProgramsNV(int n, [Out] uint* programs);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenQueries")]
      internal static void GenQueries(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenQueriesARB")]
      internal static void GenQueriesARB(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenRenderbuffers")]
      internal static void GenRenderbuffers(int n, [Out] uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenRenderbuffersEXT")]
      internal static void GenRenderbuffersEXT(int n, [Out] uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenSamplers")]
      internal static void GenSamplers(int count, [Out] uint* samplers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenSymbolsEXT")]
      internal static int GenSymbolsEXT(ExtVertexShader datatype, ExtVertexShader storagetype, ExtVertexShader range, uint components);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenTextures")]
      internal static void GenTextures(int n, [Out] uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenTexturesEXT")]
      internal static void GenTexturesEXT(int n, [Out] uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenTransformFeedbacks")]
      internal static void GenTransformFeedbacks(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenTransformFeedbacksNV")]
      internal static void GenTransformFeedbacksNV(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenVertexArrays")]
      internal static void GenVertexArrays(int n, [Out] uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenVertexArraysAPPLE")]
      internal static void GenVertexArraysAPPLE(int n, [Out] uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGenVertexShadersEXT")]
      internal static int GenVertexShadersEXT(uint range);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveAttrib")]
      internal static void GetActiveAttrib(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveAttribARB")]
      internal static void GetActiveAttribARB(uint programObj, uint index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbVertexShader* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveSubroutineName")]
      internal static void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveSubroutineUniformiv")]
      internal static void GetActiveSubroutineUniformiv(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, [Out] int* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveSubroutineUniformName")]
      internal static void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveUniform")]
      internal static void GetActiveUniform(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveUniformARB")]
      internal static void GetActiveUniformARB(uint programObj, uint index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbShaderObjects* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveUniformBlockiv")]
      internal static void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveUniformBlockName")]
      internal static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveUniformName")]
      internal static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformName);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveUniformsiv")]
      internal static void GetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, ActiveUniformParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetActiveVaryingNV")]
      internal static void GetActiveVaryingNV(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] NvTransformFeedback* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetArrayObjectfvATI")]
      internal static void GetArrayObjectfvATI(EnableCap array, AtiVertexArrayObject pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetArrayObjectivATI")]
      internal static void GetArrayObjectivATI(EnableCap array, AtiVertexArrayObject pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetAttachedObjectsARB")]
      internal static void GetAttachedObjectsARB(uint containerObj, int maxCount, [Out] int* count, [Out] uint* obj);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetAttachedShaders")]
      internal static void GetAttachedShaders(uint program, int maxCount, [Out] int* count, [Out] uint* obj);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetAttribLocation")]
      internal static int GetAttribLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetAttribLocationARB")]
      internal static int GetAttribLocationARB(uint programObj, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBooleani_v")]
      internal static void GetBooleani_v(GetIndexedPName target, uint index, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBooleanIndexedvEXT")]
      internal static void GetBooleanIndexedvEXT(ExtDrawBuffers2 target, uint index, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBooleanv")]
      internal static void GetBooleanv(GetPName pname, [Out] bool* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBufferParameteri64v")]
      internal static void GetBufferParameteri64v(BufferTarget target, BufferParameterName pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBufferParameteriv")]
      internal static void GetBufferParameteriv(BufferTarget target, BufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBufferParameterivARB")]
      internal static void GetBufferParameterivARB(ArbVertexBufferObject target, BufferParameterNameArb pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBufferParameterui64vNV")]
      internal static void GetBufferParameterui64vNV(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBufferPointerv")]
      internal static void GetBufferPointerv(BufferTarget target, BufferPointer pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBufferPointervARB")]
      internal static void GetBufferPointervARB(ArbVertexBufferObject target, BufferPointerNameArb pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBufferSubData")]
      internal static void GetBufferSubData(BufferTarget target, IntPtr offset, IntPtr size, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetBufferSubDataARB")]
      internal static void GetBufferSubDataARB(BufferTargetArb target, IntPtr offset, IntPtr size, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetClipPlane")]
      internal static void GetClipPlane(ClipPlaneName plane, [Out] double* equation);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetColorTable")]
      internal static void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, [Out] IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetColorTableEXT")]
      internal static void GetColorTableEXT(ColorTableTarget target, PixelFormat format, PixelType type, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetColorTableParameterfv")]
      internal static void GetColorTableParameterfv(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetColorTableParameterfvEXT")]
      internal static void GetColorTableParameterfvEXT(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetColorTableParameterfvSGI")]
      internal static void GetColorTableParameterfvSGI(SgiColorTable target, SgiColorTable pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetColorTableParameteriv")]
      internal static void GetColorTableParameteriv(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetColorTableParameterivEXT")]
      internal static void GetColorTableParameterivEXT(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetColorTableParameterivSGI")]
      internal static void GetColorTableParameterivSGI(SgiColorTable target, SgiColorTable pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetColorTableSGI")]
      internal static void GetColorTableSGI(SgiColorTable target, PixelFormat format, PixelType type, [Out] IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetCombinerInputParameterfvNV")]
      internal static void GetCombinerInputParameterfvNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetCombinerInputParameterivNV")]
      internal static void GetCombinerInputParameterivNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetCombinerOutputParameterfvNV")]
      internal static void GetCombinerOutputParameterfvNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetCombinerOutputParameterivNV")]
      internal static void GetCombinerOutputParameterivNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetCombinerStageParameterfvNV")]
      internal static void GetCombinerStageParameterfvNV(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetCompressedMultiTexImageEXT")]
      internal static void GetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int lod, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetCompressedTexImage")]
      internal static void GetCompressedTexImage(TextureTarget target, int level, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetCompressedTexImageARB")]
      internal static void GetCompressedTexImageARB(TextureTarget target, int level, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetCompressedTextureImageEXT")]
      internal static void GetCompressedTextureImageEXT(uint texture, TextureTarget target, int lod, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetConvolutionFilter")]
      internal static void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, [Out] IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetConvolutionFilterEXT")]
      internal static void GetConvolutionFilterEXT(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetConvolutionParameterfv")]
      internal static void GetConvolutionParameterfv(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetConvolutionParameterfvEXT")]
      internal static void GetConvolutionParameterfvEXT(ExtConvolution target, ExtConvolution pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetConvolutionParameteriv")]
      internal static void GetConvolutionParameteriv(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetConvolutionParameterivEXT")]
      internal static void GetConvolutionParameterivEXT(ExtConvolution target, ExtConvolution pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetDebugMessageLogAMD")]
      internal static int GetDebugMessageLogAMD(uint count, int bufsize, [Out] AmdDebugOutput* categories, [Out] uint* severities, [Out] uint* ids, [Out] int* lengths, [Out] StringBuilder message);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetDebugMessageLogARB")]
      internal static int GetDebugMessageLogARB(uint count, int bufsize, [Out] ArbDebugOutput* sources, [Out] ArbDebugOutput* types, [Out] uint* ids, [Out] ArbDebugOutput* severities, [Out] int* lengths, [Out] StringBuilder messageLog);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetDetailTexFuncSGIS")]
      internal static void GetDetailTexFuncSGIS(TextureTarget target, [Out] float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetDoublei_v")]
      internal static void GetDoublei_v(GetIndexedPName target, uint index, [Out] double* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetDoubleIndexedvEXT")]
      internal static void GetDoubleIndexedvEXT(ExtDirectStateAccess target, uint index, [Out] double* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetDoublev")]
      internal static void GetDoublev(GetPName pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetError")]
      internal static ErrorCode GetError();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFenceivNV")]
      internal static void GetFenceivNV(uint fence, NvFence pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFinalCombinerInputParameterfvNV")]
      internal static void GetFinalCombinerInputParameterfvNV(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFinalCombinerInputParameterivNV")]
      internal static void GetFinalCombinerInputParameterivNV(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFloati_v")]
      internal static void GetFloati_v(GetIndexedPName target, uint index, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFloatIndexedvEXT")]
      internal static void GetFloatIndexedvEXT(ExtDirectStateAccess target, uint index, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFloatv")]
      internal static void GetFloatv(GetPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFogFuncSGIS")]
      internal static void GetFogFuncSGIS([Out] float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFragDataIndex")]
      internal static int GetFragDataIndex(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFragDataLocation")]
      internal static int GetFragDataLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFragDataLocationEXT")]
      internal static int GetFragDataLocationEXT(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFragmentLightfvSGIX")]
      internal static void GetFragmentLightfvSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFragmentLightivSGIX")]
      internal static void GetFragmentLightivSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFragmentMaterialfvSGIX")]
      internal static void GetFragmentMaterialfvSGIX(MaterialFace face, MaterialParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFragmentMaterialivSGIX")]
      internal static void GetFragmentMaterialivSGIX(MaterialFace face, MaterialParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
      internal static void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFramebufferAttachmentParameterivEXT")]
      internal static void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetFramebufferParameterivEXT")]
      internal static void GetFramebufferParameterivEXT(uint framebuffer, ExtDirectStateAccess pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetGraphicsResetStatusARB")]
      internal static ArbRobustness GetGraphicsResetStatusARB();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetHandleARB")]
      internal static int GetHandleARB(ArbShaderObjects pname);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetHistogram")]
      internal static void GetHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetHistogramEXT")]
      internal static void GetHistogramEXT(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetHistogramParameterfv")]
      internal static void GetHistogramParameterfv(HistogramTarget target, GetHistogramParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetHistogramParameterfvEXT")]
      internal static void GetHistogramParameterfvEXT(ExtHistogram target, ExtHistogram pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetHistogramParameteriv")]
      internal static void GetHistogramParameteriv(HistogramTarget target, GetHistogramParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetHistogramParameterivEXT")]
      internal static void GetHistogramParameterivEXT(ExtHistogram target, ExtHistogram pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetImageTransformParameterfvHP")]
      internal static void GetImageTransformParameterfvHP(HpImageTransform target, HpImageTransform pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetImageTransformParameterivHP")]
      internal static void GetImageTransformParameterivHP(HpImageTransform target, HpImageTransform pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetInfoLogARB")]
      internal static void GetInfoLogARB(uint obj, int maxLength, [Out] int* length, [Out] StringBuilder infoLog);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetInstrumentsSGIX")]
      internal static int GetInstrumentsSGIX();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetInteger64i_v")]
      internal static void GetInteger64i_v(GetIndexedPName target, uint index, [Out] long* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetInteger64v")]
      internal static void GetInteger64v(ArbSync pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetIntegeri_v")]
      internal static void GetIntegeri_v(GetIndexedPName target, uint index, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetIntegerIndexedvEXT")]
      internal static void GetIntegerIndexedvEXT(GetIndexedPName target, uint index, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetIntegerui64i_vNV")]
      internal static void GetIntegerui64i_vNV(NvVertexBufferUnifiedMemory value, uint index, [Out] ulong* result);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetIntegerui64vNV")]
      internal static void GetIntegerui64vNV(NvShaderBufferLoad value, [Out] ulong* result);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetIntegerv")]
      internal static void GetIntegerv(GetPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetInvariantBooleanvEXT")]
      internal static void GetInvariantBooleanvEXT(uint id, ExtVertexShader value, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetInvariantFloatvEXT")]
      internal static void GetInvariantFloatvEXT(uint id, ExtVertexShader value, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetInvariantIntegervEXT")]
      internal static void GetInvariantIntegervEXT(uint id, ExtVertexShader value, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetLightfv")]
      internal static void GetLightfv(LightName light, LightParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetLightiv")]
      internal static void GetLightiv(LightName light, LightParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetListParameterfvSGIX")]
      internal static void GetListParameterfvSGIX(uint list, ListParameterName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetListParameterivSGIX")]
      internal static void GetListParameterivSGIX(uint list, ListParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetLocalConstantBooleanvEXT")]
      internal static void GetLocalConstantBooleanvEXT(uint id, ExtVertexShader value, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetLocalConstantFloatvEXT")]
      internal static void GetLocalConstantFloatvEXT(uint id, ExtVertexShader value, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetLocalConstantIntegervEXT")]
      internal static void GetLocalConstantIntegervEXT(uint id, ExtVertexShader value, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMapAttribParameterfvNV")]
      internal static void GetMapAttribParameterfvNV(NvEvaluators target, uint index, NvEvaluators pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMapAttribParameterivNV")]
      internal static void GetMapAttribParameterivNV(NvEvaluators target, uint index, NvEvaluators pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMapControlPointsNV")]
      internal static void GetMapControlPointsNV(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [Out] IntPtr points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMapdv")]
      internal static void GetMapdv(MapTarget target, GetMapQuery query, [Out] double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMapfv")]
      internal static void GetMapfv(MapTarget target, GetMapQuery query, [Out] float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMapiv")]
      internal static void GetMapiv(MapTarget target, GetMapQuery query, [Out] int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMapParameterfvNV")]
      internal static void GetMapParameterfvNV(NvEvaluators target, NvEvaluators pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMapParameterivNV")]
      internal static void GetMapParameterivNV(NvEvaluators target, NvEvaluators pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMaterialfv")]
      internal static void GetMaterialfv(MaterialFace face, MaterialParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMaterialiv")]
      internal static void GetMaterialiv(MaterialFace face, MaterialParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMinmax")]
      internal static void GetMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMinmaxEXT")]
      internal static void GetMinmaxEXT(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMinmaxParameterfv")]
      internal static void GetMinmaxParameterfv(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMinmaxParameterfvEXT")]
      internal static void GetMinmaxParameterfvEXT(ExtHistogram target, ExtHistogram pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMinmaxParameteriv")]
      internal static void GetMinmaxParameteriv(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMinmaxParameterivEXT")]
      internal static void GetMinmaxParameterivEXT(ExtHistogram target, ExtHistogram pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultisamplefv")]
      internal static void GetMultisamplefv(GetMultisamplePName pname, uint index, [Out] float* val);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultisamplefvNV")]
      internal static void GetMultisamplefvNV(NvExplicitMultisample pname, uint index, [Out] float* val);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexEnvfvEXT")]
      internal static void GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexEnvivEXT")]
      internal static void GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexGendvEXT")]
      internal static void GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexGenfvEXT")]
      internal static void GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexGenivEXT")]
      internal static void GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexImageEXT")]
      internal static void GetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexLevelParameterfvEXT")]
      internal static void GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexLevelParameterivEXT")]
      internal static void GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexParameterfvEXT")]
      internal static void GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexParameterIivEXT")]
      internal static void GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexParameterIuivEXT")]
      internal static void GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetMultiTexParameterivEXT")]
      internal static void GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedBufferParameterivEXT")]
      internal static void GetNamedBufferParameterivEXT(uint buffer, ExtDirectStateAccess pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedBufferParameterui64vNV")]
      internal static void GetNamedBufferParameterui64vNV(uint buffer, NvShaderBufferLoad pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedBufferPointervEXT")]
      internal static void GetNamedBufferPointervEXT(uint buffer, ExtDirectStateAccess pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedBufferSubDataEXT")]
      internal static void GetNamedBufferSubDataEXT(uint buffer, IntPtr offset, IntPtr size, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT")]
      internal static void GetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedProgramivEXT")]
      internal static void GetNamedProgramivEXT(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedProgramLocalParameterdvEXT")]
      internal static void GetNamedProgramLocalParameterdvEXT(uint program, ExtDirectStateAccess target, uint index, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedProgramLocalParameterfvEXT")]
      internal static void GetNamedProgramLocalParameterfvEXT(uint program, ExtDirectStateAccess target, uint index, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedProgramLocalParameterIivEXT")]
      internal static void GetNamedProgramLocalParameterIivEXT(uint program, ExtDirectStateAccess target, uint index, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT")]
      internal static void GetNamedProgramLocalParameterIuivEXT(uint program, ExtDirectStateAccess target, uint index, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedProgramStringEXT")]
      internal static void GetNamedProgramStringEXT(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedRenderbufferParameterivEXT")]
      internal static void GetNamedRenderbufferParameterivEXT(uint renderbuffer, RenderbufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedStringARB")]
      internal static void GetNamedStringARB(int namelen, string name, int bufSize, [Out] int* stringlen, [Out] StringBuilder @string);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetNamedStringivARB")]
      internal static void GetNamedStringivARB(int namelen, string name, ArbShadingLanguageInclude pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnColorTableARB")]
      internal static void GetnColorTableARB(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnCompressedTexImageARB")]
      internal static void GetnCompressedTexImageARB(ArbRobustness target, int lod, int bufSize, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnConvolutionFilterARB")]
      internal static void GetnConvolutionFilterARB(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnHistogramARB")]
      internal static void GetnHistogramARB(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnMapdvARB")]
      internal static void GetnMapdvARB(ArbRobustness target, ArbRobustness query, int bufSize, [Out] double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnMapfvARB")]
      internal static void GetnMapfvARB(ArbRobustness target, ArbRobustness query, int bufSize, [Out] float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnMapivARB")]
      internal static void GetnMapivARB(ArbRobustness target, ArbRobustness query, int bufSize, [Out] int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnMinmaxARB")]
      internal static void GetnMinmaxARB(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnPixelMapfvARB")]
      internal static void GetnPixelMapfvARB(ArbRobustness map, int bufSize, [Out] float* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnPixelMapuivARB")]
      internal static void GetnPixelMapuivARB(ArbRobustness map, int bufSize, [Out] uint* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnPixelMapusvARB")]
      internal static void GetnPixelMapusvARB(ArbRobustness map, int bufSize, [Out] ushort* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnPolygonStippleARB")]
      internal static void GetnPolygonStippleARB(int bufSize, [Out] byte* pattern);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnSeparableFilterARB")]
      internal static void GetnSeparableFilterARB(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [Out] IntPtr column, [Out] IntPtr span);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnTexImageARB")]
      internal static void GetnTexImageARB(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnUniformdvARB")]
      internal static void GetnUniformdvARB(uint program, int location, int bufSize, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnUniformfvARB")]
      internal static void GetnUniformfvARB(uint program, int location, int bufSize, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnUniformivARB")]
      internal static void GetnUniformivARB(uint program, int location, int bufSize, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetnUniformuivARB")]
      internal static void GetnUniformuivARB(uint program, int location, int bufSize, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetObjectBufferfvATI")]
      internal static void GetObjectBufferfvATI(uint buffer, AtiVertexArrayObject pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetObjectBufferivATI")]
      internal static void GetObjectBufferivATI(uint buffer, AtiVertexArrayObject pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetObjectParameterfvARB")]
      internal static void GetObjectParameterfvARB(uint obj, ArbShaderObjects pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetObjectParameterivAPPLE")]
      internal static void GetObjectParameterivAPPLE(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetObjectParameterivARB")]
      internal static void GetObjectParameterivARB(uint obj, ArbShaderObjects pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetOcclusionQueryivNV")]
      internal static void GetOcclusionQueryivNV(uint id, NvOcclusionQuery pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetOcclusionQueryuivNV")]
      internal static void GetOcclusionQueryuivNV(uint id, NvOcclusionQuery pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
      internal static void GetPerfMonitorCounterDataAMD(uint monitor, AmdPerformanceMonitor pname, int dataSize, [Out] uint* data, [Out] int* bytesWritten);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
      internal static void GetPerfMonitorCounterInfoAMD(uint group, uint counter, AmdPerformanceMonitor pname, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPerfMonitorCountersAMD")]
      internal static void GetPerfMonitorCountersAMD(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint* counters);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
      internal static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPerfMonitorGroupsAMD")]
      internal static void GetPerfMonitorGroupsAMD([Out] int* numGroups, int groupsSize, [Out] uint* groups);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
      internal static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, [Out] int* length, [Out] StringBuilder groupString);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapfv")]
      internal static void GetPixelMapfv(PixelMap map, [Out] float* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapuiv")]
      internal static void GetPixelMapuiv(PixelMap map, [Out] uint* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPixelMapusv")]
      internal static void GetPixelMapusv(PixelMap map, [Out] ushort* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPixelTexGenParameterfvSGIS")]
      internal static void GetPixelTexGenParameterfvSGIS(SgisPixelTexture pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPixelTexGenParameterivSGIS")]
      internal static void GetPixelTexGenParameterivSGIS(SgisPixelTexture pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPointerIndexedvEXT")]
      internal static void GetPointerIndexedvEXT(ExtDirectStateAccess target, uint index, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPointerv")]
      internal static void GetPointerv(GetPointervPName pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPointervEXT")]
      internal static void GetPointervEXT(GetPointervPName pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetPolygonStipple")]
      internal static void GetPolygonStipple([Out] byte* mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramBinary")]
      internal static void GetProgramBinary(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [Out] IntPtr binary);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramEnvParameterdvARB")]
      internal static void GetProgramEnvParameterdvARB(ArbVertexProgram target, uint index, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramEnvParameterfvARB")]
      internal static void GetProgramEnvParameterfvARB(ArbVertexProgram target, uint index, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramEnvParameterIivNV")]
      internal static void GetProgramEnvParameterIivNV(NvGpuProgram4 target, uint index, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramEnvParameterIuivNV")]
      internal static void GetProgramEnvParameterIuivNV(NvGpuProgram4 target, uint index, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramInfoLog")]
      internal static void GetProgramInfoLog(uint program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramiv")]
      internal static void GetProgramiv(uint program, ProgramParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramivARB")]
      internal static void GetProgramivARB(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramivNV")]
      internal static void GetProgramivNV(uint id, NvVertexProgram pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramLocalParameterdvARB")]
      internal static void GetProgramLocalParameterdvARB(ArbVertexProgram target, uint index, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramLocalParameterfvARB")]
      internal static void GetProgramLocalParameterfvARB(ArbVertexProgram target, uint index, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramLocalParameterIivNV")]
      internal static void GetProgramLocalParameterIivNV(NvGpuProgram4 target, uint index, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramLocalParameterIuivNV")]
      internal static void GetProgramLocalParameterIuivNV(NvGpuProgram4 target, uint index, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramNamedParameterdvNV")]
      internal static void GetProgramNamedParameterdvNV(uint id, int len, byte* name, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramNamedParameterfvNV")]
      internal static void GetProgramNamedParameterfvNV(uint id, int len, byte* name, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramParameterdvNV")]
      internal static void GetProgramParameterdvNV(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramParameterfvNV")]
      internal static void GetProgramParameterfvNV(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramPipelineInfoLog")]
      internal static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramPipelineiv")]
      internal static void GetProgramPipelineiv(uint pipeline, ProgramPipelineParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramStageiv")]
      internal static void GetProgramStageiv(uint program, ShaderType shadertype, ProgramStageParameter pname, [Out] int* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramStringARB")]
      internal static void GetProgramStringARB(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [Out] IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramStringNV")]
      internal static void GetProgramStringNV(uint id, NvVertexProgram pname, [Out] byte* program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetProgramSubroutineParameteruivNV")]
      internal static void GetProgramSubroutineParameteruivNV(NvGpuProgram5 target, uint index, [Out] uint* param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryIndexediv")]
      internal static void GetQueryIndexediv(QueryTarget target, uint index, GetQueryParam pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryiv")]
      internal static void GetQueryiv(QueryTarget target, GetQueryParam pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryivARB")]
      internal static void GetQueryivARB(ArbOcclusionQuery target, ArbOcclusionQuery pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjecti64v")]
      internal static void GetQueryObjecti64v(uint id, GetQueryObjectParam pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjecti64vEXT")]
      internal static void GetQueryObjecti64vEXT(uint id, ExtTimerQuery pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjectiv")]
      internal static void GetQueryObjectiv(uint id, GetQueryObjectParam pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjectivARB")]
      internal static void GetQueryObjectivARB(uint id, ArbOcclusionQuery pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjectui64v")]
      internal static void GetQueryObjectui64v(uint id, GetQueryObjectParam pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjectui64vEXT")]
      internal static void GetQueryObjectui64vEXT(uint id, ExtTimerQuery pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjectuiv")]
      internal static void GetQueryObjectuiv(uint id, GetQueryObjectParam pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetQueryObjectuivARB")]
      internal static void GetQueryObjectuivARB(uint id, ArbOcclusionQuery pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetRenderbufferParameteriv")]
      internal static void GetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetRenderbufferParameterivEXT")]
      internal static void GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSamplerParameterfv")]
      internal static void GetSamplerParameterfv(uint sampler, SamplerParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSamplerParameterIiv")]
      internal static void GetSamplerParameterIiv(uint sampler, ArbSamplerObjects pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSamplerParameterIuiv")]
      internal static void GetSamplerParameterIuiv(uint sampler, ArbSamplerObjects pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSamplerParameteriv")]
      internal static void GetSamplerParameteriv(uint sampler, SamplerParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSeparableFilter")]
      internal static void GetSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSeparableFilterEXT")]
      internal static void GetSeparableFilterEXT(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetShaderInfoLog")]
      internal static void GetShaderInfoLog(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetShaderiv")]
      internal static void GetShaderiv(uint shader, ShaderParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetShaderPrecisionFormat")]
      internal static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecisionType precisiontype, [Out] int* range, [Out] int* precision);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetShaderSource")]
      internal static void GetShaderSource(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder source);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetShaderSourceARB")]
      internal static void GetShaderSourceARB(uint obj, int maxLength, [Out] int* length, [Out] StringBuilder source);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSharpenTexFuncSGIS")]
      internal static void GetSharpenTexFuncSGIS(TextureTarget target, [Out] float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetString")]
      internal static IntPtr GetString(StringName name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetStringi")]
      internal static IntPtr GetStringi(StringName name, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSubroutineIndex")]
      internal static int GetSubroutineIndex(uint program, ShaderType shadertype, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSubroutineUniformLocation")]
      internal static int GetSubroutineUniformLocation(uint program, ShaderType shadertype, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetSynciv")]
      internal static void GetSynciv(IntPtr sync, ArbSync pname, int bufSize, [Out] int* length, [Out] int* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexBumpParameterfvATI")]
      internal static void GetTexBumpParameterfvATI(AtiEnvmapBumpmap pname, [Out] float* param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexBumpParameterivATI")]
      internal static void GetTexBumpParameterivATI(AtiEnvmapBumpmap pname, [Out] int* param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexEnvfv")]
      internal static void GetTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexEnviv")]
      internal static void GetTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexFilterFuncSGIS")]
      internal static void GetTexFilterFuncSGIS(TextureTarget target, SgisTextureFilter4 filter, [Out] float* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexGendv")]
      internal static void GetTexGendv(TextureCoordName coord, TextureGenParameter pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexGenfv")]
      internal static void GetTexGenfv(TextureCoordName coord, TextureGenParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexGeniv")]
      internal static void GetTexGeniv(TextureCoordName coord, TextureGenParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexImage")]
      internal static void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexLevelParameterfv")]
      internal static void GetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexLevelParameteriv")]
      internal static void GetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexParameterfv")]
      internal static void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexParameterIiv")]
      internal static void GetTexParameterIiv(TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexParameterIivEXT")]
      internal static void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexParameterIuiv")]
      internal static void GetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexParameterIuivEXT")]
      internal static void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexParameteriv")]
      internal static void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTexParameterPointervAPPLE")]
      internal static void GetTexParameterPointervAPPLE(AppleTextureRange target, AppleTextureRange pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTextureImageEXT")]
      internal static void GetTextureImageEXT(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTextureLevelParameterfvEXT")]
      internal static void GetTextureLevelParameterfvEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTextureLevelParameterivEXT")]
      internal static void GetTextureLevelParameterivEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTextureParameterfvEXT")]
      internal static void GetTextureParameterfvEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTextureParameterIivEXT")]
      internal static void GetTextureParameterIivEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTextureParameterIuivEXT")]
      internal static void GetTextureParameterIuivEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTextureParameterivEXT")]
      internal static void GetTextureParameterivEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTrackMatrixivNV")]
      internal static void GetTrackMatrixivNV(AssemblyProgramTargetArb target, uint address, AssemblyProgramParameterArb pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTransformFeedbackVarying")]
      internal static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTransformFeedbackVaryingEXT")]
      internal static void GetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ExtTransformFeedback* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetTransformFeedbackVaryingNV")]
      internal static void GetTransformFeedbackVaryingNV(uint program, uint index, [Out] int* location);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformBlockIndex")]
      internal static int GetUniformBlockIndex(uint program, string uniformBlockName);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformBufferSizeEXT")]
      internal static int GetUniformBufferSizeEXT(uint program, int location);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformdv")]
      internal static void GetUniformdv(uint program, int location, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformfv")]
      internal static void GetUniformfv(uint program, int location, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformfvARB")]
      internal static void GetUniformfvARB(uint programObj, int location, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformi64vNV")]
      internal static void GetUniformi64vNV(uint program, int location, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformIndices")]
      internal static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint* uniformIndices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformiv")]
      internal static void GetUniformiv(uint program, int location, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformivARB")]
      internal static void GetUniformivARB(uint programObj, int location, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformLocation")]
      internal static int GetUniformLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformLocationARB")]
      internal static int GetUniformLocationARB(uint programObj, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformOffsetEXT")]
      internal static IntPtr GetUniformOffsetEXT(uint program, int location);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformSubroutineuiv")]
      internal static void GetUniformSubroutineuiv(ShaderType shadertype, int location, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformui64vNV")]
      internal static void GetUniformui64vNV(uint program, int location, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformuiv")]
      internal static void GetUniformuiv(uint program, int location, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetUniformuivEXT")]
      internal static void GetUniformuivEXT(uint program, int location, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVariantArrayObjectfvATI")]
      internal static void GetVariantArrayObjectfvATI(uint id, AtiVertexArrayObject pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVariantArrayObjectivATI")]
      internal static void GetVariantArrayObjectivATI(uint id, AtiVertexArrayObject pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVariantBooleanvEXT")]
      internal static void GetVariantBooleanvEXT(uint id, ExtVertexShader value, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVariantFloatvEXT")]
      internal static void GetVariantFloatvEXT(uint id, ExtVertexShader value, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVariantIntegervEXT")]
      internal static void GetVariantIntegervEXT(uint id, ExtVertexShader value, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVariantPointervEXT")]
      internal static void GetVariantPointervEXT(uint id, ExtVertexShader value, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVaryingLocationNV")]
      internal static int GetVaryingLocationNV(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribArrayObjectfvATI")]
      internal static void GetVertexAttribArrayObjectfvATI(uint index, AtiVertexAttribArrayObject pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribArrayObjectivATI")]
      internal static void GetVertexAttribArrayObjectivATI(uint index, AtiVertexAttribArrayObject pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribdv")]
      internal static void GetVertexAttribdv(uint index, VertexAttribParameter pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribdvARB")]
      internal static void GetVertexAttribdvARB(uint index, VertexAttribParameterArb pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribdvNV")]
      internal static void GetVertexAttribdvNV(uint index, NvVertexProgram pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribfv")]
      internal static void GetVertexAttribfv(uint index, VertexAttribParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribfvARB")]
      internal static void GetVertexAttribfvARB(uint index, VertexAttribParameterArb pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribfvNV")]
      internal static void GetVertexAttribfvNV(uint index, NvVertexProgram pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribIiv")]
      internal static void GetVertexAttribIiv(uint index, VertexAttribParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribIivEXT")]
      internal static void GetVertexAttribIivEXT(uint index, NvVertexProgram4 pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribIuiv")]
      internal static void GetVertexAttribIuiv(uint index, VertexAttribParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribIuivEXT")]
      internal static void GetVertexAttribIuivEXT(uint index, NvVertexProgram4 pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribiv")]
      internal static void GetVertexAttribiv(uint index, VertexAttribParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribivARB")]
      internal static void GetVertexAttribivARB(uint index, VertexAttribParameterArb pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribivNV")]
      internal static void GetVertexAttribivNV(uint index, NvVertexProgram pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribLdv")]
      internal static void GetVertexAttribLdv(uint index, VertexAttribParameter pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribLdvEXT")]
      internal static void GetVertexAttribLdvEXT(uint index, ExtVertexAttrib64bit pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribLi64vNV")]
      internal static void GetVertexAttribLi64vNV(uint index, NvVertexAttribInteger64bit pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribLui64vNV")]
      internal static void GetVertexAttribLui64vNV(uint index, NvVertexAttribInteger64bit pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribPointerv")]
      internal static void GetVertexAttribPointerv(uint index, VertexAttribPointerParameter pname, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribPointervARB")]
      internal static void GetVertexAttribPointervARB(uint index, VertexAttribPointerParameterArb pname, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVertexAttribPointervNV")]
      internal static void GetVertexAttribPointervNV(uint index, NvVertexProgram pname, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVideoCaptureivNV")]
      internal static void GetVideoCaptureivNV(uint video_capture_slot, NvVideoCapture pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVideoCaptureStreamdvNV")]
      internal static void GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVideoCaptureStreamfvNV")]
      internal static void GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVideoCaptureStreamivNV")]
      internal static void GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVideoi64vNV")]
      internal static void GetVideoi64vNV(uint video_slot, NvPresentVideo pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVideoivNV")]
      internal static void GetVideoivNV(uint video_slot, NvPresentVideo pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVideoui64vNV")]
      internal static void GetVideoui64vNV(uint video_slot, NvPresentVideo pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGetVideouivNV")]
      internal static void GetVideouivNV(uint video_slot, NvPresentVideo pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGlobalAlphaFactorbSUN")]
      internal static void GlobalAlphaFactorbSUN(sbyte factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGlobalAlphaFactordSUN")]
      internal static void GlobalAlphaFactordSUN(double factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGlobalAlphaFactorfSUN")]
      internal static void GlobalAlphaFactorfSUN(float factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGlobalAlphaFactoriSUN")]
      internal static void GlobalAlphaFactoriSUN(int factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGlobalAlphaFactorsSUN")]
      internal static void GlobalAlphaFactorsSUN(short factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGlobalAlphaFactorubSUN")]
      internal static void GlobalAlphaFactorubSUN(byte factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGlobalAlphaFactoruiSUN")]
      internal static void GlobalAlphaFactoruiSUN(uint factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glGlobalAlphaFactorusSUN")]
      internal static void GlobalAlphaFactorusSUN(ushort factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glHint")]
      internal static void Hint(HintTarget target, HintMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glHintPGI")]
      internal static void HintPGI(PgiMiscHints target, int mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glHistogram")]
      internal static void Histogram(HistogramTarget target, int width, PixelInternalFormat internalformat, bool sink);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glHistogramEXT")]
      internal static void HistogramEXT(ExtHistogram target, int width, PixelInternalFormat internalformat, bool sink);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIglooInterfaceSGIX")]
      internal static void IglooInterfaceSGIX(All pname, IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glImageTransformParameterfHP")]
      internal static void ImageTransformParameterfHP(HpImageTransform target, HpImageTransform pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glImageTransformParameterfvHP")]
      internal static void ImageTransformParameterfvHP(HpImageTransform target, HpImageTransform pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glImageTransformParameteriHP")]
      internal static void ImageTransformParameteriHP(HpImageTransform target, HpImageTransform pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glImageTransformParameterivHP")]
      internal static void ImageTransformParameterivHP(HpImageTransform target, HpImageTransform pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glImportSyncEXT")]
      internal static IntPtr ImportSyncEXT(ExtX11SyncObject external_sync_type, IntPtr external_sync, uint flags);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexd")]
      internal static void Indexd(double c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexdv")]
      internal static void Indexdv(double* c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexf")]
      internal static void Indexf(float c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexFormatNV")]
      internal static void IndexFormatNV(NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexFuncEXT")]
      internal static void IndexFuncEXT(ExtIndexFunc func, float @ref);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexfv")]
      internal static void Indexfv(float* c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexi")]
      internal static void Indexi(int c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexiv")]
      internal static void Indexiv(int* c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexMask")]
      internal static void IndexMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexMaterialEXT")]
      internal static void IndexMaterialEXT(MaterialFace face, ExtIndexMaterial mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexPointer")]
      internal static void IndexPointer(IndexPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexPointerEXT")]
      internal static void IndexPointerEXT(IndexPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexPointerListIBM")]
      internal static void IndexPointerListIBM(IndexPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexs")]
      internal static void Indexs(short c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexsv")]
      internal static void Indexsv(short* c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexub")]
      internal static void Indexub(byte c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIndexubv")]
      internal static void Indexubv(byte* c);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glInitNames")]
      internal static void InitNames();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glInsertComponentEXT")]
      internal static void InsertComponentEXT(uint res, uint src, uint num);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glInstrumentsBufferSGIX")]
      internal static void InstrumentsBufferSGIX(int size, [Out] int* buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glInterleavedArrays")]
      internal static void InterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsAsyncMarkerSGIX")]
      internal static bool IsAsyncMarkerSGIX(uint marker);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsBuffer")]
      internal static bool IsBuffer(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsBufferARB")]
      internal static bool IsBufferARB(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsBufferResidentNV")]
      internal static bool IsBufferResidentNV(NvShaderBufferLoad target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsEnabled")]
      internal static bool IsEnabled(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsEnabledi")]
      internal static bool IsEnabledi(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsEnabledIndexedEXT")]
      internal static bool IsEnabledIndexedEXT(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsFenceAPPLE")]
      internal static bool IsFenceAPPLE(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsFenceNV")]
      internal static bool IsFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsFramebuffer")]
      internal static bool IsFramebuffer(uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsFramebufferEXT")]
      internal static bool IsFramebufferEXT(uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsList")]
      internal static bool IsList(uint list);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsNameAMD")]
      internal static bool IsNameAMD(AmdNameGenDelete identifier, uint name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsNamedBufferResidentNV")]
      internal static bool IsNamedBufferResidentNV(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsNamedStringARB")]
      internal static bool IsNamedStringARB(int namelen, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsObjectBufferATI")]
      internal static bool IsObjectBufferATI(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsOcclusionQueryNV")]
      internal static bool IsOcclusionQueryNV(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsProgram")]
      internal static bool IsProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsProgramARB")]
      internal static bool IsProgramARB(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsProgramNV")]
      internal static bool IsProgramNV(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsProgramPipeline")]
      internal static bool IsProgramPipeline(uint pipeline);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsQuery")]
      internal static bool IsQuery(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsQueryARB")]
      internal static bool IsQueryARB(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsRenderbuffer")]
      internal static bool IsRenderbuffer(uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsRenderbufferEXT")]
      internal static bool IsRenderbufferEXT(uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsSampler")]
      internal static bool IsSampler(uint sampler);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsShader")]
      internal static bool IsShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsSync")]
      internal static bool IsSync(IntPtr sync);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsTexture")]
      internal static bool IsTexture(uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsTextureEXT")]
      internal static bool IsTextureEXT(uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsTransformFeedback")]
      internal static bool IsTransformFeedback(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsTransformFeedbackNV")]
      internal static bool IsTransformFeedbackNV(uint id);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsVariantEnabledEXT")]
      internal static bool IsVariantEnabledEXT(uint id, ExtVertexShader cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsVertexArray")]
      internal static bool IsVertexArray(uint array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsVertexArrayAPPLE")]
      internal static bool IsVertexArrayAPPLE(uint array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glIsVertexAttribEnabledAPPLE")]
      internal static bool IsVertexAttribEnabledAPPLE(uint index, AppleVertexProgramEvaluators pname);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLightEnviSGIX")]
      internal static void LightEnviSGIX(SgixFragmentLighting pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLightf")]
      internal static void Lightf(LightName light, LightParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLightfv")]
      internal static void Lightfv(LightName light, LightParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLighti")]
      internal static void Lighti(LightName light, LightParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLightiv")]
      internal static void Lightiv(LightName light, LightParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLightModelf")]
      internal static void LightModelf(LightModelParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLightModelfv")]
      internal static void LightModelfv(LightModelParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLightModeli")]
      internal static void LightModeli(LightModelParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLightModeliv")]
      internal static void LightModeliv(LightModelParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLineStipple")]
      internal static void LineStipple(int factor, ushort pattern);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLineWidth")]
      internal static void LineWidth(float width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLinkProgram")]
      internal static void LinkProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLinkProgramARB")]
      internal static void LinkProgramARB(uint programObj);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glListBase")]
      internal static void ListBase(uint @base);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glListParameterfSGIX")]
      internal static void ListParameterfSGIX(uint list, ListParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glListParameterfvSGIX")]
      internal static void ListParameterfvSGIX(uint list, ListParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glListParameteriSGIX")]
      internal static void ListParameteriSGIX(uint list, ListParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glListParameterivSGIX")]
      internal static void ListParameterivSGIX(uint list, ListParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadIdentity")]
      internal static void LoadIdentity();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadIdentityDeformationMapSGIX")]
      internal static void LoadIdentityDeformationMapSGIX(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadMatrixd")]
      internal static void LoadMatrixd(double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadMatrixf")]
      internal static void LoadMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadName")]
      internal static void LoadName(uint name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadProgramNV")]
      internal static void LoadProgramNV(AssemblyProgramTargetArb target, uint id, int len, byte* program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadTransposeMatrixd")]
      internal static void LoadTransposeMatrixd(double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadTransposeMatrixdARB")]
      internal static void LoadTransposeMatrixdARB(double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadTransposeMatrixf")]
      internal static void LoadTransposeMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLoadTransposeMatrixfARB")]
      internal static void LoadTransposeMatrixfARB(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLockArraysEXT")]
      internal static void LockArraysEXT(int first, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glLogicOp")]
      internal static void LogicOp(LogicOp opcode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMakeBufferNonResidentNV")]
      internal static void MakeBufferNonResidentNV(NvShaderBufferLoad target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMakeBufferResidentNV")]
      internal static void MakeBufferResidentNV(NvShaderBufferLoad target, NvShaderBufferLoad access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMakeNamedBufferNonResidentNV")]
      internal static void MakeNamedBufferNonResidentNV(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMakeNamedBufferResidentNV")]
      internal static void MakeNamedBufferResidentNV(uint buffer, NvShaderBufferLoad access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMap1d")]
      internal static void Map1d(MapTarget target, double u1, double u2, int stride, int order, double* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMap1f")]
      internal static void Map1f(MapTarget target, float u1, float u2, int stride, int order, float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMap2d")]
      internal static void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMap2f")]
      internal static void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapBuffer")]
      internal static IntPtr MapBuffer(BufferTarget target, BufferAccess access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapBufferARB")]
      internal static IntPtr MapBufferARB(BufferTargetArb target, ArbVertexBufferObject access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapBufferRange")]
      internal static IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, BufferAccessMask access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapControlPointsNV")]
      internal static void MapControlPointsNV(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapGrid1d")]
      internal static void MapGrid1d(int un, double u1, double u2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapGrid1f")]
      internal static void MapGrid1f(int un, float u1, float u2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapGrid2d")]
      internal static void MapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapGrid2f")]
      internal static void MapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapNamedBufferEXT")]
      internal static IntPtr MapNamedBufferEXT(uint buffer, ExtDirectStateAccess access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapNamedBufferRangeEXT")]
      internal static IntPtr MapNamedBufferRangeEXT(uint buffer, IntPtr offset, IntPtr length, BufferAccessMask access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapObjectBufferATI")]
      internal static IntPtr MapObjectBufferATI(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapParameterfvNV")]
      internal static void MapParameterfvNV(NvEvaluators target, NvEvaluators pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapParameterivNV")]
      internal static void MapParameterivNV(NvEvaluators target, NvEvaluators pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapVertexAttrib1dAPPLE")]
      internal static void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapVertexAttrib1fAPPLE")]
      internal static void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapVertexAttrib2dAPPLE")]
      internal static void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMapVertexAttrib2fAPPLE")]
      internal static void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMaterialf")]
      internal static void Materialf(MaterialFace face, MaterialParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMaterialfv")]
      internal static void Materialfv(MaterialFace face, MaterialParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMateriali")]
      internal static void Materiali(MaterialFace face, MaterialParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMaterialiv")]
      internal static void Materialiv(MaterialFace face, MaterialParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixFrustumEXT")]
      internal static void MatrixFrustumEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixIndexPointerARB")]
      internal static void MatrixIndexPointerARB(int size, ArbMatrixPalette type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixIndexubvARB")]
      internal static void MatrixIndexubvARB(int size, byte* indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixIndexuivARB")]
      internal static void MatrixIndexuivARB(int size, uint* indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixIndexusvARB")]
      internal static void MatrixIndexusvARB(int size, ushort* indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixLoaddEXT")]
      internal static void MatrixLoaddEXT(MatrixMode mode, double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixLoadfEXT")]
      internal static void MatrixLoadfEXT(MatrixMode mode, float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixLoadIdentityEXT")]
      internal static void MatrixLoadIdentityEXT(MatrixMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixLoadTransposedEXT")]
      internal static void MatrixLoadTransposedEXT(MatrixMode mode, double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixLoadTransposefEXT")]
      internal static void MatrixLoadTransposefEXT(MatrixMode mode, float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixMode")]
      internal static void MatrixMode(MatrixMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixMultdEXT")]
      internal static void MatrixMultdEXT(MatrixMode mode, double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixMultfEXT")]
      internal static void MatrixMultfEXT(MatrixMode mode, float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixMultTransposedEXT")]
      internal static void MatrixMultTransposedEXT(MatrixMode mode, double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixMultTransposefEXT")]
      internal static void MatrixMultTransposefEXT(MatrixMode mode, float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixOrthoEXT")]
      internal static void MatrixOrthoEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixPopEXT")]
      internal static void MatrixPopEXT(MatrixMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixPushEXT")]
      internal static void MatrixPushEXT(MatrixMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixRotatedEXT")]
      internal static void MatrixRotatedEXT(MatrixMode mode, double angle, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixRotatefEXT")]
      internal static void MatrixRotatefEXT(MatrixMode mode, float angle, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixScaledEXT")]
      internal static void MatrixScaledEXT(MatrixMode mode, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixScalefEXT")]
      internal static void MatrixScalefEXT(MatrixMode mode, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixTranslatedEXT")]
      internal static void MatrixTranslatedEXT(MatrixMode mode, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMatrixTranslatefEXT")]
      internal static void MatrixTranslatefEXT(MatrixMode mode, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMemoryBarrierEXT")]
      internal static void MemoryBarrierEXT(uint barriers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMinmax")]
      internal static void Minmax(MinmaxTarget target, PixelInternalFormat internalformat, bool sink);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMinmaxEXT")]
      internal static void MinmaxEXT(ExtHistogram target, PixelInternalFormat internalformat, bool sink);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMinSampleShading")]
      internal static void MinSampleShading(float value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMinSampleShadingARB")]
      internal static void MinSampleShadingARB(float value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiDrawArrays")]
      internal static void MultiDrawArrays(BeginMode mode, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiDrawArraysEXT")]
      internal static void MultiDrawArraysEXT(BeginMode mode, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiDrawArraysIndirectAMD")]
      internal static void MultiDrawArraysIndirectAMD(AmdMultiDrawIndirect mode, IntPtr indirect, int primcount, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiDrawElementArrayAPPLE")]
      internal static void MultiDrawElementArrayAPPLE(BeginMode mode, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiDrawElements")]
      internal static void MultiDrawElements(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiDrawElementsBaseVertex")]
      internal static void MultiDrawElementsBaseVertex(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount, int* basevertex);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiDrawElementsEXT")]
      internal static void MultiDrawElementsEXT(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiDrawElementsIndirectAMD")]
      internal static void MultiDrawElementsIndirectAMD(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, IntPtr indirect, int primcount, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiDrawRangeElementArrayAPPLE")]
      internal static void MultiDrawRangeElementArrayAPPLE(BeginMode mode, uint start, uint end, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiModeDrawArraysIBM")]
      internal static void MultiModeDrawArraysIBM(BeginMode* mode, int* first, int* count, int primcount, int modestride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiModeDrawElementsIBM")]
      internal static void MultiModeDrawElementsIBM(BeginMode* mode, int* count, DrawElementsType type, IntPtr indices, int primcount, int modestride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexBufferEXT")]
      internal static void MultiTexBufferEXT(TextureUnit texunit, TextureTarget target, ExtDirectStateAccess internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1d")]
      internal static void MultiTexCoord1d(TextureUnit target, double s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1dARB")]
      internal static void MultiTexCoord1dARB(TextureUnit target, double s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1dv")]
      internal static void MultiTexCoord1dv(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1dvARB")]
      internal static void MultiTexCoord1dvARB(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1f")]
      internal static void MultiTexCoord1f(TextureUnit target, float s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1fARB")]
      internal static void MultiTexCoord1fARB(TextureUnit target, float s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1fv")]
      internal static void MultiTexCoord1fv(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1fvARB")]
      internal static void MultiTexCoord1fvARB(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1hNV")]
      internal static void MultiTexCoord1hNV(TextureUnit target, Half s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1hvNV")]
      internal static void MultiTexCoord1hvNV(TextureUnit target, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1i")]
      internal static void MultiTexCoord1i(TextureUnit target, int s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1iARB")]
      internal static void MultiTexCoord1iARB(TextureUnit target, int s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1iv")]
      internal static void MultiTexCoord1iv(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1ivARB")]
      internal static void MultiTexCoord1ivARB(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1s")]
      internal static void MultiTexCoord1s(TextureUnit target, short s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1sARB")]
      internal static void MultiTexCoord1sARB(TextureUnit target, short s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1sv")]
      internal static void MultiTexCoord1sv(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord1svARB")]
      internal static void MultiTexCoord1svARB(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2d")]
      internal static void MultiTexCoord2d(TextureUnit target, double s, double t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2dARB")]
      internal static void MultiTexCoord2dARB(TextureUnit target, double s, double t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2dv")]
      internal static void MultiTexCoord2dv(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2dvARB")]
      internal static void MultiTexCoord2dvARB(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2f")]
      internal static void MultiTexCoord2f(TextureUnit target, float s, float t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2fARB")]
      internal static void MultiTexCoord2fARB(TextureUnit target, float s, float t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2fv")]
      internal static void MultiTexCoord2fv(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2fvARB")]
      internal static void MultiTexCoord2fvARB(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2hNV")]
      internal static void MultiTexCoord2hNV(TextureUnit target, Half s, Half t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2hvNV")]
      internal static void MultiTexCoord2hvNV(TextureUnit target, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2i")]
      internal static void MultiTexCoord2i(TextureUnit target, int s, int t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2iARB")]
      internal static void MultiTexCoord2iARB(TextureUnit target, int s, int t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2iv")]
      internal static void MultiTexCoord2iv(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2ivARB")]
      internal static void MultiTexCoord2ivARB(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2s")]
      internal static void MultiTexCoord2s(TextureUnit target, short s, short t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2sARB")]
      internal static void MultiTexCoord2sARB(TextureUnit target, short s, short t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2sv")]
      internal static void MultiTexCoord2sv(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord2svARB")]
      internal static void MultiTexCoord2svARB(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3d")]
      internal static void MultiTexCoord3d(TextureUnit target, double s, double t, double r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3dARB")]
      internal static void MultiTexCoord3dARB(TextureUnit target, double s, double t, double r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3dv")]
      internal static void MultiTexCoord3dv(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3dvARB")]
      internal static void MultiTexCoord3dvARB(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3f")]
      internal static void MultiTexCoord3f(TextureUnit target, float s, float t, float r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3fARB")]
      internal static void MultiTexCoord3fARB(TextureUnit target, float s, float t, float r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3fv")]
      internal static void MultiTexCoord3fv(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3fvARB")]
      internal static void MultiTexCoord3fvARB(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3hNV")]
      internal static void MultiTexCoord3hNV(TextureUnit target, Half s, Half t, Half r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3hvNV")]
      internal static void MultiTexCoord3hvNV(TextureUnit target, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3i")]
      internal static void MultiTexCoord3i(TextureUnit target, int s, int t, int r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3iARB")]
      internal static void MultiTexCoord3iARB(TextureUnit target, int s, int t, int r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3iv")]
      internal static void MultiTexCoord3iv(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3ivARB")]
      internal static void MultiTexCoord3ivARB(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3s")]
      internal static void MultiTexCoord3s(TextureUnit target, short s, short t, short r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3sARB")]
      internal static void MultiTexCoord3sARB(TextureUnit target, short s, short t, short r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3sv")]
      internal static void MultiTexCoord3sv(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord3svARB")]
      internal static void MultiTexCoord3svARB(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4d")]
      internal static void MultiTexCoord4d(TextureUnit target, double s, double t, double r, double q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4dARB")]
      internal static void MultiTexCoord4dARB(TextureUnit target, double s, double t, double r, double q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4dv")]
      internal static void MultiTexCoord4dv(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4dvARB")]
      internal static void MultiTexCoord4dvARB(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4f")]
      internal static void MultiTexCoord4f(TextureUnit target, float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4fARB")]
      internal static void MultiTexCoord4fARB(TextureUnit target, float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4fv")]
      internal static void MultiTexCoord4fv(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4fvARB")]
      internal static void MultiTexCoord4fvARB(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4hNV")]
      internal static void MultiTexCoord4hNV(TextureUnit target, Half s, Half t, Half r, Half q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4hvNV")]
      internal static void MultiTexCoord4hvNV(TextureUnit target, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4i")]
      internal static void MultiTexCoord4i(TextureUnit target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4iARB")]
      internal static void MultiTexCoord4iARB(TextureUnit target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4iv")]
      internal static void MultiTexCoord4iv(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4ivARB")]
      internal static void MultiTexCoord4ivARB(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4s")]
      internal static void MultiTexCoord4s(TextureUnit target, short s, short t, short r, short q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4sARB")]
      internal static void MultiTexCoord4sARB(TextureUnit target, short s, short t, short r, short q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4sv")]
      internal static void MultiTexCoord4sv(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoord4svARB")]
      internal static void MultiTexCoord4svARB(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoordP1ui")]
      internal static void MultiTexCoordP1ui(TextureUnit texture, PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoordP1uiv")]
      internal static void MultiTexCoordP1uiv(TextureUnit texture, PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoordP2ui")]
      internal static void MultiTexCoordP2ui(TextureUnit texture, PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoordP2uiv")]
      internal static void MultiTexCoordP2uiv(TextureUnit texture, PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoordP3ui")]
      internal static void MultiTexCoordP3ui(TextureUnit texture, PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoordP3uiv")]
      internal static void MultiTexCoordP3uiv(TextureUnit texture, PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoordP4ui")]
      internal static void MultiTexCoordP4ui(TextureUnit texture, PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoordP4uiv")]
      internal static void MultiTexCoordP4uiv(TextureUnit texture, PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexCoordPointerEXT")]
      internal static void MultiTexCoordPointerEXT(TextureUnit texunit, int size, TexCoordPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexEnvfEXT")]
      internal static void MultiTexEnvfEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexEnvfvEXT")]
      internal static void MultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexEnviEXT")]
      internal static void MultiTexEnviEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexEnvivEXT")]
      internal static void MultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexGendEXT")]
      internal static void MultiTexGendEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexGendvEXT")]
      internal static void MultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexGenfEXT")]
      internal static void MultiTexGenfEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexGenfvEXT")]
      internal static void MultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexGeniEXT")]
      internal static void MultiTexGeniEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexGenivEXT")]
      internal static void MultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexImage1DEXT")]
      internal static void MultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexImage2DEXT")]
      internal static void MultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexImage3DEXT")]
      internal static void MultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexParameterfEXT")]
      internal static void MultiTexParameterfEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexParameterfvEXT")]
      internal static void MultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexParameteriEXT")]
      internal static void MultiTexParameteriEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexParameterIivEXT")]
      internal static void MultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexParameterIuivEXT")]
      internal static void MultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexParameterivEXT")]
      internal static void MultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexRenderbufferEXT")]
      internal static void MultiTexRenderbufferEXT(TextureUnit texunit, TextureTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexSubImage1DEXT")]
      internal static void MultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexSubImage2DEXT")]
      internal static void MultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultiTexSubImage3DEXT")]
      internal static void MultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultMatrixd")]
      internal static void MultMatrixd(double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultMatrixf")]
      internal static void MultMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultTransposeMatrixd")]
      internal static void MultTransposeMatrixd(double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultTransposeMatrixdARB")]
      internal static void MultTransposeMatrixdARB(double* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultTransposeMatrixf")]
      internal static void MultTransposeMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glMultTransposeMatrixfARB")]
      internal static void MultTransposeMatrixfARB(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedBufferDataEXT")]
      internal static void NamedBufferDataEXT(uint buffer, IntPtr size, IntPtr data, ExtDirectStateAccess usage);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedBufferSubDataEXT")]
      internal static void NamedBufferSubDataEXT(uint buffer, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedCopyBufferSubDataEXT")]
      internal static void NamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedFramebufferRenderbufferEXT")]
      internal static void NamedFramebufferRenderbufferEXT(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedFramebufferTexture1DEXT")]
      internal static void NamedFramebufferTexture1DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedFramebufferTexture2DEXT")]
      internal static void NamedFramebufferTexture2DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedFramebufferTexture3DEXT")]
      internal static void NamedFramebufferTexture3DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedFramebufferTextureEXT")]
      internal static void NamedFramebufferTextureEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedFramebufferTextureFaceEXT")]
      internal static void NamedFramebufferTextureFaceEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, TextureTarget face);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedFramebufferTextureLayerEXT")]
      internal static void NamedFramebufferTextureLayerEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParameter4dEXT")]
      internal static void NamedProgramLocalParameter4dEXT(uint program, ExtDirectStateAccess target, uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParameter4dvEXT")]
      internal static void NamedProgramLocalParameter4dvEXT(uint program, ExtDirectStateAccess target, uint index, double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParameter4fEXT")]
      internal static void NamedProgramLocalParameter4fEXT(uint program, ExtDirectStateAccess target, uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParameter4fvEXT")]
      internal static void NamedProgramLocalParameter4fvEXT(uint program, ExtDirectStateAccess target, uint index, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParameterI4iEXT")]
      internal static void NamedProgramLocalParameterI4iEXT(uint program, ExtDirectStateAccess target, uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParameterI4ivEXT")]
      internal static void NamedProgramLocalParameterI4ivEXT(uint program, ExtDirectStateAccess target, uint index, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParameterI4uiEXT")]
      internal static void NamedProgramLocalParameterI4uiEXT(uint program, ExtDirectStateAccess target, uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParameterI4uivEXT")]
      internal static void NamedProgramLocalParameterI4uivEXT(uint program, ExtDirectStateAccess target, uint index, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParameters4fvEXT")]
      internal static void NamedProgramLocalParameters4fvEXT(uint program, ExtDirectStateAccess target, uint index, int count, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParametersI4ivEXT")]
      internal static void NamedProgramLocalParametersI4ivEXT(uint program, ExtDirectStateAccess target, uint index, int count, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramLocalParametersI4uivEXT")]
      internal static void NamedProgramLocalParametersI4uivEXT(uint program, ExtDirectStateAccess target, uint index, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedProgramStringEXT")]
      internal static void NamedProgramStringEXT(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedRenderbufferStorageEXT")]
      internal static void NamedRenderbufferStorageEXT(uint renderbuffer, PixelInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT")]
      internal static void NamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT")]
      internal static void NamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, PixelInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNamedStringARB")]
      internal static void NamedStringARB(ArbShadingLanguageInclude type, int namelen, string name, int stringlen, string @string);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNewList")]
      internal static void NewList(uint list, ListMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNewObjectBufferATI")]
      internal static int NewObjectBufferATI(int size, IntPtr pointer, AtiVertexArrayObject usage);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3b")]
      internal static void Normal3b(sbyte nx, sbyte ny, sbyte nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3bv")]
      internal static void Normal3bv(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3d")]
      internal static void Normal3d(double nx, double ny, double nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3dv")]
      internal static void Normal3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3f")]
      internal static void Normal3f(float nx, float ny, float nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3fv")]
      internal static void Normal3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3fVertex3fSUN")]
      internal static void Normal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3fVertex3fvSUN")]
      internal static void Normal3fVertex3fvSUN(float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3hNV")]
      internal static void Normal3hNV(Half nx, Half ny, Half nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3hvNV")]
      internal static void Normal3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3i")]
      internal static void Normal3i(int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3iv")]
      internal static void Normal3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3s")]
      internal static void Normal3s(short nx, short ny, short nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormal3sv")]
      internal static void Normal3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalFormatNV")]
      internal static void NormalFormatNV(NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalP3ui")]
      internal static void NormalP3ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalP3uiv")]
      internal static void NormalP3uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalPointer")]
      internal static void NormalPointer(NormalPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalPointerEXT")]
      internal static void NormalPointerEXT(NormalPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalPointerListIBM")]
      internal static void NormalPointerListIBM(NormalPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalPointervINTEL")]
      internal static void NormalPointervINTEL(NormalPointerType type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3bATI")]
      internal static void NormalStream3bATI(AtiVertexStreams stream, sbyte nx, sbyte ny, sbyte nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3bvATI")]
      internal static void NormalStream3bvATI(AtiVertexStreams stream, sbyte* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3dATI")]
      internal static void NormalStream3dATI(AtiVertexStreams stream, double nx, double ny, double nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3dvATI")]
      internal static void NormalStream3dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3fATI")]
      internal static void NormalStream3fATI(AtiVertexStreams stream, float nx, float ny, float nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3fvATI")]
      internal static void NormalStream3fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3iATI")]
      internal static void NormalStream3iATI(AtiVertexStreams stream, int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3ivATI")]
      internal static void NormalStream3ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3sATI")]
      internal static void NormalStream3sATI(AtiVertexStreams stream, short nx, short ny, short nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glNormalStream3svATI")]
      internal static void NormalStream3svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glObjectPurgeableAPPLE")]
      internal static AppleObjectPurgeable ObjectPurgeableAPPLE(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable option);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glObjectUnpurgeableAPPLE")]
      internal static AppleObjectPurgeable ObjectUnpurgeableAPPLE(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable option);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glOrtho")]
      internal static void Ortho(double left, double right, double bottom, double top, double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPassTexCoordATI")]
      internal static void PassTexCoordATI(uint dst, uint coord, AtiFragmentShader swizzle);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPassThrough")]
      internal static void PassThrough(float token);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPatchParameterfv")]
      internal static void PatchParameterfv(PatchParameterFloat pname, float* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPatchParameteri")]
      internal static void PatchParameteri(PatchParameterInt pname, int value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPauseTransformFeedback")]
      internal static void PauseTransformFeedback();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPauseTransformFeedbackNV")]
      internal static void PauseTransformFeedbackNV();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelDataRangeNV")]
      internal static void PixelDataRangeNV(NvPixelDataRange target, int length, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelMapfv")]
      internal static void PixelMapfv(PixelMap map, int mapsize, float* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelMapuiv")]
      internal static void PixelMapuiv(PixelMap map, int mapsize, uint* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelMapusv")]
      internal static void PixelMapusv(PixelMap map, int mapsize, ushort* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelStoref")]
      internal static void PixelStoref(PixelStoreParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelStorei")]
      internal static void PixelStorei(PixelStoreParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTexGenParameterfSGIS")]
      internal static void PixelTexGenParameterfSGIS(SgisPixelTexture pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTexGenParameterfvSGIS")]
      internal static void PixelTexGenParameterfvSGIS(SgisPixelTexture pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTexGenParameteriSGIS")]
      internal static void PixelTexGenParameteriSGIS(SgisPixelTexture pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTexGenParameterivSGIS")]
      internal static void PixelTexGenParameterivSGIS(SgisPixelTexture pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTexGenSGIX")]
      internal static void PixelTexGenSGIX(SgixPixelTexture mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTransferf")]
      internal static void PixelTransferf(PixelTransferParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTransferi")]
      internal static void PixelTransferi(PixelTransferParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTransformParameterfEXT")]
      internal static void PixelTransformParameterfEXT(ExtPixelTransform target, ExtPixelTransform pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTransformParameterfvEXT")]
      internal static void PixelTransformParameterfvEXT(ExtPixelTransform target, ExtPixelTransform pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTransformParameteriEXT")]
      internal static void PixelTransformParameteriEXT(ExtPixelTransform target, ExtPixelTransform pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelTransformParameterivEXT")]
      internal static void PixelTransformParameterivEXT(ExtPixelTransform target, ExtPixelTransform pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPixelZoom")]
      internal static void PixelZoom(float xfactor, float yfactor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPNTrianglesfATI")]
      internal static void PNTrianglesfATI(AtiPnTriangles pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPNTrianglesiATI")]
      internal static void PNTrianglesiATI(AtiPnTriangles pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameterf")]
      internal static void PointParameterf(PointParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameterfARB")]
      internal static void PointParameterfARB(ArbPointParameters pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameterfEXT")]
      internal static void PointParameterfEXT(ExtPointParameters pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameterfSGIS")]
      internal static void PointParameterfSGIS(SgisPointParameters pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameterfv")]
      internal static void PointParameterfv(PointParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameterfvARB")]
      internal static void PointParameterfvARB(ArbPointParameters pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameterfvEXT")]
      internal static void PointParameterfvEXT(ExtPointParameters pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameterfvSGIS")]
      internal static void PointParameterfvSGIS(SgisPointParameters pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameteri")]
      internal static void PointParameteri(PointParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameteriNV")]
      internal static void PointParameteriNV(NvPointSprite pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameteriv")]
      internal static void PointParameteriv(PointParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointParameterivNV")]
      internal static void PointParameterivNV(NvPointSprite pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPointSize")]
      internal static void PointSize(float size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPollAsyncSGIX")]
      internal static int PollAsyncSGIX([Out] uint* markerp);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPollInstrumentsSGIX")]
      internal static int PollInstrumentsSGIX([Out] int* marker_p);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPolygonMode")]
      internal static void PolygonMode(MaterialFace face, PolygonMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPolygonOffset")]
      internal static void PolygonOffset(float factor, float units);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPolygonOffsetEXT")]
      internal static void PolygonOffsetEXT(float factor, float bias);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPolygonStipple")]
      internal static void PolygonStipple(byte* mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPopAttrib")]
      internal static void PopAttrib();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPopClientAttrib")]
      internal static void PopClientAttrib();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPopMatrix")]
      internal static void PopMatrix();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPopName")]
      internal static void PopName();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPresentFrameDualFillNV")]
      internal static void PresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, NvPresentVideo type, NvPresentVideo target0, uint fill0, NvPresentVideo target1, uint fill1, NvPresentVideo target2, uint fill2, NvPresentVideo target3, uint fill3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPresentFrameKeyedNV")]
      internal static void PresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, NvPresentVideo type, NvPresentVideo target0, uint fill0, uint key0, NvPresentVideo target1, uint fill1, uint key1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPrimitiveRestartIndex")]
      internal static void PrimitiveRestartIndex(uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPrimitiveRestartIndexNV")]
      internal static void PrimitiveRestartIndexNV(uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPrimitiveRestartNV")]
      internal static void PrimitiveRestartNV();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTextures")]
      internal static void PrioritizeTextures(int n, uint* textures, float* priorities);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPrioritizeTexturesEXT")]
      internal static void PrioritizeTexturesEXT(int n, uint* textures, float* priorities);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramBinary")]
      internal static void ProgramBinary(uint program, BinaryFormat binaryFormat, IntPtr binary, int length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramBufferParametersfvNV")]
      internal static void ProgramBufferParametersfvNV(NvParameterBufferObject target, uint buffer, uint index, int count, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramBufferParametersIivNV")]
      internal static void ProgramBufferParametersIivNV(NvParameterBufferObject target, uint buffer, uint index, int count, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramBufferParametersIuivNV")]
      internal static void ProgramBufferParametersIuivNV(NvParameterBufferObject target, uint buffer, uint index, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParameter4dARB")]
      internal static void ProgramEnvParameter4dARB(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParameter4dvARB")]
      internal static void ProgramEnvParameter4dvARB(AssemblyProgramTargetArb target, uint index, double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParameter4fARB")]
      internal static void ProgramEnvParameter4fARB(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParameter4fvARB")]
      internal static void ProgramEnvParameter4fvARB(AssemblyProgramTargetArb target, uint index, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParameterI4iNV")]
      internal static void ProgramEnvParameterI4iNV(NvGpuProgram4 target, uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParameterI4ivNV")]
      internal static void ProgramEnvParameterI4ivNV(NvGpuProgram4 target, uint index, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParameterI4uiNV")]
      internal static void ProgramEnvParameterI4uiNV(NvGpuProgram4 target, uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParameterI4uivNV")]
      internal static void ProgramEnvParameterI4uivNV(NvGpuProgram4 target, uint index, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParameters4fvEXT")]
      internal static void ProgramEnvParameters4fvEXT(ExtGpuProgramParameters target, uint index, int count, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParametersI4ivNV")]
      internal static void ProgramEnvParametersI4ivNV(NvGpuProgram4 target, uint index, int count, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramEnvParametersI4uivNV")]
      internal static void ProgramEnvParametersI4uivNV(NvGpuProgram4 target, uint index, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParameter4dARB")]
      internal static void ProgramLocalParameter4dARB(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParameter4dvARB")]
      internal static void ProgramLocalParameter4dvARB(AssemblyProgramTargetArb target, uint index, double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParameter4fARB")]
      internal static void ProgramLocalParameter4fARB(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParameter4fvARB")]
      internal static void ProgramLocalParameter4fvARB(AssemblyProgramTargetArb target, uint index, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParameterI4iNV")]
      internal static void ProgramLocalParameterI4iNV(NvGpuProgram4 target, uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParameterI4ivNV")]
      internal static void ProgramLocalParameterI4ivNV(NvGpuProgram4 target, uint index, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParameterI4uiNV")]
      internal static void ProgramLocalParameterI4uiNV(NvGpuProgram4 target, uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParameterI4uivNV")]
      internal static void ProgramLocalParameterI4uivNV(NvGpuProgram4 target, uint index, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParameters4fvEXT")]
      internal static void ProgramLocalParameters4fvEXT(ExtGpuProgramParameters target, uint index, int count, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParametersI4ivNV")]
      internal static void ProgramLocalParametersI4ivNV(NvGpuProgram4 target, uint index, int count, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramLocalParametersI4uivNV")]
      internal static void ProgramLocalParametersI4uivNV(NvGpuProgram4 target, uint index, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramNamedParameter4dNV")]
      internal static void ProgramNamedParameter4dNV(uint id, int len, byte* name, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramNamedParameter4dvNV")]
      internal static void ProgramNamedParameter4dvNV(uint id, int len, byte* name, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramNamedParameter4fNV")]
      internal static void ProgramNamedParameter4fNV(uint id, int len, byte* name, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramNamedParameter4fvNV")]
      internal static void ProgramNamedParameter4fvNV(uint id, int len, byte* name, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramParameter4dNV")]
      internal static void ProgramParameter4dNV(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramParameter4dvNV")]
      internal static void ProgramParameter4dvNV(AssemblyProgramTargetArb target, uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramParameter4fNV")]
      internal static void ProgramParameter4fNV(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramParameter4fvNV")]
      internal static void ProgramParameter4fvNV(AssemblyProgramTargetArb target, uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramParameteri")]
      internal static void ProgramParameteri(uint program, AssemblyProgramParameterArb pname, int value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramParameteriARB")]
      internal static void ProgramParameteriARB(uint program, AssemblyProgramParameterArb pname, int value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramParameteriEXT")]
      internal static void ProgramParameteriEXT(uint program, AssemblyProgramParameterArb pname, int value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramParameters4dvNV")]
      internal static void ProgramParameters4dvNV(AssemblyProgramTargetArb target, uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramParameters4fvNV")]
      internal static void ProgramParameters4fvNV(AssemblyProgramTargetArb target, uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramStringARB")]
      internal static void ProgramStringARB(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramSubroutineParametersuivNV")]
      internal static void ProgramSubroutineParametersuivNV(NvGpuProgram5 target, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1d")]
      internal static void ProgramUniform1d(uint program, int location, double v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1dEXT")]
      internal static void ProgramUniform1dEXT(uint program, int location, double x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1dv")]
      internal static void ProgramUniform1dv(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1dvEXT")]
      internal static void ProgramUniform1dvEXT(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1f")]
      internal static void ProgramUniform1f(uint program, int location, float v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1fEXT")]
      internal static void ProgramUniform1fEXT(uint program, int location, float v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1fv")]
      internal static void ProgramUniform1fv(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1fvEXT")]
      internal static void ProgramUniform1fvEXT(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1i")]
      internal static void ProgramUniform1i(uint program, int location, int v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1i64NV")]
      internal static void ProgramUniform1i64NV(uint program, int location, long x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1i64vNV")]
      internal static void ProgramUniform1i64vNV(uint program, int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1iEXT")]
      internal static void ProgramUniform1iEXT(uint program, int location, int v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1iv")]
      internal static void ProgramUniform1iv(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1ivEXT")]
      internal static void ProgramUniform1ivEXT(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1ui")]
      internal static void ProgramUniform1ui(uint program, int location, uint v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1ui64NV")]
      internal static void ProgramUniform1ui64NV(uint program, int location, ulong x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1ui64vNV")]
      internal static void ProgramUniform1ui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1uiEXT")]
      internal static void ProgramUniform1uiEXT(uint program, int location, uint v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1uiv")]
      internal static void ProgramUniform1uiv(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform1uivEXT")]
      internal static void ProgramUniform1uivEXT(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2d")]
      internal static void ProgramUniform2d(uint program, int location, double v0, double v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2dEXT")]
      internal static void ProgramUniform2dEXT(uint program, int location, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2dv")]
      internal static void ProgramUniform2dv(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2dvEXT")]
      internal static void ProgramUniform2dvEXT(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2f")]
      internal static void ProgramUniform2f(uint program, int location, float v0, float v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2fEXT")]
      internal static void ProgramUniform2fEXT(uint program, int location, float v0, float v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2fv")]
      internal static void ProgramUniform2fv(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2fvEXT")]
      internal static void ProgramUniform2fvEXT(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2i")]
      internal static void ProgramUniform2i(uint program, int location, int v0, int v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2i64NV")]
      internal static void ProgramUniform2i64NV(uint program, int location, long x, long y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2i64vNV")]
      internal static void ProgramUniform2i64vNV(uint program, int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2iEXT")]
      internal static void ProgramUniform2iEXT(uint program, int location, int v0, int v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2iv")]
      internal static void ProgramUniform2iv(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2ivEXT")]
      internal static void ProgramUniform2ivEXT(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2ui")]
      internal static void ProgramUniform2ui(uint program, int location, uint v0, uint v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2ui64NV")]
      internal static void ProgramUniform2ui64NV(uint program, int location, ulong x, ulong y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2ui64vNV")]
      internal static void ProgramUniform2ui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2uiEXT")]
      internal static void ProgramUniform2uiEXT(uint program, int location, uint v0, uint v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2uiv")]
      internal static void ProgramUniform2uiv(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform2uivEXT")]
      internal static void ProgramUniform2uivEXT(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3d")]
      internal static void ProgramUniform3d(uint program, int location, double v0, double v1, double v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3dEXT")]
      internal static void ProgramUniform3dEXT(uint program, int location, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3dv")]
      internal static void ProgramUniform3dv(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3dvEXT")]
      internal static void ProgramUniform3dvEXT(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3f")]
      internal static void ProgramUniform3f(uint program, int location, float v0, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3fEXT")]
      internal static void ProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3fv")]
      internal static void ProgramUniform3fv(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3fvEXT")]
      internal static void ProgramUniform3fvEXT(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3i")]
      internal static void ProgramUniform3i(uint program, int location, int v0, int v1, int v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3i64NV")]
      internal static void ProgramUniform3i64NV(uint program, int location, long x, long y, long z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3i64vNV")]
      internal static void ProgramUniform3i64vNV(uint program, int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3iEXT")]
      internal static void ProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3iv")]
      internal static void ProgramUniform3iv(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3ivEXT")]
      internal static void ProgramUniform3ivEXT(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3ui")]
      internal static void ProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3ui64NV")]
      internal static void ProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3ui64vNV")]
      internal static void ProgramUniform3ui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3uiEXT")]
      internal static void ProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3uiv")]
      internal static void ProgramUniform3uiv(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform3uivEXT")]
      internal static void ProgramUniform3uivEXT(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4d")]
      internal static void ProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4dEXT")]
      internal static void ProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4dv")]
      internal static void ProgramUniform4dv(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4dvEXT")]
      internal static void ProgramUniform4dvEXT(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4f")]
      internal static void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4fEXT")]
      internal static void ProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4fv")]
      internal static void ProgramUniform4fv(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4fvEXT")]
      internal static void ProgramUniform4fvEXT(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4i")]
      internal static void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4i64NV")]
      internal static void ProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4i64vNV")]
      internal static void ProgramUniform4i64vNV(uint program, int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4iEXT")]
      internal static void ProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4iv")]
      internal static void ProgramUniform4iv(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4ivEXT")]
      internal static void ProgramUniform4ivEXT(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4ui")]
      internal static void ProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4ui64NV")]
      internal static void ProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4ui64vNV")]
      internal static void ProgramUniform4ui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4uiEXT")]
      internal static void ProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4uiv")]
      internal static void ProgramUniform4uiv(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniform4uivEXT")]
      internal static void ProgramUniform4uivEXT(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2dv")]
      internal static void ProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2dvEXT")]
      internal static void ProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2fv")]
      internal static void ProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2fvEXT")]
      internal static void ProgramUniformMatrix2fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2x3dv")]
      internal static void ProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2x3dvEXT")]
      internal static void ProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2x3fv")]
      internal static void ProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
      internal static void ProgramUniformMatrix2x3fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2x4dv")]
      internal static void ProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2x4dvEXT")]
      internal static void ProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2x4fv")]
      internal static void ProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
      internal static void ProgramUniformMatrix2x4fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3dv")]
      internal static void ProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3dvEXT")]
      internal static void ProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3fv")]
      internal static void ProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3fvEXT")]
      internal static void ProgramUniformMatrix3fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3x2dv")]
      internal static void ProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3x2dvEXT")]
      internal static void ProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3x2fv")]
      internal static void ProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
      internal static void ProgramUniformMatrix3x2fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3x4dv")]
      internal static void ProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3x4dvEXT")]
      internal static void ProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3x4fv")]
      internal static void ProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
      internal static void ProgramUniformMatrix3x4fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4dv")]
      internal static void ProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4dvEXT")]
      internal static void ProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4fv")]
      internal static void ProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4fvEXT")]
      internal static void ProgramUniformMatrix4fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4x2dv")]
      internal static void ProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4x2dvEXT")]
      internal static void ProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4x2fv")]
      internal static void ProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
      internal static void ProgramUniformMatrix4x2fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4x3dv")]
      internal static void ProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4x3dvEXT")]
      internal static void ProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4x3fv")]
      internal static void ProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
      internal static void ProgramUniformMatrix4x3fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformui64NV")]
      internal static void ProgramUniformui64NV(uint program, int location, ulong value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramUniformui64vNV")]
      internal static void ProgramUniformui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProgramVertexLimitNV")]
      internal static void ProgramVertexLimitNV(NvGeometryProgram4 target, int limit);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProvokingVertex")]
      internal static void ProvokingVertex(ProvokingVertexMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glProvokingVertexEXT")]
      internal static void ProvokingVertexEXT(ExtProvokingVertex mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPushAttrib")]
      internal static void PushAttrib(AttribMask mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPushClientAttrib")]
      internal static void PushClientAttrib(ClientAttribMask mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPushClientAttribDefaultEXT")]
      internal static void PushClientAttribDefaultEXT(ClientAttribMask mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPushMatrix")]
      internal static void PushMatrix();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glPushName")]
      internal static void PushName(uint name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glQueryCounter")]
      internal static void QueryCounter(uint id, QueryCounterTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos2d")]
      internal static void RasterPos2d(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos2dv")]
      internal static void RasterPos2dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos2f")]
      internal static void RasterPos2f(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos2fv")]
      internal static void RasterPos2fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos2i")]
      internal static void RasterPos2i(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos2iv")]
      internal static void RasterPos2iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos2s")]
      internal static void RasterPos2s(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos2sv")]
      internal static void RasterPos2sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos3d")]
      internal static void RasterPos3d(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos3dv")]
      internal static void RasterPos3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos3f")]
      internal static void RasterPos3f(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos3fv")]
      internal static void RasterPos3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos3i")]
      internal static void RasterPos3i(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos3iv")]
      internal static void RasterPos3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos3s")]
      internal static void RasterPos3s(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos3sv")]
      internal static void RasterPos3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos4d")]
      internal static void RasterPos4d(double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos4dv")]
      internal static void RasterPos4dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos4f")]
      internal static void RasterPos4f(float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos4fv")]
      internal static void RasterPos4fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos4i")]
      internal static void RasterPos4i(int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos4iv")]
      internal static void RasterPos4iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos4s")]
      internal static void RasterPos4s(short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRasterPos4sv")]
      internal static void RasterPos4sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReadBuffer")]
      internal static void ReadBuffer(ReadBufferMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReadInstrumentsSGIX")]
      internal static void ReadInstrumentsSGIX(int marker);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReadnPixelsARB")]
      internal static void ReadnPixelsARB(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReadPixels")]
      internal static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, [Out] IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRectd")]
      internal static void Rectd(double x1, double y1, double x2, double y2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRectdv")]
      internal static void Rectdv(double* v1, double* v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRectf")]
      internal static void Rectf(float x1, float y1, float x2, float y2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRectfv")]
      internal static void Rectfv(float* v1, float* v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRecti")]
      internal static void Recti(int x1, int y1, int x2, int y2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRectiv")]
      internal static void Rectiv(int* v1, int* v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRects")]
      internal static void Rects(short x1, short y1, short x2, short y2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRectsv")]
      internal static void Rectsv(short* v1, short* v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReferencePlaneSGIX")]
      internal static void ReferencePlaneSGIX(double* equation);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReleaseShaderCompiler")]
      internal static void ReleaseShaderCompiler();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRenderbufferStorage")]
      internal static void RenderbufferStorage(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRenderbufferStorageEXT")]
      internal static void RenderbufferStorageEXT(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRenderbufferStorageMultisample")]
      internal static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferStorage internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRenderbufferStorageMultisampleCoverageNV")]
      internal static void RenderbufferStorageMultisampleCoverageNV(RenderbufferTarget target, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
      internal static void RenderbufferStorageMultisampleEXT(ExtFramebufferMultisample target, int samples, ExtFramebufferMultisample internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRenderMode")]
      internal static int RenderMode(RenderingMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodePointerSUN")]
      internal static void ReplacementCodePointerSUN(SunTriangleList type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeubSUN")]
      internal static void ReplacementCodeubSUN(byte code);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeubvSUN")]
      internal static void ReplacementCodeubvSUN(byte* code);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiColor3fVertex3fSUN")]
      internal static void ReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN")]
      internal static void ReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fSUN")]
      internal static void ReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN")]
      internal static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiColor4ubVertex3fSUN")]
      internal static void ReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN")]
      internal static void ReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiNormal3fVertex3fSUN")]
      internal static void ReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN")]
      internal static void ReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiSUN")]
      internal static void ReplacementCodeuiSUN(uint code);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")]
      internal static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")]
      internal static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")]
      internal static void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")]
      internal static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fSUN")]
      internal static void ReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN")]
      internal static void ReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float* tc, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiVertex3fSUN")]
      internal static void ReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuiVertex3fvSUN")]
      internal static void ReplacementCodeuiVertex3fvSUN(uint* rc, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeuivSUN")]
      internal static void ReplacementCodeuivSUN(uint* code);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeusSUN")]
      internal static void ReplacementCodeusSUN(ushort code);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glReplacementCodeusvSUN")]
      internal static void ReplacementCodeusvSUN(ushort* code);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRequestResidentProgramsNV")]
      internal static void RequestResidentProgramsNV(int n, uint* programs);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glResetHistogram")]
      internal static void ResetHistogram(HistogramTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glResetHistogramEXT")]
      internal static void ResetHistogramEXT(ExtHistogram target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glResetMinmax")]
      internal static void ResetMinmax(MinmaxTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glResetMinmaxEXT")]
      internal static void ResetMinmaxEXT(ExtHistogram target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glResizeBuffersMESA", CharSet = CharSet.Auto)]
      internal static void ResizeBuffersMESA();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glResumeTransformFeedback")]
      internal static void ResumeTransformFeedback();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glResumeTransformFeedbackNV")]
      internal static void ResumeTransformFeedbackNV();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRotated")]
      internal static void Rotated(double angle, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glRotatef")]
      internal static void Rotatef(float angle, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSampleCoverage")]
      internal static void SampleCoverage(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSampleCoverageARB")]
      internal static void SampleCoverageARB(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSampleMapATI")]
      internal static void SampleMapATI(uint dst, uint interp, AtiFragmentShader swizzle);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSampleMaskEXT")]
      internal static void SampleMaskEXT(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSampleMaski")]
      internal static void SampleMaski(uint index, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSampleMaskIndexedNV")]
      internal static void SampleMaskIndexedNV(uint index, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSampleMaskSGIS")]
      internal static void SampleMaskSGIS(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSamplePatternEXT")]
      internal static void SamplePatternEXT(ExtMultisample pattern);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSamplePatternSGIS")]
      internal static void SamplePatternSGIS(SgisMultisample pattern);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSamplerParameterf")]
      internal static void SamplerParameterf(uint sampler, SamplerParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSamplerParameterfv")]
      internal static void SamplerParameterfv(uint sampler, SamplerParameter pname, float* param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSamplerParameteri")]
      internal static void SamplerParameteri(uint sampler, SamplerParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSamplerParameterIiv")]
      internal static void SamplerParameterIiv(uint sampler, ArbSamplerObjects pname, int* param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSamplerParameterIuiv")]
      internal static void SamplerParameterIuiv(uint sampler, ArbSamplerObjects pname, uint* param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSamplerParameteriv")]
      internal static void SamplerParameteriv(uint sampler, SamplerParameter pname, int* param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glScaled")]
      internal static void Scaled(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glScalef")]
      internal static void Scalef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glScissor")]
      internal static void Scissor(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glScissorArrayv")]
      internal static void ScissorArrayv(uint first, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glScissorIndexed")]
      internal static void ScissorIndexed(uint index, int left, int bottom, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glScissorIndexedv")]
      internal static void ScissorIndexedv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3b")]
      internal static void SecondaryColor3b(sbyte red, sbyte green, sbyte blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3bEXT")]
      internal static void SecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3bv")]
      internal static void SecondaryColor3bv(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3bvEXT")]
      internal static void SecondaryColor3bvEXT(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3d")]
      internal static void SecondaryColor3d(double red, double green, double blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3dEXT")]
      internal static void SecondaryColor3dEXT(double red, double green, double blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3dv")]
      internal static void SecondaryColor3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3dvEXT")]
      internal static void SecondaryColor3dvEXT(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3f")]
      internal static void SecondaryColor3f(float red, float green, float blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3fEXT")]
      internal static void SecondaryColor3fEXT(float red, float green, float blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3fv")]
      internal static void SecondaryColor3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3fvEXT")]
      internal static void SecondaryColor3fvEXT(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3hNV")]
      internal static void SecondaryColor3hNV(Half red, Half green, Half blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3hvNV")]
      internal static void SecondaryColor3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3i")]
      internal static void SecondaryColor3i(int red, int green, int blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3iEXT")]
      internal static void SecondaryColor3iEXT(int red, int green, int blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3iv")]
      internal static void SecondaryColor3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3ivEXT")]
      internal static void SecondaryColor3ivEXT(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3s")]
      internal static void SecondaryColor3s(short red, short green, short blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3sEXT")]
      internal static void SecondaryColor3sEXT(short red, short green, short blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3sv")]
      internal static void SecondaryColor3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3svEXT")]
      internal static void SecondaryColor3svEXT(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3ub")]
      internal static void SecondaryColor3ub(byte red, byte green, byte blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3ubEXT")]
      internal static void SecondaryColor3ubEXT(byte red, byte green, byte blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3ubv")]
      internal static void SecondaryColor3ubv(byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3ubvEXT")]
      internal static void SecondaryColor3ubvEXT(byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3ui")]
      internal static void SecondaryColor3ui(uint red, uint green, uint blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3uiEXT")]
      internal static void SecondaryColor3uiEXT(uint red, uint green, uint blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3uiv")]
      internal static void SecondaryColor3uiv(uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3uivEXT")]
      internal static void SecondaryColor3uivEXT(uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3us")]
      internal static void SecondaryColor3us(ushort red, ushort green, ushort blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3usEXT")]
      internal static void SecondaryColor3usEXT(ushort red, ushort green, ushort blue);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3usv")]
      internal static void SecondaryColor3usv(ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColor3usvEXT")]
      internal static void SecondaryColor3usvEXT(ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColorFormatNV")]
      internal static void SecondaryColorFormatNV(int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColorP3ui")]
      internal static void SecondaryColorP3ui(PackedPointerType type, uint color);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColorP3uiv")]
      internal static void SecondaryColorP3uiv(PackedPointerType type, uint* color);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColorPointer")]
      internal static void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColorPointerEXT")]
      internal static void SecondaryColorPointerEXT(int size, ColorPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSecondaryColorPointerListIBM")]
      internal static void SecondaryColorPointerListIBM(int size, IbmVertexArrayLists type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSelectBuffer")]
      internal static void SelectBuffer(int size, [Out] uint* buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSelectPerfMonitorCountersAMD")]
      internal static void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, [Out] uint* counterList);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSeparableFilter2D")]
      internal static void SeparableFilter2D(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSeparableFilter2DEXT")]
      internal static void SeparableFilter2DEXT(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSetFenceAPPLE")]
      internal static void SetFenceAPPLE(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSetFenceNV")]
      internal static void SetFenceNV(uint fence, NvFence condition);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSetFragmentShaderConstantATI")]
      internal static void SetFragmentShaderConstantATI(uint dst, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSetInvariantEXT")]
      internal static void SetInvariantEXT(uint id, ExtVertexShader type, IntPtr addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSetLocalConstantEXT")]
      internal static void SetLocalConstantEXT(uint id, ExtVertexShader type, IntPtr addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSetMultisamplefvAMD")]
      internal static void SetMultisamplefvAMD(AmdSamplePositions pname, uint index, float* val);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glShadeModel")]
      internal static void ShadeModel(ShadingModel mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glShaderBinary")]
      internal static void ShaderBinary(int count, uint* shaders, BinaryFormat binaryformat, IntPtr binary, int length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glShaderOp1EXT")]
      internal static void ShaderOp1EXT(ExtVertexShader op, uint res, uint arg1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glShaderOp2EXT")]
      internal static void ShaderOp2EXT(ExtVertexShader op, uint res, uint arg1, uint arg2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glShaderOp3EXT")]
      internal static void ShaderOp3EXT(ExtVertexShader op, uint res, uint arg1, uint arg2, uint arg3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glShaderSource")]
      internal static void ShaderSource(uint shader, int count, string[] @string, int* length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glShaderSourceARB")]
      internal static void ShaderSourceARB(uint shaderObj, int count, string[] @string, int* length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSharpenTexFuncSGIS")]
      internal static void SharpenTexFuncSGIS(TextureTarget target, int n, float* points);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSpriteParameterfSGIX")]
      internal static void SpriteParameterfSGIX(SgixSprite pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSpriteParameterfvSGIX")]
      internal static void SpriteParameterfvSGIX(SgixSprite pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSpriteParameteriSGIX")]
      internal static void SpriteParameteriSGIX(SgixSprite pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSpriteParameterivSGIX")]
      internal static void SpriteParameterivSGIX(SgixSprite pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStartInstrumentsSGIX")]
      internal static void StartInstrumentsSGIX();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStencilClearTagEXT")]
      internal static void StencilClearTagEXT(int stencilTagBits, uint stencilClearTag);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStencilFunc")]
      internal static void StencilFunc(StencilFunction func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStencilFuncSeparate")]
      internal static void StencilFuncSeparate(Version20 face, StencilFunction func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStencilFuncSeparateATI")]
      internal static void StencilFuncSeparateATI(StencilFunction frontfunc, StencilFunction backfunc, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStencilMask")]
      internal static void StencilMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStencilMaskSeparate")]
      internal static void StencilMaskSeparate(StencilFace face, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStencilOp")]
      internal static void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStencilOpSeparate")]
      internal static void StencilOpSeparate(StencilFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStencilOpSeparateATI")]
      internal static void StencilOpSeparateATI(AtiSeparateStencil face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStopInstrumentsSGIX")]
      internal static void StopInstrumentsSGIX(int marker);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glStringMarkerGREMEDY")]
      internal static void StringMarkerGREMEDY(int len, IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glSwizzleEXT")]
      internal static void SwizzleEXT(uint res, uint @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTagSampleBufferSGIX")]
      internal static void TagSampleBufferSGIX();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3bEXT")]
      internal static void Tangent3bEXT(sbyte tx, sbyte ty, sbyte tz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3bvEXT")]
      internal static void Tangent3bvEXT(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3dEXT")]
      internal static void Tangent3dEXT(double tx, double ty, double tz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3dvEXT")]
      internal static void Tangent3dvEXT(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3fEXT")]
      internal static void Tangent3fEXT(float tx, float ty, float tz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3fvEXT")]
      internal static void Tangent3fvEXT(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3iEXT")]
      internal static void Tangent3iEXT(int tx, int ty, int tz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3ivEXT")]
      internal static void Tangent3ivEXT(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3sEXT")]
      internal static void Tangent3sEXT(short tx, short ty, short tz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangent3svEXT")]
      internal static void Tangent3svEXT(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTangentPointerEXT")]
      internal static void TangentPointerEXT(NormalPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTbufferMask3DFX")]
      internal static void TbufferMask3DFX(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTessellationFactorAMD")]
      internal static void TessellationFactorAMD(float factor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTessellationModeAMD")]
      internal static void TessellationModeAMD(AmdVertexShaderTesselator mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTestFenceAPPLE")]
      internal static bool TestFenceAPPLE(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTestFenceNV")]
      internal static bool TestFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTestObjectAPPLE")]
      internal static bool TestObjectAPPLE(AppleFence @object, uint name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexBuffer")]
      internal static void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexBufferARB")]
      internal static void TexBufferARB(TextureTarget target, ArbTextureBufferObject internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexBufferEXT")]
      internal static void TexBufferEXT(TextureTarget target, ExtTextureBufferObject internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexBumpParameterfvATI")]
      internal static void TexBumpParameterfvATI(AtiEnvmapBumpmap pname, float* param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexBumpParameterivATI")]
      internal static void TexBumpParameterivATI(AtiEnvmapBumpmap pname, int* param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1d")]
      internal static void TexCoord1d(double s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1dv")]
      internal static void TexCoord1dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1f")]
      internal static void TexCoord1f(float s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1fv")]
      internal static void TexCoord1fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1hNV")]
      internal static void TexCoord1hNV(Half s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1hvNV")]
      internal static void TexCoord1hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1i")]
      internal static void TexCoord1i(int s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1iv")]
      internal static void TexCoord1iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1s")]
      internal static void TexCoord1s(short s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord1sv")]
      internal static void TexCoord1sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2d")]
      internal static void TexCoord2d(double s, double t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2dv")]
      internal static void TexCoord2dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2f")]
      internal static void TexCoord2f(float s, float t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fColor3fVertex3fSUN")]
      internal static void TexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fColor3fVertex3fvSUN")]
      internal static void TexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fSUN")]
      internal static void TexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fvSUN")]
      internal static void TexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fColor4ubVertex3fSUN")]
      internal static void TexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fColor4ubVertex3fvSUN")]
      internal static void TexCoord2fColor4ubVertex3fvSUN(float* tc, byte* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fNormal3fVertex3fSUN")]
      internal static void TexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fNormal3fVertex3fvSUN")]
      internal static void TexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fv")]
      internal static void TexCoord2fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fVertex3fSUN")]
      internal static void TexCoord2fVertex3fSUN(float s, float t, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2fVertex3fvSUN")]
      internal static void TexCoord2fVertex3fvSUN(float* tc, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2hNV")]
      internal static void TexCoord2hNV(Half s, Half t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2hvNV")]
      internal static void TexCoord2hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2i")]
      internal static void TexCoord2i(int s, int t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2iv")]
      internal static void TexCoord2iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2s")]
      internal static void TexCoord2s(short s, short t);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord2sv")]
      internal static void TexCoord2sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3d")]
      internal static void TexCoord3d(double s, double t, double r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3dv")]
      internal static void TexCoord3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3f")]
      internal static void TexCoord3f(float s, float t, float r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3fv")]
      internal static void TexCoord3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3hNV")]
      internal static void TexCoord3hNV(Half s, Half t, Half r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3hvNV")]
      internal static void TexCoord3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3i")]
      internal static void TexCoord3i(int s, int t, int r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3iv")]
      internal static void TexCoord3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3s")]
      internal static void TexCoord3s(short s, short t, short r);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord3sv")]
      internal static void TexCoord3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4d")]
      internal static void TexCoord4d(double s, double t, double r, double q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4dv")]
      internal static void TexCoord4dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4f")]
      internal static void TexCoord4f(float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fSUN")]
      internal static void TexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fvSUN")]
      internal static void TexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4fv")]
      internal static void TexCoord4fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4fVertex4fSUN")]
      internal static void TexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4fVertex4fvSUN")]
      internal static void TexCoord4fVertex4fvSUN(float* tc, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4hNV")]
      internal static void TexCoord4hNV(Half s, Half t, Half r, Half q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4hvNV")]
      internal static void TexCoord4hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4i")]
      internal static void TexCoord4i(int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4iv")]
      internal static void TexCoord4iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4s")]
      internal static void TexCoord4s(short s, short t, short r, short q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoord4sv")]
      internal static void TexCoord4sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordFormatNV")]
      internal static void TexCoordFormatNV(int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordP1ui")]
      internal static void TexCoordP1ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordP1uiv")]
      internal static void TexCoordP1uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordP2ui")]
      internal static void TexCoordP2ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordP2uiv")]
      internal static void TexCoordP2uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordP3ui")]
      internal static void TexCoordP3ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordP3uiv")]
      internal static void TexCoordP3uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordP4ui")]
      internal static void TexCoordP4ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordP4uiv")]
      internal static void TexCoordP4uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointer")]
      internal static void TexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointerEXT")]
      internal static void TexCoordPointerEXT(int size, TexCoordPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointerListIBM")]
      internal static void TexCoordPointerListIBM(int size, TexCoordPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexCoordPointervINTEL")]
      internal static void TexCoordPointervINTEL(int size, VertexPointerType type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexEnvf")]
      internal static void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexEnvfv")]
      internal static void TexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexEnvi")]
      internal static void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexEnviv")]
      internal static void TexEnviv(TextureEnvTarget target, TextureEnvParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexFilterFuncSGIS")]
      internal static void TexFilterFuncSGIS(TextureTarget target, SgisTextureFilter4 filter, int n, float* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexGend")]
      internal static void TexGend(TextureCoordName coord, TextureGenParameter pname, double param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexGendv")]
      internal static void TexGendv(TextureCoordName coord, TextureGenParameter pname, double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexGenf")]
      internal static void TexGenf(TextureCoordName coord, TextureGenParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexGenfv")]
      internal static void TexGenfv(TextureCoordName coord, TextureGenParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexGeni")]
      internal static void TexGeni(TextureCoordName coord, TextureGenParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexGeniv")]
      internal static void TexGeniv(TextureCoordName coord, TextureGenParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexImage1D")]
      internal static void TexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexImage2D")]
      internal static void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexImage2DMultisample")]
      internal static void TexImage2DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexImage2DMultisampleCoverageNV")]
      internal static void TexImage2DMultisampleCoverageNV(NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexImage3D")]
      internal static void TexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexImage3DEXT")]
      internal static void TexImage3DEXT(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexImage3DMultisample")]
      internal static void TexImage3DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexImage3DMultisampleCoverageNV")]
      internal static void TexImage3DMultisampleCoverageNV(NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexImage4DSGIS")]
      internal static void TexImage4DSGIS(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexParameterf")]
      internal static void TexParameterf(TextureTarget target, TextureParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexParameterfv")]
      internal static void TexParameterfv(TextureTarget target, TextureParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexParameteri")]
      internal static void TexParameteri(TextureTarget target, TextureParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexParameterIiv")]
      internal static void TexParameterIiv(TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexParameterIivEXT")]
      internal static void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexParameterIuiv")]
      internal static void TexParameterIuiv(TextureTarget target, TextureParameterName pname, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexParameterIuivEXT")]
      internal static void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexParameteriv")]
      internal static void TexParameteriv(TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexRenderbufferNV")]
      internal static void TexRenderbufferNV(TextureTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1D")]
      internal static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexSubImage1DEXT")]
      internal static void TexSubImage1DEXT(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2D")]
      internal static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexSubImage2DEXT")]
      internal static void TexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexSubImage3D")]
      internal static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexSubImage3DEXT")]
      internal static void TexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTexSubImage4DSGIS")]
      internal static void TexSubImage4DSGIS(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureBarrierNV")]
      internal static void TextureBarrierNV();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureBufferEXT")]
      internal static void TextureBufferEXT(uint texture, TextureTarget target, ExtDirectStateAccess internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureColorMaskSGIS")]
      internal static void TextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureImage1DEXT")]
      internal static void TextureImage1DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureImage2DEXT")]
      internal static void TextureImage2DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureImage2DMultisampleCoverageNV")]
      internal static void TextureImage2DMultisampleCoverageNV(uint texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureImage2DMultisampleNV")]
      internal static void TextureImage2DMultisampleNV(uint texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureImage3DEXT")]
      internal static void TextureImage3DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureImage3DMultisampleCoverageNV")]
      internal static void TextureImage3DMultisampleCoverageNV(uint texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureImage3DMultisampleNV")]
      internal static void TextureImage3DMultisampleNV(uint texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureLightEXT")]
      internal static void TextureLightEXT(ExtLightTexture pname);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureMaterialEXT")]
      internal static void TextureMaterialEXT(MaterialFace face, MaterialParameter mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureNormalEXT")]
      internal static void TextureNormalEXT(ExtTexturePerturbNormal mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureParameterfEXT")]
      internal static void TextureParameterfEXT(uint texture, TextureTarget target, TextureParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureParameterfvEXT")]
      internal static void TextureParameterfvEXT(uint texture, TextureTarget target, TextureParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureParameteriEXT")]
      internal static void TextureParameteriEXT(uint texture, TextureTarget target, TextureParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureParameterIivEXT")]
      internal static void TextureParameterIivEXT(uint texture, TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureParameterIuivEXT")]
      internal static void TextureParameterIuivEXT(uint texture, TextureTarget target, TextureParameterName pname, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureParameterivEXT")]
      internal static void TextureParameterivEXT(uint texture, TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureRangeAPPLE")]
      internal static void TextureRangeAPPLE(AppleTextureRange target, int length, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureRenderbufferEXT")]
      internal static void TextureRenderbufferEXT(uint texture, TextureTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureSubImage1DEXT")]
      internal static void TextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureSubImage2DEXT")]
      internal static void TextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTextureSubImage3DEXT")]
      internal static void TextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTrackMatrixNV")]
      internal static void TrackMatrixNV(AssemblyProgramTargetArb target, uint address, NvVertexProgram matrix, NvVertexProgram transform);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTransformFeedbackAttribsNV")]
      internal static void TransformFeedbackAttribsNV(uint count, int* attribs, NvTransformFeedback bufferMode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTransformFeedbackStreamAttribsNV")]
      internal static void TransformFeedbackStreamAttribsNV(int count, int* attribs, int nbuffers, int* bufstreams, NvTransformFeedback bufferMode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTransformFeedbackVaryings")]
      internal static void TransformFeedbackVaryings(uint program, int count, string[] varyings, TransformFeedbackMode bufferMode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTransformFeedbackVaryingsEXT")]
      internal static void TransformFeedbackVaryingsEXT(uint program, int count, string[] varyings, ExtTransformFeedback bufferMode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTransformFeedbackVaryingsNV")]
      internal static void TransformFeedbackVaryingsNV(uint program, int count, int* locations, NvTransformFeedback bufferMode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTranslated")]
      internal static void Translated(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glTranslatef")]
      internal static void Translatef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1d")]
      internal static void Uniform1d(int location, double x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1dv")]
      internal static void Uniform1dv(int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1f")]
      internal static void Uniform1f(int location, float v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1fARB")]
      internal static void Uniform1fARB(int location, float v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1fv")]
      internal static void Uniform1fv(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1fvARB")]
      internal static void Uniform1fvARB(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1i")]
      internal static void Uniform1i(int location, int v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1i64NV")]
      internal static void Uniform1i64NV(int location, long x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1i64vNV")]
      internal static void Uniform1i64vNV(int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1iARB")]
      internal static void Uniform1iARB(int location, int v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1iv")]
      internal static void Uniform1iv(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1ivARB")]
      internal static void Uniform1ivARB(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1ui")]
      internal static void Uniform1ui(int location, uint v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1ui64NV")]
      internal static void Uniform1ui64NV(int location, ulong x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1ui64vNV")]
      internal static void Uniform1ui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1uiEXT")]
      internal static void Uniform1uiEXT(int location, uint v0);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1uiv")]
      internal static void Uniform1uiv(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform1uivEXT")]
      internal static void Uniform1uivEXT(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2d")]
      internal static void Uniform2d(int location, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2dv")]
      internal static void Uniform2dv(int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2f")]
      internal static void Uniform2f(int location, float v0, float v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2fARB")]
      internal static void Uniform2fARB(int location, float v0, float v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2fv")]
      internal static void Uniform2fv(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2fvARB")]
      internal static void Uniform2fvARB(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2i")]
      internal static void Uniform2i(int location, int v0, int v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2i64NV")]
      internal static void Uniform2i64NV(int location, long x, long y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2i64vNV")]
      internal static void Uniform2i64vNV(int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2iARB")]
      internal static void Uniform2iARB(int location, int v0, int v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2iv")]
      internal static void Uniform2iv(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2ivARB")]
      internal static void Uniform2ivARB(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2ui")]
      internal static void Uniform2ui(int location, uint v0, uint v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2ui64NV")]
      internal static void Uniform2ui64NV(int location, ulong x, ulong y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2ui64vNV")]
      internal static void Uniform2ui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2uiEXT")]
      internal static void Uniform2uiEXT(int location, uint v0, uint v1);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2uiv")]
      internal static void Uniform2uiv(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform2uivEXT")]
      internal static void Uniform2uivEXT(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3d")]
      internal static void Uniform3d(int location, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3dv")]
      internal static void Uniform3dv(int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3f")]
      internal static void Uniform3f(int location, float v0, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3fARB")]
      internal static void Uniform3fARB(int location, float v0, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3fv")]
      internal static void Uniform3fv(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3fvARB")]
      internal static void Uniform3fvARB(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3i")]
      internal static void Uniform3i(int location, int v0, int v1, int v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3i64NV")]
      internal static void Uniform3i64NV(int location, long x, long y, long z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3i64vNV")]
      internal static void Uniform3i64vNV(int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3iARB")]
      internal static void Uniform3iARB(int location, int v0, int v1, int v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3iv")]
      internal static void Uniform3iv(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3ivARB")]
      internal static void Uniform3ivARB(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3ui")]
      internal static void Uniform3ui(int location, uint v0, uint v1, uint v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3ui64NV")]
      internal static void Uniform3ui64NV(int location, ulong x, ulong y, ulong z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3ui64vNV")]
      internal static void Uniform3ui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3uiEXT")]
      internal static void Uniform3uiEXT(int location, uint v0, uint v1, uint v2);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3uiv")]
      internal static void Uniform3uiv(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform3uivEXT")]
      internal static void Uniform3uivEXT(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4d")]
      internal static void Uniform4d(int location, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4dv")]
      internal static void Uniform4dv(int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4f")]
      internal static void Uniform4f(int location, float v0, float v1, float v2, float v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4fARB")]
      internal static void Uniform4fARB(int location, float v0, float v1, float v2, float v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4fv")]
      internal static void Uniform4fv(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4fvARB")]
      internal static void Uniform4fvARB(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4i")]
      internal static void Uniform4i(int location, int v0, int v1, int v2, int v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4i64NV")]
      internal static void Uniform4i64NV(int location, long x, long y, long z, long w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4i64vNV")]
      internal static void Uniform4i64vNV(int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4iARB")]
      internal static void Uniform4iARB(int location, int v0, int v1, int v2, int v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4iv")]
      internal static void Uniform4iv(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4ivARB")]
      internal static void Uniform4ivARB(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4ui")]
      internal static void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4ui64NV")]
      internal static void Uniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4ui64vNV")]
      internal static void Uniform4ui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4uiEXT")]
      internal static void Uniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4uiv")]
      internal static void Uniform4uiv(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniform4uivEXT")]
      internal static void Uniform4uivEXT(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformBlockBinding")]
      internal static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformBufferEXT")]
      internal static void UniformBufferEXT(uint program, int location, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2dv")]
      internal static void UniformMatrix2dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2fv")]
      internal static void UniformMatrix2fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2fvARB")]
      internal static void UniformMatrix2fvARB(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2x3dv")]
      internal static void UniformMatrix2x3dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2x3fv")]
      internal static void UniformMatrix2x3fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2x4dv")]
      internal static void UniformMatrix2x4dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix2x4fv")]
      internal static void UniformMatrix2x4fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3dv")]
      internal static void UniformMatrix3dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3fv")]
      internal static void UniformMatrix3fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3fvARB")]
      internal static void UniformMatrix3fvARB(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3x2dv")]
      internal static void UniformMatrix3x2dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3x2fv")]
      internal static void UniformMatrix3x2fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3x4dv")]
      internal static void UniformMatrix3x4dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix3x4fv")]
      internal static void UniformMatrix3x4fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4dv")]
      internal static void UniformMatrix4dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4fv")]
      internal static void UniformMatrix4fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4fvARB")]
      internal static void UniformMatrix4fvARB(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4x2dv")]
      internal static void UniformMatrix4x2dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4x2fv")]
      internal static void UniformMatrix4x2fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4x3dv")]
      internal static void UniformMatrix4x3dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformMatrix4x3fv")]
      internal static void UniformMatrix4x3fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformSubroutinesuiv")]
      internal static void UniformSubroutinesuiv(ShaderType shadertype, int count, uint* indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformui64NV")]
      internal static void Uniformui64NV(int location, ulong value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUniformui64vNV")]
      internal static void Uniformui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUnlockArraysEXT")]
      internal static void UnlockArraysEXT();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUnmapBuffer")]
      internal static bool UnmapBuffer(BufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUnmapBufferARB")]
      internal static bool UnmapBufferARB(BufferTargetArb target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUnmapNamedBufferEXT")]
      internal static bool UnmapNamedBufferEXT(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUnmapObjectBufferATI")]
      internal static void UnmapObjectBufferATI(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUpdateObjectBufferATI")]
      internal static void UpdateObjectBufferATI(uint buffer, uint offset, int size, IntPtr pointer, AtiVertexArrayObject preserve);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUseProgram")]
      internal static void UseProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUseProgramObjectARB")]
      internal static void UseProgramObjectARB(uint programObj);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUseProgramStages")]
      internal static void UseProgramStages(uint pipeline, ProgramStageMask stages, uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glUseShaderProgramEXT")]
      internal static void UseShaderProgramEXT(ExtSeparateShaderObjects type, uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glValidateProgram")]
      internal static void ValidateProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glValidateProgramARB")]
      internal static void ValidateProgramARB(uint programObj);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glValidateProgramPipeline")]
      internal static void ValidateProgramPipeline(uint pipeline);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantArrayObjectATI")]
      internal static void VariantArrayObjectATI(uint id, AtiVertexArrayObject type, int stride, uint buffer, uint offset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantbvEXT")]
      internal static void VariantbvEXT(uint id, sbyte* addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantdvEXT")]
      internal static void VariantdvEXT(uint id, double* addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantfvEXT")]
      internal static void VariantfvEXT(uint id, float* addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantivEXT")]
      internal static void VariantivEXT(uint id, int* addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantPointerEXT")]
      internal static void VariantPointerEXT(uint id, ExtVertexShader type, uint stride, IntPtr addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantsvEXT")]
      internal static void VariantsvEXT(uint id, short* addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantubvEXT")]
      internal static void VariantubvEXT(uint id, byte* addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantuivEXT")]
      internal static void VariantuivEXT(uint id, uint* addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVariantusvEXT")]
      internal static void VariantusvEXT(uint id, ushort* addr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAUFiniNV")]
      internal static void VDPAUFiniNV();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAUGetSurfaceivNV")]
      internal static void VDPAUGetSurfaceivNV(IntPtr surface, NvVdpauInterop pname, int bufSize, [Out] int* length, [Out] int* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAUInitNV")]
      internal static void VDPAUInitNV(IntPtr vdpDevice, IntPtr getProcAddress);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAUIsSurfaceNV")]
      internal static void VDPAUIsSurfaceNV(IntPtr surface);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAUMapSurfacesNV")]
      internal static void VDPAUMapSurfacesNV(int numSurfaces, IntPtr* surfaces);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAURegisterOutputSurfaceNV")]
      internal static IntPtr VDPAURegisterOutputSurfaceNV([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAURegisterVideoSurfaceNV")]
      internal static IntPtr VDPAURegisterVideoSurfaceNV([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAUSurfaceAccessNV")]
      internal static void VDPAUSurfaceAccessNV(IntPtr surface, NvVdpauInterop access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAUUnmapSurfacesNV")]
      internal static void VDPAUUnmapSurfacesNV(int numSurface, IntPtr* surfaces);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVDPAUUnregisterSurfaceNV")]
      internal static void VDPAUUnregisterSurfaceNV(IntPtr surface);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2d")]
      internal static void Vertex2d(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2dv")]
      internal static void Vertex2dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2f")]
      internal static void Vertex2f(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2fv")]
      internal static void Vertex2fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2hNV")]
      internal static void Vertex2hNV(Half x, Half y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2hvNV")]
      internal static void Vertex2hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2i")]
      internal static void Vertex2i(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2iv")]
      internal static void Vertex2iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2s")]
      internal static void Vertex2s(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex2sv")]
      internal static void Vertex2sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3d")]
      internal static void Vertex3d(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3dv")]
      internal static void Vertex3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3f")]
      internal static void Vertex3f(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3fv")]
      internal static void Vertex3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3hNV")]
      internal static void Vertex3hNV(Half x, Half y, Half z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3hvNV")]
      internal static void Vertex3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3i")]
      internal static void Vertex3i(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3iv")]
      internal static void Vertex3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3s")]
      internal static void Vertex3s(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex3sv")]
      internal static void Vertex3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4d")]
      internal static void Vertex4d(double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4dv")]
      internal static void Vertex4dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4f")]
      internal static void Vertex4f(float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4fv")]
      internal static void Vertex4fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4hNV")]
      internal static void Vertex4hNV(Half x, Half y, Half z, Half w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4hvNV")]
      internal static void Vertex4hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4i")]
      internal static void Vertex4i(int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4iv")]
      internal static void Vertex4iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4s")]
      internal static void Vertex4s(short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertex4sv")]
      internal static void Vertex4sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexArrayParameteriAPPLE")]
      internal static void VertexArrayParameteriAPPLE(AppleVertexArrayRange pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexArrayRangeAPPLE")]
      internal static void VertexArrayRangeAPPLE(int length, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexArrayRangeNV")]
      internal static void VertexArrayRangeNV(int length, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexArrayVertexAttribLOffsetEXT")]
      internal static void VertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, ExtVertexAttrib64bit type, int stride, IntPtr offset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1d")]
      internal static void VertexAttrib1d(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1dARB")]
      internal static void VertexAttrib1dARB(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1dNV")]
      internal static void VertexAttrib1dNV(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1dv")]
      internal static void VertexAttrib1dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1dvARB")]
      internal static void VertexAttrib1dvARB(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1dvNV")]
      internal static void VertexAttrib1dvNV(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1f")]
      internal static void VertexAttrib1f(uint index, float x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1fARB")]
      internal static void VertexAttrib1fARB(uint index, float x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1fNV")]
      internal static void VertexAttrib1fNV(uint index, float x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1fv")]
      internal static void VertexAttrib1fv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1fvARB")]
      internal static void VertexAttrib1fvARB(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1fvNV")]
      internal static void VertexAttrib1fvNV(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1hNV")]
      internal static void VertexAttrib1hNV(uint index, Half x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1hvNV")]
      internal static void VertexAttrib1hvNV(uint index, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1s")]
      internal static void VertexAttrib1s(uint index, short x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1sARB")]
      internal static void VertexAttrib1sARB(uint index, short x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1sNV")]
      internal static void VertexAttrib1sNV(uint index, short x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1sv")]
      internal static void VertexAttrib1sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1svARB")]
      internal static void VertexAttrib1svARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib1svNV")]
      internal static void VertexAttrib1svNV(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2d")]
      internal static void VertexAttrib2d(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2dARB")]
      internal static void VertexAttrib2dARB(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2dNV")]
      internal static void VertexAttrib2dNV(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2dv")]
      internal static void VertexAttrib2dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2dvARB")]
      internal static void VertexAttrib2dvARB(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2dvNV")]
      internal static void VertexAttrib2dvNV(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2f")]
      internal static void VertexAttrib2f(uint index, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2fARB")]
      internal static void VertexAttrib2fARB(uint index, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2fNV")]
      internal static void VertexAttrib2fNV(uint index, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2fv")]
      internal static void VertexAttrib2fv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2fvARB")]
      internal static void VertexAttrib2fvARB(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2fvNV")]
      internal static void VertexAttrib2fvNV(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2hNV")]
      internal static void VertexAttrib2hNV(uint index, Half x, Half y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2hvNV")]
      internal static void VertexAttrib2hvNV(uint index, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2s")]
      internal static void VertexAttrib2s(uint index, short x, short y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2sARB")]
      internal static void VertexAttrib2sARB(uint index, short x, short y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2sNV")]
      internal static void VertexAttrib2sNV(uint index, short x, short y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2sv")]
      internal static void VertexAttrib2sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2svARB")]
      internal static void VertexAttrib2svARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib2svNV")]
      internal static void VertexAttrib2svNV(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3d")]
      internal static void VertexAttrib3d(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3dARB")]
      internal static void VertexAttrib3dARB(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3dNV")]
      internal static void VertexAttrib3dNV(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3dv")]
      internal static void VertexAttrib3dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3dvARB")]
      internal static void VertexAttrib3dvARB(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3dvNV")]
      internal static void VertexAttrib3dvNV(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3f")]
      internal static void VertexAttrib3f(uint index, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3fARB")]
      internal static void VertexAttrib3fARB(uint index, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3fNV")]
      internal static void VertexAttrib3fNV(uint index, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3fv")]
      internal static void VertexAttrib3fv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3fvARB")]
      internal static void VertexAttrib3fvARB(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3fvNV")]
      internal static void VertexAttrib3fvNV(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3hNV")]
      internal static void VertexAttrib3hNV(uint index, Half x, Half y, Half z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3hvNV")]
      internal static void VertexAttrib3hvNV(uint index, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3s")]
      internal static void VertexAttrib3s(uint index, short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3sARB")]
      internal static void VertexAttrib3sARB(uint index, short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3sNV")]
      internal static void VertexAttrib3sNV(uint index, short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3sv")]
      internal static void VertexAttrib3sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3svARB")]
      internal static void VertexAttrib3svARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib3svNV")]
      internal static void VertexAttrib3svNV(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4bv")]
      internal static void VertexAttrib4bv(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4bvARB")]
      internal static void VertexAttrib4bvARB(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4d")]
      internal static void VertexAttrib4d(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4dARB")]
      internal static void VertexAttrib4dARB(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4dNV")]
      internal static void VertexAttrib4dNV(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4dv")]
      internal static void VertexAttrib4dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4dvARB")]
      internal static void VertexAttrib4dvARB(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4dvNV")]
      internal static void VertexAttrib4dvNV(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4f")]
      internal static void VertexAttrib4f(uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4fARB")]
      internal static void VertexAttrib4fARB(uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4fNV")]
      internal static void VertexAttrib4fNV(uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4fv")]
      internal static void VertexAttrib4fv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4fvARB")]
      internal static void VertexAttrib4fvARB(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4fvNV")]
      internal static void VertexAttrib4fvNV(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4hNV")]
      internal static void VertexAttrib4hNV(uint index, Half x, Half y, Half z, Half w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4hvNV")]
      internal static void VertexAttrib4hvNV(uint index, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4iv")]
      internal static void VertexAttrib4iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4ivARB")]
      internal static void VertexAttrib4ivARB(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nbv")]
      internal static void VertexAttrib4Nbv(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4NbvARB")]
      internal static void VertexAttrib4NbvARB(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Niv")]
      internal static void VertexAttrib4Niv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4NivARB")]
      internal static void VertexAttrib4NivARB(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nsv")]
      internal static void VertexAttrib4Nsv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4NsvARB")]
      internal static void VertexAttrib4NsvARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nub")]
      internal static void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4NubARB")]
      internal static void VertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nubv")]
      internal static void VertexAttrib4Nubv(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4NubvARB")]
      internal static void VertexAttrib4NubvARB(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nuiv")]
      internal static void VertexAttrib4Nuiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4NuivARB")]
      internal static void VertexAttrib4NuivARB(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4Nusv")]
      internal static void VertexAttrib4Nusv(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4NusvARB")]
      internal static void VertexAttrib4NusvARB(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4s")]
      internal static void VertexAttrib4s(uint index, short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4sARB")]
      internal static void VertexAttrib4sARB(uint index, short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4sNV")]
      internal static void VertexAttrib4sNV(uint index, short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4sv")]
      internal static void VertexAttrib4sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4svARB")]
      internal static void VertexAttrib4svARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4svNV")]
      internal static void VertexAttrib4svNV(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4ubNV")]
      internal static void VertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4ubv")]
      internal static void VertexAttrib4ubv(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4ubvARB")]
      internal static void VertexAttrib4ubvARB(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4ubvNV")]
      internal static void VertexAttrib4ubvNV(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4uiv")]
      internal static void VertexAttrib4uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4uivARB")]
      internal static void VertexAttrib4uivARB(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4usv")]
      internal static void VertexAttrib4usv(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttrib4usvARB")]
      internal static void VertexAttrib4usvARB(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribArrayObjectATI")]
      internal static void VertexAttribArrayObjectATI(uint index, int size, AtiVertexAttribArrayObject type, bool normalized, int stride, uint buffer, uint offset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribDivisor")]
      internal static void VertexAttribDivisor(uint index, uint divisor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribDivisorARB")]
      internal static void VertexAttribDivisorARB(uint index, uint divisor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribFormatNV")]
      internal static void VertexAttribFormatNV(uint index, int size, NvVertexBufferUnifiedMemory type, bool normalized, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI1i")]
      internal static void VertexAttribI1i(uint index, int x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI1iEXT")]
      internal static void VertexAttribI1iEXT(uint index, int x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI1iv")]
      internal static void VertexAttribI1iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI1ivEXT")]
      internal static void VertexAttribI1ivEXT(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI1ui")]
      internal static void VertexAttribI1ui(uint index, uint x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI1uiEXT")]
      internal static void VertexAttribI1uiEXT(uint index, uint x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI1uiv")]
      internal static void VertexAttribI1uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI1uivEXT")]
      internal static void VertexAttribI1uivEXT(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI2i")]
      internal static void VertexAttribI2i(uint index, int x, int y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI2iEXT")]
      internal static void VertexAttribI2iEXT(uint index, int x, int y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI2iv")]
      internal static void VertexAttribI2iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI2ivEXT")]
      internal static void VertexAttribI2ivEXT(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI2ui")]
      internal static void VertexAttribI2ui(uint index, uint x, uint y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI2uiEXT")]
      internal static void VertexAttribI2uiEXT(uint index, uint x, uint y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI2uiv")]
      internal static void VertexAttribI2uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI2uivEXT")]
      internal static void VertexAttribI2uivEXT(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI3i")]
      internal static void VertexAttribI3i(uint index, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI3iEXT")]
      internal static void VertexAttribI3iEXT(uint index, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI3iv")]
      internal static void VertexAttribI3iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI3ivEXT")]
      internal static void VertexAttribI3ivEXT(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI3ui")]
      internal static void VertexAttribI3ui(uint index, uint x, uint y, uint z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI3uiEXT")]
      internal static void VertexAttribI3uiEXT(uint index, uint x, uint y, uint z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI3uiv")]
      internal static void VertexAttribI3uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI3uivEXT")]
      internal static void VertexAttribI3uivEXT(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4bv")]
      internal static void VertexAttribI4bv(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4bvEXT")]
      internal static void VertexAttribI4bvEXT(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4i")]
      internal static void VertexAttribI4i(uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4iEXT")]
      internal static void VertexAttribI4iEXT(uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4iv")]
      internal static void VertexAttribI4iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4ivEXT")]
      internal static void VertexAttribI4ivEXT(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4sv")]
      internal static void VertexAttribI4sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4svEXT")]
      internal static void VertexAttribI4svEXT(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4ubv")]
      internal static void VertexAttribI4ubv(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4ubvEXT")]
      internal static void VertexAttribI4ubvEXT(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4ui")]
      internal static void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4uiEXT")]
      internal static void VertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4uiv")]
      internal static void VertexAttribI4uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4uivEXT")]
      internal static void VertexAttribI4uivEXT(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4usv")]
      internal static void VertexAttribI4usv(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribI4usvEXT")]
      internal static void VertexAttribI4usvEXT(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribIFormatNV")]
      internal static void VertexAttribIFormatNV(uint index, int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribIPointer")]
      internal static void VertexAttribIPointer(uint index, int size, VertexAttribIPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribIPointerEXT")]
      internal static void VertexAttribIPointerEXT(uint index, int size, NvVertexProgram4 type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL1d")]
      internal static void VertexAttribL1d(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL1dEXT")]
      internal static void VertexAttribL1dEXT(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL1dv")]
      internal static void VertexAttribL1dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL1dvEXT")]
      internal static void VertexAttribL1dvEXT(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL1i64NV")]
      internal static void VertexAttribL1i64NV(uint index, long x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL1i64vNV")]
      internal static void VertexAttribL1i64vNV(uint index, long* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL1ui64NV")]
      internal static void VertexAttribL1ui64NV(uint index, ulong x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL1ui64vNV")]
      internal static void VertexAttribL1ui64vNV(uint index, ulong* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL2d")]
      internal static void VertexAttribL2d(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL2dEXT")]
      internal static void VertexAttribL2dEXT(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL2dv")]
      internal static void VertexAttribL2dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL2dvEXT")]
      internal static void VertexAttribL2dvEXT(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL2i64NV")]
      internal static void VertexAttribL2i64NV(uint index, long x, long y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL2i64vNV")]
      internal static void VertexAttribL2i64vNV(uint index, long* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL2ui64NV")]
      internal static void VertexAttribL2ui64NV(uint index, ulong x, ulong y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL2ui64vNV")]
      internal static void VertexAttribL2ui64vNV(uint index, ulong* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL3d")]
      internal static void VertexAttribL3d(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL3dEXT")]
      internal static void VertexAttribL3dEXT(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL3dv")]
      internal static void VertexAttribL3dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL3dvEXT")]
      internal static void VertexAttribL3dvEXT(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL3i64NV")]
      internal static void VertexAttribL3i64NV(uint index, long x, long y, long z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL3i64vNV")]
      internal static void VertexAttribL3i64vNV(uint index, long* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL3ui64NV")]
      internal static void VertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL3ui64vNV")]
      internal static void VertexAttribL3ui64vNV(uint index, ulong* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL4d")]
      internal static void VertexAttribL4d(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL4dEXT")]
      internal static void VertexAttribL4dEXT(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL4dv")]
      internal static void VertexAttribL4dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL4dvEXT")]
      internal static void VertexAttribL4dvEXT(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL4i64NV")]
      internal static void VertexAttribL4i64NV(uint index, long x, long y, long z, long w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL4i64vNV")]
      internal static void VertexAttribL4i64vNV(uint index, long* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL4ui64NV")]
      internal static void VertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribL4ui64vNV")]
      internal static void VertexAttribL4ui64vNV(uint index, ulong* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribLFormatNV")]
      internal static void VertexAttribLFormatNV(uint index, int size, NvVertexAttribInteger64bit type, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribLPointer")]
      internal static void VertexAttribLPointer(uint index, int size, VertexAttribDPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribLPointerEXT")]
      internal static void VertexAttribLPointerEXT(uint index, int size, ExtVertexAttrib64bit type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribP1ui")]
      internal static void VertexAttribP1ui(uint index, PackedPointerType type, bool normalized, uint value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribP1uiv")]
      internal static void VertexAttribP1uiv(uint index, PackedPointerType type, bool normalized, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribP2ui")]
      internal static void VertexAttribP2ui(uint index, PackedPointerType type, bool normalized, uint value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribP2uiv")]
      internal static void VertexAttribP2uiv(uint index, PackedPointerType type, bool normalized, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribP3ui")]
      internal static void VertexAttribP3ui(uint index, PackedPointerType type, bool normalized, uint value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribP3uiv")]
      internal static void VertexAttribP3uiv(uint index, PackedPointerType type, bool normalized, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribP4ui")]
      internal static void VertexAttribP4ui(uint index, PackedPointerType type, bool normalized, uint value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribP4uiv")]
      internal static void VertexAttribP4uiv(uint index, PackedPointerType type, bool normalized, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribPointer")]
      internal static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribPointerARB")]
      internal static void VertexAttribPointerARB(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribPointerNV")]
      internal static void VertexAttribPointerNV(uint index, int fsize, VertexAttribParameterArb type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs1dvNV")]
      internal static void VertexAttribs1dvNV(uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs1fvNV")]
      internal static void VertexAttribs1fvNV(uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs1hvNV")]
      internal static void VertexAttribs1hvNV(uint index, int n, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs1svNV")]
      internal static void VertexAttribs1svNV(uint index, int count, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs2dvNV")]
      internal static void VertexAttribs2dvNV(uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs2fvNV")]
      internal static void VertexAttribs2fvNV(uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs2hvNV")]
      internal static void VertexAttribs2hvNV(uint index, int n, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs2svNV")]
      internal static void VertexAttribs2svNV(uint index, int count, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs3dvNV")]
      internal static void VertexAttribs3dvNV(uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs3fvNV")]
      internal static void VertexAttribs3fvNV(uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs3hvNV")]
      internal static void VertexAttribs3hvNV(uint index, int n, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs3svNV")]
      internal static void VertexAttribs3svNV(uint index, int count, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs4dvNV")]
      internal static void VertexAttribs4dvNV(uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs4fvNV")]
      internal static void VertexAttribs4fvNV(uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs4hvNV")]
      internal static void VertexAttribs4hvNV(uint index, int n, Half* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs4svNV")]
      internal static void VertexAttribs4svNV(uint index, int count, short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexAttribs4ubvNV")]
      internal static void VertexAttribs4ubvNV(uint index, int count, byte* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexBlendARB")]
      internal static void VertexBlendARB(int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexBlendEnvfATI")]
      internal static void VertexBlendEnvfATI(AtiVertexStreams pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexBlendEnviATI")]
      internal static void VertexBlendEnviATI(AtiVertexStreams pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexFormatNV")]
      internal static void VertexFormatNV(int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexP2ui")]
      internal static void VertexP2ui(PackedPointerType type, uint value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexP2uiv")]
      internal static void VertexP2uiv(PackedPointerType type, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexP3ui")]
      internal static void VertexP3ui(PackedPointerType type, uint value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexP3uiv")]
      internal static void VertexP3uiv(PackedPointerType type, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexP4ui")]
      internal static void VertexP4ui(PackedPointerType type, uint value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexP4uiv")]
      internal static void VertexP4uiv(PackedPointerType type, uint* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexPointer")]
      internal static void VertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexPointerEXT")]
      internal static void VertexPointerEXT(int size, VertexPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexPointerListIBM")]
      internal static void VertexPointerListIBM(int size, VertexPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexPointervINTEL")]
      internal static void VertexPointervINTEL(int size, VertexPointerType type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream1dATI")]
      internal static void VertexStream1dATI(AtiVertexStreams stream, double x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream1dvATI")]
      internal static void VertexStream1dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream1fATI")]
      internal static void VertexStream1fATI(AtiVertexStreams stream, float x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream1fvATI")]
      internal static void VertexStream1fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream1iATI")]
      internal static void VertexStream1iATI(AtiVertexStreams stream, int x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream1ivATI")]
      internal static void VertexStream1ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream1sATI")]
      internal static void VertexStream1sATI(AtiVertexStreams stream, short x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream1svATI")]
      internal static void VertexStream1svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream2dATI")]
      internal static void VertexStream2dATI(AtiVertexStreams stream, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream2dvATI")]
      internal static void VertexStream2dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream2fATI")]
      internal static void VertexStream2fATI(AtiVertexStreams stream, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream2fvATI")]
      internal static void VertexStream2fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream2iATI")]
      internal static void VertexStream2iATI(AtiVertexStreams stream, int x, int y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream2ivATI")]
      internal static void VertexStream2ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream2sATI")]
      internal static void VertexStream2sATI(AtiVertexStreams stream, short x, short y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream2svATI")]
      internal static void VertexStream2svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream3dATI")]
      internal static void VertexStream3dATI(AtiVertexStreams stream, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream3dvATI")]
      internal static void VertexStream3dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream3fATI")]
      internal static void VertexStream3fATI(AtiVertexStreams stream, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream3fvATI")]
      internal static void VertexStream3fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream3iATI")]
      internal static void VertexStream3iATI(AtiVertexStreams stream, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream3ivATI")]
      internal static void VertexStream3ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream3sATI")]
      internal static void VertexStream3sATI(AtiVertexStreams stream, short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream3svATI")]
      internal static void VertexStream3svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream4dATI")]
      internal static void VertexStream4dATI(AtiVertexStreams stream, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream4dvATI")]
      internal static void VertexStream4dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream4fATI")]
      internal static void VertexStream4fATI(AtiVertexStreams stream, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream4fvATI")]
      internal static void VertexStream4fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream4iATI")]
      internal static void VertexStream4iATI(AtiVertexStreams stream, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream4ivATI")]
      internal static void VertexStream4ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream4sATI")]
      internal static void VertexStream4sATI(AtiVertexStreams stream, short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexStream4svATI")]
      internal static void VertexStream4svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexWeightfEXT")]
      internal static void VertexWeightfEXT(float weight);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexWeightfvEXT")]
      internal static void VertexWeightfvEXT(float* weight);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexWeighthNV")]
      internal static void VertexWeighthNV(Half weight);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexWeighthvNV")]
      internal static void VertexWeighthvNV(Half* weight);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVertexWeightPointerEXT")]
      internal static void VertexWeightPointerEXT(int size, ExtVertexWeighting type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVideoCaptureNV")]
      internal static NvVideoCapture VideoCaptureNV(uint video_capture_slot, [Out] uint* sequence_num, [Out] ulong* capture_time);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVideoCaptureStreamParameterdvNV")]
      internal static void VideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, NvVideoCapture pname, double* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVideoCaptureStreamParameterfvNV")]
      internal static void VideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, NvVideoCapture pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glVideoCaptureStreamParameterivNV")]
      internal static void VideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, NvVideoCapture pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glViewport")]
      internal static void Viewport(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glViewportArrayv")]
      internal static void ViewportArrayv(uint first, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glViewportIndexedf")]
      internal static void ViewportIndexedf(uint index, float x, float y, float w, float h);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glViewportIndexedfv")]
      internal static void ViewportIndexedfv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWaitSync")]
      internal static void WaitSync(IntPtr sync, uint flags, ulong timeout);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWeightbvARB")]
      internal static void WeightbvARB(int size, sbyte* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWeightdvARB")]
      internal static void WeightdvARB(int size, double* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWeightfvARB")]
      internal static void WeightfvARB(int size, float* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWeightivARB")]
      internal static void WeightivARB(int size, int* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWeightPointerARB")]
      internal static void WeightPointerARB(int size, ArbVertexBlend type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWeightsvARB")]
      internal static void WeightsvARB(int size, short* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWeightubvARB")]
      internal static void WeightubvARB(int size, byte* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWeightuivARB")]
      internal static void WeightuivARB(int size, uint* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWeightusvARB")]
      internal static void WeightusvARB(int size, ushort* weights);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2d")]
      internal static void WindowPos2d(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2dARB")]
      internal static void WindowPos2dARB(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2dMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos2dMESA(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2dv")]
      internal static void WindowPos2dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2dvARB")]
      internal static void WindowPos2dvARB(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2dvMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos2dvMESA(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2f")]
      internal static void WindowPos2f(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2fARB")]
      internal static void WindowPos2fARB(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2fMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos2fMESA(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2fv")]
      internal static void WindowPos2fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2fvARB")]
      internal static void WindowPos2fvARB(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2fvMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos2fvMESA(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2i")]
      internal static void WindowPos2i(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2iARB")]
      internal static void WindowPos2iARB(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2iMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos2iMESA(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2iv")]
      internal static void WindowPos2iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2ivARB")]
      internal static void WindowPos2ivARB(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2ivMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos2ivMESA(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2s")]
      internal static void WindowPos2s(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2sARB")]
      internal static void WindowPos2sARB(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2sMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos2sMESA(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2sv")]
      internal static void WindowPos2sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2svARB")]
      internal static void WindowPos2svARB(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos2svMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos2svMESA(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3d")]
      internal static void WindowPos3d(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3dARB")]
      internal static void WindowPos3dARB(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3dMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos3dMESA(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3dv")]
      internal static void WindowPos3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3dvARB")]
      internal static void WindowPos3dvARB(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3dvMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos3dvMESA(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3f")]
      internal static void WindowPos3f(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3fARB")]
      internal static void WindowPos3fARB(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3fMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos3fMESA(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3fv")]
      internal static void WindowPos3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3fvARB")]
      internal static void WindowPos3fvARB(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3fvMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos3fvMESA(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3i")]
      internal static void WindowPos3i(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3iARB")]
      internal static void WindowPos3iARB(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3iMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos3iMESA(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3iv")]
      internal static void WindowPos3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3ivARB")]
      internal static void WindowPos3ivARB(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3ivMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos3ivMESA(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3s")]
      internal static void WindowPos3s(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3sARB")]
      internal static void WindowPos3sARB(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3sMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos3sMESA(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3sv")]
      internal static void WindowPos3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3svARB")]
      internal static void WindowPos3svARB(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos3svMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos3svMESA(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos4dMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos4dMESA(double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos4dvMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos4dvMESA(double* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos4fMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos4fMESA(float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos4fvMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos4fvMESA(float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos4iMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos4iMESA(int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos4ivMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos4ivMESA(int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos4sMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos4sMESA(short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWindowPos4svMESA", CharSet = CharSet.Auto)]
      internal static void WindowPos4svMESA(short* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("opengl32.dll", EntryPoint = "glWriteMaskEXT")]
      internal static void WriteMaskEXT(uint res, uint @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW);
    }

    public static class Arb
    {
      [AutoGenerated(Category = "ArbGeometryShader4", EntryPoint = "glProgramParameteriARB", Version = "3.0")]
      [Obsolete("Use ProgramParameter(..., AssemblyProgramParameterArb, ...) instead.")]
      public static void ProgramParameter(int program, ArbGeometryShader4 pname, int value)
      {
        GL.Arb.ProgramParameter(program, (AssemblyProgramParameterArb) pname, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ArbGeometryShader4", EntryPoint = "glProgramParameteriARB", Version = "3.0")]
      [Obsolete("Use ProgramParameter(..., AssemblyProgramParameterArb, ...) instead.")]
      public static void ProgramParameter(uint program, ArbGeometryShader4 pname, int value)
      {
        GL.Arb.ProgramParameter(program, (AssemblyProgramParameterArb) pname, value);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glActiveTextureARB", Version = "1.2")]
      public static void ActiveTexture(TextureUnit texture)
      {
        GL.Delegates.glActiveTextureARB(texture);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glAttachObjectARB", Version = "1.2")]
      public static void AttachObject(int containerObj, int obj)
      {
        GL.Delegates.glAttachObjectARB((uint) containerObj, (uint) obj);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glAttachObjectARB", Version = "1.2")]
      public static void AttachObject(uint containerObj, uint obj)
      {
        GL.Delegates.glAttachObjectARB(containerObj, obj);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glBeginQueryARB", Version = "1.5")]
      public static void BeginQuery(ArbOcclusionQuery target, int id)
      {
        GL.Delegates.glBeginQueryARB(target, (uint) id);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glBeginQueryARB", Version = "1.5")]
      public static void BeginQuery(ArbOcclusionQuery target, uint id)
      {
        GL.Delegates.glBeginQueryARB(target, id);
      }

      [AutoGenerated(Category = "ARB_vertex_shader", EntryPoint = "glBindAttribLocationARB", Version = "1.2")]
      public static void BindAttribLocation(int programObj, int index, string name)
      {
        GL.Delegates.glBindAttribLocationARB((uint) programObj, (uint) index, name);
      }

      [AutoGenerated(Category = "ARB_vertex_shader", EntryPoint = "glBindAttribLocationARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BindAttribLocation(uint programObj, uint index, string name)
      {
        GL.Delegates.glBindAttribLocationARB(programObj, index, name);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBindBufferARB", Version = "1.2")]
      public static void BindBuffer(BufferTargetArb target, int buffer)
      {
        GL.Delegates.glBindBufferARB(target, (uint) buffer);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBindBufferARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BindBuffer(BufferTargetArb target, uint buffer)
      {
        GL.Delegates.glBindBufferARB(target, buffer);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glBindProgramARB", Version = "1.3")]
      public static void BindProgram(AssemblyProgramTargetArb target, int program)
      {
        GL.Delegates.glBindProgramARB(target, (uint) program);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glBindProgramARB", Version = "1.3")]
      public static void BindProgram(AssemblyProgramTargetArb target, uint program)
      {
        GL.Delegates.glBindProgramARB(target, program);
      }

      [AutoGenerated(Category = "ARB_draw_buffers_blend", EntryPoint = "glBlendEquationiARB", Version = "1.2")]
      public static void BlendEquation(int buf, ArbDrawBuffersBlend mode)
      {
        GL.Delegates.glBlendEquationiARB((uint) buf, mode);
      }

      [AutoGenerated(Category = "ARB_draw_buffers_blend", EntryPoint = "glBlendEquationiARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BlendEquation(uint buf, ArbDrawBuffersBlend mode)
      {
        GL.Delegates.glBlendEquationiARB(buf, mode);
      }

      [AutoGenerated(Category = "ARB_draw_buffers_blend", EntryPoint = "glBlendEquationSeparateiARB", Version = "1.2")]
      public static void BlendEquationSeparate(int buf, ArbDrawBuffersBlend modeRGB, ArbDrawBuffersBlend modeAlpha)
      {
        GL.Delegates.glBlendEquationSeparateiARB((uint) buf, modeRGB, modeAlpha);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_draw_buffers_blend", EntryPoint = "glBlendEquationSeparateiARB", Version = "1.2")]
      public static void BlendEquationSeparate(uint buf, ArbDrawBuffersBlend modeRGB, ArbDrawBuffersBlend modeAlpha)
      {
        GL.Delegates.glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
      }

      [AutoGenerated(Category = "ARB_draw_buffers_blend", EntryPoint = "glBlendFunciARB", Version = "1.2")]
      public static void BlendFunc(int buf, ArbDrawBuffersBlend src, ArbDrawBuffersBlend dst)
      {
        GL.Delegates.glBlendFunciARB((uint) buf, src, dst);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_draw_buffers_blend", EntryPoint = "glBlendFunciARB", Version = "1.2")]
      public static void BlendFunc(uint buf, ArbDrawBuffersBlend src, ArbDrawBuffersBlend dst)
      {
        GL.Delegates.glBlendFunciARB(buf, src, dst);
      }

      [AutoGenerated(Category = "ARB_draw_buffers_blend", EntryPoint = "glBlendFuncSeparateiARB", Version = "1.2")]
      public static void BlendFuncSeparate(int buf, ArbDrawBuffersBlend srcRGB, ArbDrawBuffersBlend dstRGB, ArbDrawBuffersBlend srcAlpha, ArbDrawBuffersBlend dstAlpha)
      {
        GL.Delegates.glBlendFuncSeparateiARB((uint) buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
      }

      [AutoGenerated(Category = "ARB_draw_buffers_blend", EntryPoint = "glBlendFuncSeparateiARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BlendFuncSeparate(uint buf, ArbDrawBuffersBlend srcRGB, ArbDrawBuffersBlend dstRGB, ArbDrawBuffersBlend srcAlpha, ArbDrawBuffersBlend dstAlpha)
      {
        GL.Delegates.glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferDataARB", Version = "1.2")]
      public static void BufferData(BufferTargetArb target, IntPtr size, IntPtr data, BufferUsageArb usage)
      {
        GL.Delegates.glBufferDataARB(target, size, data, usage);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferDataARB", Version = "1.2")]
      public static void BufferData<T2>(BufferTargetArb target, IntPtr size, [In, Out] T2[] data, BufferUsageArb usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBufferDataARB(target, size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferDataARB", Version = "1.2")]
      public static void BufferData<T2>(BufferTargetArb target, IntPtr size, [In, Out] T2[,] data, BufferUsageArb usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBufferDataARB(target, size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferDataARB", Version = "1.2")]
      public static void BufferData<T2>(BufferTargetArb target, IntPtr size, [In, Out] T2[,,] data, BufferUsageArb usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBufferDataARB(target, size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferDataARB", Version = "1.2")]
      public static void BufferData<T2>(BufferTargetArb target, IntPtr size, [In, Out] ref T2 data, BufferUsageArb usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBufferDataARB(target, size, gcHandle.AddrOfPinnedObject(), usage);
          data = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferSubDataARB", Version = "1.2")]
      public static void BufferSubData(BufferTargetArb target, IntPtr offset, IntPtr size, IntPtr data)
      {
        GL.Delegates.glBufferSubDataARB(target, offset, size, data);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferSubDataARB", Version = "1.2")]
      public static void BufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBufferSubDataARB(target, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferSubDataARB", Version = "1.2")]
      public static void BufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBufferSubDataARB(target, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferSubDataARB", Version = "1.2")]
      public static void BufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBufferSubDataARB(target, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glBufferSubDataARB", Version = "1.2")]
      public static void BufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBufferSubDataARB(target, offset, size, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_color_buffer_float", EntryPoint = "glClampColorARB", Version = "1.5")]
      public static void ClampColor(ArbColorBufferFloat target, ArbColorBufferFloat clamp)
      {
        GL.Delegates.glClampColorARB(target, clamp);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glClientActiveTextureARB", Version = "1.2")]
      public static void ClientActiveTexture(TextureUnit texture)
      {
        GL.Delegates.glClientActiveTextureARB(texture);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glCompileShaderARB", Version = "1.2")]
      public static void CompileShader(int shaderObj)
      {
        GL.Delegates.glCompileShaderARB((uint) shaderObj);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glCompileShaderARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static void CompileShader(uint shaderObj)
      {
        GL.Delegates.glCompileShaderARB(shaderObj);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glCompileShaderIncludeARB", Version = "1.2")]
      public static unsafe void CompileShaderInclude(int shader, int count, string[] path, int[] length)
      {
        fixed (int* length1 = length)
          GL.Delegates.glCompileShaderIncludeARB((uint) shader, count, path, length1);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glCompileShaderIncludeARB", Version = "1.2")]
      public static unsafe void CompileShaderInclude(int shader, int count, string[] path, ref int length)
      {
        fixed (int* length1 = &length)
          GL.Delegates.glCompileShaderIncludeARB((uint) shader, count, path, length1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glCompileShaderIncludeARB", Version = "1.2")]
      public static unsafe void CompileShaderInclude(int shader, int count, string[] path, int* length)
      {
        GL.Delegates.glCompileShaderIncludeARB((uint) shader, count, path, length);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glCompileShaderIncludeARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void CompileShaderInclude(uint shader, int count, string[] path, int[] length)
      {
        fixed (int* length1 = length)
          GL.Delegates.glCompileShaderIncludeARB(shader, count, path, length1);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glCompileShaderIncludeARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void CompileShaderInclude(uint shader, int count, string[] path, ref int length)
      {
        fixed (int* length1 = &length)
          GL.Delegates.glCompileShaderIncludeARB(shader, count, path, length1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glCompileShaderIncludeARB", Version = "1.2")]
      public static unsafe void CompileShaderInclude(uint shader, int count, string[] path, int* length)
      {
        GL.Delegates.glCompileShaderIncludeARB(shader, count, path, length);
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage1DARB", Version = "1.2")]
      public static void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
      {
        GL.Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage1DARB", Version = "1.2")]
      public static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In, Out] T6[] data) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage1DARB", Version = "1.2")]
      public static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In, Out] T6[,] data) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage1DARB", Version = "1.2")]
      public static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In, Out] T6[,,] data) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage1DARB", Version = "1.2")]
      public static void CompressedTexImage1D<T6>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, [In, Out] ref T6 data) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
          data = (T6) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage2DARB", Version = "1.2")]
      public static void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
      {
        GL.Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage2DARB", Version = "1.2")]
      public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] T7[] data) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage2DARB", Version = "1.2")]
      public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,] data) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage2DARB", Version = "1.2")]
      public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,,] data) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage2DARB", Version = "1.2")]
      public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] ref T7 data) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
          data = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage3DARB", Version = "1.2")]
      public static void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
      {
        GL.Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage3DARB", Version = "1.2")]
      public static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T8[] data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage3DARB", Version = "1.2")]
      public static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T8[,] data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage3DARB", Version = "1.2")]
      public static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T8[,,] data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexImage3DARB", Version = "1.2")]
      public static void CompressedTexImage3D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] ref T8 data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
          data = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage1DARB", Version = "1.2")]
      public static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data)
      {
        GL.Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage1DARB", Version = "1.2")]
      public static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T6[] data) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage1DARB", Version = "1.2")]
      public static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T6[,] data) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage1DARB", Version = "1.2")]
      public static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T6[,,] data) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage1DARB", Version = "1.2")]
      public static void CompressedTexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] ref T6 data) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
          data = (T6) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage2DARB", Version = "1.2")]
      public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
      {
        GL.Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage2DARB", Version = "1.2")]
      public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T8[] data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage2DARB", Version = "1.2")]
      public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T8[,] data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage2DARB", Version = "1.2")]
      public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T8[,,] data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage2DARB", Version = "1.2")]
      public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] ref T8 data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
          data = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage3DARB", Version = "1.2")]
      public static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data)
      {
        GL.Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage3DARB", Version = "1.2")]
      public static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T10[] data) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage3DARB", Version = "1.2")]
      public static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T10[,] data) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage3DARB", Version = "1.2")]
      public static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T10[,,] data) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glCompressedTexSubImage3DARB", Version = "1.2")]
      public static void CompressedTexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] ref T10 data) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
          data = (T10) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glCreateProgramObjectARB", Version = "1.2")]
      public static int CreateProgramObject()
      {
        return GL.Delegates.glCreateProgramObjectARB();
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glCreateShaderObjectARB", Version = "1.2")]
      public static int CreateShaderObject(ArbShaderObjects shaderType)
      {
        return GL.Delegates.glCreateShaderObjectARB(shaderType);
      }

      [AutoGenerated(Category = "ARB_cl_event", EntryPoint = "glCreateSyncFromCLeventARB", Version = "4.1")]
      public static IntPtr CreateSyncFromCLevent(IntPtr context, IntPtr @event, int flags)
      {
        return GL.Delegates.glCreateSyncFromCLeventARB(context, @event, (uint) flags);
      }

      [AutoGenerated(Category = "ARB_cl_event", EntryPoint = "glCreateSyncFromCLeventARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static IntPtr CreateSyncFromCLevent(IntPtr context, IntPtr @event, uint flags)
      {
        return GL.Delegates.glCreateSyncFromCLeventARB(context, @event, flags);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glCurrentPaletteMatrixARB", Version = "1.1")]
      public static void CurrentPaletteMatrix(int index)
      {
        GL.Delegates.glCurrentPaletteMatrixARB(index);
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageCallbackARB", Version = "4.1")]
      public static void DebugMessageCallback(DebugProcArb callback, IntPtr userParam)
      {
        GL.Delegates.glDebugMessageCallbackARB(callback, userParam);
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageCallbackARB", Version = "4.1")]
      public static void DebugMessageCallback<T1>(DebugProcArb callback, [In, Out] T1[] userParam) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) userParam, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDebugMessageCallbackARB(callback, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageCallbackARB", Version = "4.1")]
      public static void DebugMessageCallback<T1>(DebugProcArb callback, [In, Out] T1[,] userParam) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) userParam, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDebugMessageCallbackARB(callback, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageCallbackARB", Version = "4.1")]
      public static void DebugMessageCallback<T1>(DebugProcArb callback, [In, Out] T1[,,] userParam) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) userParam, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDebugMessageCallbackARB(callback, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageCallbackARB", Version = "4.1")]
      public static void DebugMessageCallback<T1>(DebugProcArb callback, [In, Out] ref T1 userParam) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) userParam, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDebugMessageCallbackARB(callback, gcHandle.AddrOfPinnedObject());
          userParam = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageControlARB", Version = "4.1")]
      public static unsafe void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, int[] ids, bool enabled)
      {
        fixed (int* numPtr = ids)
          GL.Delegates.glDebugMessageControlARB(source, type, severity, count, (uint*) numPtr, enabled);
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageControlARB", Version = "4.1")]
      public static unsafe void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, ref int ids, bool enabled)
      {
        fixed (int* numPtr = &ids)
          GL.Delegates.glDebugMessageControlARB(source, type, severity, count, (uint*) numPtr, enabled);
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageControlARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, int* ids, bool enabled)
      {
        GL.Delegates.glDebugMessageControlARB(source, type, severity, count, (uint*) ids, enabled);
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageControlARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, uint[] ids, bool enabled)
      {
        fixed (uint* ids1 = ids)
          GL.Delegates.glDebugMessageControlARB(source, type, severity, count, ids1, enabled);
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageControlARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, ref uint ids, bool enabled)
      {
        fixed (uint* ids1 = &ids)
          GL.Delegates.glDebugMessageControlARB(source, type, severity, count, ids1, enabled);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageControlARB", Version = "4.1")]
      public static unsafe void DebugMessageControl(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, uint* ids, bool enabled)
      {
        GL.Delegates.glDebugMessageControlARB(source, type, severity, count, ids, enabled);
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageInsertARB", Version = "4.1")]
      public static void DebugMessageInsert(ArbDebugOutput source, ArbDebugOutput type, int id, ArbDebugOutput severity, int length, string buf)
      {
        GL.Delegates.glDebugMessageInsertARB(source, type, (uint) id, severity, length, buf);
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glDebugMessageInsertARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static void DebugMessageInsert(ArbDebugOutput source, ArbDebugOutput type, uint id, ArbDebugOutput severity, int length, string buf)
      {
        GL.Delegates.glDebugMessageInsertARB(source, type, id, severity, length, buf);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glDeleteBuffersARB", Version = "1.2")]
      public static unsafe void DeleteBuffers(int n, int[] buffers)
      {
        fixed (int* numPtr = buffers)
          GL.Delegates.glDeleteBuffersARB(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glDeleteBuffersARB", Version = "1.2")]
      public static unsafe void DeleteBuffers(int n, ref int buffers)
      {
        fixed (int* numPtr = &buffers)
          GL.Delegates.glDeleteBuffersARB(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glDeleteBuffersARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteBuffers(int n, int* buffers)
      {
        GL.Delegates.glDeleteBuffersARB(n, (uint*) buffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glDeleteBuffersARB", Version = "1.2")]
      public static unsafe void DeleteBuffers(int n, uint[] buffers)
      {
        fixed (uint* buffers1 = buffers)
          GL.Delegates.glDeleteBuffersARB(n, buffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glDeleteBuffersARB", Version = "1.2")]
      public static unsafe void DeleteBuffers(int n, ref uint buffers)
      {
        fixed (uint* buffers1 = &buffers)
          GL.Delegates.glDeleteBuffersARB(n, buffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glDeleteBuffersARB", Version = "1.2")]
      public static unsafe void DeleteBuffers(int n, uint* buffers)
      {
        GL.Delegates.glDeleteBuffersARB(n, buffers);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glDeleteNamedStringARB", Version = "1.2")]
      public static void DeleteNamedString(int namelen, string name)
      {
        GL.Delegates.glDeleteNamedStringARB(namelen, name);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glDeleteObjectARB", Version = "1.2")]
      public static void DeleteObject(int obj)
      {
        GL.Delegates.glDeleteObjectARB((uint) obj);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glDeleteObjectARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static void DeleteObject(uint obj)
      {
        GL.Delegates.glDeleteObjectARB(obj);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glDeleteProgramsARB", Version = "1.3")]
      public static unsafe void DeleteProgram(int n, int[] programs)
      {
        fixed (int* numPtr = programs)
          GL.Delegates.glDeleteProgramsARB(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glDeleteProgramsARB", Version = "1.3")]
      public static unsafe void DeleteProgram(int n, ref int programs)
      {
        fixed (int* numPtr = &programs)
          GL.Delegates.glDeleteProgramsARB(n, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glDeleteProgramsARB", Version = "1.3")]
      public static unsafe void DeleteProgram(int n, int* programs)
      {
        GL.Delegates.glDeleteProgramsARB(n, (uint*) programs);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glDeleteProgramsARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void DeleteProgram(int n, uint[] programs)
      {
        fixed (uint* programs1 = programs)
          GL.Delegates.glDeleteProgramsARB(n, programs1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glDeleteProgramsARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void DeleteProgram(int n, ref uint programs)
      {
        fixed (uint* programs1 = &programs)
          GL.Delegates.glDeleteProgramsARB(n, programs1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glDeleteProgramsARB", Version = "1.3")]
      public static unsafe void DeleteProgram(int n, uint* programs)
      {
        GL.Delegates.glDeleteProgramsARB(n, programs);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glDeleteQueriesARB", Version = "1.5")]
      public static unsafe void DeleteQueries(int n, int[] ids)
      {
        fixed (int* numPtr = ids)
          GL.Delegates.glDeleteQueriesARB(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glDeleteQueriesARB", Version = "1.5")]
      public static unsafe void DeleteQueries(int n, ref int ids)
      {
        fixed (int* numPtr = &ids)
          GL.Delegates.glDeleteQueriesARB(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glDeleteQueriesARB", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void DeleteQueries(int n, int* ids)
      {
        GL.Delegates.glDeleteQueriesARB(n, (uint*) ids);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glDeleteQueriesARB", Version = "1.5")]
      public static unsafe void DeleteQueries(int n, uint[] ids)
      {
        fixed (uint* ids1 = ids)
          GL.Delegates.glDeleteQueriesARB(n, ids1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glDeleteQueriesARB", Version = "1.5")]
      public static unsafe void DeleteQueries(int n, ref uint ids)
      {
        fixed (uint* ids1 = &ids)
          GL.Delegates.glDeleteQueriesARB(n, ids1);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glDeleteQueriesARB", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void DeleteQueries(int n, uint* ids)
      {
        GL.Delegates.glDeleteQueriesARB(n, ids);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glDetachObjectARB", Version = "1.2")]
      public static void DetachObject(int containerObj, int attachedObj)
      {
        GL.Delegates.glDetachObjectARB((uint) containerObj, (uint) attachedObj);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glDetachObjectARB", Version = "1.2")]
      public static void DetachObject(uint containerObj, uint attachedObj)
      {
        GL.Delegates.glDetachObjectARB(containerObj, attachedObj);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glDisableVertexAttribArrayARB", Version = "1.3")]
      public static void DisableVertexAttribArray(int index)
      {
        GL.Delegates.glDisableVertexAttribArrayARB((uint) index);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glDisableVertexAttribArrayARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void DisableVertexAttribArray(uint index)
      {
        GL.Delegates.glDisableVertexAttribArrayARB(index);
      }

      [AutoGenerated(Category = "ARB_draw_instanced", EntryPoint = "glDrawArraysInstancedARB", Version = "2.0")]
      public static void DrawArraysInstanced(BeginMode mode, int first, int count, int primcount)
      {
        GL.Delegates.glDrawArraysInstancedARB(mode, first, count, primcount);
      }

      [AutoGenerated(Category = "ARB_draw_buffers", EntryPoint = "glDrawBuffersARB", Version = "1.5")]
      public static unsafe void DrawBuffers(int n, ArbDrawBuffers[] bufs)
      {
        fixed (ArbDrawBuffers* bufs1 = bufs)
          GL.Delegates.glDrawBuffersARB(n, bufs1);
      }

      [AutoGenerated(Category = "ARB_draw_buffers", EntryPoint = "glDrawBuffersARB", Version = "1.5")]
      public static unsafe void DrawBuffers(int n, ref ArbDrawBuffers bufs)
      {
        fixed (ArbDrawBuffers* bufs1 = &bufs)
          GL.Delegates.glDrawBuffersARB(n, bufs1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_draw_buffers", EntryPoint = "glDrawBuffersARB", Version = "1.5")]
      public static unsafe void DrawBuffers(int n, ArbDrawBuffers* bufs)
      {
        GL.Delegates.glDrawBuffersARB(n, bufs);
      }

      [AutoGenerated(Category = "ARB_draw_instanced", EntryPoint = "glDrawElementsInstancedARB", Version = "2.0")]
      public static void DrawElementsInstanced(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount)
      {
        GL.Delegates.glDrawElementsInstancedARB(mode, count, type, indices, primcount);
      }

      [AutoGenerated(Category = "ARB_draw_instanced", EntryPoint = "glDrawElementsInstancedARB", Version = "2.0")]
      public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawElementsInstancedARB(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_draw_instanced", EntryPoint = "glDrawElementsInstancedARB", Version = "2.0")]
      public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawElementsInstancedARB(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_draw_instanced", EntryPoint = "glDrawElementsInstancedARB", Version = "2.0")]
      public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawElementsInstancedARB(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_draw_instanced", EntryPoint = "glDrawElementsInstancedARB", Version = "2.0")]
      public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] ref T3 indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawElementsInstancedARB(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
          indices = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glEnableVertexAttribArrayARB", Version = "1.3")]
      public static void EnableVertexAttribArray(int index)
      {
        GL.Delegates.glEnableVertexAttribArrayARB((uint) index);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glEnableVertexAttribArrayARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void EnableVertexAttribArray(uint index)
      {
        GL.Delegates.glEnableVertexAttribArrayARB(index);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glEndQueryARB", Version = "1.5")]
      public static void EndQuery(ArbOcclusionQuery target)
      {
        GL.Delegates.glEndQueryARB(target);
      }

      [AutoGenerated(Category = "ARB_geometry_shader4", EntryPoint = "glFramebufferTextureARB", Version = "3.0")]
      public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level)
      {
        GL.Delegates.glFramebufferTextureARB(target, attachment, (uint) texture, level);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_geometry_shader4", EntryPoint = "glFramebufferTextureARB", Version = "3.0")]
      public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
      {
        GL.Delegates.glFramebufferTextureARB(target, attachment, texture, level);
      }

      [AutoGenerated(Category = "ARB_geometry_shader4", EntryPoint = "glFramebufferTextureFaceARB", Version = "3.0")]
      public static void FramebufferTextureFace(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, TextureTarget face)
      {
        GL.Delegates.glFramebufferTextureFaceARB(target, attachment, (uint) texture, level, face);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_geometry_shader4", EntryPoint = "glFramebufferTextureFaceARB", Version = "3.0")]
      public static void FramebufferTextureFace(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
      {
        GL.Delegates.glFramebufferTextureFaceARB(target, attachment, texture, level, face);
      }

      [AutoGenerated(Category = "ARB_geometry_shader4", EntryPoint = "glFramebufferTextureLayerARB", Version = "3.0")]
      public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer)
      {
        GL.Delegates.glFramebufferTextureLayerARB(target, attachment, (uint) texture, level, layer);
      }

      [AutoGenerated(Category = "ARB_geometry_shader4", EntryPoint = "glFramebufferTextureLayerARB", Version = "3.0")]
      [CLSCompliant(false)]
      public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
      {
        GL.Delegates.glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGenBuffersARB", Version = "1.2")]
      public static unsafe void GenBuffers(int n, [Out] int[] buffers)
      {
        fixed (int* numPtr = buffers)
          GL.Delegates.glGenBuffersARB(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGenBuffersARB", Version = "1.2")]
      public static unsafe void GenBuffers(int n, out int buffers)
      {
        fixed (int* numPtr = &buffers)
        {
          GL.Delegates.glGenBuffersARB(n, (uint*) numPtr);
          buffers = *numPtr;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGenBuffersARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenBuffers(int n, [Out] int* buffers)
      {
        GL.Delegates.glGenBuffersARB(n, (uint*) buffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGenBuffersARB", Version = "1.2")]
      public static unsafe void GenBuffers(int n, [Out] uint[] buffers)
      {
        fixed (uint* buffers1 = buffers)
          GL.Delegates.glGenBuffersARB(n, buffers1);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGenBuffersARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenBuffers(int n, out uint buffers)
      {
        fixed (uint* buffers1 = &buffers)
        {
          GL.Delegates.glGenBuffersARB(n, buffers1);
          buffers = *buffers1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGenBuffersARB", Version = "1.2")]
      public static unsafe void GenBuffers(int n, [Out] uint* buffers)
      {
        GL.Delegates.glGenBuffersARB(n, buffers);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGenProgramsARB", Version = "1.3")]
      public static unsafe void GenProgram(int n, [Out] int[] programs)
      {
        fixed (int* numPtr = programs)
          GL.Delegates.glGenProgramsARB(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGenProgramsARB", Version = "1.3")]
      public static unsafe void GenProgram(int n, out int programs)
      {
        fixed (int* numPtr = &programs)
        {
          GL.Delegates.glGenProgramsARB(n, (uint*) numPtr);
          programs = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGenProgramsARB", Version = "1.3")]
      public static unsafe void GenProgram(int n, [Out] int* programs)
      {
        GL.Delegates.glGenProgramsARB(n, (uint*) programs);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGenProgramsARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GenProgram(int n, [Out] uint[] programs)
      {
        fixed (uint* programs1 = programs)
          GL.Delegates.glGenProgramsARB(n, programs1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGenProgramsARB", Version = "1.3")]
      public static unsafe void GenProgram(int n, out uint programs)
      {
        fixed (uint* programs1 = &programs)
        {
          GL.Delegates.glGenProgramsARB(n, programs1);
          programs = *programs1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGenProgramsARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GenProgram(int n, [Out] uint* programs)
      {
        GL.Delegates.glGenProgramsARB(n, programs);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGenQueriesARB", Version = "1.5")]
      public static unsafe void GenQueries(int n, [Out] int[] ids)
      {
        fixed (int* numPtr = ids)
          GL.Delegates.glGenQueriesARB(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGenQueriesARB", Version = "1.5")]
      public static unsafe void GenQueries(int n, out int ids)
      {
        fixed (int* numPtr = &ids)
        {
          GL.Delegates.glGenQueriesARB(n, (uint*) numPtr);
          ids = *numPtr;
        }
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGenQueriesARB", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GenQueries(int n, [Out] int* ids)
      {
        GL.Delegates.glGenQueriesARB(n, (uint*) ids);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGenQueriesARB", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GenQueries(int n, [Out] uint[] ids)
      {
        fixed (uint* ids1 = ids)
          GL.Delegates.glGenQueriesARB(n, ids1);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGenQueriesARB", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GenQueries(int n, out uint ids)
      {
        fixed (uint* ids1 = &ids)
        {
          GL.Delegates.glGenQueriesARB(n, ids1);
          ids = *ids1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGenQueriesARB", Version = "1.5")]
      public static unsafe void GenQueries(int n, [Out] uint* ids)
      {
        GL.Delegates.glGenQueriesARB(n, ids);
      }

      [AutoGenerated(Category = "ARB_vertex_shader", EntryPoint = "glGetActiveAttribARB", Version = "1.2")]
      public static unsafe void GetActiveAttrib(int programObj, int index, int maxLength, out int length, out int size, out ArbVertexShader type, [Out] StringBuilder name)
      {
        fixed (int* length1 = &length)
          fixed (int* size1 = &size)
            fixed (ArbVertexShader* type1 = &type)
            {
              GL.Delegates.glGetActiveAttribARB((uint) programObj, (uint) index, maxLength, length1, size1, type1, name);
              length = *length1;
              size = *size1;
              type = *type1;
            }
      }

      [AutoGenerated(Category = "ARB_vertex_shader", EntryPoint = "glGetActiveAttribARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetActiveAttrib(int programObj, int index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbVertexShader* type, [Out] StringBuilder name)
      {
        GL.Delegates.glGetActiveAttribARB((uint) programObj, (uint) index, maxLength, length, size, type, name);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_shader", EntryPoint = "glGetActiveAttribARB", Version = "1.2")]
      public static unsafe void GetActiveAttrib(uint programObj, uint index, int maxLength, out int length, out int size, out ArbVertexShader type, [Out] StringBuilder name)
      {
        fixed (int* length1 = &length)
          fixed (int* size1 = &size)
            fixed (ArbVertexShader* type1 = &type)
            {
              GL.Delegates.glGetActiveAttribARB(programObj, index, maxLength, length1, size1, type1, name);
              length = *length1;
              size = *size1;
              type = *type1;
            }
      }

      [AutoGenerated(Category = "ARB_vertex_shader", EntryPoint = "glGetActiveAttribARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetActiveAttrib(uint programObj, uint index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbVertexShader* type, [Out] StringBuilder name)
      {
        GL.Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetActiveUniformARB", Version = "1.2")]
      public static unsafe void GetActiveUniform(int programObj, int index, int maxLength, out int length, out int size, out ArbShaderObjects type, [Out] StringBuilder name)
      {
        fixed (int* length1 = &length)
          fixed (int* size1 = &size)
            fixed (ArbShaderObjects* type1 = &type)
            {
              GL.Delegates.glGetActiveUniformARB((uint) programObj, (uint) index, maxLength, length1, size1, type1, name);
              length = *length1;
              size = *size1;
              type = *type1;
            }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetActiveUniformARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetActiveUniform(int programObj, int index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbShaderObjects* type, [Out] StringBuilder name)
      {
        GL.Delegates.glGetActiveUniformARB((uint) programObj, (uint) index, maxLength, length, size, type, name);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetActiveUniformARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetActiveUniform(uint programObj, uint index, int maxLength, out int length, out int size, out ArbShaderObjects type, [Out] StringBuilder name)
      {
        fixed (int* length1 = &length)
          fixed (int* size1 = &size)
            fixed (ArbShaderObjects* type1 = &type)
            {
              GL.Delegates.glGetActiveUniformARB(programObj, index, maxLength, length1, size1, type1, name);
              length = *length1;
              size = *size1;
              type = *type1;
            }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetActiveUniformARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetActiveUniform(uint programObj, uint index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbShaderObjects* type, [Out] StringBuilder name)
      {
        GL.Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetAttachedObjectsARB", Version = "1.2")]
      public static unsafe void GetAttachedObjects(int containerObj, int maxCount, out int count, out int obj)
      {
        fixed (int* count1 = &count)
          fixed (int* numPtr = &obj)
          {
            GL.Delegates.glGetAttachedObjectsARB((uint) containerObj, maxCount, count1, (uint*) numPtr);
            count = *count1;
            obj = *numPtr;
          }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetAttachedObjectsARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetAttachedObjects(int containerObj, int maxCount, [Out] int* count, [Out] int[] obj)
      {
        fixed (int* numPtr = obj)
          GL.Delegates.glGetAttachedObjectsARB((uint) containerObj, maxCount, count, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetAttachedObjectsARB", Version = "1.2")]
      public static unsafe void GetAttachedObjects(int containerObj, int maxCount, [Out] int* count, [Out] int* obj)
      {
        GL.Delegates.glGetAttachedObjectsARB((uint) containerObj, maxCount, count, (uint*) obj);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetAttachedObjectsARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetAttachedObjects(uint containerObj, int maxCount, out int count, out uint obj)
      {
        fixed (int* count1 = &count)
          fixed (uint* numPtr = &obj)
          {
            GL.Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count1, numPtr);
            count = *count1;
            obj = *numPtr;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetAttachedObjectsARB", Version = "1.2")]
      public static unsafe void GetAttachedObjects(uint containerObj, int maxCount, [Out] int* count, [Out] uint[] obj)
      {
        fixed (uint* numPtr = obj)
          GL.Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetAttachedObjectsARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetAttachedObjects(uint containerObj, int maxCount, [Out] int* count, [Out] uint* obj)
      {
        GL.Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
      }

      [AutoGenerated(Category = "ARB_vertex_shader", EntryPoint = "glGetAttribLocationARB", Version = "1.2")]
      public static int GetAttribLocation(int programObj, string name)
      {
        return GL.Delegates.glGetAttribLocationARB((uint) programObj, name);
      }

      [AutoGenerated(Category = "ARB_vertex_shader", EntryPoint = "glGetAttribLocationARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static int GetAttribLocation(uint programObj, string name)
      {
        return GL.Delegates.glGetAttribLocationARB(programObj, name);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferParameterivARB", Version = "1.2")]
      public static unsafe void GetBufferParameter(ArbVertexBufferObject target, BufferParameterNameArb pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetBufferParameterivARB(target, pname, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferParameterivARB", Version = "1.2")]
      public static unsafe void GetBufferParameter(ArbVertexBufferObject target, BufferParameterNameArb pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetBufferParameterivARB(target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferParameterivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetBufferParameter(ArbVertexBufferObject target, BufferParameterNameArb pname, [Out] int* @params)
      {
        GL.Delegates.glGetBufferParameterivARB(target, pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferPointervARB", Version = "1.2")]
      public static void GetBufferPointer(ArbVertexBufferObject target, BufferPointerNameArb pname, [Out] IntPtr @params)
      {
        GL.Delegates.glGetBufferPointervARB(target, pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferPointervARB", Version = "1.2")]
      public static void GetBufferPointer<T2>(ArbVertexBufferObject target, BufferPointerNameArb pname, [In, Out] T2[] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervARB(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferPointervARB", Version = "1.2")]
      public static void GetBufferPointer<T2>(ArbVertexBufferObject target, BufferPointerNameArb pname, [In, Out] T2[,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervARB(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferPointervARB", Version = "1.2")]
      public static void GetBufferPointer<T2>(ArbVertexBufferObject target, BufferPointerNameArb pname, [In, Out] T2[,,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervARB(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferPointervARB", Version = "1.2")]
      public static void GetBufferPointer<T2>(ArbVertexBufferObject target, BufferPointerNameArb pname, [In, Out] ref T2 @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervARB(target, pname, gcHandle.AddrOfPinnedObject());
          @params = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferSubDataARB", Version = "1.2")]
      public static void GetBufferSubData(BufferTargetArb target, IntPtr offset, IntPtr size, [Out] IntPtr data)
      {
        GL.Delegates.glGetBufferSubDataARB(target, offset, size, data);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferSubDataARB", Version = "1.2")]
      public static void GetBufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferSubDataARB(target, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferSubDataARB", Version = "1.2")]
      public static void GetBufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferSubDataARB(target, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferSubDataARB", Version = "1.2")]
      public static void GetBufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferSubDataARB(target, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glGetBufferSubDataARB", Version = "1.2")]
      public static void GetBufferSubData<T3>(BufferTargetArb target, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferSubDataARB(target, offset, size, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glGetCompressedTexImageARB", Version = "1.2")]
      public static void GetCompressedTexImage(TextureTarget target, int level, [Out] IntPtr img)
      {
        GL.Delegates.glGetCompressedTexImageARB(target, level, img);
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glGetCompressedTexImageARB", Version = "1.2")]
      public static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In, Out] T2[] img) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTexImageARB(target, level, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glGetCompressedTexImageARB", Version = "1.2")]
      public static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In, Out] T2[,] img) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTexImageARB(target, level, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glGetCompressedTexImageARB", Version = "1.2")]
      public static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In, Out] T2[,,] img) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTexImageARB(target, level, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_texture_compression", EntryPoint = "glGetCompressedTexImageARB", Version = "1.2")]
      public static void GetCompressedTexImage<T2>(TextureTarget target, int level, [In, Out] ref T2 img) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTexImageARB(target, level, gcHandle.AddrOfPinnedObject());
          img = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glGetDebugMessageLogARB", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(int count, int bufsize, [Out] ArbDebugOutput[] sources, [Out] ArbDebugOutput[] types, [Out] int[] ids, [Out] ArbDebugOutput[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
      {
        fixed (ArbDebugOutput* sources1 = sources)
          fixed (ArbDebugOutput* types1 = types)
            fixed (int* numPtr = ids)
              fixed (ArbDebugOutput* severities1 = severities)
                fixed (int* lengths1 = lengths)
                  return GL.Delegates.glGetDebugMessageLogARB((uint) count, bufsize, sources1, types1, (uint*) numPtr, severities1, lengths1, messageLog);
      }

      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glGetDebugMessageLogARB", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(int count, int bufsize, out ArbDebugOutput sources, out ArbDebugOutput types, out int ids, out ArbDebugOutput severities, out int lengths, [Out] StringBuilder messageLog)
      {
        fixed (ArbDebugOutput* sources1 = &sources)
          fixed (ArbDebugOutput* types1 = &types)
            fixed (int* numPtr = &ids)
              fixed (ArbDebugOutput* severities1 = &severities)
                fixed (int* lengths1 = &lengths)
                {
                  int num = GL.Delegates.glGetDebugMessageLogARB((uint) count, bufsize, sources1, types1, (uint*) numPtr, severities1, lengths1, messageLog);
                  sources = *sources1;
                  types = *types1;
                  ids = *numPtr;
                  severities = *severities1;
                  lengths = *lengths1;
                  return num;
                }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glGetDebugMessageLogARB", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(int count, int bufsize, [Out] ArbDebugOutput* sources, [Out] ArbDebugOutput* types, [Out] int* ids, [Out] ArbDebugOutput* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
      {
        return GL.Delegates.glGetDebugMessageLogARB((uint) count, bufsize, sources, types, (uint*) ids, severities, lengths, messageLog);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glGetDebugMessageLogARB", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(uint count, int bufsize, [Out] ArbDebugOutput[] sources, [Out] ArbDebugOutput[] types, [Out] uint[] ids, [Out] ArbDebugOutput[] severities, [Out] int[] lengths, [Out] StringBuilder messageLog)
      {
        fixed (ArbDebugOutput* sources1 = sources)
          fixed (ArbDebugOutput* types1 = types)
            fixed (uint* ids1 = ids)
              fixed (ArbDebugOutput* severities1 = severities)
                fixed (int* lengths1 = lengths)
                  return GL.Delegates.glGetDebugMessageLogARB(count, bufsize, sources1, types1, ids1, severities1, lengths1, messageLog);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glGetDebugMessageLogARB", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(uint count, int bufsize, out ArbDebugOutput sources, out ArbDebugOutput types, out uint ids, out ArbDebugOutput severities, out int lengths, [Out] StringBuilder messageLog)
      {
        fixed (ArbDebugOutput* sources1 = &sources)
          fixed (ArbDebugOutput* types1 = &types)
            fixed (uint* ids1 = &ids)
              fixed (ArbDebugOutput* severities1 = &severities)
                fixed (int* lengths1 = &lengths)
                {
                  int num = GL.Delegates.glGetDebugMessageLogARB(count, bufsize, sources1, types1, ids1, severities1, lengths1, messageLog);
                  sources = *sources1;
                  types = *types1;
                  ids = *ids1;
                  severities = *severities1;
                  lengths = *lengths1;
                  return num;
                }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_debug_output", EntryPoint = "glGetDebugMessageLogARB", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(uint count, int bufsize, [Out] ArbDebugOutput* sources, [Out] ArbDebugOutput* types, [Out] uint* ids, [Out] ArbDebugOutput* severities, [Out] int* lengths, [Out] StringBuilder messageLog)
      {
        return GL.Delegates.glGetDebugMessageLogARB(count, bufsize, sources, types, ids, severities, lengths, messageLog);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetGraphicsResetStatusARB", Version = "4.1")]
      public static ArbRobustness GetGraphicsResetStatus()
      {
        return GL.Delegates.glGetGraphicsResetStatusARB();
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetHandleARB", Version = "1.2")]
      public static int GetHandle(ArbShaderObjects pname)
      {
        return GL.Delegates.glGetHandleARB(pname);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetInfoLogARB", Version = "1.2")]
      public static unsafe void GetInfoLog(int obj, int maxLength, out int length, [Out] StringBuilder infoLog)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetInfoLogARB((uint) obj, maxLength, length1, infoLog);
          length = *length1;
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetInfoLogARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInfoLog(int obj, int maxLength, [Out] int* length, [Out] StringBuilder infoLog)
      {
        GL.Delegates.glGetInfoLogARB((uint) obj, maxLength, length, infoLog);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetInfoLogARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInfoLog(uint obj, int maxLength, out int length, [Out] StringBuilder infoLog)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetInfoLogARB(obj, maxLength, length1, infoLog);
          length = *length1;
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetInfoLogARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInfoLog(uint obj, int maxLength, [Out] int* length, [Out] StringBuilder infoLog)
      {
        GL.Delegates.glGetInfoLogARB(obj, maxLength, length, infoLog);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glGetNamedStringARB", Version = "1.2")]
      public static unsafe void GetNamedString(int namelen, string name, int bufSize, out int stringlen, [Out] StringBuilder @string)
      {
        fixed (int* stringlen1 = &stringlen)
        {
          GL.Delegates.glGetNamedStringARB(namelen, name, bufSize, stringlen1, @string);
          stringlen = *stringlen1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glGetNamedStringARB", Version = "1.2")]
      public static unsafe void GetNamedString(int namelen, string name, int bufSize, [Out] int* stringlen, [Out] StringBuilder @string)
      {
        GL.Delegates.glGetNamedStringARB(namelen, name, bufSize, stringlen, @string);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glGetNamedStringivARB", Version = "1.2")]
      public static unsafe void GetNamedString(int namelen, string name, ArbShadingLanguageInclude pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetNamedStringivARB(namelen, name, pname, params1);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glGetNamedStringivARB", Version = "1.2")]
      public static unsafe void GetNamedString(int namelen, string name, ArbShadingLanguageInclude pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedStringivARB(namelen, name, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glGetNamedStringivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedString(int namelen, string name, ArbShadingLanguageInclude pname, [Out] int* @params)
      {
        GL.Delegates.glGetNamedStringivARB(namelen, name, pname, @params);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnColorTableARB", Version = "4.1")]
      public static void GetnColorTable(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr table)
      {
        GL.Delegates.glGetnColorTableARB(target, format, type, bufSize, table);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnColorTableARB", Version = "4.1")]
      public static void GetnColorTable<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T4[] table) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnColorTableARB(target, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnColorTableARB", Version = "4.1")]
      public static void GetnColorTable<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T4[,] table) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnColorTableARB(target, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnColorTableARB", Version = "4.1")]
      public static void GetnColorTable<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T4[,,] table) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnColorTableARB(target, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnColorTableARB", Version = "4.1")]
      public static void GetnColorTable<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] ref T4 table) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnColorTableARB(target, format, type, bufSize, gcHandle.AddrOfPinnedObject());
          table = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnCompressedTexImageARB", Version = "4.1")]
      public static void GetnCompressedTexImage(ArbRobustness target, int lod, int bufSize, [Out] IntPtr img)
      {
        GL.Delegates.glGetnCompressedTexImageARB(target, lod, bufSize, img);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnCompressedTexImageARB", Version = "4.1")]
      public static void GetnCompressedTexImage<T3>(ArbRobustness target, int lod, int bufSize, [In, Out] T3[] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnCompressedTexImageARB(target, lod, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnCompressedTexImageARB", Version = "4.1")]
      public static void GetnCompressedTexImage<T3>(ArbRobustness target, int lod, int bufSize, [In, Out] T3[,] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnCompressedTexImageARB(target, lod, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnCompressedTexImageARB", Version = "4.1")]
      public static void GetnCompressedTexImage<T3>(ArbRobustness target, int lod, int bufSize, [In, Out] T3[,,] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnCompressedTexImageARB(target, lod, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnCompressedTexImageARB", Version = "4.1")]
      public static void GetnCompressedTexImage<T3>(ArbRobustness target, int lod, int bufSize, [In, Out] ref T3 img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnCompressedTexImageARB(target, lod, bufSize, gcHandle.AddrOfPinnedObject());
          img = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnConvolutionFilterARB", Version = "4.1")]
      public static void GetnConvolutionFilter(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr image)
      {
        GL.Delegates.glGetnConvolutionFilterARB(target, format, type, bufSize, image);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnConvolutionFilterARB", Version = "4.1")]
      public static void GetnConvolutionFilter<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T4[] image) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnConvolutionFilterARB(target, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnConvolutionFilterARB", Version = "4.1")]
      public static void GetnConvolutionFilter<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T4[,] image) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnConvolutionFilterARB(target, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnConvolutionFilterARB", Version = "4.1")]
      public static void GetnConvolutionFilter<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T4[,,] image) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnConvolutionFilterARB(target, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnConvolutionFilterARB", Version = "4.1")]
      public static void GetnConvolutionFilter<T4>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] ref T4 image) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnConvolutionFilterARB(target, format, type, bufSize, gcHandle.AddrOfPinnedObject());
          image = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnHistogramARB", Version = "4.1")]
      public static void GetnHistogram(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr values)
      {
        GL.Delegates.glGetnHistogramARB(target, reset, format, type, bufSize, values);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnHistogramARB", Version = "4.1")]
      public static void GetnHistogram<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T5[] values) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnHistogramARB(target, reset, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnHistogramARB", Version = "4.1")]
      public static void GetnHistogram<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T5[,] values) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnHistogramARB(target, reset, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnHistogramARB", Version = "4.1")]
      public static void GetnHistogram<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T5[,,] values) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnHistogramARB(target, reset, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnHistogramARB", Version = "4.1")]
      public static void GetnHistogram<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] ref T5 values) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnHistogramARB(target, reset, format, type, bufSize, gcHandle.AddrOfPinnedObject());
          values = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMapdvARB", Version = "4.1")]
      public static unsafe void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glGetnMapdvARB(target, query, bufSize, v1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMapdvARB", Version = "4.1")]
      public static unsafe void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, out double v)
      {
        fixed (double* v1 = &v)
        {
          GL.Delegates.glGetnMapdvARB(target, query, bufSize, v1);
          v = *v1;
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMapdvARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] double* v)
      {
        GL.Delegates.glGetnMapdvARB(target, query, bufSize, v);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMapfvARB", Version = "4.1")]
      public static unsafe void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glGetnMapfvARB(target, query, bufSize, v1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMapfvARB", Version = "4.1")]
      public static unsafe void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, out float v)
      {
        fixed (float* v1 = &v)
        {
          GL.Delegates.glGetnMapfvARB(target, query, bufSize, v1);
          v = *v1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMapfvARB", Version = "4.1")]
      public static unsafe void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] float* v)
      {
        GL.Delegates.glGetnMapfvARB(target, query, bufSize, v);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMapivARB", Version = "4.1")]
      public static unsafe void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glGetnMapivARB(target, query, bufSize, v1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMapivARB", Version = "4.1")]
      public static unsafe void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, out int v)
      {
        fixed (int* v1 = &v)
        {
          GL.Delegates.glGetnMapivARB(target, query, bufSize, v1);
          v = *v1;
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMapivARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnMap(ArbRobustness target, ArbRobustness query, int bufSize, [Out] int* v)
      {
        GL.Delegates.glGetnMapivARB(target, query, bufSize, v);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMinmaxARB", Version = "4.1")]
      public static void GetnMinmax(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr values)
      {
        GL.Delegates.glGetnMinmaxARB(target, reset, format, type, bufSize, values);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMinmaxARB", Version = "4.1")]
      public static void GetnMinmax<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T5[] values) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnMinmaxARB(target, reset, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMinmaxARB", Version = "4.1")]
      public static void GetnMinmax<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T5[,] values) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnMinmaxARB(target, reset, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMinmaxARB", Version = "4.1")]
      public static void GetnMinmax<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T5[,,] values) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnMinmaxARB(target, reset, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnMinmaxARB", Version = "4.1")]
      public static void GetnMinmax<T5>(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] ref T5 values) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnMinmaxARB(target, reset, format, type, bufSize, gcHandle.AddrOfPinnedObject());
          values = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapfvARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] float[] values)
      {
        fixed (float* values1 = values)
          GL.Delegates.glGetnPixelMapfvARB(map, bufSize, values1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapfvARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, out float values)
      {
        fixed (float* values1 = &values)
        {
          GL.Delegates.glGetnPixelMapfvARB(map, bufSize, values1);
          values = *values1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapfvARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] float* values)
      {
        GL.Delegates.glGetnPixelMapfvARB(map, bufSize, values);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapuivARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] int[] values)
      {
        fixed (int* numPtr = values)
          GL.Delegates.glGetnPixelMapuivARB(map, bufSize, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapuivARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, out int values)
      {
        fixed (int* numPtr = &values)
        {
          GL.Delegates.glGetnPixelMapuivARB(map, bufSize, (uint*) numPtr);
          values = *numPtr;
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapuivARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] int* values)
      {
        GL.Delegates.glGetnPixelMapuivARB(map, bufSize, (uint*) values);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapuivARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] uint[] values)
      {
        fixed (uint* values1 = values)
          GL.Delegates.glGetnPixelMapuivARB(map, bufSize, values1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapuivARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, out uint values)
      {
        fixed (uint* values1 = &values)
        {
          GL.Delegates.glGetnPixelMapuivARB(map, bufSize, values1);
          values = *values1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapuivARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] uint* values)
      {
        GL.Delegates.glGetnPixelMapuivARB(map, bufSize, values);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapusvARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] short[] values)
      {
        fixed (short* numPtr = values)
          GL.Delegates.glGetnPixelMapusvARB(map, bufSize, (ushort*) numPtr);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapusvARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, out short values)
      {
        fixed (short* numPtr = &values)
        {
          GL.Delegates.glGetnPixelMapusvARB(map, bufSize, (ushort*) numPtr);
          values = *numPtr;
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapusvARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] short* values)
      {
        GL.Delegates.glGetnPixelMapusvARB(map, bufSize, (ushort*) values);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapusvARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] ushort[] values)
      {
        fixed (ushort* values1 = values)
          GL.Delegates.glGetnPixelMapusvARB(map, bufSize, values1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapusvARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, out ushort values)
      {
        fixed (ushort* values1 = &values)
        {
          GL.Delegates.glGetnPixelMapusvARB(map, bufSize, values1);
          values = *values1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPixelMapusvARB", Version = "4.1")]
      public static unsafe void GetnPixelMap(ArbRobustness map, int bufSize, [Out] ushort* values)
      {
        GL.Delegates.glGetnPixelMapusvARB(map, bufSize, values);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPolygonStippleARB", Version = "4.1")]
      public static unsafe void GetnPolygonStipple(int bufSize, [Out] byte[] pattern)
      {
        fixed (byte* pattern1 = pattern)
          GL.Delegates.glGetnPolygonStippleARB(bufSize, pattern1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPolygonStippleARB", Version = "4.1")]
      public static unsafe void GetnPolygonStipple(int bufSize, out byte pattern)
      {
        fixed (byte* pattern1 = &pattern)
        {
          GL.Delegates.glGetnPolygonStippleARB(bufSize, pattern1);
          pattern = *pattern1;
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnPolygonStippleARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnPolygonStipple(int bufSize, [Out] byte* pattern)
      {
        GL.Delegates.glGetnPolygonStippleARB(bufSize, pattern);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [Out] IntPtr column, [Out] IntPtr span)
      {
        GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [Out] IntPtr column, [In, Out] T7[] span) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [Out] IntPtr column, [In, Out] T7[,] span) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [Out] IntPtr column, [In, Out] T7[,,] span) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [Out] IntPtr column, [In, Out] ref T7 span) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, gcHandle.AddrOfPinnedObject());
          span = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [In, Out] T6[] column, [In, Out] T7[,,] span) where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [In, Out] T6[,] column, [In, Out] T7[,,] span) where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [In, Out] T6[,,] column, [In, Out] T7[,,] span) where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [In, Out] ref T6 column, [In, Out] T7[,,] span) where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
          column = (T6) gcHandle1.Target;
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T4, T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [In, Out] T4[] row, int columnBufSize, [In, Out] T6[,,] column, [In, Out] T7[,,] span) where T4 : struct where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, gcHandle1.AddrOfPinnedObject(), columnBufSize, gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
          gcHandle3.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T4, T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [In, Out] T4[,] row, int columnBufSize, [In, Out] T6[,,] column, [In, Out] T7[,,] span) where T4 : struct where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, gcHandle1.AddrOfPinnedObject(), columnBufSize, gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
          gcHandle3.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T4, T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [In, Out] T4[,,] row, int columnBufSize, [In, Out] T6[,,] column, [In, Out] T7[,,] span) where T4 : struct where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, gcHandle1.AddrOfPinnedObject(), columnBufSize, gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
          gcHandle3.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnSeparableFilterARB", Version = "4.1")]
      public static void GetnSeparableFilter<T4, T6, T7>(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [In, Out] ref T4 row, int columnBufSize, [In, Out] T6[,,] column, [In, Out] T7[,,] span) where T4 : struct where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnSeparableFilterARB(target, format, type, rowBufSize, gcHandle1.AddrOfPinnedObject(), columnBufSize, gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
          row = (T4) gcHandle1.Target;
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
          gcHandle3.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnTexImageARB", Version = "4.1")]
      public static void GetnTexImage(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr img)
      {
        GL.Delegates.glGetnTexImageARB(target, level, format, type, bufSize, img);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnTexImageARB", Version = "4.1")]
      public static void GetnTexImage<T5>(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T5[] img) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnTexImageARB(target, level, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnTexImageARB", Version = "4.1")]
      public static void GetnTexImage<T5>(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T5[,] img) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnTexImageARB(target, level, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnTexImageARB", Version = "4.1")]
      public static void GetnTexImage<T5>(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T5[,,] img) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnTexImageARB(target, level, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnTexImageARB", Version = "4.1")]
      public static void GetnTexImage<T5>(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] ref T5 img) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetnTexImageARB(target, level, format, type, bufSize, gcHandle.AddrOfPinnedObject());
          img = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformdvARB", Version = "4.1")]
      public static unsafe void GetnUniform(int program, int location, int bufSize, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetnUniformdvARB((uint) program, location, bufSize, params1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformdvARB", Version = "4.1")]
      public static unsafe void GetnUniform(int program, int location, int bufSize, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetnUniformdvARB((uint) program, location, bufSize, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformdvARB", Version = "4.1")]
      public static unsafe void GetnUniform(int program, int location, int bufSize, [Out] double* @params)
      {
        GL.Delegates.glGetnUniformdvARB((uint) program, location, bufSize, @params);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformdvARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetnUniformdvARB(program, location, bufSize, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformdvARB", Version = "4.1")]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetnUniformdvARB(program, location, bufSize, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformdvARB", Version = "4.1")]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, [Out] double* @params)
      {
        GL.Delegates.glGetnUniformdvARB(program, location, bufSize, @params);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformfvARB", Version = "4.1")]
      public static unsafe void GetnUniform(int program, int location, int bufSize, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetnUniformfvARB((uint) program, location, bufSize, params1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformfvARB", Version = "4.1")]
      public static unsafe void GetnUniform(int program, int location, int bufSize, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetnUniformfvARB((uint) program, location, bufSize, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformfvARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnUniform(int program, int location, int bufSize, [Out] float* @params)
      {
        GL.Delegates.glGetnUniformfvARB((uint) program, location, bufSize, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformfvARB", Version = "4.1")]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetnUniformfvARB(program, location, bufSize, params1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformfvARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetnUniformfvARB(program, location, bufSize, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformfvARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, [Out] float* @params)
      {
        GL.Delegates.glGetnUniformfvARB(program, location, bufSize, @params);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformivARB", Version = "4.1")]
      public static unsafe void GetnUniform(int program, int location, int bufSize, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetnUniformivARB((uint) program, location, bufSize, params1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformivARB", Version = "4.1")]
      public static unsafe void GetnUniform(int program, int location, int bufSize, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetnUniformivARB((uint) program, location, bufSize, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformivARB", Version = "4.1")]
      public static unsafe void GetnUniform(int program, int location, int bufSize, [Out] int* @params)
      {
        GL.Delegates.glGetnUniformivARB((uint) program, location, bufSize, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformivARB", Version = "4.1")]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetnUniformivARB(program, location, bufSize, params1);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformivARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetnUniformivARB(program, location, bufSize, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformivARB", Version = "4.1")]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, [Out] int* @params)
      {
        GL.Delegates.glGetnUniformivARB(program, location, bufSize, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformuivARB", Version = "4.1")]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetnUniformuivARB(program, location, bufSize, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformuivARB", Version = "4.1")]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetnUniformuivARB(program, location, bufSize, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glGetnUniformuivARB", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetnUniform(uint program, int location, int bufSize, [Out] uint* @params)
      {
        GL.Delegates.glGetnUniformuivARB(program, location, bufSize, @params);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterfvARB", Version = "1.2")]
      public static unsafe void GetObjectParameter(int obj, ArbShaderObjects pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetObjectParameterfvARB((uint) obj, pname, params1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterfvARB", Version = "1.2")]
      public static unsafe void GetObjectParameter(int obj, ArbShaderObjects pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetObjectParameterfvARB((uint) obj, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterfvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetObjectParameter(int obj, ArbShaderObjects pname, [Out] float* @params)
      {
        GL.Delegates.glGetObjectParameterfvARB((uint) obj, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterfvARB", Version = "1.2")]
      public static unsafe void GetObjectParameter(uint obj, ArbShaderObjects pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetObjectParameterfvARB(obj, pname, params1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterfvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetObjectParameter(uint obj, ArbShaderObjects pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetObjectParameterfvARB(obj, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterfvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetObjectParameter(uint obj, ArbShaderObjects pname, [Out] float* @params)
      {
        GL.Delegates.glGetObjectParameterfvARB(obj, pname, @params);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterivARB", Version = "1.2")]
      public static unsafe void GetObjectParameter(int obj, ArbShaderObjects pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetObjectParameterivARB((uint) obj, pname, params1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterivARB", Version = "1.2")]
      public static unsafe void GetObjectParameter(int obj, ArbShaderObjects pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetObjectParameterivARB((uint) obj, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterivARB", Version = "1.2")]
      public static unsafe void GetObjectParameter(int obj, ArbShaderObjects pname, [Out] int* @params)
      {
        GL.Delegates.glGetObjectParameterivARB((uint) obj, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterivARB", Version = "1.2")]
      public static unsafe void GetObjectParameter(uint obj, ArbShaderObjects pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetObjectParameterivARB(obj, pname, params1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetObjectParameter(uint obj, ArbShaderObjects pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetObjectParameterivARB(obj, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetObjectParameterivARB", Version = "1.2")]
      public static unsafe void GetObjectParameter(uint obj, ArbShaderObjects pname, [Out] int* @params)
      {
        GL.Delegates.glGetObjectParameterivARB(obj, pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterdvARB", Version = "1.3")]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, int index, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetProgramEnvParameterdvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterdvARB", Version = "1.3")]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, int index, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetProgramEnvParameterdvARB(target, (uint) index, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterdvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, int index, [Out] double* @params)
      {
        GL.Delegates.glGetProgramEnvParameterdvARB(target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterdvARB", Version = "1.3")]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, uint index, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetProgramEnvParameterdvARB(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterdvARB", Version = "1.3")]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, uint index, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetProgramEnvParameterdvARB(target, index, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterdvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, uint index, [Out] double* @params)
      {
        GL.Delegates.glGetProgramEnvParameterdvARB(target, index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterfvARB", Version = "1.3")]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, int index, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetProgramEnvParameterfvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterfvARB", Version = "1.3")]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, int index, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetProgramEnvParameterfvARB(target, (uint) index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterfvARB", Version = "1.3")]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, int index, [Out] float* @params)
      {
        GL.Delegates.glGetProgramEnvParameterfvARB(target, (uint) index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterfvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, uint index, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetProgramEnvParameterfvARB(target, index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterfvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, uint index, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetProgramEnvParameterfvARB(target, index, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramEnvParameterfvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramEnvParameter(ArbVertexProgram target, uint index, [Out] float* @params)
      {
        GL.Delegates.glGetProgramEnvParameterfvARB(target, index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramivARB", Version = "1.3")]
      public static unsafe void GetProgram(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetProgramivARB(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramivARB", Version = "1.3")]
      public static unsafe void GetProgram(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [Out] int* @params)
      {
        GL.Delegates.glGetProgramivARB(target, pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterdvARB", Version = "1.3")]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, int index, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetProgramLocalParameterdvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterdvARB", Version = "1.3")]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, int index, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetProgramLocalParameterdvARB(target, (uint) index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterdvARB", Version = "1.3")]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, int index, [Out] double* @params)
      {
        GL.Delegates.glGetProgramLocalParameterdvARB(target, (uint) index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterdvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, uint index, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetProgramLocalParameterdvARB(target, index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterdvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, uint index, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetProgramLocalParameterdvARB(target, index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterdvARB", Version = "1.3")]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, uint index, [Out] double* @params)
      {
        GL.Delegates.glGetProgramLocalParameterdvARB(target, index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterfvARB", Version = "1.3")]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, int index, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetProgramLocalParameterfvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterfvARB", Version = "1.3")]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, int index, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetProgramLocalParameterfvARB(target, (uint) index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterfvARB", Version = "1.3")]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, int index, [Out] float* @params)
      {
        GL.Delegates.glGetProgramLocalParameterfvARB(target, (uint) index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterfvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, uint index, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetProgramLocalParameterfvARB(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterfvARB", Version = "1.3")]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, uint index, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetProgramLocalParameterfvARB(target, index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramLocalParameterfvARB", Version = "1.3")]
      public static unsafe void GetProgramLocalParameter(ArbVertexProgram target, uint index, [Out] float* @params)
      {
        GL.Delegates.glGetProgramLocalParameterfvARB(target, index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramStringARB", Version = "1.3")]
      public static void GetProgramString(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [Out] IntPtr @string)
      {
        GL.Delegates.glGetProgramStringARB(target, pname, @string);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramStringARB", Version = "1.3")]
      public static void GetProgramString<T2>(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [In, Out] T2[] @string) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramStringARB(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramStringARB", Version = "1.3")]
      public static void GetProgramString<T2>(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [In, Out] T2[,] @string) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramStringARB(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramStringARB", Version = "1.3")]
      public static void GetProgramString<T2>(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [In, Out] T2[,,] @string) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramStringARB(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetProgramStringARB", Version = "1.3")]
      public static void GetProgramString<T2>(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [In, Out] ref T2 @string) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramStringARB(target, pname, gcHandle.AddrOfPinnedObject());
          @string = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryivARB", Version = "1.5")]
      public static unsafe void GetQuery(ArbOcclusionQuery target, ArbOcclusionQuery pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetQueryivARB(target, pname, params1);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryivARB", Version = "1.5")]
      public static unsafe void GetQuery(ArbOcclusionQuery target, ArbOcclusionQuery pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetQueryivARB(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryivARB", Version = "1.5")]
      public static unsafe void GetQuery(ArbOcclusionQuery target, ArbOcclusionQuery pname, [Out] int* @params)
      {
        GL.Delegates.glGetQueryivARB(target, pname, @params);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryObjectivARB", Version = "1.5")]
      public static unsafe void GetQueryObject(int id, ArbOcclusionQuery pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetQueryObjectivARB((uint) id, pname, params1);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryObjectivARB", Version = "1.5")]
      public static unsafe void GetQueryObject(int id, ArbOcclusionQuery pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetQueryObjectivARB((uint) id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryObjectivARB", Version = "1.5")]
      public static unsafe void GetQueryObject(int id, ArbOcclusionQuery pname, [Out] int* @params)
      {
        GL.Delegates.glGetQueryObjectivARB((uint) id, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryObjectivARB", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ArbOcclusionQuery pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetQueryObjectivARB(id, pname, params1);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryObjectivARB", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GetQueryObject(uint id, ArbOcclusionQuery pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetQueryObjectivARB(id, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryObjectivARB", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GetQueryObject(uint id, ArbOcclusionQuery pname, [Out] int* @params)
      {
        GL.Delegates.glGetQueryObjectivARB(id, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryObjectuivARB", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ArbOcclusionQuery pname, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetQueryObjectuivARB(id, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryObjectuivARB", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ArbOcclusionQuery pname, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetQueryObjectuivARB(id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glGetQueryObjectuivARB", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ArbOcclusionQuery pname, [Out] uint* @params)
      {
        GL.Delegates.glGetQueryObjectuivARB(id, pname, @params);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetShaderSourceARB", Version = "1.2")]
      public static unsafe void GetShaderSource(int obj, int maxLength, out int length, [Out] StringBuilder source)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetShaderSourceARB((uint) obj, maxLength, length1, source);
          length = *length1;
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetShaderSourceARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetShaderSource(int obj, int maxLength, [Out] int* length, [Out] StringBuilder source)
      {
        GL.Delegates.glGetShaderSourceARB((uint) obj, maxLength, length, source);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetShaderSourceARB", Version = "1.2")]
      public static unsafe void GetShaderSource(uint obj, int maxLength, out int length, [Out] StringBuilder source)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetShaderSourceARB(obj, maxLength, length1, source);
          length = *length1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetShaderSourceARB", Version = "1.2")]
      public static unsafe void GetShaderSource(uint obj, int maxLength, [Out] int* length, [Out] StringBuilder source)
      {
        GL.Delegates.glGetShaderSourceARB(obj, maxLength, length, source);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformfvARB", Version = "1.2")]
      public static unsafe void GetUniform(int programObj, int location, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetUniformfvARB((uint) programObj, location, params1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformfvARB", Version = "1.2")]
      public static unsafe void GetUniform(int programObj, int location, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetUniformfvARB((uint) programObj, location, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformfvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(int programObj, int location, [Out] float* @params)
      {
        GL.Delegates.glGetUniformfvARB((uint) programObj, location, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformfvARB", Version = "1.2")]
      public static unsafe void GetUniform(uint programObj, int location, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetUniformfvARB(programObj, location, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformfvARB", Version = "1.2")]
      public static unsafe void GetUniform(uint programObj, int location, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetUniformfvARB(programObj, location, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformfvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(uint programObj, int location, [Out] float* @params)
      {
        GL.Delegates.glGetUniformfvARB(programObj, location, @params);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformivARB", Version = "1.2")]
      public static unsafe void GetUniform(int programObj, int location, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetUniformivARB((uint) programObj, location, params1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformivARB", Version = "1.2")]
      public static unsafe void GetUniform(int programObj, int location, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetUniformivARB((uint) programObj, location, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(int programObj, int location, [Out] int* @params)
      {
        GL.Delegates.glGetUniformivARB((uint) programObj, location, @params);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(uint programObj, int location, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetUniformivARB(programObj, location, params1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(uint programObj, int location, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetUniformivARB(programObj, location, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(uint programObj, int location, [Out] int* @params)
      {
        GL.Delegates.glGetUniformivARB(programObj, location, @params);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformLocationARB", Version = "1.2")]
      public static int GetUniformLocation(int programObj, string name)
      {
        return GL.Delegates.glGetUniformLocationARB((uint) programObj, name);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glGetUniformLocationARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static int GetUniformLocation(uint programObj, string name)
      {
        return GL.Delegates.glGetUniformLocationARB(programObj, name);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribdvARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetVertexAttribdvARB((uint) index, pname, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribdvARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(int index, VertexAttribParameterArb pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribdvARB((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribdvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] double* @params)
      {
        GL.Delegates.glGetVertexAttribdvARB((uint) index, pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribdvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetVertexAttribdvARB(index, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribdvARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(uint index, VertexAttribParameterArb pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribdvARB(index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribdvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] double* @params)
      {
        GL.Delegates.glGetVertexAttribdvARB(index, pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribfvARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetVertexAttribfvARB((uint) index, pname, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribfvARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(int index, VertexAttribParameterArb pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribfvARB((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribfvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] float* @params)
      {
        GL.Delegates.glGetVertexAttribfvARB((uint) index, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribfvARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetVertexAttribfvARB(index, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribfvARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(uint index, VertexAttribParameterArb pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribfvARB(index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribfvARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] float* @params)
      {
        GL.Delegates.glGetVertexAttribfvARB(index, pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribivARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVertexAttribivARB((uint) index, pname, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribivARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(int index, VertexAttribParameterArb pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribivARB((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribivARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(int index, VertexAttribParameterArb pname, [Out] int* @params)
      {
        GL.Delegates.glGetVertexAttribivARB((uint) index, pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribivARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVertexAttribivARB(index, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribivARB", Version = "1.3")]
      public static unsafe void GetVertexAttrib(uint index, VertexAttribParameterArb pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribivARB(index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribivARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, VertexAttribParameterArb pname, [Out] int* @params)
      {
        GL.Delegates.glGetVertexAttribivARB(index, pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      public static void GetVertexAttribPointer(int index, VertexAttribPointerParameterArb pname, [Out] IntPtr pointer)
      {
        GL.Delegates.glGetVertexAttribPointervARB((uint) index, pname, pointer);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameterArb pname, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervARB((uint) index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameterArb pname, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervARB((uint) index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameterArb pname, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervARB((uint) index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameterArb pname, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervARB((uint) index, pname, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      public static void GetVertexAttribPointer(uint index, VertexAttribPointerParameterArb pname, [Out] IntPtr pointer)
      {
        GL.Delegates.glGetVertexAttribPointervARB(index, pname, pointer);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameterArb pname, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervARB(index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameterArb pname, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervARB(index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameterArb pname, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervARB(index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glGetVertexAttribPointervARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameterArb pname, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervARB(index, pname, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glIsBufferARB", Version = "1.2")]
      public static bool IsBuffer(int buffer)
      {
        return GL.Delegates.glIsBufferARB((uint) buffer);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glIsBufferARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static bool IsBuffer(uint buffer)
      {
        return GL.Delegates.glIsBufferARB(buffer);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glIsNamedStringARB", Version = "1.2")]
      public static bool IsNamedString(int namelen, string name)
      {
        return GL.Delegates.glIsNamedStringARB(namelen, name);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glIsProgramARB", Version = "1.3")]
      public static bool IsProgram(int program)
      {
        return GL.Delegates.glIsProgramARB((uint) program);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glIsProgramARB", Version = "1.3")]
      public static bool IsProgram(uint program)
      {
        return GL.Delegates.glIsProgramARB(program);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glIsQueryARB", Version = "1.5")]
      public static bool IsQuery(int id)
      {
        return GL.Delegates.glIsQueryARB((uint) id);
      }

      [AutoGenerated(Category = "ARB_occlusion_query", EntryPoint = "glIsQueryARB", Version = "1.5")]
      [CLSCompliant(false)]
      public static bool IsQuery(uint id)
      {
        return GL.Delegates.glIsQueryARB(id);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glLinkProgramARB", Version = "1.2")]
      public static void LinkProgram(int programObj)
      {
        GL.Delegates.glLinkProgramARB((uint) programObj);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glLinkProgramARB", Version = "1.2")]
      public static void LinkProgram(uint programObj)
      {
        GL.Delegates.glLinkProgramARB(programObj);
      }

      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glLoadTransposeMatrixdARB", Version = "1.2")]
      public static unsafe void LoadTransposeMatrix(double[] m)
      {
        fixed (double* m1 = m)
          GL.Delegates.glLoadTransposeMatrixdARB(m1);
      }

      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glLoadTransposeMatrixdARB", Version = "1.2")]
      public static unsafe void LoadTransposeMatrix(ref double m)
      {
        fixed (double* m1 = &m)
          GL.Delegates.glLoadTransposeMatrixdARB(m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glLoadTransposeMatrixdARB", Version = "1.2")]
      public static unsafe void LoadTransposeMatrix(double* m)
      {
        GL.Delegates.glLoadTransposeMatrixdARB(m);
      }

      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glLoadTransposeMatrixfARB", Version = "1.2")]
      public static unsafe void LoadTransposeMatrix(float[] m)
      {
        fixed (float* m1 = m)
          GL.Delegates.glLoadTransposeMatrixfARB(m1);
      }

      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glLoadTransposeMatrixfARB", Version = "1.2")]
      public static unsafe void LoadTransposeMatrix(ref float m)
      {
        fixed (float* m1 = &m)
          GL.Delegates.glLoadTransposeMatrixfARB(m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glLoadTransposeMatrixfARB", Version = "1.2")]
      public static unsafe void LoadTransposeMatrix(float* m)
      {
        GL.Delegates.glLoadTransposeMatrixfARB(m);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glMapBufferARB", Version = "1.2")]
      public static IntPtr MapBuffer(BufferTargetArb target, ArbVertexBufferObject access)
      {
        return GL.Delegates.glMapBufferARB(target, access);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexPointerARB", Version = "1.1")]
      public static void MatrixIndexPointer(int size, ArbMatrixPalette type, int stride, IntPtr pointer)
      {
        GL.Delegates.glMatrixIndexPointerARB(size, type, stride, pointer);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexPointerARB", Version = "1.1")]
      public static void MatrixIndexPointer<T3>(int size, ArbMatrixPalette type, int stride, [In, Out] T3[] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMatrixIndexPointerARB(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexPointerARB", Version = "1.1")]
      public static void MatrixIndexPointer<T3>(int size, ArbMatrixPalette type, int stride, [In, Out] T3[,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMatrixIndexPointerARB(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexPointerARB", Version = "1.1")]
      public static void MatrixIndexPointer<T3>(int size, ArbMatrixPalette type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMatrixIndexPointerARB(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexPointerARB", Version = "1.1")]
      public static void MatrixIndexPointer<T3>(int size, ArbMatrixPalette type, int stride, [In, Out] ref T3 pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMatrixIndexPointerARB(size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexubvARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, byte[] indices)
      {
        fixed (byte* indices1 = indices)
          GL.Delegates.glMatrixIndexubvARB(size, indices1);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexubvARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, ref byte indices)
      {
        fixed (byte* indices1 = &indices)
          GL.Delegates.glMatrixIndexubvARB(size, indices1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexubvARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, byte* indices)
      {
        GL.Delegates.glMatrixIndexubvARB(size, indices);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexuivARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, int[] indices)
      {
        fixed (int* numPtr = indices)
          GL.Delegates.glMatrixIndexuivARB(size, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexuivARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, ref int indices)
      {
        fixed (int* numPtr = &indices)
          GL.Delegates.glMatrixIndexuivARB(size, (uint*) numPtr);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexuivARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MatrixIndex(int size, int* indices)
      {
        GL.Delegates.glMatrixIndexuivARB(size, (uint*) indices);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexuivARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, uint[] indices)
      {
        fixed (uint* indices1 = indices)
          GL.Delegates.glMatrixIndexuivARB(size, indices1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexuivARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, ref uint indices)
      {
        fixed (uint* indices1 = &indices)
          GL.Delegates.glMatrixIndexuivARB(size, indices1);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexuivARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MatrixIndex(int size, uint* indices)
      {
        GL.Delegates.glMatrixIndexuivARB(size, indices);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexusvARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, short[] indices)
      {
        fixed (short* numPtr = indices)
          GL.Delegates.glMatrixIndexusvARB(size, (ushort*) numPtr);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexusvARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, ref short indices)
      {
        fixed (short* numPtr = &indices)
          GL.Delegates.glMatrixIndexusvARB(size, (ushort*) numPtr);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexusvARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MatrixIndex(int size, short* indices)
      {
        GL.Delegates.glMatrixIndexusvARB(size, (ushort*) indices);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexusvARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, ushort[] indices)
      {
        fixed (ushort* indices1 = indices)
          GL.Delegates.glMatrixIndexusvARB(size, indices1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexusvARB", Version = "1.1")]
      public static unsafe void MatrixIndex(int size, ref ushort indices)
      {
        fixed (ushort* indices1 = &indices)
          GL.Delegates.glMatrixIndexusvARB(size, indices1);
      }

      [AutoGenerated(Category = "ARB_matrix_palette", EntryPoint = "glMatrixIndexusvARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MatrixIndex(int size, ushort* indices)
      {
        GL.Delegates.glMatrixIndexusvARB(size, indices);
      }

      [AutoGenerated(Category = "ARB_sample_shading", EntryPoint = "glMinSampleShadingARB", Version = "1.2")]
      public static void MinSampleShading(float value)
      {
        GL.Delegates.glMinSampleShadingARB(value);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord1dARB", Version = "1.2")]
      public static void MultiTexCoord1(TextureUnit target, double s)
      {
        GL.Delegates.glMultiTexCoord1dARB(target, s);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord1dvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord1(TextureUnit target, double* v)
      {
        GL.Delegates.glMultiTexCoord1dvARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord1fARB", Version = "1.2")]
      public static void MultiTexCoord1(TextureUnit target, float s)
      {
        GL.Delegates.glMultiTexCoord1fARB(target, s);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord1fvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord1(TextureUnit target, float* v)
      {
        GL.Delegates.glMultiTexCoord1fvARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord1iARB", Version = "1.2")]
      public static void MultiTexCoord1(TextureUnit target, int s)
      {
        GL.Delegates.glMultiTexCoord1iARB(target, s);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord1ivARB", Version = "1.2")]
      public static unsafe void MultiTexCoord1(TextureUnit target, int* v)
      {
        GL.Delegates.glMultiTexCoord1ivARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord1sARB", Version = "1.2")]
      public static void MultiTexCoord1(TextureUnit target, short s)
      {
        GL.Delegates.glMultiTexCoord1sARB(target, s);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord1svARB", Version = "1.2")]
      public static unsafe void MultiTexCoord1(TextureUnit target, short* v)
      {
        GL.Delegates.glMultiTexCoord1svARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2dARB", Version = "1.2")]
      public static void MultiTexCoord2(TextureUnit target, double s, double t)
      {
        GL.Delegates.glMultiTexCoord2dARB(target, s, t);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2dvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glMultiTexCoord2dvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2dvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glMultiTexCoord2dvARB(target, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2dvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, double* v)
      {
        GL.Delegates.glMultiTexCoord2dvARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2fARB", Version = "1.2")]
      public static void MultiTexCoord2(TextureUnit target, float s, float t)
      {
        GL.Delegates.glMultiTexCoord2fARB(target, s, t);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2fvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glMultiTexCoord2fvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2fvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glMultiTexCoord2fvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2fvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord2(TextureUnit target, float* v)
      {
        GL.Delegates.glMultiTexCoord2fvARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2iARB", Version = "1.2")]
      public static void MultiTexCoord2(TextureUnit target, int s, int t)
      {
        GL.Delegates.glMultiTexCoord2iARB(target, s, t);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2ivARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glMultiTexCoord2ivARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2ivARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glMultiTexCoord2ivARB(target, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2ivARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, int* v)
      {
        GL.Delegates.glMultiTexCoord2ivARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2sARB", Version = "1.2")]
      public static void MultiTexCoord2(TextureUnit target, short s, short t)
      {
        GL.Delegates.glMultiTexCoord2sARB(target, s, t);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2svARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glMultiTexCoord2svARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2svARB", Version = "1.2")]
      public static unsafe void MultiTexCoord2(TextureUnit target, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glMultiTexCoord2svARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord2svARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord2(TextureUnit target, short* v)
      {
        GL.Delegates.glMultiTexCoord2svARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3dARB", Version = "1.2")]
      public static void MultiTexCoord3(TextureUnit target, double s, double t, double r)
      {
        GL.Delegates.glMultiTexCoord3dARB(target, s, t, r);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3dvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glMultiTexCoord3dvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3dvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glMultiTexCoord3dvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3dvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord3(TextureUnit target, double* v)
      {
        GL.Delegates.glMultiTexCoord3dvARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3fARB", Version = "1.2")]
      public static void MultiTexCoord3(TextureUnit target, float s, float t, float r)
      {
        GL.Delegates.glMultiTexCoord3fARB(target, s, t, r);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3fvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glMultiTexCoord3fvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3fvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glMultiTexCoord3fvARB(target, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3fvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, float* v)
      {
        GL.Delegates.glMultiTexCoord3fvARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3iARB", Version = "1.2")]
      public static void MultiTexCoord3(TextureUnit target, int s, int t, int r)
      {
        GL.Delegates.glMultiTexCoord3iARB(target, s, t, r);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3ivARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glMultiTexCoord3ivARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3ivARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glMultiTexCoord3ivARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3ivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord3(TextureUnit target, int* v)
      {
        GL.Delegates.glMultiTexCoord3ivARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3sARB", Version = "1.2")]
      public static void MultiTexCoord3(TextureUnit target, short s, short t, short r)
      {
        GL.Delegates.glMultiTexCoord3sARB(target, s, t, r);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3svARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glMultiTexCoord3svARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3svARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glMultiTexCoord3svARB(target, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord3svARB", Version = "1.2")]
      public static unsafe void MultiTexCoord3(TextureUnit target, short* v)
      {
        GL.Delegates.glMultiTexCoord3svARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4dARB", Version = "1.2")]
      public static void MultiTexCoord4(TextureUnit target, double s, double t, double r, double q)
      {
        GL.Delegates.glMultiTexCoord4dARB(target, s, t, r, q);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4dvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord4(TextureUnit target, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glMultiTexCoord4dvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4dvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord4(TextureUnit target, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glMultiTexCoord4dvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4dvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord4(TextureUnit target, double* v)
      {
        GL.Delegates.glMultiTexCoord4dvARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4fARB", Version = "1.2")]
      public static void MultiTexCoord4(TextureUnit target, float s, float t, float r, float q)
      {
        GL.Delegates.glMultiTexCoord4fARB(target, s, t, r, q);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4fvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord4(TextureUnit target, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glMultiTexCoord4fvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4fvARB", Version = "1.2")]
      public static unsafe void MultiTexCoord4(TextureUnit target, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glMultiTexCoord4fvARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4fvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord4(TextureUnit target, float* v)
      {
        GL.Delegates.glMultiTexCoord4fvARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4iARB", Version = "1.2")]
      public static void MultiTexCoord4(TextureUnit target, int s, int t, int r, int q)
      {
        GL.Delegates.glMultiTexCoord4iARB(target, s, t, r, q);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4ivARB", Version = "1.2")]
      public static unsafe void MultiTexCoord4(TextureUnit target, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glMultiTexCoord4ivARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4ivARB", Version = "1.2")]
      public static unsafe void MultiTexCoord4(TextureUnit target, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glMultiTexCoord4ivARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4ivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord4(TextureUnit target, int* v)
      {
        GL.Delegates.glMultiTexCoord4ivARB(target, v);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4sARB", Version = "1.2")]
      public static void MultiTexCoord4(TextureUnit target, short s, short t, short r, short q)
      {
        GL.Delegates.glMultiTexCoord4sARB(target, s, t, r, q);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4svARB", Version = "1.2")]
      public static unsafe void MultiTexCoord4(TextureUnit target, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glMultiTexCoord4svARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4svARB", Version = "1.2")]
      public static unsafe void MultiTexCoord4(TextureUnit target, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glMultiTexCoord4svARB(target, v1);
      }

      [AutoGenerated(Category = "ARB_multitexture", EntryPoint = "glMultiTexCoord4svARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord4(TextureUnit target, short* v)
      {
        GL.Delegates.glMultiTexCoord4svARB(target, v);
      }

      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glMultTransposeMatrixdARB", Version = "1.2")]
      public static unsafe void MultTransposeMatrix(double[] m)
      {
        fixed (double* m1 = m)
          GL.Delegates.glMultTransposeMatrixdARB(m1);
      }

      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glMultTransposeMatrixdARB", Version = "1.2")]
      public static unsafe void MultTransposeMatrix(ref double m)
      {
        fixed (double* m1 = &m)
          GL.Delegates.glMultTransposeMatrixdARB(m1);
      }

      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glMultTransposeMatrixdARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultTransposeMatrix(double* m)
      {
        GL.Delegates.glMultTransposeMatrixdARB(m);
      }

      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glMultTransposeMatrixfARB", Version = "1.2")]
      public static unsafe void MultTransposeMatrix(float[] m)
      {
        fixed (float* m1 = m)
          GL.Delegates.glMultTransposeMatrixfARB(m1);
      }

      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glMultTransposeMatrixfARB", Version = "1.2")]
      public static unsafe void MultTransposeMatrix(ref float m)
      {
        fixed (float* m1 = &m)
          GL.Delegates.glMultTransposeMatrixfARB(m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_transpose_matrix", EntryPoint = "glMultTransposeMatrixfARB", Version = "1.2")]
      public static unsafe void MultTransposeMatrix(float* m)
      {
        GL.Delegates.glMultTransposeMatrixfARB(m);
      }

      [AutoGenerated(Category = "ARB_shading_language_include", EntryPoint = "glNamedStringARB", Version = "1.2")]
      public static void NamedString(ArbShadingLanguageInclude type, int namelen, string name, int stringlen, string @string)
      {
        GL.Delegates.glNamedStringARB(type, namelen, name, stringlen, @string);
      }

      [AutoGenerated(Category = "ARB_point_parameters", EntryPoint = "glPointParameterfARB", Version = "1.0")]
      public static void PointParameter(ArbPointParameters pname, float param)
      {
        GL.Delegates.glPointParameterfARB(pname, param);
      }

      [AutoGenerated(Category = "ARB_point_parameters", EntryPoint = "glPointParameterfvARB", Version = "1.0")]
      public static unsafe void PointParameter(ArbPointParameters pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glPointParameterfvARB(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_point_parameters", EntryPoint = "glPointParameterfvARB", Version = "1.0")]
      public static unsafe void PointParameter(ArbPointParameters pname, float* @params)
      {
        GL.Delegates.glPointParameterfvARB(pname, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4dARB", Version = "1.3")]
      public static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramEnvParameter4dARB(target, (uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4dARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramEnvParameter4dARB(target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4dvARB", Version = "1.3")]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glProgramEnvParameter4dvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4dvARB", Version = "1.3")]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, ref double @params)
      {
        fixed (double* params1 = &@params)
          GL.Delegates.glProgramEnvParameter4dvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, double* @params)
      {
        GL.Delegates.glProgramEnvParameter4dvARB(target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4dvARB", Version = "1.3")]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glProgramEnvParameter4dvARB(target, index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, ref double @params)
      {
        fixed (double* params1 = &@params)
          GL.Delegates.glProgramEnvParameter4dvARB(target, index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, double* @params)
      {
        GL.Delegates.glProgramEnvParameter4dvARB(target, index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4fARB", Version = "1.3")]
      public static void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, float x, float y, float z, float w)
      {
        GL.Delegates.glProgramEnvParameter4fARB(target, (uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4fARB", Version = "1.3")]
      public static void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w)
      {
        GL.Delegates.glProgramEnvParameter4fARB(target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4fvARB", Version = "1.3")]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramEnvParameter4fvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4fvARB", Version = "1.3")]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramEnvParameter4fvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, int index, float* @params)
      {
        GL.Delegates.glProgramEnvParameter4fvARB(target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4fvARB", Version = "1.3")]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramEnvParameter4fvARB(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4fvARB", Version = "1.3")]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramEnvParameter4fvARB(target, index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramEnvParameter4fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParameter4(AssemblyProgramTargetArb target, uint index, float* @params)
      {
        GL.Delegates.glProgramEnvParameter4fvARB(target, index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4dARB", Version = "1.3")]
      public static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramLocalParameter4dARB(target, (uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4dARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramLocalParameter4dARB(target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4dvARB", Version = "1.3")]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glProgramLocalParameter4dvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4dvARB", Version = "1.3")]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, ref double @params)
      {
        fixed (double* params1 = &@params)
          GL.Delegates.glProgramLocalParameter4dvARB(target, (uint) index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4dvARB", Version = "1.3")]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, double* @params)
      {
        GL.Delegates.glProgramLocalParameter4dvARB(target, (uint) index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glProgramLocalParameter4dvARB(target, index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, ref double @params)
      {
        fixed (double* params1 = &@params)
          GL.Delegates.glProgramLocalParameter4dvARB(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4dvARB", Version = "1.3")]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, double* @params)
      {
        GL.Delegates.glProgramLocalParameter4dvARB(target, index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4fARB", Version = "1.3")]
      public static void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, float x, float y, float z, float w)
      {
        GL.Delegates.glProgramLocalParameter4fARB(target, (uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4fARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w)
      {
        GL.Delegates.glProgramLocalParameter4fARB(target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4fvARB", Version = "1.3")]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramLocalParameter4fvARB(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4fvARB", Version = "1.3")]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramLocalParameter4fvARB(target, (uint) index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4fvARB", Version = "1.3")]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, int index, float* @params)
      {
        GL.Delegates.glProgramLocalParameter4fvARB(target, (uint) index, @params);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramLocalParameter4fvARB(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4fvARB", Version = "1.3")]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramLocalParameter4fvARB(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramLocalParameter4fvARB", Version = "1.3")]
      public static unsafe void ProgramLocalParameter4(AssemblyProgramTargetArb target, uint index, float* @params)
      {
        GL.Delegates.glProgramLocalParameter4fvARB(target, index, @params);
      }

      [AutoGenerated(Category = "ARB_geometry_shader4", EntryPoint = "glProgramParameteriARB", Version = "3.0")]
      public static void ProgramParameter(int program, AssemblyProgramParameterArb pname, int value)
      {
        GL.Delegates.glProgramParameteriARB((uint) program, pname, value);
      }

      [AutoGenerated(Category = "ARB_geometry_shader4", EntryPoint = "glProgramParameteriARB", Version = "3.0")]
      [CLSCompliant(false)]
      public static void ProgramParameter(uint program, AssemblyProgramParameterArb pname, int value)
      {
        GL.Delegates.glProgramParameteriARB(program, pname, value);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramStringARB", Version = "1.3")]
      public static void ProgramString(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, IntPtr @string)
      {
        GL.Delegates.glProgramStringARB(target, format, len, @string);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramStringARB", Version = "1.3")]
      public static void ProgramString<T3>(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, [In, Out] T3[] @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramStringARB(target, format, len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramStringARB", Version = "1.3")]
      public static void ProgramString<T3>(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, [In, Out] T3[,] @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramStringARB(target, format, len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramStringARB", Version = "1.3")]
      public static void ProgramString<T3>(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, [In, Out] T3[,,] @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramStringARB(target, format, len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glProgramStringARB", Version = "1.3")]
      public static void ProgramString<T3>(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, [In, Out] ref T3 @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramStringARB(target, format, len, gcHandle.AddrOfPinnedObject());
          @string = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glReadnPixelsARB", Version = "4.1")]
      public static void ReadnPixels(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr data)
      {
        GL.Delegates.glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glReadnPixelsARB", Version = "4.1")]
      public static void ReadnPixels<T7>(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T7[] data) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glReadnPixelsARB(x, y, width, height, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glReadnPixelsARB", Version = "4.1")]
      public static void ReadnPixels<T7>(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T7[,] data) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glReadnPixelsARB(x, y, width, height, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glReadnPixelsARB", Version = "4.1")]
      public static void ReadnPixels<T7>(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] T7[,,] data) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glReadnPixelsARB(x, y, width, height, format, type, bufSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_robustness", EntryPoint = "glReadnPixelsARB", Version = "4.1")]
      public static void ReadnPixels<T7>(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [In, Out] ref T7 data) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glReadnPixelsARB(x, y, width, height, format, type, bufSize, gcHandle.AddrOfPinnedObject());
          data = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_multisample", EntryPoint = "glSampleCoverageARB", Version = "1.2")]
      public static void SampleCoverage(float value, bool invert)
      {
        GL.Delegates.glSampleCoverageARB(value, invert);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glShaderSourceARB", Version = "1.2")]
      public static unsafe void ShaderSource(int shaderObj, int count, string[] @string, ref int length)
      {
        fixed (int* length1 = &length)
          GL.Delegates.glShaderSourceARB((uint) shaderObj, count, @string, length1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glShaderSourceARB", Version = "1.2")]
      public static unsafe void ShaderSource(int shaderObj, int count, string[] @string, int* length)
      {
        GL.Delegates.glShaderSourceARB((uint) shaderObj, count, @string, length);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glShaderSourceARB", Version = "1.2")]
      public static unsafe void ShaderSource(uint shaderObj, int count, string[] @string, ref int length)
      {
        fixed (int* length1 = &length)
          GL.Delegates.glShaderSourceARB(shaderObj, count, @string, length1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glShaderSourceARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ShaderSource(uint shaderObj, int count, string[] @string, int* length)
      {
        GL.Delegates.glShaderSourceARB(shaderObj, count, @string, length);
      }

      [AutoGenerated(Category = "ARB_texture_buffer_object", EntryPoint = "glTexBufferARB", Version = "3.0")]
      public static void TexBuffer(TextureTarget target, ArbTextureBufferObject internalformat, int buffer)
      {
        GL.Delegates.glTexBufferARB(target, internalformat, (uint) buffer);
      }

      [AutoGenerated(Category = "ARB_texture_buffer_object", EntryPoint = "glTexBufferARB", Version = "3.0")]
      [CLSCompliant(false)]
      public static void TexBuffer(TextureTarget target, ArbTextureBufferObject internalformat, uint buffer)
      {
        GL.Delegates.glTexBufferARB(target, internalformat, buffer);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform1fARB", Version = "1.2")]
      public static void Uniform1(int location, float v0)
      {
        GL.Delegates.glUniform1fARB(location, v0);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform1fvARB", Version = "1.2")]
      public static unsafe void Uniform1(int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glUniform1fvARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform1fvARB", Version = "1.2")]
      public static unsafe void Uniform1(int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glUniform1fvARB(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform1fvARB", Version = "1.2")]
      public static unsafe void Uniform1(int location, int count, float* value)
      {
        GL.Delegates.glUniform1fvARB(location, count, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform1iARB", Version = "1.2")]
      public static void Uniform1(int location, int v0)
      {
        GL.Delegates.glUniform1iARB(location, v0);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform1ivARB", Version = "1.2")]
      public static unsafe void Uniform1(int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glUniform1ivARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform1ivARB", Version = "1.2")]
      public static unsafe void Uniform1(int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glUniform1ivARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform1ivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Uniform1(int location, int count, int* value)
      {
        GL.Delegates.glUniform1ivARB(location, count, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform2fARB", Version = "1.2")]
      public static void Uniform2(int location, float v0, float v1)
      {
        GL.Delegates.glUniform2fARB(location, v0, v1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform2fvARB", Version = "1.2")]
      public static unsafe void Uniform2(int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glUniform2fvARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform2fvARB", Version = "1.2")]
      public static unsafe void Uniform2(int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glUniform2fvARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform2fvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Uniform2(int location, int count, float* value)
      {
        GL.Delegates.glUniform2fvARB(location, count, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform2iARB", Version = "1.2")]
      public static void Uniform2(int location, int v0, int v1)
      {
        GL.Delegates.glUniform2iARB(location, v0, v1);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform2ivARB", Version = "1.2")]
      public static unsafe void Uniform2(int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glUniform2ivARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform2ivARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Uniform2(int location, int count, int* value)
      {
        GL.Delegates.glUniform2ivARB(location, count, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform3fARB", Version = "1.2")]
      public static void Uniform3(int location, float v0, float v1, float v2)
      {
        GL.Delegates.glUniform3fARB(location, v0, v1, v2);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform3fvARB", Version = "1.2")]
      public static unsafe void Uniform3(int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glUniform3fvARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform3fvARB", Version = "1.2")]
      public static unsafe void Uniform3(int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glUniform3fvARB(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform3fvARB", Version = "1.2")]
      public static unsafe void Uniform3(int location, int count, float* value)
      {
        GL.Delegates.glUniform3fvARB(location, count, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform3iARB", Version = "1.2")]
      public static void Uniform3(int location, int v0, int v1, int v2)
      {
        GL.Delegates.glUniform3iARB(location, v0, v1, v2);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform3ivARB", Version = "1.2")]
      public static unsafe void Uniform3(int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glUniform3ivARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform3ivARB", Version = "1.2")]
      public static unsafe void Uniform3(int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glUniform3ivARB(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform3ivARB", Version = "1.2")]
      public static unsafe void Uniform3(int location, int count, int* value)
      {
        GL.Delegates.glUniform3ivARB(location, count, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform4fARB", Version = "1.2")]
      public static void Uniform4(int location, float v0, float v1, float v2, float v3)
      {
        GL.Delegates.glUniform4fARB(location, v0, v1, v2, v3);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform4fvARB", Version = "1.2")]
      public static unsafe void Uniform4(int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glUniform4fvARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform4fvARB", Version = "1.2")]
      public static unsafe void Uniform4(int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glUniform4fvARB(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform4fvARB", Version = "1.2")]
      public static unsafe void Uniform4(int location, int count, float* value)
      {
        GL.Delegates.glUniform4fvARB(location, count, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform4iARB", Version = "1.2")]
      public static void Uniform4(int location, int v0, int v1, int v2, int v3)
      {
        GL.Delegates.glUniform4iARB(location, v0, v1, v2, v3);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform4ivARB", Version = "1.2")]
      public static unsafe void Uniform4(int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glUniform4ivARB(location, count, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform4ivARB", Version = "1.2")]
      public static unsafe void Uniform4(int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glUniform4ivARB(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniform4ivARB", Version = "1.2")]
      public static unsafe void Uniform4(int location, int count, int* value)
      {
        GL.Delegates.glUniform4ivARB(location, count, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniformMatrix2fvARB", Version = "1.2")]
      public static unsafe void UniformMatrix2(int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glUniformMatrix2fvARB(location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniformMatrix2fvARB", Version = "1.2")]
      public static unsafe void UniformMatrix2(int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glUniformMatrix2fvARB(location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniformMatrix2fvARB", Version = "1.2")]
      public static unsafe void UniformMatrix2(int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glUniformMatrix2fvARB(location, count, transpose, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniformMatrix3fvARB", Version = "1.2")]
      public static unsafe void UniformMatrix3(int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glUniformMatrix3fvARB(location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniformMatrix3fvARB", Version = "1.2")]
      public static unsafe void UniformMatrix3(int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glUniformMatrix3fvARB(location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniformMatrix3fvARB", Version = "1.2")]
      public static unsafe void UniformMatrix3(int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glUniformMatrix3fvARB(location, count, transpose, value);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniformMatrix4fvARB", Version = "1.2")]
      public static unsafe void UniformMatrix4(int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glUniformMatrix4fvARB(location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniformMatrix4fvARB", Version = "1.2")]
      public static unsafe void UniformMatrix4(int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glUniformMatrix4fvARB(location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUniformMatrix4fvARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void UniformMatrix4(int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glUniformMatrix4fvARB(location, count, transpose, value);
      }

      [AutoGenerated(Category = "ARB_vertex_buffer_object", EntryPoint = "glUnmapBufferARB", Version = "1.2")]
      public static bool UnmapBuffer(BufferTargetArb target)
      {
        return GL.Delegates.glUnmapBufferARB(target);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUseProgramObjectARB", Version = "1.2")]
      public static void UseProgramObject(int programObj)
      {
        GL.Delegates.glUseProgramObjectARB((uint) programObj);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glUseProgramObjectARB", Version = "1.2")]
      public static void UseProgramObject(uint programObj)
      {
        GL.Delegates.glUseProgramObjectARB(programObj);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glValidateProgramARB", Version = "1.2")]
      public static void ValidateProgram(int programObj)
      {
        GL.Delegates.glValidateProgramARB((uint) programObj);
      }

      [AutoGenerated(Category = "ARB_shader_objects", EntryPoint = "glValidateProgramARB", Version = "1.2")]
      [CLSCompliant(false)]
      public static void ValidateProgram(uint programObj)
      {
        GL.Delegates.glValidateProgramARB(programObj);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1dARB", Version = "1.3")]
      public static void VertexAttrib1(int index, double x)
      {
        GL.Delegates.glVertexAttrib1dARB((uint) index, x);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1dARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttrib1(uint index, double x)
      {
        GL.Delegates.glVertexAttrib1dARB(index, x);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib1(int index, double* v)
      {
        GL.Delegates.glVertexAttrib1dvARB((uint) index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib1(uint index, double* v)
      {
        GL.Delegates.glVertexAttrib1dvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1fARB", Version = "1.3")]
      public static void VertexAttrib1(int index, float x)
      {
        GL.Delegates.glVertexAttrib1fARB((uint) index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1fARB", Version = "1.3")]
      public static void VertexAttrib1(uint index, float x)
      {
        GL.Delegates.glVertexAttrib1fARB(index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib1(int index, float* v)
      {
        GL.Delegates.glVertexAttrib1fvARB((uint) index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib1(uint index, float* v)
      {
        GL.Delegates.glVertexAttrib1fvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1sARB", Version = "1.3")]
      public static void VertexAttrib1(int index, short x)
      {
        GL.Delegates.glVertexAttrib1sARB((uint) index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1sARB", Version = "1.3")]
      public static void VertexAttrib1(uint index, short x)
      {
        GL.Delegates.glVertexAttrib1sARB(index, x);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib1(int index, short* v)
      {
        GL.Delegates.glVertexAttrib1svARB((uint) index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib1svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib1(uint index, short* v)
      {
        GL.Delegates.glVertexAttrib1svARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2dARB", Version = "1.3")]
      public static void VertexAttrib2(int index, double x, double y)
      {
        GL.Delegates.glVertexAttrib2dARB((uint) index, x, y);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2dARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttrib2(uint index, double x, double y)
      {
        GL.Delegates.glVertexAttrib2dARB(index, x, y);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib2dvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib2dvARB((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(int index, double* v)
      {
        GL.Delegates.glVertexAttrib2dvARB((uint) index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib2dvARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib2dvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(uint index, double* v)
      {
        GL.Delegates.glVertexAttrib2dvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2fARB", Version = "1.3")]
      public static void VertexAttrib2(int index, float x, float y)
      {
        GL.Delegates.glVertexAttrib2fARB((uint) index, x, y);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2fARB", Version = "1.3")]
      public static void VertexAttrib2(uint index, float x, float y)
      {
        GL.Delegates.glVertexAttrib2fARB(index, x, y);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(int index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib2fvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(int index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib2fvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(int index, float* v)
      {
        GL.Delegates.glVertexAttrib2fvARB((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(uint index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib2fvARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(uint index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib2fvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(uint index, float* v)
      {
        GL.Delegates.glVertexAttrib2fvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2sARB", Version = "1.3")]
      public static void VertexAttrib2(int index, short x, short y)
      {
        GL.Delegates.glVertexAttrib2sARB((uint) index, x, y);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2sARB", Version = "1.3")]
      public static void VertexAttrib2(uint index, short x, short y)
      {
        GL.Delegates.glVertexAttrib2sARB(index, x, y);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2svARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(int index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib2svARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2svARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(int index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib2svARB((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2svARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(int index, short* v)
      {
        GL.Delegates.glVertexAttrib2svARB((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2svARB", Version = "1.3")]
      public static unsafe void VertexAttrib2(uint index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib2svARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(uint index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib2svARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib2svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(uint index, short* v)
      {
        GL.Delegates.glVertexAttrib2svARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3dARB", Version = "1.3")]
      public static void VertexAttrib3(int index, double x, double y, double z)
      {
        GL.Delegates.glVertexAttrib3dARB((uint) index, x, y, z);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3dARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttrib3(uint index, double x, double y, double z)
      {
        GL.Delegates.glVertexAttrib3dARB(index, x, y, z);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib3dvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib3dvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(int index, double* v)
      {
        GL.Delegates.glVertexAttrib3dvARB((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib3dvARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib3dvARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(uint index, double* v)
      {
        GL.Delegates.glVertexAttrib3dvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3fARB", Version = "1.3")]
      public static void VertexAttrib3(int index, float x, float y, float z)
      {
        GL.Delegates.glVertexAttrib3fARB((uint) index, x, y, z);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3fARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttrib3(uint index, float x, float y, float z)
      {
        GL.Delegates.glVertexAttrib3fARB(index, x, y, z);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(int index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib3fvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(int index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib3fvARB((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(int index, float* v)
      {
        GL.Delegates.glVertexAttrib3fvARB((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(uint index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib3fvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib3fvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, float* v)
      {
        GL.Delegates.glVertexAttrib3fvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3sARB", Version = "1.3")]
      public static void VertexAttrib3(int index, short x, short y, short z)
      {
        GL.Delegates.glVertexAttrib3sARB((uint) index, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3sARB", Version = "1.3")]
      public static void VertexAttrib3(uint index, short x, short y, short z)
      {
        GL.Delegates.glVertexAttrib3sARB(index, x, y, z);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3svARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(int index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib3svARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3svARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(int index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib3svARB((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3svARB", Version = "1.3")]
      public static unsafe void VertexAttrib3(int index, short* v)
      {
        GL.Delegates.glVertexAttrib3svARB((uint) index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib3svARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib3svARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib3svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, short* v)
      {
        GL.Delegates.glVertexAttrib3svARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4bvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, sbyte[] v)
      {
        fixed (sbyte* v1 = v)
          GL.Delegates.glVertexAttrib4bvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4bvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, ref sbyte v)
      {
        fixed (sbyte* v1 = &v)
          GL.Delegates.glVertexAttrib4bvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4bvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, sbyte* v)
      {
        GL.Delegates.glVertexAttrib4bvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4dARB", Version = "1.3")]
      public static void VertexAttrib4(int index, double x, double y, double z, double w)
      {
        GL.Delegates.glVertexAttrib4dARB((uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4dARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttrib4(uint index, double x, double y, double z, double w)
      {
        GL.Delegates.glVertexAttrib4dARB(index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib4dvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib4dvARB((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4dvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, double* v)
      {
        GL.Delegates.glVertexAttrib4dvARB((uint) index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib4dvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib4dvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4dvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, double* v)
      {
        GL.Delegates.glVertexAttrib4dvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4fARB", Version = "1.3")]
      public static void VertexAttrib4(int index, float x, float y, float z, float w)
      {
        GL.Delegates.glVertexAttrib4fARB((uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4fARB", Version = "1.3")]
      public static void VertexAttrib4(uint index, float x, float y, float z, float w)
      {
        GL.Delegates.glVertexAttrib4fARB(index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib4fvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib4fvARB((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, float* v)
      {
        GL.Delegates.glVertexAttrib4fvARB((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4fvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(uint index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib4fvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib4fvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4fvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, float* v)
      {
        GL.Delegates.glVertexAttrib4fvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttrib4ivARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttrib4ivARB((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, int* v)
      {
        GL.Delegates.glVertexAttrib4ivARB((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(uint index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttrib4ivARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(uint index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttrib4ivARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(uint index, int* v)
      {
        GL.Delegates.glVertexAttrib4ivARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NbvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, sbyte[] v)
      {
        fixed (sbyte* v1 = v)
          GL.Delegates.glVertexAttrib4NbvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NbvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, ref sbyte v)
      {
        fixed (sbyte* v1 = &v)
          GL.Delegates.glVertexAttrib4NbvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NbvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, sbyte* v)
      {
        GL.Delegates.glVertexAttrib4NbvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(int index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttrib4NivARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(int index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttrib4NivARB((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(int index, int* v)
      {
        GL.Delegates.glVertexAttrib4NivARB((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(uint index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttrib4NivARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(uint index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttrib4NivARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(uint index, int* v)
      {
        GL.Delegates.glVertexAttrib4NivARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NsvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(int index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib4NsvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NsvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(int index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib4NsvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NsvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(int index, short* v)
      {
        GL.Delegates.glVertexAttrib4NsvARB((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NsvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(uint index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib4NsvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NsvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib4NsvARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NsvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(uint index, short* v)
      {
        GL.Delegates.glVertexAttrib4NsvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NubARB", Version = "1.3")]
      public static void VertexAttrib4N(int index, byte x, byte y, byte z, byte w)
      {
        GL.Delegates.glVertexAttrib4NubARB((uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NubARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttrib4N(uint index, byte x, byte y, byte z, byte w)
      {
        GL.Delegates.glVertexAttrib4NubARB(index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NubvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(int index, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttrib4NubvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NubvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(int index, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttrib4NubvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NubvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(int index, byte* v)
      {
        GL.Delegates.glVertexAttrib4NubvARB((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NubvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(uint index, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttrib4NubvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NubvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttrib4NubvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NubvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, byte* v)
      {
        GL.Delegates.glVertexAttrib4NubvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NuivARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, uint[] v)
      {
        fixed (uint* v1 = v)
          GL.Delegates.glVertexAttrib4NuivARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NuivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(uint index, ref uint v)
      {
        fixed (uint* v1 = &v)
          GL.Delegates.glVertexAttrib4NuivARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NuivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4N(uint index, uint* v)
      {
        GL.Delegates.glVertexAttrib4NuivARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NusvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, ushort[] v)
      {
        fixed (ushort* v1 = v)
          GL.Delegates.glVertexAttrib4NusvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NusvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, ref ushort v)
      {
        fixed (ushort* v1 = &v)
          GL.Delegates.glVertexAttrib4NusvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4NusvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4N(uint index, ushort* v)
      {
        GL.Delegates.glVertexAttrib4NusvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4sARB", Version = "1.3")]
      public static void VertexAttrib4(int index, short x, short y, short z, short w)
      {
        GL.Delegates.glVertexAttrib4sARB((uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4sARB", Version = "1.3")]
      public static void VertexAttrib4(uint index, short x, short y, short z, short w)
      {
        GL.Delegates.glVertexAttrib4sARB(index, x, y, z, w);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4svARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib4svARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4svARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib4svARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(int index, short* v)
      {
        GL.Delegates.glVertexAttrib4svARB((uint) index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib4svARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4svARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(uint index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib4svARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4svARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, short* v)
      {
        GL.Delegates.glVertexAttrib4svARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ubvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttrib4ubvARB((uint) index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ubvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttrib4ubvARB((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ubvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(int index, byte* v)
      {
        GL.Delegates.glVertexAttrib4ubvARB((uint) index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ubvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttrib4ubvARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ubvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(uint index, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttrib4ubvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4ubvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, byte* v)
      {
        GL.Delegates.glVertexAttrib4ubvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4uivARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, uint[] v)
      {
        fixed (uint* v1 = v)
          GL.Delegates.glVertexAttrib4uivARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4uivARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(uint index, ref uint v)
      {
        fixed (uint* v1 = &v)
          GL.Delegates.glVertexAttrib4uivARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4uivARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, uint* v)
      {
        GL.Delegates.glVertexAttrib4uivARB(index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4usvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(uint index, ushort[] v)
      {
        fixed (ushort* v1 = v)
          GL.Delegates.glVertexAttrib4usvARB(index, v1);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4usvARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, ref ushort v)
      {
        fixed (ushort* v1 = &v)
          GL.Delegates.glVertexAttrib4usvARB(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttrib4usvARB", Version = "1.3")]
      public static unsafe void VertexAttrib4(uint index, ushort* v)
      {
        GL.Delegates.glVertexAttrib4usvARB(index, v);
      }

      [AutoGenerated(Category = "ARB_instanced_arrays", EntryPoint = "glVertexAttribDivisorARB", Version = "2.0")]
      public static void VertexAttribDivisor(int index, int divisor)
      {
        GL.Delegates.glVertexAttribDivisorARB((uint) index, (uint) divisor);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_instanced_arrays", EntryPoint = "glVertexAttribDivisorARB", Version = "2.0")]
      public static void VertexAttribDivisor(uint index, uint divisor)
      {
        GL.Delegates.glVertexAttribDivisorARB(index, divisor);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      public static void VertexAttribPointer(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, IntPtr pointer)
      {
        GL.Delegates.glVertexAttribPointerARB((uint) index, size, type, normalized, stride, pointer);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      public static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In, Out] T5[] pointer) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerARB((uint) index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      public static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In, Out] T5[,] pointer) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerARB((uint) index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      public static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In, Out] T5[,,] pointer) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerARB((uint) index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      public static void VertexAttribPointer<T5>(int index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In, Out] ref T5 pointer) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerARB((uint) index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttribPointer(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, IntPtr pointer)
      {
        GL.Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In, Out] T5[] pointer) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In, Out] T5[,] pointer) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In, Out] T5[,,] pointer) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_program", EntryPoint = "glVertexAttribPointerARB", Version = "1.3")]
      [CLSCompliant(false)]
      public static void VertexAttribPointer<T5>(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, [In, Out] ref T5 pointer) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glVertexBlendARB", Version = "1.1")]
      public static void VertexBlend(int count)
      {
        GL.Delegates.glVertexBlendARB(count);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightbvARB", Version = "1.1")]
      public static unsafe void Weight(int size, sbyte[] weights)
      {
        fixed (sbyte* weights1 = weights)
          GL.Delegates.glWeightbvARB(size, weights1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightbvARB", Version = "1.1")]
      public static unsafe void Weight(int size, ref sbyte weights)
      {
        fixed (sbyte* weights1 = &weights)
          GL.Delegates.glWeightbvARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightbvARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Weight(int size, sbyte* weights)
      {
        GL.Delegates.glWeightbvARB(size, weights);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightdvARB", Version = "1.1")]
      public static unsafe void Weight(int size, double[] weights)
      {
        fixed (double* weights1 = weights)
          GL.Delegates.glWeightdvARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightdvARB", Version = "1.1")]
      public static unsafe void Weight(int size, ref double weights)
      {
        fixed (double* weights1 = &weights)
          GL.Delegates.glWeightdvARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightdvARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Weight(int size, double* weights)
      {
        GL.Delegates.glWeightdvARB(size, weights);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightfvARB", Version = "1.1")]
      public static unsafe void Weight(int size, float[] weights)
      {
        fixed (float* weights1 = weights)
          GL.Delegates.glWeightfvARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightfvARB", Version = "1.1")]
      public static unsafe void Weight(int size, ref float weights)
      {
        fixed (float* weights1 = &weights)
          GL.Delegates.glWeightfvARB(size, weights1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightfvARB", Version = "1.1")]
      public static unsafe void Weight(int size, float* weights)
      {
        GL.Delegates.glWeightfvARB(size, weights);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightivARB", Version = "1.1")]
      public static unsafe void Weight(int size, int[] weights)
      {
        fixed (int* weights1 = weights)
          GL.Delegates.glWeightivARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightivARB", Version = "1.1")]
      public static unsafe void Weight(int size, ref int weights)
      {
        fixed (int* weights1 = &weights)
          GL.Delegates.glWeightivARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightivARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Weight(int size, int* weights)
      {
        GL.Delegates.glWeightivARB(size, weights);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightPointerARB", Version = "1.1")]
      public static void WeightPointer(int size, ArbVertexBlend type, int stride, IntPtr pointer)
      {
        GL.Delegates.glWeightPointerARB(size, type, stride, pointer);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightPointerARB", Version = "1.1")]
      public static void WeightPointer<T3>(int size, ArbVertexBlend type, int stride, [In, Out] T3[] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glWeightPointerARB(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightPointerARB", Version = "1.1")]
      public static void WeightPointer<T3>(int size, ArbVertexBlend type, int stride, [In, Out] T3[,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glWeightPointerARB(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightPointerARB", Version = "1.1")]
      public static void WeightPointer<T3>(int size, ArbVertexBlend type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glWeightPointerARB(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightPointerARB", Version = "1.1")]
      public static void WeightPointer<T3>(int size, ArbVertexBlend type, int stride, [In, Out] ref T3 pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glWeightPointerARB(size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightsvARB", Version = "1.1")]
      public static unsafe void Weight(int size, short[] weights)
      {
        fixed (short* weights1 = weights)
          GL.Delegates.glWeightsvARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightsvARB", Version = "1.1")]
      public static unsafe void Weight(int size, ref short weights)
      {
        fixed (short* weights1 = &weights)
          GL.Delegates.glWeightsvARB(size, weights1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightsvARB", Version = "1.1")]
      public static unsafe void Weight(int size, short* weights)
      {
        GL.Delegates.glWeightsvARB(size, weights);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightubvARB", Version = "1.1")]
      public static unsafe void Weight(int size, byte[] weights)
      {
        fixed (byte* weights1 = weights)
          GL.Delegates.glWeightubvARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightubvARB", Version = "1.1")]
      public static unsafe void Weight(int size, ref byte weights)
      {
        fixed (byte* weights1 = &weights)
          GL.Delegates.glWeightubvARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightubvARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Weight(int size, byte* weights)
      {
        GL.Delegates.glWeightubvARB(size, weights);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightuivARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Weight(int size, uint[] weights)
      {
        fixed (uint* weights1 = weights)
          GL.Delegates.glWeightuivARB(size, weights1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightuivARB", Version = "1.1")]
      public static unsafe void Weight(int size, ref uint weights)
      {
        fixed (uint* weights1 = &weights)
          GL.Delegates.glWeightuivARB(size, weights1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightuivARB", Version = "1.1")]
      public static unsafe void Weight(int size, uint* weights)
      {
        GL.Delegates.glWeightuivARB(size, weights);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightusvARB", Version = "1.1")]
      public static unsafe void Weight(int size, ushort[] weights)
      {
        fixed (ushort* weights1 = weights)
          GL.Delegates.glWeightusvARB(size, weights1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightusvARB", Version = "1.1")]
      public static unsafe void Weight(int size, ref ushort weights)
      {
        fixed (ushort* weights1 = &weights)
          GL.Delegates.glWeightusvARB(size, weights1);
      }

      [AutoGenerated(Category = "ARB_vertex_blend", EntryPoint = "glWeightusvARB", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Weight(int size, ushort* weights)
      {
        GL.Delegates.glWeightusvARB(size, weights);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2dARB", Version = "1.0")]
      public static void WindowPos2(double x, double y)
      {
        GL.Delegates.glWindowPos2dARB(x, y);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2dvARB", Version = "1.0")]
      public static unsafe void WindowPos2(double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glWindowPos2dvARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2dvARB", Version = "1.0")]
      public static unsafe void WindowPos2(ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glWindowPos2dvARB(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2dvARB", Version = "1.0")]
      public static unsafe void WindowPos2(double* v)
      {
        GL.Delegates.glWindowPos2dvARB(v);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2fARB", Version = "1.0")]
      public static void WindowPos2(float x, float y)
      {
        GL.Delegates.glWindowPos2fARB(x, y);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2fvARB", Version = "1.0")]
      public static unsafe void WindowPos2(float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glWindowPos2fvARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2fvARB", Version = "1.0")]
      public static unsafe void WindowPos2(ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glWindowPos2fvARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2fvARB", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void WindowPos2(float* v)
      {
        GL.Delegates.glWindowPos2fvARB(v);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2iARB", Version = "1.0")]
      public static void WindowPos2(int x, int y)
      {
        GL.Delegates.glWindowPos2iARB(x, y);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2ivARB", Version = "1.0")]
      public static unsafe void WindowPos2(int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glWindowPos2ivARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2ivARB", Version = "1.0")]
      public static unsafe void WindowPos2(ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glWindowPos2ivARB(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2ivARB", Version = "1.0")]
      public static unsafe void WindowPos2(int* v)
      {
        GL.Delegates.glWindowPos2ivARB(v);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2sARB", Version = "1.0")]
      public static void WindowPos2(short x, short y)
      {
        GL.Delegates.glWindowPos2sARB(x, y);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2svARB", Version = "1.0")]
      public static unsafe void WindowPos2(short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glWindowPos2svARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2svARB", Version = "1.0")]
      public static unsafe void WindowPos2(ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glWindowPos2svARB(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos2svARB", Version = "1.0")]
      public static unsafe void WindowPos2(short* v)
      {
        GL.Delegates.glWindowPos2svARB(v);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3dARB", Version = "1.0")]
      public static void WindowPos3(double x, double y, double z)
      {
        GL.Delegates.glWindowPos3dARB(x, y, z);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3dvARB", Version = "1.0")]
      public static unsafe void WindowPos3(double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glWindowPos3dvARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3dvARB", Version = "1.0")]
      public static unsafe void WindowPos3(ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glWindowPos3dvARB(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3dvARB", Version = "1.0")]
      public static unsafe void WindowPos3(double* v)
      {
        GL.Delegates.glWindowPos3dvARB(v);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3fARB", Version = "1.0")]
      public static void WindowPos3(float x, float y, float z)
      {
        GL.Delegates.glWindowPos3fARB(x, y, z);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3fvARB", Version = "1.0")]
      public static unsafe void WindowPos3(float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glWindowPos3fvARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3fvARB", Version = "1.0")]
      public static unsafe void WindowPos3(ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glWindowPos3fvARB(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3fvARB", Version = "1.0")]
      public static unsafe void WindowPos3(float* v)
      {
        GL.Delegates.glWindowPos3fvARB(v);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3iARB", Version = "1.0")]
      public static void WindowPos3(int x, int y, int z)
      {
        GL.Delegates.glWindowPos3iARB(x, y, z);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3ivARB", Version = "1.0")]
      public static unsafe void WindowPos3(int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glWindowPos3ivARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3ivARB", Version = "1.0")]
      public static unsafe void WindowPos3(ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glWindowPos3ivARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3ivARB", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void WindowPos3(int* v)
      {
        GL.Delegates.glWindowPos3ivARB(v);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3sARB", Version = "1.0")]
      public static void WindowPos3(short x, short y, short z)
      {
        GL.Delegates.glWindowPos3sARB(x, y, z);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3svARB", Version = "1.0")]
      public static unsafe void WindowPos3(short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glWindowPos3svARB(v1);
      }

      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3svARB", Version = "1.0")]
      public static unsafe void WindowPos3(ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glWindowPos3svARB(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ARB_window_pos", EntryPoint = "glWindowPos3svARB", Version = "1.0")]
      public static unsafe void WindowPos3(short* v)
      {
        GL.Delegates.glWindowPos3svARB(v);
      }
    }

    public static class Ext
    {
      [AutoGenerated(Category = "EXT_geometry_shader4", EntryPoint = "glProgramParameteriEXT", Version = "2.0")]
      [Obsolete("Use ProgramParameter(..., AssemblyProgramParameterArb, ...) instead.")]
      public static void ProgramParameter(int program, ExtGeometryShader4 pname, int value)
      {
        GL.Ext.ProgramParameter(program, (AssemblyProgramParameterArb) pname, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ArbGeometryShader4", EntryPoint = "glProgramParameteriARB", Version = "3.0")]
      [Obsolete("Use ProgramParameter(..., AssemblyProgramParameterArb, ...) instead.")]
      public static void ProgramParameter(uint program, ExtGeometryShader4 pname, int value)
      {
        GL.Ext.ProgramParameter(program, (AssemblyProgramParameterArb) pname, value);
      }

      [AutoGenerated(Category = "EXT_separate_shader_objects", EntryPoint = "glActiveProgramEXT", Version = "1.2")]
      public static void ActiveProgram(int program)
      {
        GL.Delegates.glActiveProgramEXT((uint) program);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_separate_shader_objects", EntryPoint = "glActiveProgramEXT", Version = "1.2")]
      public static void ActiveProgram(uint program)
      {
        GL.Delegates.glActiveProgramEXT(program);
      }

      [AutoGenerated(Category = "EXT_stencil_two_side", EntryPoint = "glActiveStencilFaceEXT", Version = "1.3")]
      public static void ActiveStencilFace(ExtStencilTwoSide face)
      {
        GL.Delegates.glActiveStencilFaceEXT(face);
      }

      [AutoGenerated(Category = "EXT_light_texture", EntryPoint = "glApplyTextureEXT", Version = "1.1")]
      public static void ApplyTexture(ExtLightTexture mode)
      {
        GL.Delegates.glApplyTextureEXT(mode);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glAreTexturesResidentEXT", Version = "1.0")]
      public static unsafe bool AreTexturesResident(int n, int[] textures, [Out] bool[] residences)
      {
        fixed (int* numPtr = textures)
          fixed (bool* residences1 = residences)
            return GL.Delegates.glAreTexturesResidentEXT(n, (uint*) numPtr, residences1);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glAreTexturesResidentEXT", Version = "1.0")]
      public static unsafe bool AreTexturesResident(int n, ref int textures, out bool residences)
      {
        fixed (int* numPtr = &textures)
          fixed (bool* residences1 = &residences)
          {
            bool flag = GL.Delegates.glAreTexturesResidentEXT(n, (uint*) numPtr, residences1);
            residences = *residences1;
            return flag;
          }
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glAreTexturesResidentEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe bool AreTexturesResident(int n, int* textures, [Out] bool* residences)
      {
        return GL.Delegates.glAreTexturesResidentEXT(n, (uint*) textures, residences);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glAreTexturesResidentEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe bool AreTexturesResident(int n, uint[] textures, [Out] bool[] residences)
      {
        fixed (uint* textures1 = textures)
          fixed (bool* residences1 = residences)
            return GL.Delegates.glAreTexturesResidentEXT(n, textures1, residences1);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glAreTexturesResidentEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe bool AreTexturesResident(int n, ref uint textures, out bool residences)
      {
        fixed (uint* textures1 = &textures)
          fixed (bool* residences1 = &residences)
          {
            bool flag = GL.Delegates.glAreTexturesResidentEXT(n, textures1, residences1);
            residences = *residences1;
            return flag;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glAreTexturesResidentEXT", Version = "1.0")]
      public static unsafe bool AreTexturesResident(int n, uint* textures, [Out] bool* residences)
      {
        return GL.Delegates.glAreTexturesResidentEXT(n, textures, residences);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glArrayElementEXT", Version = "1.0")]
      public static void ArrayElement(int i)
      {
        GL.Delegates.glArrayElementEXT(i);
      }

      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glBeginTransformFeedbackEXT", Version = "2.0")]
      public static void BeginTransformFeedback(ExtTransformFeedback primitiveMode)
      {
        GL.Delegates.glBeginTransformFeedbackEXT(primitiveMode);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glBeginVertexShaderEXT", Version = "1.2")]
      public static void BeginVertexShader()
      {
        GL.Delegates.glBeginVertexShaderEXT();
      }

      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glBindBufferBaseEXT", Version = "2.0")]
      public static void BindBufferBase(ExtTransformFeedback target, int index, int buffer)
      {
        GL.Delegates.glBindBufferBaseEXT(target, (uint) index, (uint) buffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glBindBufferBaseEXT", Version = "2.0")]
      public static void BindBufferBase(ExtTransformFeedback target, uint index, uint buffer)
      {
        GL.Delegates.glBindBufferBaseEXT(target, index, buffer);
      }

      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glBindBufferOffsetEXT", Version = "2.0")]
      public static void BindBufferOffset(ExtTransformFeedback target, int index, int buffer, IntPtr offset)
      {
        GL.Delegates.glBindBufferOffsetEXT(target, (uint) index, (uint) buffer, offset);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glBindBufferOffsetEXT", Version = "2.0")]
      public static void BindBufferOffset(ExtTransformFeedback target, uint index, uint buffer, IntPtr offset)
      {
        GL.Delegates.glBindBufferOffsetEXT(target, index, buffer, offset);
      }

      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glBindBufferRangeEXT", Version = "2.0")]
      public static void BindBufferRange(ExtTransformFeedback target, int index, int buffer, IntPtr offset, IntPtr size)
      {
        GL.Delegates.glBindBufferRangeEXT(target, (uint) index, (uint) buffer, offset, size);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glBindBufferRangeEXT", Version = "2.0")]
      public static void BindBufferRange(ExtTransformFeedback target, uint index, uint buffer, IntPtr offset, IntPtr size)
      {
        GL.Delegates.glBindBufferRangeEXT(target, index, buffer, offset, size);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glBindFragDataLocationEXT", Version = "2.0")]
      public static void BindFragDataLocation(int program, int color, string name)
      {
        GL.Delegates.glBindFragDataLocationEXT((uint) program, (uint) color, name);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glBindFragDataLocationEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static void BindFragDataLocation(uint program, uint color, string name)
      {
        GL.Delegates.glBindFragDataLocationEXT(program, color, name);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glBindFramebufferEXT", Version = "1.2")]
      public static void BindFramebuffer(FramebufferTarget target, int framebuffer)
      {
        GL.Delegates.glBindFramebufferEXT(target, (uint) framebuffer);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glBindFramebufferEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BindFramebuffer(FramebufferTarget target, uint framebuffer)
      {
        GL.Delegates.glBindFramebufferEXT(target, framebuffer);
      }

      [AutoGenerated(Category = "EXT_shader_image_load_store", EntryPoint = "glBindImageTextureEXT", Version = "4.1")]
      public static void BindImageTexture(int index, int texture, int level, bool layered, int layer, ExtShaderImageLoadStore access, int format)
      {
        GL.Delegates.glBindImageTextureEXT((uint) index, (uint) texture, level, layered, layer, access, format);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_shader_image_load_store", EntryPoint = "glBindImageTextureEXT", Version = "4.1")]
      public static void BindImageTexture(uint index, uint texture, int level, bool layered, int layer, ExtShaderImageLoadStore access, int format)
      {
        GL.Delegates.glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glBindLightParameterEXT", Version = "1.2")]
      public static int BindLightParameter(LightName light, LightParameter value)
      {
        return GL.Delegates.glBindLightParameterEXT(light, value);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glBindMaterialParameterEXT", Version = "1.2")]
      public static int BindMaterialParameter(MaterialFace face, MaterialParameter value)
      {
        return GL.Delegates.glBindMaterialParameterEXT(face, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glBindMultiTextureEXT", Version = "")]
      public static void BindMultiTexture(TextureUnit texunit, TextureTarget target, int texture)
      {
        GL.Delegates.glBindMultiTextureEXT(texunit, target, (uint) texture);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glBindMultiTextureEXT", Version = "")]
      public static void BindMultiTexture(TextureUnit texunit, TextureTarget target, uint texture)
      {
        GL.Delegates.glBindMultiTextureEXT(texunit, target, texture);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glBindParameterEXT", Version = "1.2")]
      public static int BindParameter(ExtVertexShader value)
      {
        return GL.Delegates.glBindParameterEXT(value);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glBindRenderbufferEXT", Version = "1.2")]
      public static void BindRenderbuffer(RenderbufferTarget target, int renderbuffer)
      {
        GL.Delegates.glBindRenderbufferEXT(target, (uint) renderbuffer);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glBindRenderbufferEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
      {
        GL.Delegates.glBindRenderbufferEXT(target, renderbuffer);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glBindTexGenParameterEXT", Version = "1.2")]
      public static int BindTexGenParameter(TextureUnit unit, TextureCoordName coord, TextureGenParameter value)
      {
        return GL.Delegates.glBindTexGenParameterEXT(unit, coord, value);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glBindTextureEXT", Version = "1.0")]
      public static void BindTexture(TextureTarget target, int texture)
      {
        GL.Delegates.glBindTextureEXT(target, (uint) texture);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glBindTextureEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static void BindTexture(TextureTarget target, uint texture)
      {
        GL.Delegates.glBindTextureEXT(target, texture);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glBindTextureUnitParameterEXT", Version = "1.2")]
      public static int BindTextureUnitParameter(TextureUnit unit, ExtVertexShader value)
      {
        return GL.Delegates.glBindTextureUnitParameterEXT(unit, value);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glBindVertexShaderEXT", Version = "1.2")]
      public static void BindVertexShader(int id)
      {
        GL.Delegates.glBindVertexShaderEXT((uint) id);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glBindVertexShaderEXT", Version = "1.2")]
      public static void BindVertexShader(uint id)
      {
        GL.Delegates.glBindVertexShaderEXT(id);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3bEXT", Version = "1.1")]
      public static void Binormal3(byte bx, byte by, byte bz)
      {
        GL.Delegates.glBinormal3bEXT((sbyte) bx, (sbyte) by, (sbyte) bz);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3bEXT", Version = "1.1")]
      public static void Binormal3(sbyte bx, sbyte by, sbyte bz)
      {
        GL.Delegates.glBinormal3bEXT(bx, by, bz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3bvEXT", Version = "1.1")]
      public static unsafe void Binormal3(byte[] v)
      {
        fixed (byte* numPtr = v)
          GL.Delegates.glBinormal3bvEXT((sbyte*) numPtr);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3bvEXT", Version = "1.1")]
      public static unsafe void Binormal3(ref byte v)
      {
        fixed (byte* numPtr = &v)
          GL.Delegates.glBinormal3bvEXT((sbyte*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3bvEXT", Version = "1.1")]
      public static unsafe void Binormal3(byte* v)
      {
        GL.Delegates.glBinormal3bvEXT((sbyte*) v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3bvEXT", Version = "1.1")]
      public static unsafe void Binormal3(sbyte[] v)
      {
        fixed (sbyte* v1 = v)
          GL.Delegates.glBinormal3bvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3bvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Binormal3(ref sbyte v)
      {
        fixed (sbyte* v1 = &v)
          GL.Delegates.glBinormal3bvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3bvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Binormal3(sbyte* v)
      {
        GL.Delegates.glBinormal3bvEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3dEXT", Version = "1.1")]
      public static void Binormal3(double bx, double by, double bz)
      {
        GL.Delegates.glBinormal3dEXT(bx, by, bz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3dvEXT", Version = "1.1")]
      public static unsafe void Binormal3(double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glBinormal3dvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3dvEXT", Version = "1.1")]
      public static unsafe void Binormal3(ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glBinormal3dvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3dvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Binormal3(double* v)
      {
        GL.Delegates.glBinormal3dvEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3fEXT", Version = "1.1")]
      public static void Binormal3(float bx, float by, float bz)
      {
        GL.Delegates.glBinormal3fEXT(bx, by, bz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3fvEXT", Version = "1.1")]
      public static unsafe void Binormal3(float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glBinormal3fvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3fvEXT", Version = "1.1")]
      public static unsafe void Binormal3(ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glBinormal3fvEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3fvEXT", Version = "1.1")]
      public static unsafe void Binormal3(float* v)
      {
        GL.Delegates.glBinormal3fvEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3iEXT", Version = "1.1")]
      public static void Binormal3(int bx, int by, int bz)
      {
        GL.Delegates.glBinormal3iEXT(bx, by, bz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3ivEXT", Version = "1.1")]
      public static unsafe void Binormal3(int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glBinormal3ivEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3ivEXT", Version = "1.1")]
      public static unsafe void Binormal3(ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glBinormal3ivEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3ivEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Binormal3(int* v)
      {
        GL.Delegates.glBinormal3ivEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3sEXT", Version = "1.1")]
      public static void Binormal3(short bx, short by, short bz)
      {
        GL.Delegates.glBinormal3sEXT(bx, by, bz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3svEXT", Version = "1.1")]
      public static unsafe void Binormal3(short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glBinormal3svEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3svEXT", Version = "1.1")]
      public static unsafe void Binormal3(ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glBinormal3svEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormal3svEXT", Version = "1.1")]
      public static unsafe void Binormal3(short* v)
      {
        GL.Delegates.glBinormal3svEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormalPointerEXT", Version = "1.1")]
      public static void BinormalPointer(NormalPointerType type, int stride, IntPtr pointer)
      {
        GL.Delegates.glBinormalPointerEXT(type, stride, pointer);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormalPointerEXT", Version = "1.1")]
      public static void BinormalPointer<T2>(NormalPointerType type, int stride, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBinormalPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormalPointerEXT", Version = "1.1")]
      public static void BinormalPointer<T2>(NormalPointerType type, int stride, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBinormalPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormalPointerEXT", Version = "1.1")]
      public static void BinormalPointer<T2>(NormalPointerType type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBinormalPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glBinormalPointerEXT", Version = "1.1")]
      public static void BinormalPointer<T2>(NormalPointerType type, int stride, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glBinormalPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_blend_color", EntryPoint = "glBlendColorEXT", Version = "1.0")]
      public static void BlendColor(float red, float green, float blue, float alpha)
      {
        GL.Delegates.glBlendColorEXT(red, green, blue, alpha);
      }

      [AutoGenerated(Category = "EXT_blend_minmax", EntryPoint = "glBlendEquationEXT", Version = "1.0")]
      public static void BlendEquation(ExtBlendMinmax mode)
      {
        GL.Delegates.glBlendEquationEXT(mode);
      }

      [AutoGenerated(Category = "EXT_blend_equation_separate", EntryPoint = "glBlendEquationSeparateEXT", Version = "1.2")]
      public static void BlendEquationSeparate(ExtBlendEquationSeparate modeRGB, ExtBlendEquationSeparate modeAlpha)
      {
        GL.Delegates.glBlendEquationSeparateEXT(modeRGB, modeAlpha);
      }

      [AutoGenerated(Category = "EXT_blend_func_separate", EntryPoint = "glBlendFuncSeparateEXT", Version = "1.0")]
      public static void BlendFuncSeparate(ExtBlendFuncSeparate sfactorRGB, ExtBlendFuncSeparate dfactorRGB, ExtBlendFuncSeparate sfactorAlpha, ExtBlendFuncSeparate dfactorAlpha)
      {
        GL.Delegates.glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
      }

      [AutoGenerated(Category = "EXT_framebuffer_blit", EntryPoint = "glBlitFramebufferEXT", Version = "1.5")]
      public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, ExtFramebufferBlit filter)
      {
        GL.Delegates.glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glCheckFramebufferStatusEXT", Version = "1.2")]
      public static FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target)
      {
        return GL.Delegates.glCheckFramebufferStatusEXT(target);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCheckNamedFramebufferStatusEXT", Version = "")]
      public static ExtDirectStateAccess CheckNamedFramebufferStatus(int framebuffer, FramebufferTarget target)
      {
        return GL.Delegates.glCheckNamedFramebufferStatusEXT((uint) framebuffer, target);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCheckNamedFramebufferStatusEXT", Version = "")]
      [CLSCompliant(false)]
      public static ExtDirectStateAccess CheckNamedFramebufferStatus(uint framebuffer, FramebufferTarget target)
      {
        return GL.Delegates.glCheckNamedFramebufferStatusEXT(framebuffer, target);
      }

      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glClearColorIiEXT", Version = "2.0")]
      public static void ClearColorI(int red, int green, int blue, int alpha)
      {
        GL.Delegates.glClearColorIiEXT(red, green, blue, alpha);
      }

      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glClearColorIuiEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static void ClearColorI(uint red, uint green, uint blue, uint alpha)
      {
        GL.Delegates.glClearColorIuiEXT(red, green, blue, alpha);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glClientAttribDefaultEXT", Version = "")]
      public static void ClientAttribDefault(ClientAttribMask mask)
      {
        GL.Delegates.glClientAttribDefaultEXT(mask);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glColorMaskIndexedEXT", Version = "2.0")]
      public static void ColorMaskIndexed(int index, bool r, bool g, bool b, bool a)
      {
        GL.Delegates.glColorMaskIndexedEXT((uint) index, r, g, b, a);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glColorMaskIndexedEXT", Version = "2.0")]
      public static void ColorMaskIndexed(uint index, bool r, bool g, bool b, bool a)
      {
        GL.Delegates.glColorMaskIndexedEXT(index, r, g, b, a);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glColorPointerEXT", Version = "1.0")]
      public static void ColorPointer(int size, ColorPointerType type, int stride, int count, IntPtr pointer)
      {
        GL.Delegates.glColorPointerEXT(size, type, stride, count, pointer);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glColorPointerEXT", Version = "1.0")]
      public static void ColorPointer<T4>(int size, ColorPointerType type, int stride, int count, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glColorPointerEXT", Version = "1.0")]
      public static void ColorPointer<T4>(int size, ColorPointerType type, int stride, int count, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glColorPointerEXT", Version = "1.0")]
      public static void ColorPointer<T4>(int size, ColorPointerType type, int stride, int count, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glColorPointerEXT", Version = "1.0")]
      public static void ColorPointer<T4>(int size, ColorPointerType type, int stride, int count, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_color_subtable", EntryPoint = "glColorSubTableEXT", Version = "1.2")]
      public static void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
      {
        GL.Delegates.glColorSubTableEXT(target, start, count, format, type, data);
      }

      [AutoGenerated(Category = "EXT_color_subtable", EntryPoint = "glColorSubTableEXT", Version = "1.2")]
      public static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In, Out] T5[] data) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorSubTableEXT(target, start, count, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_color_subtable", EntryPoint = "glColorSubTableEXT", Version = "1.2")]
      public static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In, Out] T5[,] data) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorSubTableEXT(target, start, count, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_color_subtable", EntryPoint = "glColorSubTableEXT", Version = "1.2")]
      public static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In, Out] T5[,,] data) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorSubTableEXT(target, start, count, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_color_subtable", EntryPoint = "glColorSubTableEXT", Version = "1.2")]
      public static void ColorSubTable<T5>(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, [In, Out] ref T5 data) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorSubTableEXT(target, start, count, format, type, gcHandle.AddrOfPinnedObject());
          data = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glColorTableEXT", Version = "1.1")]
      public static void ColorTable(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, IntPtr table)
      {
        GL.Delegates.glColorTableEXT(target, internalFormat, width, format, type, table);
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glColorTableEXT", Version = "1.1")]
      public static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, [In, Out] T5[] table) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorTableEXT(target, internalFormat, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glColorTableEXT", Version = "1.1")]
      public static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, [In, Out] T5[,] table) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorTableEXT(target, internalFormat, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glColorTableEXT", Version = "1.1")]
      public static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, [In, Out] T5[,,] table) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorTableEXT(target, internalFormat, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glColorTableEXT", Version = "1.1")]
      public static void ColorTable<T5>(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, [In, Out] ref T5 table) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorTableEXT(target, internalFormat, width, format, type, gcHandle.AddrOfPinnedObject());
          table = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage1DEXT", Version = "")]
      public static void CompressedMultiTexImage1D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage1DEXT", Version = "")]
      public static void CompressedMultiTexImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] T7[] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage1DEXT", Version = "")]
      public static void CompressedMultiTexImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] T7[,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage1DEXT", Version = "")]
      public static void CompressedMultiTexImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] T7[,,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage1DEXT", Version = "")]
      public static void CompressedMultiTexImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] ref T7 bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage2DEXT", Version = "")]
      public static void CompressedMultiTexImage2D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage2DEXT", Version = "")]
      public static void CompressedMultiTexImage2D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] T8[] bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage2DEXT", Version = "")]
      public static void CompressedMultiTexImage2D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] T8[,] bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage2DEXT", Version = "")]
      public static void CompressedMultiTexImage2D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] T8[,,] bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage2DEXT", Version = "")]
      public static void CompressedMultiTexImage2D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] ref T8 bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage3DEXT", Version = "")]
      public static void CompressedMultiTexImage3D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage3DEXT", Version = "")]
      public static void CompressedMultiTexImage3D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T9[] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage3DEXT", Version = "")]
      public static void CompressedMultiTexImage3D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T9[,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage3DEXT", Version = "")]
      public static void CompressedMultiTexImage3D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T9[,,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexImage3DEXT", Version = "")]
      public static void CompressedMultiTexImage3D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] ref T9 bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage1DEXT", Version = "")]
      public static void CompressedMultiTexSubImage1D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage1DEXT", Version = "")]
      public static void CompressedMultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T7[] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage1DEXT", Version = "")]
      public static void CompressedMultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T7[,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage1DEXT", Version = "")]
      public static void CompressedMultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T7[,,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage1DEXT", Version = "")]
      public static void CompressedMultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] ref T7 bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage2DEXT", Version = "")]
      public static void CompressedMultiTexSubImage2D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage2DEXT", Version = "")]
      public static void CompressedMultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T9[] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage2DEXT", Version = "")]
      public static void CompressedMultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T9[,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage2DEXT", Version = "")]
      public static void CompressedMultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T9[,,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage2DEXT", Version = "")]
      public static void CompressedMultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] ref T9 bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage3DEXT", Version = "")]
      public static void CompressedMultiTexSubImage3D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage3DEXT", Version = "")]
      public static void CompressedMultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T11[] bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage3DEXT", Version = "")]
      public static void CompressedMultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T11[,] bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage3DEXT", Version = "")]
      public static void CompressedMultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T11[,,] bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedMultiTexSubImage3DEXT", Version = "")]
      public static void CompressedMultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] ref T11 bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T11) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      public static void CompressedTextureImage1D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      public static void CompressedTextureImage1D<T7>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] T7[] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      public static void CompressedTextureImage1D<T7>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] T7[,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      public static void CompressedTextureImage1D<T7>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] T7[,,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      public static void CompressedTextureImage1D<T7>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] ref T7 bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      public static void CompressedTextureImage1D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureImage1D<T7>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] T7[] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureImage1D<T7>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] T7[,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureImage1D<T7>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] T7[,,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage1DEXT", Version = "")]
      public static void CompressedTextureImage1D<T7>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, [In, Out] ref T7 bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      public static void CompressedTextureImage2D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      public static void CompressedTextureImage2D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] T8[] bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      public static void CompressedTextureImage2D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] T8[,] bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      public static void CompressedTextureImage2D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] T8[,,] bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      public static void CompressedTextureImage2D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] ref T8 bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      public static void CompressedTextureImage2D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureImage2D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] T8[] bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      public static void CompressedTextureImage2D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] T8[,] bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      public static void CompressedTextureImage2D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] T8[,,] bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage2DEXT", Version = "")]
      public static void CompressedTextureImage2D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, [In, Out] ref T8 bits) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      public static void CompressedTextureImage3D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      public static void CompressedTextureImage3D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T9[] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      public static void CompressedTextureImage3D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T9[,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      public static void CompressedTextureImage3D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T9[,,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      public static void CompressedTextureImage3D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] ref T9 bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      public static void CompressedTextureImage3D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      public static void CompressedTextureImage3D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T9[] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      public static void CompressedTextureImage3D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T9[,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureImage3D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T9[,,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureImage3DEXT", Version = "")]
      public static void CompressedTextureImage3D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] ref T9 bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      public static void CompressedTextureSubImage1D(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      public static void CompressedTextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T7[] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      public static void CompressedTextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T7[,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      public static void CompressedTextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T7[,,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      public static void CompressedTextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] ref T7 bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      public static void CompressedTextureSubImage1D(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      public static void CompressedTextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T7[] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      public static void CompressedTextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T7[,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] T7[,,] bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage1DEXT", Version = "")]
      public static void CompressedTextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, [In, Out] ref T7 bits) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      public static void CompressedTextureSubImage2D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      public static void CompressedTextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T9[] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      public static void CompressedTextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T9[,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      public static void CompressedTextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T9[,,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      public static void CompressedTextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] ref T9 bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      public static void CompressedTextureSubImage2D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      public static void CompressedTextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T9[] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T9[,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T9[,,] bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage2DEXT", Version = "")]
      public static void CompressedTextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] ref T9 bits) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      public static void CompressedTextureSubImage3D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      public static void CompressedTextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T11[] bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      public static void CompressedTextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T11[,] bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      public static void CompressedTextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T11[,,] bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      public static void CompressedTextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] ref T11 bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T11) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureSubImage3D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits)
      {
        GL.Delegates.glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T11[] bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      public static void CompressedTextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T11[,] bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] T11[,,] bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCompressedTextureSubImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CompressedTextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, [In, Out] ref T11 bits) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) bits, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
          bits = (T11) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter1DEXT", Version = "1.0")]
      public static void ConvolutionFilter1D(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
      {
        GL.Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter1DEXT", Version = "1.0")]
      public static void ConvolutionFilter1D<T5>(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[] image) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter1DEXT", Version = "1.0")]
      public static void ConvolutionFilter1D<T5>(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[,] image) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter1DEXT", Version = "1.0")]
      public static void ConvolutionFilter1D<T5>(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[,,] image) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter1DEXT", Version = "1.0")]
      public static void ConvolutionFilter1D<T5>(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] ref T5 image) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
          image = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter2DEXT", Version = "1.0")]
      public static void ConvolutionFilter2D(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
      {
        GL.Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter2DEXT", Version = "1.0")]
      public static void ConvolutionFilter2D<T6>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[] image) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter2DEXT", Version = "1.0")]
      public static void ConvolutionFilter2D<T6>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,] image) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter2DEXT", Version = "1.0")]
      public static void ConvolutionFilter2D<T6>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,,] image) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionFilter2DEXT", Version = "1.0")]
      public static void ConvolutionFilter2D<T6>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T6 image) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, gcHandle.AddrOfPinnedObject());
          image = (T6) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionParameterfEXT", Version = "1.0")]
      public static void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, float @params)
      {
        GL.Delegates.glConvolutionParameterfEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionParameterfvEXT", Version = "1.0")]
      public static unsafe void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glConvolutionParameterfvEXT(target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionParameterfvEXT", Version = "1.0")]
      public static unsafe void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, float* @params)
      {
        GL.Delegates.glConvolutionParameterfvEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionParameteriEXT", Version = "1.0")]
      public static void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, int @params)
      {
        GL.Delegates.glConvolutionParameteriEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionParameterivEXT", Version = "1.0")]
      public static unsafe void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glConvolutionParameterivEXT(target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glConvolutionParameterivEXT", Version = "1.0")]
      public static unsafe void ConvolutionParameter(ExtConvolution target, ExtConvolution pname, int* @params)
      {
        GL.Delegates.glConvolutionParameterivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_color_subtable", EntryPoint = "glCopyColorSubTableEXT", Version = "1.2")]
      public static void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width)
      {
        GL.Delegates.glCopyColorSubTableEXT(target, start, x, y, width);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glCopyConvolutionFilter1DEXT", Version = "1.0")]
      public static void CopyConvolutionFilter1D(ExtConvolution target, PixelInternalFormat internalformat, int x, int y, int width)
      {
        GL.Delegates.glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glCopyConvolutionFilter2DEXT", Version = "1.0")]
      public static void CopyConvolutionFilter2D(ExtConvolution target, PixelInternalFormat internalformat, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyMultiTexImage1DEXT", Version = "")]
      public static void CopyMultiTexImage1D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border)
      {
        GL.Delegates.glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyMultiTexImage2DEXT", Version = "")]
      public static void CopyMultiTexImage2D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border)
      {
        GL.Delegates.glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyMultiTexSubImage1DEXT", Version = "")]
      public static void CopyMultiTexSubImage1D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int x, int y, int width)
      {
        GL.Delegates.glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyMultiTexSubImage2DEXT", Version = "")]
      public static void CopyMultiTexSubImage2D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyMultiTexSubImage3DEXT", Version = "")]
      public static void CopyMultiTexSubImage3D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
      }

      [AutoGenerated(Category = "EXT_copy_texture", EntryPoint = "glCopyTexImage1DEXT", Version = "1.0")]
      public static void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border)
      {
        GL.Delegates.glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
      }

      [AutoGenerated(Category = "EXT_copy_texture", EntryPoint = "glCopyTexImage2DEXT", Version = "1.0")]
      public static void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border)
      {
        GL.Delegates.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
      }

      [AutoGenerated(Category = "EXT_copy_texture", EntryPoint = "glCopyTexSubImage1DEXT", Version = "1.0")]
      public static void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width)
      {
        GL.Delegates.glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
      }

      [AutoGenerated(Category = "EXT_copy_texture", EntryPoint = "glCopyTexSubImage2DEXT", Version = "1.0")]
      public static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
      }

      [AutoGenerated(Category = "EXT_copy_texture", EntryPoint = "glCopyTexSubImage3DEXT", Version = "1.0")]
      public static void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureImage1DEXT", Version = "")]
      public static void CopyTextureImage1D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border)
      {
        GL.Delegates.glCopyTextureImage1DEXT((uint) texture, target, level, internalformat, x, y, width, border);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CopyTextureImage1D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border)
      {
        GL.Delegates.glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureImage2DEXT", Version = "")]
      public static void CopyTextureImage2D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border)
      {
        GL.Delegates.glCopyTextureImage2DEXT((uint) texture, target, level, internalformat, x, y, width, height, border);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void CopyTextureImage2D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border)
      {
        GL.Delegates.glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureSubImage1DEXT", Version = "")]
      public static void CopyTextureSubImage1D(int texture, TextureTarget target, int level, int xoffset, int x, int y, int width)
      {
        GL.Delegates.glCopyTextureSubImage1DEXT((uint) texture, target, level, xoffset, x, y, width);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureSubImage1DEXT", Version = "")]
      public static void CopyTextureSubImage1D(uint texture, TextureTarget target, int level, int xoffset, int x, int y, int width)
      {
        GL.Delegates.glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureSubImage2DEXT", Version = "")]
      public static void CopyTextureSubImage2D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, x, y, width, height);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureSubImage2DEXT", Version = "")]
      public static void CopyTextureSubImage2D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureSubImage3DEXT", Version = "")]
      public static void CopyTextureSubImage3D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glCopyTextureSubImage3DEXT", Version = "")]
      public static void CopyTextureSubImage3D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
      }

      [AutoGenerated(Category = "EXT_separate_shader_objects", EntryPoint = "glCreateShaderProgramEXT", Version = "1.2")]
      public static int CreateShaderProgram(ExtSeparateShaderObjects type, string @string)
      {
        return GL.Delegates.glCreateShaderProgramEXT(type, @string);
      }

      [AutoGenerated(Category = "EXT_cull_vertex", EntryPoint = "glCullParameterdvEXT", Version = "1.1")]
      public static unsafe void CullParameter(ExtCullVertex pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glCullParameterdvEXT(pname, params1);
      }

      [AutoGenerated(Category = "EXT_cull_vertex", EntryPoint = "glCullParameterdvEXT", Version = "1.1")]
      public static unsafe void CullParameter(ExtCullVertex pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glCullParameterdvEXT(pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_cull_vertex", EntryPoint = "glCullParameterdvEXT", Version = "1.1")]
      public static unsafe void CullParameter(ExtCullVertex pname, [Out] double* @params)
      {
        GL.Delegates.glCullParameterdvEXT(pname, @params);
      }

      [AutoGenerated(Category = "EXT_cull_vertex", EntryPoint = "glCullParameterfvEXT", Version = "1.1")]
      public static unsafe void CullParameter(ExtCullVertex pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glCullParameterfvEXT(pname, params1);
      }

      [AutoGenerated(Category = "EXT_cull_vertex", EntryPoint = "glCullParameterfvEXT", Version = "1.1")]
      public static unsafe void CullParameter(ExtCullVertex pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glCullParameterfvEXT(pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_cull_vertex", EntryPoint = "glCullParameterfvEXT", Version = "1.1")]
      public static unsafe void CullParameter(ExtCullVertex pname, [Out] float* @params)
      {
        GL.Delegates.glCullParameterfvEXT(pname, @params);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteFramebuffersEXT", Version = "1.2")]
      public static unsafe void DeleteFramebuffers(int n, int[] framebuffers)
      {
        fixed (int* numPtr = framebuffers)
          GL.Delegates.glDeleteFramebuffersEXT(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteFramebuffersEXT", Version = "1.2")]
      public static unsafe void DeleteFramebuffers(int n, ref int framebuffers)
      {
        fixed (int* numPtr = &framebuffers)
          GL.Delegates.glDeleteFramebuffersEXT(n, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteFramebuffersEXT", Version = "1.2")]
      public static unsafe void DeleteFramebuffers(int n, int* framebuffers)
      {
        GL.Delegates.glDeleteFramebuffersEXT(n, (uint*) framebuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteFramebuffersEXT", Version = "1.2")]
      public static unsafe void DeleteFramebuffers(int n, uint[] framebuffers)
      {
        fixed (uint* framebuffers1 = framebuffers)
          GL.Delegates.glDeleteFramebuffersEXT(n, framebuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteFramebuffersEXT", Version = "1.2")]
      public static unsafe void DeleteFramebuffers(int n, ref uint framebuffers)
      {
        fixed (uint* framebuffers1 = &framebuffers)
          GL.Delegates.glDeleteFramebuffersEXT(n, framebuffers1);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteFramebuffersEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFramebuffers(int n, uint* framebuffers)
      {
        GL.Delegates.glDeleteFramebuffersEXT(n, framebuffers);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteRenderbuffersEXT", Version = "1.2")]
      public static unsafe void DeleteRenderbuffers(int n, int[] renderbuffers)
      {
        fixed (int* numPtr = renderbuffers)
          GL.Delegates.glDeleteRenderbuffersEXT(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteRenderbuffersEXT", Version = "1.2")]
      public static unsafe void DeleteRenderbuffers(int n, ref int renderbuffers)
      {
        fixed (int* numPtr = &renderbuffers)
          GL.Delegates.glDeleteRenderbuffersEXT(n, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteRenderbuffersEXT", Version = "1.2")]
      public static unsafe void DeleteRenderbuffers(int n, int* renderbuffers)
      {
        GL.Delegates.glDeleteRenderbuffersEXT(n, (uint*) renderbuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteRenderbuffersEXT", Version = "1.2")]
      public static unsafe void DeleteRenderbuffers(int n, uint[] renderbuffers)
      {
        fixed (uint* renderbuffers1 = renderbuffers)
          GL.Delegates.glDeleteRenderbuffersEXT(n, renderbuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteRenderbuffersEXT", Version = "1.2")]
      public static unsafe void DeleteRenderbuffers(int n, ref uint renderbuffers)
      {
        fixed (uint* renderbuffers1 = &renderbuffers)
          GL.Delegates.glDeleteRenderbuffersEXT(n, renderbuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glDeleteRenderbuffersEXT", Version = "1.2")]
      public static unsafe void DeleteRenderbuffers(int n, uint* renderbuffers)
      {
        GL.Delegates.glDeleteRenderbuffersEXT(n, renderbuffers);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glDeleteTexturesEXT", Version = "1.0")]
      public static unsafe void DeleteTextures(int n, int[] textures)
      {
        fixed (int* numPtr = textures)
          GL.Delegates.glDeleteTexturesEXT(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glDeleteTexturesEXT", Version = "1.0")]
      public static unsafe void DeleteTextures(int n, ref int textures)
      {
        fixed (int* numPtr = &textures)
          GL.Delegates.glDeleteTexturesEXT(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glDeleteTexturesEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void DeleteTextures(int n, int* textures)
      {
        GL.Delegates.glDeleteTexturesEXT(n, (uint*) textures);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glDeleteTexturesEXT", Version = "1.0")]
      public static unsafe void DeleteTextures(int n, uint[] textures)
      {
        fixed (uint* textures1 = textures)
          GL.Delegates.glDeleteTexturesEXT(n, textures1);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glDeleteTexturesEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void DeleteTextures(int n, ref uint textures)
      {
        fixed (uint* textures1 = &textures)
          GL.Delegates.glDeleteTexturesEXT(n, textures1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glDeleteTexturesEXT", Version = "1.0")]
      public static unsafe void DeleteTextures(int n, uint* textures)
      {
        GL.Delegates.glDeleteTexturesEXT(n, textures);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glDeleteVertexShaderEXT", Version = "1.2")]
      public static void DeleteVertexShader(int id)
      {
        GL.Delegates.glDeleteVertexShaderEXT((uint) id);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glDeleteVertexShaderEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void DeleteVertexShader(uint id)
      {
        GL.Delegates.glDeleteVertexShaderEXT(id);
      }

      [AutoGenerated(Category = "EXT_depth_bounds_test", EntryPoint = "glDepthBoundsEXT", Version = "1.2")]
      public static void DepthBounds(double zmin, double zmax)
      {
        GL.Delegates.glDepthBoundsEXT(zmin, zmax);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glDisableClientStateIndexedEXT", Version = "")]
      public static void DisableClientStateIndexed(EnableCap array, int index)
      {
        GL.Delegates.glDisableClientStateIndexedEXT(array, (uint) index);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glDisableClientStateIndexedEXT", Version = "")]
      [CLSCompliant(false)]
      public static void DisableClientStateIndexed(EnableCap array, uint index)
      {
        GL.Delegates.glDisableClientStateIndexedEXT(array, index);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glDisableIndexedEXT", Version = "2.0")]
      public static void DisableIndexed(IndexedEnableCap target, int index)
      {
        GL.Delegates.glDisableIndexedEXT(target, (uint) index);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glDisableIndexedEXT", Version = "2.0")]
      public static void DisableIndexed(IndexedEnableCap target, uint index)
      {
        GL.Delegates.glDisableIndexedEXT(target, index);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glDisableVariantClientStateEXT", Version = "1.2")]
      public static void DisableVariantClientState(int id)
      {
        GL.Delegates.glDisableVariantClientStateEXT((uint) id);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glDisableVariantClientStateEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void DisableVariantClientState(uint id)
      {
        GL.Delegates.glDisableVariantClientStateEXT(id);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glDrawArraysEXT", Version = "1.0")]
      public static void DrawArrays(BeginMode mode, int first, int count)
      {
        GL.Delegates.glDrawArraysEXT(mode, first, count);
      }

      [AutoGenerated(Category = "EXT_draw_instanced", EntryPoint = "glDrawArraysInstancedEXT", Version = "2.0")]
      public static void DrawArraysInstanced(BeginMode mode, int start, int count, int primcount)
      {
        GL.Delegates.glDrawArraysInstancedEXT(mode, start, count, primcount);
      }

      [AutoGenerated(Category = "EXT_draw_instanced", EntryPoint = "glDrawElementsInstancedEXT", Version = "2.0")]
      public static void DrawElementsInstanced(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount)
      {
        GL.Delegates.glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
      }

      [AutoGenerated(Category = "EXT_draw_instanced", EntryPoint = "glDrawElementsInstancedEXT", Version = "2.0")]
      public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawElementsInstancedEXT(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_draw_instanced", EntryPoint = "glDrawElementsInstancedEXT", Version = "2.0")]
      public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawElementsInstancedEXT(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_draw_instanced", EntryPoint = "glDrawElementsInstancedEXT", Version = "2.0")]
      public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawElementsInstancedEXT(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_draw_instanced", EntryPoint = "glDrawElementsInstancedEXT", Version = "2.0")]
      public static void DrawElementsInstanced<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] ref T3 indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawElementsInstancedEXT(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
          indices = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      public static void DrawRangeElements(BeginMode mode, int start, int end, int count, DrawElementsType type, IntPtr indices)
      {
        GL.Delegates.glDrawRangeElementsEXT(mode, (uint) start, (uint) end, count, type, indices);
      }

      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      public static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] T5[] indices) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawRangeElementsEXT(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      public static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] T5[,] indices) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawRangeElementsEXT(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      public static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] T5[,,] indices) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawRangeElementsEXT(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      public static void DrawRangeElements<T5>(BeginMode mode, int start, int end, int count, DrawElementsType type, [In, Out] ref T5 indices) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawRangeElementsEXT(mode, (uint) start, (uint) end, count, type, gcHandle.AddrOfPinnedObject());
          indices = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      public static void DrawRangeElements(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
      {
        GL.Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, indices);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      public static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] T5[] indices) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      public static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] T5[,] indices) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] T5[,,] indices) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_draw_range_elements", EntryPoint = "glDrawRangeElementsEXT", Version = "1.1")]
      public static void DrawRangeElements<T5>(BeginMode mode, uint start, uint end, int count, DrawElementsType type, [In, Out] ref T5 indices) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, gcHandle.AddrOfPinnedObject());
          indices = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glEdgeFlagPointerEXT", Version = "1.0")]
      public static unsafe void EdgeFlagPointer(int stride, int count, bool[] pointer)
      {
        fixed (bool* pointer1 = pointer)
          GL.Delegates.glEdgeFlagPointerEXT(stride, count, pointer1);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glEdgeFlagPointerEXT", Version = "1.0")]
      public static unsafe void EdgeFlagPointer(int stride, int count, ref bool pointer)
      {
        fixed (bool* pointer1 = &pointer)
          GL.Delegates.glEdgeFlagPointerEXT(stride, count, pointer1);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glEdgeFlagPointerEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void EdgeFlagPointer(int stride, int count, bool* pointer)
      {
        GL.Delegates.glEdgeFlagPointerEXT(stride, count, pointer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glEnableClientStateIndexedEXT", Version = "")]
      public static void EnableClientStateIndexed(EnableCap array, int index)
      {
        GL.Delegates.glEnableClientStateIndexedEXT(array, (uint) index);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glEnableClientStateIndexedEXT", Version = "")]
      [CLSCompliant(false)]
      public static void EnableClientStateIndexed(EnableCap array, uint index)
      {
        GL.Delegates.glEnableClientStateIndexedEXT(array, index);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glEnableIndexedEXT", Version = "2.0")]
      public static void EnableIndexed(IndexedEnableCap target, int index)
      {
        GL.Delegates.glEnableIndexedEXT(target, (uint) index);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glEnableIndexedEXT", Version = "2.0")]
      public static void EnableIndexed(IndexedEnableCap target, uint index)
      {
        GL.Delegates.glEnableIndexedEXT(target, index);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glEnableVariantClientStateEXT", Version = "1.2")]
      public static void EnableVariantClientState(int id)
      {
        GL.Delegates.glEnableVariantClientStateEXT((uint) id);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glEnableVariantClientStateEXT", Version = "1.2")]
      public static void EnableVariantClientState(uint id)
      {
        GL.Delegates.glEnableVariantClientStateEXT(id);
      }

      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glEndTransformFeedbackEXT", Version = "2.0")]
      public static void EndTransformFeedback()
      {
        GL.Delegates.glEndTransformFeedbackEXT();
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glEndVertexShaderEXT", Version = "1.2")]
      public static void EndVertexShader()
      {
        GL.Delegates.glEndVertexShaderEXT();
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glExtractComponentEXT", Version = "1.2")]
      public static void ExtractComponent(int res, int src, int num)
      {
        GL.Delegates.glExtractComponentEXT((uint) res, (uint) src, (uint) num);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glExtractComponentEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void ExtractComponent(uint res, uint src, uint num)
      {
        GL.Delegates.glExtractComponentEXT(res, src, num);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFlushMappedNamedBufferRangeEXT", Version = "")]
      public static void FlushMappedNamedBufferRange(int buffer, IntPtr offset, IntPtr length)
      {
        GL.Delegates.glFlushMappedNamedBufferRangeEXT((uint) buffer, offset, length);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFlushMappedNamedBufferRangeEXT", Version = "")]
      [CLSCompliant(false)]
      public static void FlushMappedNamedBufferRange(uint buffer, IntPtr offset, IntPtr length)
      {
        GL.Delegates.glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
      }

      [AutoGenerated(Category = "EXT_fog_coord", EntryPoint = "glFogCoorddEXT", Version = "1.1")]
      public static void FogCoord(double coord)
      {
        GL.Delegates.glFogCoorddEXT(coord);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_fog_coord", EntryPoint = "glFogCoorddvEXT", Version = "1.1")]
      public static unsafe void FogCoord(double* coord)
      {
        GL.Delegates.glFogCoorddvEXT(coord);
      }

      [AutoGenerated(Category = "EXT_fog_coord", EntryPoint = "glFogCoordfEXT", Version = "1.1")]
      public static void FogCoord(float coord)
      {
        GL.Delegates.glFogCoordfEXT(coord);
      }

      [AutoGenerated(Category = "EXT_fog_coord", EntryPoint = "glFogCoordfvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void FogCoord(float* coord)
      {
        GL.Delegates.glFogCoordfvEXT(coord);
      }

      [AutoGenerated(Category = "EXT_fog_coord", EntryPoint = "glFogCoordPointerEXT", Version = "1.1")]
      public static void FogCoordPointer(ExtFogCoord type, int stride, IntPtr pointer)
      {
        GL.Delegates.glFogCoordPointerEXT(type, stride, pointer);
      }

      [AutoGenerated(Category = "EXT_fog_coord", EntryPoint = "glFogCoordPointerEXT", Version = "1.1")]
      public static void FogCoordPointer<T2>(ExtFogCoord type, int stride, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFogCoordPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_fog_coord", EntryPoint = "glFogCoordPointerEXT", Version = "1.1")]
      public static void FogCoordPointer<T2>(ExtFogCoord type, int stride, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFogCoordPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_fog_coord", EntryPoint = "glFogCoordPointerEXT", Version = "1.1")]
      public static void FogCoordPointer<T2>(ExtFogCoord type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFogCoordPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_fog_coord", EntryPoint = "glFogCoordPointerEXT", Version = "1.1")]
      public static void FogCoordPointer<T2>(ExtFogCoord type, int stride, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFogCoordPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferDrawBufferEXT", Version = "")]
      public static void FramebufferDrawBuffer(int framebuffer, DrawBufferMode mode)
      {
        GL.Delegates.glFramebufferDrawBufferEXT((uint) framebuffer, mode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferDrawBufferEXT", Version = "")]
      public static void FramebufferDrawBuffer(uint framebuffer, DrawBufferMode mode)
      {
        GL.Delegates.glFramebufferDrawBufferEXT(framebuffer, mode);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferDrawBuffersEXT", Version = "")]
      public static unsafe void FramebufferDrawBuffers(int framebuffer, int n, DrawBufferMode[] bufs)
      {
        fixed (DrawBufferMode* bufs1 = bufs)
          GL.Delegates.glFramebufferDrawBuffersEXT((uint) framebuffer, n, bufs1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferDrawBuffersEXT", Version = "")]
      public static unsafe void FramebufferDrawBuffers(int framebuffer, int n, ref DrawBufferMode bufs)
      {
        fixed (DrawBufferMode* bufs1 = &bufs)
          GL.Delegates.glFramebufferDrawBuffersEXT((uint) framebuffer, n, bufs1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferDrawBuffersEXT", Version = "")]
      public static unsafe void FramebufferDrawBuffers(int framebuffer, int n, DrawBufferMode* bufs)
      {
        GL.Delegates.glFramebufferDrawBuffersEXT((uint) framebuffer, n, bufs);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferDrawBuffersEXT", Version = "")]
      public static unsafe void FramebufferDrawBuffers(uint framebuffer, int n, DrawBufferMode[] bufs)
      {
        fixed (DrawBufferMode* bufs1 = bufs)
          GL.Delegates.glFramebufferDrawBuffersEXT(framebuffer, n, bufs1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferDrawBuffersEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void FramebufferDrawBuffers(uint framebuffer, int n, ref DrawBufferMode bufs)
      {
        fixed (DrawBufferMode* bufs1 = &bufs)
          GL.Delegates.glFramebufferDrawBuffersEXT(framebuffer, n, bufs1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferDrawBuffersEXT", Version = "")]
      public static unsafe void FramebufferDrawBuffers(uint framebuffer, int n, DrawBufferMode* bufs)
      {
        GL.Delegates.glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferReadBufferEXT", Version = "")]
      public static void FramebufferReadBuffer(int framebuffer, ReadBufferMode mode)
      {
        GL.Delegates.glFramebufferReadBufferEXT((uint) framebuffer, mode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glFramebufferReadBufferEXT", Version = "")]
      public static void FramebufferReadBuffer(uint framebuffer, ReadBufferMode mode)
      {
        GL.Delegates.glFramebufferReadBufferEXT(framebuffer, mode);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glFramebufferRenderbufferEXT", Version = "1.2")]
      public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
      {
        GL.Delegates.glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, (uint) renderbuffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glFramebufferRenderbufferEXT", Version = "1.2")]
      public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
      {
        GL.Delegates.glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glFramebufferTexture1DEXT", Version = "1.2")]
      public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
      {
        GL.Delegates.glFramebufferTexture1DEXT(target, attachment, textarget, (uint) texture, level);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glFramebufferTexture1DEXT", Version = "1.2")]
      public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
      {
        GL.Delegates.glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glFramebufferTexture2DEXT", Version = "1.2")]
      public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
      {
        GL.Delegates.glFramebufferTexture2DEXT(target, attachment, textarget, (uint) texture, level);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glFramebufferTexture2DEXT", Version = "1.2")]
      public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
      {
        GL.Delegates.glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glFramebufferTexture3DEXT", Version = "1.2")]
      public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level, int zoffset)
      {
        GL.Delegates.glFramebufferTexture3DEXT(target, attachment, textarget, (uint) texture, level, zoffset);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glFramebufferTexture3DEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
      {
        GL.Delegates.glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
      }

      [AutoGenerated(Category = "NV_geometry_program4", EntryPoint = "glFramebufferTextureEXT", Version = "2.0")]
      public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level)
      {
        GL.Delegates.glFramebufferTextureEXT(target, attachment, (uint) texture, level);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_geometry_program4", EntryPoint = "glFramebufferTextureEXT", Version = "2.0")]
      public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
      {
        GL.Delegates.glFramebufferTextureEXT(target, attachment, texture, level);
      }

      [AutoGenerated(Category = "NV_geometry_program4", EntryPoint = "glFramebufferTextureFaceEXT", Version = "2.0")]
      public static void FramebufferTextureFace(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, TextureTarget face)
      {
        GL.Delegates.glFramebufferTextureFaceEXT(target, attachment, (uint) texture, level, face);
      }

      [AutoGenerated(Category = "NV_geometry_program4", EntryPoint = "glFramebufferTextureFaceEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static void FramebufferTextureFace(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
      {
        GL.Delegates.glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
      }

      [AutoGenerated(Category = "NV_geometry_program4", EntryPoint = "glFramebufferTextureLayerEXT", Version = "2.0")]
      public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, int texture, int level, int layer)
      {
        GL.Delegates.glFramebufferTextureLayerEXT(target, attachment, (uint) texture, level, layer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_geometry_program4", EntryPoint = "glFramebufferTextureLayerEXT", Version = "2.0")]
      public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
      {
        GL.Delegates.glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenerateMipmapEXT", Version = "1.2")]
      public static void GenerateMipmap(GenerateMipmapTarget target)
      {
        GL.Delegates.glGenerateMipmapEXT(target);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGenerateMultiTexMipmapEXT", Version = "")]
      public static void GenerateMultiTexMipmap(TextureUnit texunit, TextureTarget target)
      {
        GL.Delegates.glGenerateMultiTexMipmapEXT(texunit, target);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGenerateTextureMipmapEXT", Version = "")]
      public static void GenerateTextureMipmap(int texture, TextureTarget target)
      {
        GL.Delegates.glGenerateTextureMipmapEXT((uint) texture, target);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGenerateTextureMipmapEXT", Version = "")]
      public static void GenerateTextureMipmap(uint texture, TextureTarget target)
      {
        GL.Delegates.glGenerateTextureMipmapEXT(texture, target);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenFramebuffersEXT", Version = "1.2")]
      public static unsafe void GenFramebuffers(int n, [Out] int[] framebuffers)
      {
        fixed (int* numPtr = framebuffers)
          GL.Delegates.glGenFramebuffersEXT(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenFramebuffersEXT", Version = "1.2")]
      public static unsafe void GenFramebuffers(int n, out int framebuffers)
      {
        fixed (int* numPtr = &framebuffers)
        {
          GL.Delegates.glGenFramebuffersEXT(n, (uint*) numPtr);
          framebuffers = *numPtr;
        }
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenFramebuffersEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenFramebuffers(int n, [Out] int* framebuffers)
      {
        GL.Delegates.glGenFramebuffersEXT(n, (uint*) framebuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenFramebuffersEXT", Version = "1.2")]
      public static unsafe void GenFramebuffers(int n, [Out] uint[] framebuffers)
      {
        fixed (uint* framebuffers1 = framebuffers)
          GL.Delegates.glGenFramebuffersEXT(n, framebuffers1);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenFramebuffersEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenFramebuffers(int n, out uint framebuffers)
      {
        fixed (uint* framebuffers1 = &framebuffers)
        {
          GL.Delegates.glGenFramebuffersEXT(n, framebuffers1);
          framebuffers = *framebuffers1;
        }
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenFramebuffersEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenFramebuffers(int n, [Out] uint* framebuffers)
      {
        GL.Delegates.glGenFramebuffersEXT(n, framebuffers);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenRenderbuffersEXT", Version = "1.2")]
      public static unsafe void GenRenderbuffers(int n, [Out] int[] renderbuffers)
      {
        fixed (int* numPtr = renderbuffers)
          GL.Delegates.glGenRenderbuffersEXT(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenRenderbuffersEXT", Version = "1.2")]
      public static unsafe void GenRenderbuffers(int n, out int renderbuffers)
      {
        fixed (int* numPtr = &renderbuffers)
        {
          GL.Delegates.glGenRenderbuffersEXT(n, (uint*) numPtr);
          renderbuffers = *numPtr;
        }
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenRenderbuffersEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenRenderbuffers(int n, [Out] int* renderbuffers)
      {
        GL.Delegates.glGenRenderbuffersEXT(n, (uint*) renderbuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenRenderbuffersEXT", Version = "1.2")]
      public static unsafe void GenRenderbuffers(int n, [Out] uint[] renderbuffers)
      {
        fixed (uint* renderbuffers1 = renderbuffers)
          GL.Delegates.glGenRenderbuffersEXT(n, renderbuffers1);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenRenderbuffersEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenRenderbuffers(int n, out uint renderbuffers)
      {
        fixed (uint* renderbuffers1 = &renderbuffers)
        {
          GL.Delegates.glGenRenderbuffersEXT(n, renderbuffers1);
          renderbuffers = *renderbuffers1;
        }
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGenRenderbuffersEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenRenderbuffers(int n, [Out] uint* renderbuffers)
      {
        GL.Delegates.glGenRenderbuffersEXT(n, renderbuffers);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGenSymbolsEXT", Version = "1.2")]
      public static int GenSymbol(ExtVertexShader datatype, ExtVertexShader storagetype, ExtVertexShader range, int components)
      {
        return GL.Delegates.glGenSymbolsEXT(datatype, storagetype, range, (uint) components);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGenSymbolsEXT", Version = "1.2")]
      public static int GenSymbol(ExtVertexShader datatype, ExtVertexShader storagetype, ExtVertexShader range, uint components)
      {
        return GL.Delegates.glGenSymbolsEXT(datatype, storagetype, range, components);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glGenTexturesEXT", Version = "1.0")]
      public static unsafe void GenTextures(int n, [Out] int[] textures)
      {
        fixed (int* numPtr = textures)
          GL.Delegates.glGenTexturesEXT(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glGenTexturesEXT", Version = "1.0")]
      public static unsafe void GenTextures(int n, out int textures)
      {
        fixed (int* numPtr = &textures)
        {
          GL.Delegates.glGenTexturesEXT(n, (uint*) numPtr);
          textures = *numPtr;
        }
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glGenTexturesEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GenTextures(int n, [Out] int* textures)
      {
        GL.Delegates.glGenTexturesEXT(n, (uint*) textures);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glGenTexturesEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GenTextures(int n, [Out] uint[] textures)
      {
        fixed (uint* textures1 = textures)
          GL.Delegates.glGenTexturesEXT(n, textures1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glGenTexturesEXT", Version = "1.0")]
      public static unsafe void GenTextures(int n, out uint textures)
      {
        fixed (uint* textures1 = &textures)
        {
          GL.Delegates.glGenTexturesEXT(n, textures1);
          textures = *textures1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glGenTexturesEXT", Version = "1.0")]
      public static unsafe void GenTextures(int n, [Out] uint* textures)
      {
        GL.Delegates.glGenTexturesEXT(n, textures);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGenVertexShadersEXT", Version = "1.2")]
      public static int GenVertexShaders(int range)
      {
        return GL.Delegates.glGenVertexShadersEXT((uint) range);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGenVertexShadersEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static int GenVertexShaders(uint range)
      {
        return GL.Delegates.glGenVertexShadersEXT(range);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetBooleanIndexedvEXT", Version = "2.0")]
      public static unsafe void GetBooleanIndexed(ExtDrawBuffers2 target, int index, [Out] bool[] data)
      {
        fixed (bool* data1 = data)
          GL.Delegates.glGetBooleanIndexedvEXT(target, (uint) index, data1);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetBooleanIndexedvEXT", Version = "2.0")]
      public static unsafe void GetBooleanIndexed(ExtDrawBuffers2 target, int index, out bool data)
      {
        fixed (bool* data1 = &data)
        {
          GL.Delegates.glGetBooleanIndexedvEXT(target, (uint) index, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetBooleanIndexedvEXT", Version = "2.0")]
      public static unsafe void GetBooleanIndexed(ExtDrawBuffers2 target, int index, [Out] bool* data)
      {
        GL.Delegates.glGetBooleanIndexedvEXT(target, (uint) index, data);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetBooleanIndexedvEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetBooleanIndexed(ExtDrawBuffers2 target, uint index, [Out] bool[] data)
      {
        fixed (bool* data1 = data)
          GL.Delegates.glGetBooleanIndexedvEXT(target, index, data1);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetBooleanIndexedvEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetBooleanIndexed(ExtDrawBuffers2 target, uint index, out bool data)
      {
        fixed (bool* data1 = &data)
        {
          GL.Delegates.glGetBooleanIndexedvEXT(target, index, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetBooleanIndexedvEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetBooleanIndexed(ExtDrawBuffers2 target, uint index, [Out] bool* data)
      {
        GL.Delegates.glGetBooleanIndexedvEXT(target, index, data);
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableEXT", Version = "1.1")]
      public static void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, [Out] IntPtr data)
      {
        GL.Delegates.glGetColorTableEXT(target, format, type, data);
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableEXT", Version = "1.1")]
      public static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetColorTableEXT(target, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableEXT", Version = "1.1")]
      public static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetColorTableEXT(target, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableEXT", Version = "1.1")]
      public static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetColorTableEXT(target, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableEXT", Version = "1.1")]
      public static void GetColorTable<T3>(ColorTableTarget target, PixelFormat format, PixelType type, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetColorTableEXT(target, format, type, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableParameterfvEXT", Version = "1.1")]
      public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetColorTableParameterfvEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableParameterfvEXT", Version = "1.1")]
      public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetColorTableParameterfvEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableParameterfvEXT", Version = "1.1")]
      public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float* @params)
      {
        GL.Delegates.glGetColorTableParameterfvEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableParameterivEXT", Version = "1.1")]
      public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetColorTableParameterivEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableParameterivEXT", Version = "1.1")]
      public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetColorTableParameterivEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_paletted_texture", EntryPoint = "glGetColorTableParameterivEXT", Version = "1.1")]
      public static unsafe void GetColorTableParameter(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int* @params)
      {
        GL.Delegates.glGetColorTableParameterivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedMultiTexImageEXT", Version = "")]
      public static void GetCompressedMultiTexImage(TextureUnit texunit, TextureTarget target, int lod, [Out] IntPtr img)
      {
        GL.Delegates.glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedMultiTexImageEXT", Version = "")]
      public static void GetCompressedMultiTexImage<T3>(TextureUnit texunit, TextureTarget target, int lod, [In, Out] T3[] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedMultiTexImageEXT(texunit, target, lod, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedMultiTexImageEXT", Version = "")]
      public static void GetCompressedMultiTexImage<T3>(TextureUnit texunit, TextureTarget target, int lod, [In, Out] T3[,] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedMultiTexImageEXT(texunit, target, lod, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedMultiTexImageEXT", Version = "")]
      public static void GetCompressedMultiTexImage<T3>(TextureUnit texunit, TextureTarget target, int lod, [In, Out] T3[,,] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedMultiTexImageEXT(texunit, target, lod, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedMultiTexImageEXT", Version = "")]
      public static void GetCompressedMultiTexImage<T3>(TextureUnit texunit, TextureTarget target, int lod, [In, Out] ref T3 img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedMultiTexImageEXT(texunit, target, lod, gcHandle.AddrOfPinnedObject());
          img = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      public static void GetCompressedTextureImage(int texture, TextureTarget target, int lod, [Out] IntPtr img)
      {
        GL.Delegates.glGetCompressedTextureImageEXT((uint) texture, target, lod, img);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      public static void GetCompressedTextureImage<T3>(int texture, TextureTarget target, int lod, [In, Out] T3[] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTextureImageEXT((uint) texture, target, lod, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      public static void GetCompressedTextureImage<T3>(int texture, TextureTarget target, int lod, [In, Out] T3[,] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTextureImageEXT((uint) texture, target, lod, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      public static void GetCompressedTextureImage<T3>(int texture, TextureTarget target, int lod, [In, Out] T3[,,] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTextureImageEXT((uint) texture, target, lod, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      public static void GetCompressedTextureImage<T3>(int texture, TextureTarget target, int lod, [In, Out] ref T3 img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTextureImageEXT((uint) texture, target, lod, gcHandle.AddrOfPinnedObject());
          img = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      public static void GetCompressedTextureImage(uint texture, TextureTarget target, int lod, [Out] IntPtr img)
      {
        GL.Delegates.glGetCompressedTextureImageEXT(texture, target, lod, img);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      public static void GetCompressedTextureImage<T3>(uint texture, TextureTarget target, int lod, [In, Out] T3[] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTextureImageEXT(texture, target, lod, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetCompressedTextureImage<T3>(uint texture, TextureTarget target, int lod, [In, Out] T3[,] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTextureImageEXT(texture, target, lod, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetCompressedTextureImage<T3>(uint texture, TextureTarget target, int lod, [In, Out] T3[,,] img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTextureImageEXT(texture, target, lod, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetCompressedTextureImageEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetCompressedTextureImage<T3>(uint texture, TextureTarget target, int lod, [In, Out] ref T3 img) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) img, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetCompressedTextureImageEXT(texture, target, lod, gcHandle.AddrOfPinnedObject());
          img = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionFilterEXT", Version = "1.0")]
      public static void GetConvolutionFilter(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr image)
      {
        GL.Delegates.glGetConvolutionFilterEXT(target, format, type, image);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionFilterEXT", Version = "1.0")]
      public static void GetConvolutionFilter<T3>(ExtConvolution target, PixelFormat format, PixelType type, [In, Out] T3[] image) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetConvolutionFilterEXT(target, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionFilterEXT", Version = "1.0")]
      public static void GetConvolutionFilter<T3>(ExtConvolution target, PixelFormat format, PixelType type, [In, Out] T3[,] image) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetConvolutionFilterEXT(target, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionFilterEXT", Version = "1.0")]
      public static void GetConvolutionFilter<T3>(ExtConvolution target, PixelFormat format, PixelType type, [In, Out] T3[,,] image) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetConvolutionFilterEXT(target, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionFilterEXT", Version = "1.0")]
      public static void GetConvolutionFilter<T3>(ExtConvolution target, PixelFormat format, PixelType type, [In, Out] ref T3 image) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) image, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetConvolutionFilterEXT(target, format, type, gcHandle.AddrOfPinnedObject());
          image = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionParameterfvEXT", Version = "1.0")]
      public static unsafe void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetConvolutionParameterfvEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionParameterfvEXT", Version = "1.0")]
      public static unsafe void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetConvolutionParameterfvEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionParameterfvEXT", Version = "1.0")]
      public static unsafe void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, [Out] float* @params)
      {
        GL.Delegates.glGetConvolutionParameterfvEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionParameterivEXT", Version = "1.0")]
      public static unsafe void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetConvolutionParameterivEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionParameterivEXT", Version = "1.0")]
      public static unsafe void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetConvolutionParameterivEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetConvolutionParameterivEXT", Version = "1.0")]
      public static unsafe void GetConvolutionParameter(ExtConvolution target, ExtConvolution pname, [Out] int* @params)
      {
        GL.Delegates.glGetConvolutionParameterivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetDoubleIndexedvEXT", Version = "")]
      public static unsafe void GetDoubleIndexed(ExtDirectStateAccess target, int index, [Out] double[] data)
      {
        fixed (double* data1 = data)
          GL.Delegates.glGetDoubleIndexedvEXT(target, (uint) index, data1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetDoubleIndexedvEXT", Version = "")]
      public static unsafe void GetDoubleIndexed(ExtDirectStateAccess target, int index, out double data)
      {
        fixed (double* data1 = &data)
        {
          GL.Delegates.glGetDoubleIndexedvEXT(target, (uint) index, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetDoubleIndexedvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetDoubleIndexed(ExtDirectStateAccess target, int index, [Out] double* data)
      {
        GL.Delegates.glGetDoubleIndexedvEXT(target, (uint) index, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetDoubleIndexedvEXT", Version = "")]
      public static unsafe void GetDoubleIndexed(ExtDirectStateAccess target, uint index, [Out] double[] data)
      {
        fixed (double* data1 = data)
          GL.Delegates.glGetDoubleIndexedvEXT(target, index, data1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetDoubleIndexedvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetDoubleIndexed(ExtDirectStateAccess target, uint index, out double data)
      {
        fixed (double* data1 = &data)
        {
          GL.Delegates.glGetDoubleIndexedvEXT(target, index, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetDoubleIndexedvEXT", Version = "")]
      public static unsafe void GetDoubleIndexed(ExtDirectStateAccess target, uint index, [Out] double* data)
      {
        GL.Delegates.glGetDoubleIndexedvEXT(target, index, data);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFloatIndexedvEXT", Version = "")]
      public static unsafe void GetFloatIndexed(ExtDirectStateAccess target, int index, [Out] float[] data)
      {
        fixed (float* data1 = data)
          GL.Delegates.glGetFloatIndexedvEXT(target, (uint) index, data1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFloatIndexedvEXT", Version = "")]
      public static unsafe void GetFloatIndexed(ExtDirectStateAccess target, int index, out float data)
      {
        fixed (float* data1 = &data)
        {
          GL.Delegates.glGetFloatIndexedvEXT(target, (uint) index, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFloatIndexedvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetFloatIndexed(ExtDirectStateAccess target, int index, [Out] float* data)
      {
        GL.Delegates.glGetFloatIndexedvEXT(target, (uint) index, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFloatIndexedvEXT", Version = "")]
      public static unsafe void GetFloatIndexed(ExtDirectStateAccess target, uint index, [Out] float[] data)
      {
        fixed (float* data1 = data)
          GL.Delegates.glGetFloatIndexedvEXT(target, index, data1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFloatIndexedvEXT", Version = "")]
      public static unsafe void GetFloatIndexed(ExtDirectStateAccess target, uint index, out float data)
      {
        fixed (float* data1 = &data)
        {
          GL.Delegates.glGetFloatIndexedvEXT(target, index, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFloatIndexedvEXT", Version = "")]
      public static unsafe void GetFloatIndexed(ExtDirectStateAccess target, uint index, [Out] float* data)
      {
        GL.Delegates.glGetFloatIndexedvEXT(target, index, data);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glGetFragDataLocationEXT", Version = "2.0")]
      public static int GetFragDataLocation(int program, string name)
      {
        return GL.Delegates.glGetFragDataLocationEXT((uint) program, name);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glGetFragDataLocationEXT", Version = "2.0")]
      public static int GetFragDataLocation(uint program, string name)
      {
        return GL.Delegates.glGetFragDataLocationEXT(program, name);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGetFramebufferAttachmentParameterivEXT", Version = "1.2")]
      public static unsafe void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params1);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGetFramebufferAttachmentParameterivEXT", Version = "1.2")]
      public static unsafe void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGetFramebufferAttachmentParameterivEXT", Version = "1.2")]
      public static unsafe void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params)
      {
        GL.Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFramebufferParameterivEXT", Version = "")]
      public static unsafe void GetFramebufferParameter(int framebuffer, ExtDirectStateAccess pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFramebufferParameterivEXT((uint) framebuffer, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFramebufferParameterivEXT", Version = "")]
      public static unsafe void GetFramebufferParameter(int framebuffer, ExtDirectStateAccess pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFramebufferParameterivEXT((uint) framebuffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFramebufferParameterivEXT", Version = "")]
      public static unsafe void GetFramebufferParameter(int framebuffer, ExtDirectStateAccess pname, [Out] int* @params)
      {
        GL.Delegates.glGetFramebufferParameterivEXT((uint) framebuffer, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFramebufferParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetFramebufferParameter(uint framebuffer, ExtDirectStateAccess pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFramebufferParameterivEXT(framebuffer, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFramebufferParameterivEXT", Version = "")]
      public static unsafe void GetFramebufferParameter(uint framebuffer, ExtDirectStateAccess pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFramebufferParameterivEXT(framebuffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetFramebufferParameterivEXT", Version = "")]
      public static unsafe void GetFramebufferParameter(uint framebuffer, ExtDirectStateAccess pname, [Out] int* @params)
      {
        GL.Delegates.glGetFramebufferParameterivEXT(framebuffer, pname, @params);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramEXT", Version = "1.0")]
      public static void GetHistogram(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
      {
        GL.Delegates.glGetHistogramEXT(target, reset, format, type, values);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramEXT", Version = "1.0")]
      public static void GetHistogram<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[] values) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetHistogramEXT(target, reset, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramEXT", Version = "1.0")]
      public static void GetHistogram<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[,] values) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetHistogramEXT(target, reset, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramEXT", Version = "1.0")]
      public static void GetHistogram<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[,,] values) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetHistogramEXT(target, reset, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramEXT", Version = "1.0")]
      public static void GetHistogram<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In, Out] ref T4 values) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetHistogramEXT(target, reset, format, type, gcHandle.AddrOfPinnedObject());
          values = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramParameterfvEXT", Version = "1.0")]
      public static unsafe void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetHistogramParameterfvEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramParameterfvEXT", Version = "1.0")]
      public static unsafe void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetHistogramParameterfvEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramParameterfvEXT", Version = "1.0")]
      public static unsafe void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, [Out] float* @params)
      {
        GL.Delegates.glGetHistogramParameterfvEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramParameterivEXT", Version = "1.0")]
      public static unsafe void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetHistogramParameterivEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramParameterivEXT", Version = "1.0")]
      public static unsafe void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetHistogramParameterivEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetHistogramParameterivEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetHistogramParameter(ExtHistogram target, ExtHistogram pname, [Out] int* @params)
      {
        GL.Delegates.glGetHistogramParameterivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetIntegerIndexedvEXT", Version = "2.0")]
      public static unsafe void GetIntegerIndexed(GetIndexedPName target, int index, [Out] int[] data)
      {
        fixed (int* data1 = data)
          GL.Delegates.glGetIntegerIndexedvEXT(target, (uint) index, data1);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetIntegerIndexedvEXT", Version = "2.0")]
      public static unsafe void GetIntegerIndexed(GetIndexedPName target, int index, out int data)
      {
        fixed (int* data1 = &data)
        {
          GL.Delegates.glGetIntegerIndexedvEXT(target, (uint) index, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetIntegerIndexedvEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetIntegerIndexed(GetIndexedPName target, int index, [Out] int* data)
      {
        GL.Delegates.glGetIntegerIndexedvEXT(target, (uint) index, data);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetIntegerIndexedvEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetIntegerIndexed(GetIndexedPName target, uint index, [Out] int[] data)
      {
        fixed (int* data1 = data)
          GL.Delegates.glGetIntegerIndexedvEXT(target, index, data1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetIntegerIndexedvEXT", Version = "2.0")]
      public static unsafe void GetIntegerIndexed(GetIndexedPName target, uint index, out int data)
      {
        fixed (int* data1 = &data)
        {
          GL.Delegates.glGetIntegerIndexedvEXT(target, index, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glGetIntegerIndexedvEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetIntegerIndexed(GetIndexedPName target, uint index, [Out] int* data)
      {
        GL.Delegates.glGetIntegerIndexedvEXT(target, index, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantBooleanvEXT", Version = "1.2")]
      public static unsafe void GetInvariantBoolean(int id, ExtVertexShader value, [Out] bool[] data)
      {
        fixed (bool* data1 = data)
          GL.Delegates.glGetInvariantBooleanvEXT((uint) id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantBooleanvEXT", Version = "1.2")]
      public static unsafe void GetInvariantBoolean(int id, ExtVertexShader value, out bool data)
      {
        fixed (bool* data1 = &data)
        {
          GL.Delegates.glGetInvariantBooleanvEXT((uint) id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantBooleanvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInvariantBoolean(int id, ExtVertexShader value, [Out] bool* data)
      {
        GL.Delegates.glGetInvariantBooleanvEXT((uint) id, value, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantBooleanvEXT", Version = "1.2")]
      public static unsafe void GetInvariantBoolean(uint id, ExtVertexShader value, [Out] bool[] data)
      {
        fixed (bool* data1 = data)
          GL.Delegates.glGetInvariantBooleanvEXT(id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantBooleanvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInvariantBoolean(uint id, ExtVertexShader value, out bool data)
      {
        fixed (bool* data1 = &data)
        {
          GL.Delegates.glGetInvariantBooleanvEXT(id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantBooleanvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInvariantBoolean(uint id, ExtVertexShader value, [Out] bool* data)
      {
        GL.Delegates.glGetInvariantBooleanvEXT(id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantFloatvEXT", Version = "1.2")]
      public static unsafe void GetInvariantFloat(int id, ExtVertexShader value, [Out] float[] data)
      {
        fixed (float* data1 = data)
          GL.Delegates.glGetInvariantFloatvEXT((uint) id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantFloatvEXT", Version = "1.2")]
      public static unsafe void GetInvariantFloat(int id, ExtVertexShader value, out float data)
      {
        fixed (float* data1 = &data)
        {
          GL.Delegates.glGetInvariantFloatvEXT((uint) id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantFloatvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInvariantFloat(int id, ExtVertexShader value, [Out] float* data)
      {
        GL.Delegates.glGetInvariantFloatvEXT((uint) id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantFloatvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInvariantFloat(uint id, ExtVertexShader value, [Out] float[] data)
      {
        fixed (float* data1 = data)
          GL.Delegates.glGetInvariantFloatvEXT(id, value, data1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantFloatvEXT", Version = "1.2")]
      public static unsafe void GetInvariantFloat(uint id, ExtVertexShader value, out float data)
      {
        fixed (float* data1 = &data)
        {
          GL.Delegates.glGetInvariantFloatvEXT(id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantFloatvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInvariantFloat(uint id, ExtVertexShader value, [Out] float* data)
      {
        GL.Delegates.glGetInvariantFloatvEXT(id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantIntegervEXT", Version = "1.2")]
      public static unsafe void GetInvariantInteger(int id, ExtVertexShader value, [Out] int[] data)
      {
        fixed (int* data1 = data)
          GL.Delegates.glGetInvariantIntegervEXT((uint) id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantIntegervEXT", Version = "1.2")]
      public static unsafe void GetInvariantInteger(int id, ExtVertexShader value, out int data)
      {
        fixed (int* data1 = &data)
        {
          GL.Delegates.glGetInvariantIntegervEXT((uint) id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantIntegervEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInvariantInteger(int id, ExtVertexShader value, [Out] int* data)
      {
        GL.Delegates.glGetInvariantIntegervEXT((uint) id, value, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantIntegervEXT", Version = "1.2")]
      public static unsafe void GetInvariantInteger(uint id, ExtVertexShader value, [Out] int[] data)
      {
        fixed (int* data1 = data)
          GL.Delegates.glGetInvariantIntegervEXT(id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantIntegervEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInvariantInteger(uint id, ExtVertexShader value, out int data)
      {
        fixed (int* data1 = &data)
        {
          GL.Delegates.glGetInvariantIntegervEXT(id, value, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetInvariantIntegervEXT", Version = "1.2")]
      public static unsafe void GetInvariantInteger(uint id, ExtVertexShader value, [Out] int* data)
      {
        GL.Delegates.glGetInvariantIntegervEXT(id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantBooleanvEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantBoolean(int id, ExtVertexShader value, [Out] bool[] data)
      {
        fixed (bool* data1 = data)
          GL.Delegates.glGetLocalConstantBooleanvEXT((uint) id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantBooleanvEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantBoolean(int id, ExtVertexShader value, out bool data)
      {
        fixed (bool* data1 = &data)
        {
          GL.Delegates.glGetLocalConstantBooleanvEXT((uint) id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantBooleanvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetLocalConstantBoolean(int id, ExtVertexShader value, [Out] bool* data)
      {
        GL.Delegates.glGetLocalConstantBooleanvEXT((uint) id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantBooleanvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetLocalConstantBoolean(uint id, ExtVertexShader value, [Out] bool[] data)
      {
        fixed (bool* data1 = data)
          GL.Delegates.glGetLocalConstantBooleanvEXT(id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantBooleanvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetLocalConstantBoolean(uint id, ExtVertexShader value, out bool data)
      {
        fixed (bool* data1 = &data)
        {
          GL.Delegates.glGetLocalConstantBooleanvEXT(id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantBooleanvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetLocalConstantBoolean(uint id, ExtVertexShader value, [Out] bool* data)
      {
        GL.Delegates.glGetLocalConstantBooleanvEXT(id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantFloatvEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantFloat(int id, ExtVertexShader value, [Out] float[] data)
      {
        fixed (float* data1 = data)
          GL.Delegates.glGetLocalConstantFloatvEXT((uint) id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantFloatvEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantFloat(int id, ExtVertexShader value, out float data)
      {
        fixed (float* data1 = &data)
        {
          GL.Delegates.glGetLocalConstantFloatvEXT((uint) id, value, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantFloatvEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantFloat(int id, ExtVertexShader value, [Out] float* data)
      {
        GL.Delegates.glGetLocalConstantFloatvEXT((uint) id, value, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantFloatvEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantFloat(uint id, ExtVertexShader value, [Out] float[] data)
      {
        fixed (float* data1 = data)
          GL.Delegates.glGetLocalConstantFloatvEXT(id, value, data1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantFloatvEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantFloat(uint id, ExtVertexShader value, out float data)
      {
        fixed (float* data1 = &data)
        {
          GL.Delegates.glGetLocalConstantFloatvEXT(id, value, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantFloatvEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantFloat(uint id, ExtVertexShader value, [Out] float* data)
      {
        GL.Delegates.glGetLocalConstantFloatvEXT(id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantIntegervEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantInteger(int id, ExtVertexShader value, [Out] int[] data)
      {
        fixed (int* data1 = data)
          GL.Delegates.glGetLocalConstantIntegervEXT((uint) id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantIntegervEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantInteger(int id, ExtVertexShader value, out int data)
      {
        fixed (int* data1 = &data)
        {
          GL.Delegates.glGetLocalConstantIntegervEXT((uint) id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantIntegervEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetLocalConstantInteger(int id, ExtVertexShader value, [Out] int* data)
      {
        GL.Delegates.glGetLocalConstantIntegervEXT((uint) id, value, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantIntegervEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantInteger(uint id, ExtVertexShader value, [Out] int[] data)
      {
        fixed (int* data1 = data)
          GL.Delegates.glGetLocalConstantIntegervEXT(id, value, data1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantIntegervEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantInteger(uint id, ExtVertexShader value, out int data)
      {
        fixed (int* data1 = &data)
        {
          GL.Delegates.glGetLocalConstantIntegervEXT(id, value, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetLocalConstantIntegervEXT", Version = "1.2")]
      public static unsafe void GetLocalConstantInteger(uint id, ExtVertexShader value, [Out] int* data)
      {
        GL.Delegates.glGetLocalConstantIntegervEXT(id, value, data);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxEXT", Version = "1.0")]
      public static void GetMinmax(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values)
      {
        GL.Delegates.glGetMinmaxEXT(target, reset, format, type, values);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxEXT", Version = "1.0")]
      public static void GetMinmax<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[] values) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMinmaxEXT(target, reset, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxEXT", Version = "1.0")]
      public static void GetMinmax<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[,] values) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMinmaxEXT(target, reset, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxEXT", Version = "1.0")]
      public static void GetMinmax<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In, Out] T4[,,] values) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMinmaxEXT(target, reset, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxEXT", Version = "1.0")]
      public static void GetMinmax<T4>(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [In, Out] ref T4 values) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) values, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMinmaxEXT(target, reset, format, type, gcHandle.AddrOfPinnedObject());
          values = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxParameterfvEXT", Version = "1.0")]
      public static unsafe void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetMinmaxParameterfvEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxParameterfvEXT", Version = "1.0")]
      public static unsafe void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetMinmaxParameterfvEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxParameterfvEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, [Out] float* @params)
      {
        GL.Delegates.glGetMinmaxParameterfvEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxParameterivEXT", Version = "1.0")]
      public static unsafe void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMinmaxParameterivEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxParameterivEXT", Version = "1.0")]
      public static unsafe void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetMinmaxParameterivEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glGetMinmaxParameterivEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetMinmaxParameter(ExtHistogram target, ExtHistogram pname, [Out] int* @params)
      {
        GL.Delegates.glGetMinmaxParameterivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexEnvfvEXT", Version = "")]
      public static unsafe void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetMultiTexEnvfvEXT(texunit, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexEnvfvEXT", Version = "")]
      public static unsafe void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexEnvfvEXT(texunit, target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexEnvfvEXT", Version = "")]
      public static unsafe void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] float* @params)
      {
        GL.Delegates.glGetMultiTexEnvfvEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexEnvivEXT", Version = "")]
      public static unsafe void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMultiTexEnvivEXT(texunit, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexEnvivEXT", Version = "")]
      public static unsafe void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexEnvivEXT(texunit, target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexEnvivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetMultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetMultiTexEnvivEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexGendvEXT", Version = "")]
      public static unsafe void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetMultiTexGendvEXT(texunit, coord, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexGendvEXT", Version = "")]
      public static unsafe void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexGendvEXT(texunit, coord, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexGendvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] double* @params)
      {
        GL.Delegates.glGetMultiTexGendvEXT(texunit, coord, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexGenfvEXT", Version = "")]
      public static unsafe void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetMultiTexGenfvEXT(texunit, coord, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexGenfvEXT", Version = "")]
      public static unsafe void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexGenfvEXT(texunit, coord, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexGenfvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] float* @params)
      {
        GL.Delegates.glGetMultiTexGenfvEXT(texunit, coord, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexGenivEXT", Version = "")]
      public static unsafe void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMultiTexGenivEXT(texunit, coord, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexGenivEXT", Version = "")]
      public static unsafe void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexGenivEXT(texunit, coord, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexGenivEXT", Version = "")]
      public static unsafe void GetMultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetMultiTexGenivEXT(texunit, coord, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexImageEXT", Version = "")]
      public static void GetMultiTexImage(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels)
      {
        GL.Delegates.glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexImageEXT", Version = "")]
      public static void GetMultiTexImage<T5>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T5[] pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMultiTexImageEXT(texunit, target, level, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexImageEXT", Version = "")]
      public static void GetMultiTexImage<T5>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T5[,] pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMultiTexImageEXT(texunit, target, level, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexImageEXT", Version = "")]
      public static void GetMultiTexImage<T5>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T5[,,] pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMultiTexImageEXT(texunit, target, level, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexImageEXT", Version = "")]
      public static void GetMultiTexImage<T5>(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] ref T5 pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMultiTexImageEXT(texunit, target, level, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexLevelParameterfvEXT", Version = "")]
      public static unsafe void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexLevelParameterfvEXT", Version = "")]
      public static unsafe void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexLevelParameterfvEXT", Version = "")]
      public static unsafe void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
      {
        GL.Delegates.glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexLevelParameterivEXT", Version = "")]
      public static unsafe void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexLevelParameterivEXT", Version = "")]
      public static unsafe void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexLevelParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetMultiTexLevelParameter(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterfvEXT", Version = "")]
      public static unsafe void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetMultiTexParameterfvEXT(texunit, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterfvEXT", Version = "")]
      public static unsafe void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexParameterfvEXT(texunit, target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterfvEXT", Version = "")]
      public static unsafe void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] float* @params)
      {
        GL.Delegates.glGetMultiTexParameterfvEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterIivEXT", Version = "")]
      public static unsafe void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMultiTexParameterIivEXT(texunit, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterIivEXT", Version = "")]
      public static unsafe void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexParameterIivEXT(texunit, target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetMultiTexParameterIivEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterIuivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetMultiTexParameterIuivEXT(texunit, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterIuivEXT", Version = "")]
      public static unsafe void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexParameterIuivEXT(texunit, target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterIuivEXT", Version = "")]
      public static unsafe void GetMultiTexParameterI(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
      {
        GL.Delegates.glGetMultiTexParameterIuivEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterivEXT", Version = "")]
      public static unsafe void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMultiTexParameterivEXT(texunit, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterivEXT", Version = "")]
      public static unsafe void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetMultiTexParameterivEXT(texunit, target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetMultiTexParameterivEXT", Version = "")]
      public static unsafe void GetMultiTexParameter(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetMultiTexParameterivEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferParameterivEXT", Version = "")]
      public static unsafe void GetNamedBufferParameter(int buffer, ExtDirectStateAccess pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetNamedBufferParameterivEXT((uint) buffer, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferParameterivEXT", Version = "")]
      public static unsafe void GetNamedBufferParameter(int buffer, ExtDirectStateAccess pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedBufferParameterivEXT((uint) buffer, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedBufferParameter(int buffer, ExtDirectStateAccess pname, [Out] int* @params)
      {
        GL.Delegates.glGetNamedBufferParameterivEXT((uint) buffer, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedBufferParameter(uint buffer, ExtDirectStateAccess pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetNamedBufferParameterivEXT(buffer, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferParameterivEXT", Version = "")]
      public static unsafe void GetNamedBufferParameter(uint buffer, ExtDirectStateAccess pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedBufferParameterivEXT(buffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferParameterivEXT", Version = "")]
      public static unsafe void GetNamedBufferParameter(uint buffer, ExtDirectStateAccess pname, [Out] int* @params)
      {
        GL.Delegates.glGetNamedBufferParameterivEXT(buffer, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      public static void GetNamedBufferPointer(int buffer, ExtDirectStateAccess pname, [Out] IntPtr @params)
      {
        GL.Delegates.glGetNamedBufferPointervEXT((uint) buffer, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      public static void GetNamedBufferPointer<T2>(int buffer, ExtDirectStateAccess pname, [In, Out] T2[] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferPointervEXT((uint) buffer, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      public static void GetNamedBufferPointer<T2>(int buffer, ExtDirectStateAccess pname, [In, Out] T2[,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferPointervEXT((uint) buffer, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      public static void GetNamedBufferPointer<T2>(int buffer, ExtDirectStateAccess pname, [In, Out] T2[,,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferPointervEXT((uint) buffer, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      public static void GetNamedBufferPointer<T2>(int buffer, ExtDirectStateAccess pname, [In, Out] ref T2 @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferPointervEXT((uint) buffer, pname, gcHandle.AddrOfPinnedObject());
          @params = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      public static void GetNamedBufferPointer(uint buffer, ExtDirectStateAccess pname, [Out] IntPtr @params)
      {
        GL.Delegates.glGetNamedBufferPointervEXT(buffer, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      public static void GetNamedBufferPointer<T2>(uint buffer, ExtDirectStateAccess pname, [In, Out] T2[] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferPointervEXT(buffer, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetNamedBufferPointer<T2>(uint buffer, ExtDirectStateAccess pname, [In, Out] T2[,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferPointervEXT(buffer, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      public static void GetNamedBufferPointer<T2>(uint buffer, ExtDirectStateAccess pname, [In, Out] T2[,,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferPointervEXT(buffer, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferPointervEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetNamedBufferPointer<T2>(uint buffer, ExtDirectStateAccess pname, [In, Out] ref T2 @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferPointervEXT(buffer, pname, gcHandle.AddrOfPinnedObject());
          @params = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      public static void GetNamedBufferSubData(int buffer, IntPtr offset, IntPtr size, [Out] IntPtr data)
      {
        GL.Delegates.glGetNamedBufferSubDataEXT((uint) buffer, offset, size, data);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      public static void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferSubDataEXT((uint) buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      public static void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferSubDataEXT((uint) buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      public static void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferSubDataEXT((uint) buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      public static void GetNamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferSubDataEXT((uint) buffer, offset, size, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetNamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, [Out] IntPtr data)
      {
        GL.Delegates.glGetNamedBufferSubDataEXT(buffer, offset, size, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferSubDataEXT(buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferSubDataEXT(buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferSubDataEXT(buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedBufferSubDataEXT", Version = "")]
      public static void GetNamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedBufferSubDataEXT(buffer, offset, size, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT", Version = "")]
      public static unsafe void GetNamedFramebufferAttachmentParameter(int framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetNamedFramebufferAttachmentParameterivEXT((uint) framebuffer, attachment, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT", Version = "")]
      public static unsafe void GetNamedFramebufferAttachmentParameter(int framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedFramebufferAttachmentParameterivEXT((uint) framebuffer, attachment, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedFramebufferAttachmentParameter(int framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int* @params)
      {
        GL.Delegates.glGetNamedFramebufferAttachmentParameterivEXT((uint) framebuffer, attachment, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT", Version = "")]
      public static unsafe void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedFramebufferAttachmentParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedFramebufferAttachmentParameter(uint framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int* @params)
      {
        GL.Delegates.glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramivEXT", Version = "")]
      public static unsafe void GetNamedProgram(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedProgramivEXT((uint) program, target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedProgram(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] int* @params)
      {
        GL.Delegates.glGetNamedProgramivEXT((uint) program, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedProgram(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedProgramivEXT(program, target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramivEXT", Version = "")]
      public static unsafe void GetNamedProgram(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] int* @params)
      {
        GL.Delegates.glGetNamedProgramivEXT(program, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterdvEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetNamedProgramLocalParameterdvEXT((uint) program, target, (uint) index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterdvEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetNamedProgramLocalParameterdvEXT((uint) program, target, (uint) index, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterdvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, [Out] double* @params)
      {
        GL.Delegates.glGetNamedProgramLocalParameterdvEXT((uint) program, target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterdvEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetNamedProgramLocalParameterdvEXT(program, target, index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterdvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetNamedProgramLocalParameterdvEXT(program, target, index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterdvEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, [Out] double* @params)
      {
        GL.Delegates.glGetNamedProgramLocalParameterdvEXT(program, target, index, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterfvEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetNamedProgramLocalParameterfvEXT((uint) program, target, (uint) index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterfvEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetNamedProgramLocalParameterfvEXT((uint) program, target, (uint) index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterfvEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameter(int program, ExtDirectStateAccess target, int index, [Out] float* @params)
      {
        GL.Delegates.glGetNamedProgramLocalParameterfvEXT((uint) program, target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterfvEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetNamedProgramLocalParameterfvEXT(program, target, index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterfvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetNamedProgramLocalParameterfvEXT(program, target, index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterfvEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameter(uint program, ExtDirectStateAccess target, uint index, [Out] float* @params)
      {
        GL.Delegates.glGetNamedProgramLocalParameterfvEXT(program, target, index, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterIivEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameterI(int program, ExtDirectStateAccess target, int index, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetNamedProgramLocalParameterIivEXT((uint) program, target, (uint) index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterIivEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameterI(int program, ExtDirectStateAccess target, int index, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedProgramLocalParameterIivEXT((uint) program, target, (uint) index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterIivEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameterI(int program, ExtDirectStateAccess target, int index, [Out] int* @params)
      {
        GL.Delegates.glGetNamedProgramLocalParameterIivEXT((uint) program, target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterIivEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetNamedProgramLocalParameterIivEXT(program, target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterIivEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedProgramLocalParameterIivEXT(program, target, index, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, [Out] int* @params)
      {
        GL.Delegates.glGetNamedProgramLocalParameterIivEXT(program, target, index, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetNamedProgramLocalParameterIuivEXT(program, target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetNamedProgramLocalParameterIuivEXT(program, target, index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramLocalParameterIuivEXT", Version = "")]
      public static unsafe void GetNamedProgramLocalParameterI(uint program, ExtDirectStateAccess target, uint index, [Out] uint* @params)
      {
        GL.Delegates.glGetNamedProgramLocalParameterIuivEXT(program, target, index, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      public static void GetNamedProgramString(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] IntPtr @string)
      {
        GL.Delegates.glGetNamedProgramStringEXT((uint) program, target, pname, @string);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      public static void GetNamedProgramString<T3>(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In, Out] T3[] @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedProgramStringEXT((uint) program, target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      public static void GetNamedProgramString<T3>(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In, Out] T3[,] @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedProgramStringEXT((uint) program, target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      public static void GetNamedProgramString<T3>(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In, Out] T3[,,] @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedProgramStringEXT((uint) program, target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      public static void GetNamedProgramString<T3>(int program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In, Out] ref T3 @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedProgramStringEXT((uint) program, target, pname, gcHandle.AddrOfPinnedObject());
          @string = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      public static void GetNamedProgramString(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] IntPtr @string)
      {
        GL.Delegates.glGetNamedProgramStringEXT(program, target, pname, @string);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetNamedProgramString<T3>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In, Out] T3[] @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedProgramStringEXT(program, target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      public static void GetNamedProgramString<T3>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In, Out] T3[,] @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedProgramStringEXT(program, target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetNamedProgramString<T3>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In, Out] T3[,,] @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedProgramStringEXT(program, target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedProgramStringEXT", Version = "")]
      public static void GetNamedProgramString<T3>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [In, Out] ref T3 @string) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetNamedProgramStringEXT(program, target, pname, gcHandle.AddrOfPinnedObject());
          @string = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedRenderbufferParameterivEXT", Version = "")]
      public static unsafe void GetNamedRenderbufferParameter(int renderbuffer, RenderbufferParameterName pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetNamedRenderbufferParameterivEXT((uint) renderbuffer, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedRenderbufferParameterivEXT", Version = "")]
      public static unsafe void GetNamedRenderbufferParameter(int renderbuffer, RenderbufferParameterName pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedRenderbufferParameterivEXT((uint) renderbuffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedRenderbufferParameterivEXT", Version = "")]
      public static unsafe void GetNamedRenderbufferParameter(int renderbuffer, RenderbufferParameterName pname, [Out] int* @params)
      {
        GL.Delegates.glGetNamedRenderbufferParameterivEXT((uint) renderbuffer, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedRenderbufferParameterivEXT", Version = "")]
      public static unsafe void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedRenderbufferParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetNamedRenderbufferParameterivEXT", Version = "")]
      public static unsafe void GetNamedRenderbufferParameter(uint renderbuffer, RenderbufferParameterName pname, [Out] int* @params)
      {
        GL.Delegates.glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      public static void GetPointerIndexed(ExtDirectStateAccess target, int index, [Out] IntPtr data)
      {
        GL.Delegates.glGetPointerIndexedvEXT(target, (uint) index, data);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      public static void GetPointerIndexed<T2>(ExtDirectStateAccess target, int index, [In, Out] T2[] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointerIndexedvEXT(target, (uint) index, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      public static void GetPointerIndexed<T2>(ExtDirectStateAccess target, int index, [In, Out] T2[,] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointerIndexedvEXT(target, (uint) index, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      public static void GetPointerIndexed<T2>(ExtDirectStateAccess target, int index, [In, Out] T2[,,] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointerIndexedvEXT(target, (uint) index, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      public static void GetPointerIndexed<T2>(ExtDirectStateAccess target, int index, [In, Out] ref T2 data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointerIndexedvEXT(target, (uint) index, gcHandle.AddrOfPinnedObject());
          data = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      public static void GetPointerIndexed(ExtDirectStateAccess target, uint index, [Out] IntPtr data)
      {
        GL.Delegates.glGetPointerIndexedvEXT(target, index, data);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetPointerIndexed<T2>(ExtDirectStateAccess target, uint index, [In, Out] T2[] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointerIndexedvEXT(target, index, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetPointerIndexed<T2>(ExtDirectStateAccess target, uint index, [In, Out] T2[,] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointerIndexedvEXT(target, index, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      public static void GetPointerIndexed<T2>(ExtDirectStateAccess target, uint index, [In, Out] T2[,,] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointerIndexedvEXT(target, index, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetPointerIndexedvEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetPointerIndexed<T2>(ExtDirectStateAccess target, uint index, [In, Out] ref T2 data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointerIndexedvEXT(target, index, gcHandle.AddrOfPinnedObject());
          data = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glGetPointervEXT", Version = "1.0")]
      public static void GetPointer(GetPointervPName pname, [Out] IntPtr @params)
      {
        GL.Delegates.glGetPointervEXT(pname, @params);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glGetPointervEXT", Version = "1.0")]
      public static void GetPointer<T1>(GetPointervPName pname, [In, Out] T1[] @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointervEXT(pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glGetPointervEXT", Version = "1.0")]
      public static void GetPointer<T1>(GetPointervPName pname, [In, Out] T1[,] @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointervEXT(pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glGetPointervEXT", Version = "1.0")]
      public static void GetPointer<T1>(GetPointervPName pname, [In, Out] T1[,,] @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointervEXT(pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glGetPointervEXT", Version = "1.0")]
      public static void GetPointer<T1>(GetPointervPName pname, [In, Out] ref T1 @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPointervEXT(pname, gcHandle.AddrOfPinnedObject());
          @params = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_timer_query", EntryPoint = "glGetQueryObjecti64vEXT", Version = "1.5")]
      public static unsafe void GetQueryObject(int id, ExtTimerQuery pname, [Out] long[] @params)
      {
        fixed (long* params1 = @params)
          GL.Delegates.glGetQueryObjecti64vEXT((uint) id, pname, params1);
      }

      [AutoGenerated(Category = "EXT_timer_query", EntryPoint = "glGetQueryObjecti64vEXT", Version = "1.5")]
      public static unsafe void GetQueryObject(int id, ExtTimerQuery pname, out long @params)
      {
        fixed (long* params1 = &@params)
        {
          GL.Delegates.glGetQueryObjecti64vEXT((uint) id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_timer_query", EntryPoint = "glGetQueryObjecti64vEXT", Version = "1.5")]
      public static unsafe void GetQueryObject(int id, ExtTimerQuery pname, [Out] long* @params)
      {
        GL.Delegates.glGetQueryObjecti64vEXT((uint) id, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_timer_query", EntryPoint = "glGetQueryObjecti64vEXT", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ExtTimerQuery pname, [Out] long[] @params)
      {
        fixed (long* params1 = @params)
          GL.Delegates.glGetQueryObjecti64vEXT(id, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_timer_query", EntryPoint = "glGetQueryObjecti64vEXT", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ExtTimerQuery pname, out long @params)
      {
        fixed (long* params1 = &@params)
        {
          GL.Delegates.glGetQueryObjecti64vEXT(id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_timer_query", EntryPoint = "glGetQueryObjecti64vEXT", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ExtTimerQuery pname, [Out] long* @params)
      {
        GL.Delegates.glGetQueryObjecti64vEXT(id, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_timer_query", EntryPoint = "glGetQueryObjectui64vEXT", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ExtTimerQuery pname, [Out] ulong[] @params)
      {
        fixed (ulong* params1 = @params)
          GL.Delegates.glGetQueryObjectui64vEXT(id, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_timer_query", EntryPoint = "glGetQueryObjectui64vEXT", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ExtTimerQuery pname, out ulong @params)
      {
        fixed (ulong* params1 = &@params)
        {
          GL.Delegates.glGetQueryObjectui64vEXT(id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_timer_query", EntryPoint = "glGetQueryObjectui64vEXT", Version = "1.5")]
      public static unsafe void GetQueryObject(uint id, ExtTimerQuery pname, [Out] ulong* @params)
      {
        GL.Delegates.glGetQueryObjectui64vEXT(id, pname, @params);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGetRenderbufferParameterivEXT", Version = "1.2")]
      public static unsafe void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetRenderbufferParameterivEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGetRenderbufferParameterivEXT", Version = "1.2")]
      public static unsafe void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetRenderbufferParameterivEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glGetRenderbufferParameterivEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params)
      {
        GL.Delegates.glGetRenderbufferParameterivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span)
      {
        GL.Delegates.glGetSeparableFilterEXT(target, format, type, row, column, span);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] T5[] span) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, row, column, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] T5[,] span) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, row, column, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] T5[,,] span) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, row, column, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [In, Out] ref T5 span) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, row, column, gcHandle.AddrOfPinnedObject());
          span = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [In, Out] T4[] column, [In, Out] T5[,,] span) where T4 : struct where T5 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, row, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [In, Out] T4[,] column, [In, Out] T5[,,] span) where T4 : struct where T5 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, row, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T4 : struct where T5 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, row, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [In, Out] ref T4 column, [In, Out] T5[,,] span) where T4 : struct where T5 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, row, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
          column = (T4) gcHandle1.Target;
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [In, Out] T3[] row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
          gcHandle3.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [In, Out] T3[,] row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
          gcHandle3.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [In, Out] T3[,,] row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
          gcHandle3.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glGetSeparableFilterEXT", Version = "1.0")]
      public static void GetSeparableFilter<T3, T4, T5>(ExtConvolution target, PixelFormat format, PixelType type, [In, Out] ref T3 row, [In, Out] T4[,,] column, [In, Out] T5[,,] span) where T3 : struct where T4 : struct where T5 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        GCHandle gcHandle3 = GCHandle.Alloc((object) span, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetSeparableFilterEXT(target, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject(), gcHandle3.AddrOfPinnedObject());
          row = (T3) gcHandle1.Target;
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
          gcHandle3.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glGetTexParameterIivEXT", Version = "2.0")]
      public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTexParameterIivEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glGetTexParameterIivEXT", Version = "2.0")]
      public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetTexParameterIivEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glGetTexParameterIivEXT", Version = "2.0")]
      public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetTexParameterIivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glGetTexParameterIuivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetTexParameterIuivEXT(target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glGetTexParameterIuivEXT", Version = "2.0")]
      public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetTexParameterIuivEXT(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glGetTexParameterIuivEXT", Version = "2.0")]
      public static unsafe void GetTexParameterI(TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
      {
        GL.Delegates.glGetTexParameterIuivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      public static void GetTextureImage(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels)
      {
        GL.Delegates.glGetTextureImageEXT((uint) texture, target, level, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      public static void GetTextureImage<T5>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T5[] pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTextureImageEXT((uint) texture, target, level, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      public static void GetTextureImage<T5>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T5[,] pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTextureImageEXT((uint) texture, target, level, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      public static void GetTextureImage<T5>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T5[,,] pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTextureImageEXT((uint) texture, target, level, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      public static void GetTextureImage<T5>(int texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] ref T5 pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTextureImageEXT((uint) texture, target, level, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetTextureImage(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels)
      {
        GL.Delegates.glGetTextureImageEXT(texture, target, level, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetTextureImage<T5>(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T5[] pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTextureImageEXT(texture, target, level, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      public static void GetTextureImage<T5>(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T5[,] pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTextureImageEXT(texture, target, level, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      public static void GetTextureImage<T5>(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] T5[,,] pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTextureImageEXT(texture, target, level, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureImageEXT", Version = "")]
      [CLSCompliant(false)]
      public static void GetTextureImage<T5>(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [In, Out] ref T5 pixels) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTextureImageEXT(texture, target, level, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterfvEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetTextureLevelParameterfvEXT((uint) texture, target, level, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterfvEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetTextureLevelParameterfvEXT((uint) texture, target, level, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterfvEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
      {
        GL.Delegates.glGetTextureLevelParameterfvEXT((uint) texture, target, level, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterfvEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetTextureLevelParameterfvEXT(texture, target, level, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterfvEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetTextureLevelParameterfvEXT(texture, target, level, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterfvEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params)
      {
        GL.Delegates.glGetTextureLevelParameterfvEXT(texture, target, level, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterivEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTextureLevelParameterivEXT((uint) texture, target, level, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterivEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetTextureLevelParameterivEXT((uint) texture, target, level, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureLevelParameter(int texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetTextureLevelParameterivEXT((uint) texture, target, level, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTextureLevelParameterivEXT(texture, target, level, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterivEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetTextureLevelParameterivEXT(texture, target, level, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureLevelParameterivEXT", Version = "")]
      public static unsafe void GetTextureLevelParameter(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetTextureLevelParameterivEXT(texture, target, level, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterfvEXT", Version = "")]
      public static unsafe void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetTextureParameterfvEXT((uint) texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterfvEXT", Version = "")]
      public static unsafe void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetTextureParameterfvEXT((uint) texture, target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterfvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, [Out] float* @params)
      {
        GL.Delegates.glGetTextureParameterfvEXT((uint) texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterfvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetTextureParameterfvEXT(texture, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterfvEXT", Version = "")]
      public static unsafe void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetTextureParameterfvEXT(texture, target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterfvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, [Out] float* @params)
      {
        GL.Delegates.glGetTextureParameterfvEXT(texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterIivEXT", Version = "")]
      public static unsafe void GetTextureParameterI(int texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTextureParameterIivEXT((uint) texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterIivEXT", Version = "")]
      public static unsafe void GetTextureParameterI(int texture, TextureTarget target, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetTextureParameterIivEXT((uint) texture, target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureParameterI(int texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetTextureParameterIivEXT((uint) texture, target, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterIivEXT", Version = "")]
      public static unsafe void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTextureParameterIivEXT(texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetTextureParameterIivEXT(texture, target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetTextureParameterIivEXT(texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterIuivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetTextureParameterIuivEXT(texture, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterIuivEXT", Version = "")]
      public static unsafe void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetTextureParameterIuivEXT(texture, target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterIuivEXT", Version = "")]
      public static unsafe void GetTextureParameterI(uint texture, TextureTarget target, GetTextureParameter pname, [Out] uint* @params)
      {
        GL.Delegates.glGetTextureParameterIuivEXT(texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterivEXT", Version = "")]
      public static unsafe void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTextureParameterivEXT((uint) texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterivEXT", Version = "")]
      public static unsafe void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetTextureParameterivEXT((uint) texture, target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterivEXT", Version = "")]
      public static unsafe void GetTextureParameter(int texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetTextureParameterivEXT((uint) texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTextureParameterivEXT(texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetTextureParameterivEXT(texture, target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glGetTextureParameterivEXT", Version = "")]
      public static unsafe void GetTextureParameter(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetTextureParameterivEXT(texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glGetTransformFeedbackVaryingEXT", Version = "2.0")]
      public static unsafe void GetTransformFeedbackVarying(int program, int index, int bufSize, out int length, out int size, out ExtTransformFeedback type, [Out] StringBuilder name)
      {
        fixed (int* length1 = &length)
          fixed (int* size1 = &size)
            fixed (ExtTransformFeedback* type1 = &type)
            {
              GL.Delegates.glGetTransformFeedbackVaryingEXT((uint) program, (uint) index, bufSize, length1, size1, type1, name);
              length = *length1;
              size = *size1;
              type = *type1;
            }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glGetTransformFeedbackVaryingEXT", Version = "2.0")]
      public static unsafe void GetTransformFeedbackVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] ExtTransformFeedback* type, [Out] StringBuilder name)
      {
        GL.Delegates.glGetTransformFeedbackVaryingEXT((uint) program, (uint) index, bufSize, length, size, type, name);
      }

      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glGetTransformFeedbackVaryingEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out ExtTransformFeedback type, [Out] StringBuilder name)
      {
        fixed (int* length1 = &length)
          fixed (int* size1 = &size)
            fixed (ExtTransformFeedback* type1 = &type)
            {
              GL.Delegates.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length1, size1, type1, name);
              length = *length1;
              size = *size1;
              type = *type1;
            }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glGetTransformFeedbackVaryingEXT", Version = "2.0")]
      public static unsafe void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ExtTransformFeedback* type, [Out] StringBuilder name)
      {
        GL.Delegates.glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
      }

      [AutoGenerated(Category = "EXT_bindable_uniform", EntryPoint = "glGetUniformBufferSizeEXT", Version = "2.0")]
      public static int GetUniformBufferSize(int program, int location)
      {
        return GL.Delegates.glGetUniformBufferSizeEXT((uint) program, location);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_bindable_uniform", EntryPoint = "glGetUniformBufferSizeEXT", Version = "2.0")]
      public static int GetUniformBufferSize(uint program, int location)
      {
        return GL.Delegates.glGetUniformBufferSizeEXT(program, location);
      }

      [AutoGenerated(Category = "EXT_bindable_uniform", EntryPoint = "glGetUniformOffsetEXT", Version = "2.0")]
      public static IntPtr GetUniformOffset(int program, int location)
      {
        return GL.Delegates.glGetUniformOffsetEXT((uint) program, location);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_bindable_uniform", EntryPoint = "glGetUniformOffsetEXT", Version = "2.0")]
      public static IntPtr GetUniformOffset(uint program, int location)
      {
        return GL.Delegates.glGetUniformOffsetEXT(program, location);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glGetUniformuivEXT", Version = "2.0")]
      public static unsafe void GetUniform(int program, int location, [Out] int[] @params)
      {
        fixed (int* numPtr = @params)
          GL.Delegates.glGetUniformuivEXT((uint) program, location, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glGetUniformuivEXT", Version = "2.0")]
      public static unsafe void GetUniform(int program, int location, out int @params)
      {
        fixed (int* numPtr = &@params)
        {
          GL.Delegates.glGetUniformuivEXT((uint) program, location, (uint*) numPtr);
          @params = *numPtr;
        }
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glGetUniformuivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(int program, int location, [Out] int* @params)
      {
        GL.Delegates.glGetUniformuivEXT((uint) program, location, (uint*) @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glGetUniformuivEXT", Version = "2.0")]
      public static unsafe void GetUniform(uint program, int location, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetUniformuivEXT(program, location, params1);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glGetUniformuivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(uint program, int location, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetUniformuivEXT(program, location, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glGetUniformuivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(uint program, int location, [Out] uint* @params)
      {
        GL.Delegates.glGetUniformuivEXT(program, location, @params);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantBooleanvEXT", Version = "1.2")]
      public static unsafe void GetVariantBoolean(int id, ExtVertexShader value, [Out] bool[] data)
      {
        fixed (bool* data1 = data)
          GL.Delegates.glGetVariantBooleanvEXT((uint) id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantBooleanvEXT", Version = "1.2")]
      public static unsafe void GetVariantBoolean(int id, ExtVertexShader value, out bool data)
      {
        fixed (bool* data1 = &data)
        {
          GL.Delegates.glGetVariantBooleanvEXT((uint) id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantBooleanvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVariantBoolean(int id, ExtVertexShader value, [Out] bool* data)
      {
        GL.Delegates.glGetVariantBooleanvEXT((uint) id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantBooleanvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVariantBoolean(uint id, ExtVertexShader value, [Out] bool[] data)
      {
        fixed (bool* data1 = data)
          GL.Delegates.glGetVariantBooleanvEXT(id, value, data1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantBooleanvEXT", Version = "1.2")]
      public static unsafe void GetVariantBoolean(uint id, ExtVertexShader value, out bool data)
      {
        fixed (bool* data1 = &data)
        {
          GL.Delegates.glGetVariantBooleanvEXT(id, value, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantBooleanvEXT", Version = "1.2")]
      public static unsafe void GetVariantBoolean(uint id, ExtVertexShader value, [Out] bool* data)
      {
        GL.Delegates.glGetVariantBooleanvEXT(id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantFloatvEXT", Version = "1.2")]
      public static unsafe void GetVariantFloat(int id, ExtVertexShader value, [Out] float[] data)
      {
        fixed (float* data1 = data)
          GL.Delegates.glGetVariantFloatvEXT((uint) id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantFloatvEXT", Version = "1.2")]
      public static unsafe void GetVariantFloat(int id, ExtVertexShader value, out float data)
      {
        fixed (float* data1 = &data)
        {
          GL.Delegates.glGetVariantFloatvEXT((uint) id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantFloatvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVariantFloat(int id, ExtVertexShader value, [Out] float* data)
      {
        GL.Delegates.glGetVariantFloatvEXT((uint) id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantFloatvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVariantFloat(uint id, ExtVertexShader value, [Out] float[] data)
      {
        fixed (float* data1 = data)
          GL.Delegates.glGetVariantFloatvEXT(id, value, data1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantFloatvEXT", Version = "1.2")]
      public static unsafe void GetVariantFloat(uint id, ExtVertexShader value, out float data)
      {
        fixed (float* data1 = &data)
        {
          GL.Delegates.glGetVariantFloatvEXT(id, value, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantFloatvEXT", Version = "1.2")]
      public static unsafe void GetVariantFloat(uint id, ExtVertexShader value, [Out] float* data)
      {
        GL.Delegates.glGetVariantFloatvEXT(id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantIntegervEXT", Version = "1.2")]
      public static unsafe void GetVariantInteger(int id, ExtVertexShader value, [Out] int[] data)
      {
        fixed (int* data1 = data)
          GL.Delegates.glGetVariantIntegervEXT((uint) id, value, data1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantIntegervEXT", Version = "1.2")]
      public static unsafe void GetVariantInteger(int id, ExtVertexShader value, out int data)
      {
        fixed (int* data1 = &data)
        {
          GL.Delegates.glGetVariantIntegervEXT((uint) id, value, data1);
          data = *data1;
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantIntegervEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVariantInteger(int id, ExtVertexShader value, [Out] int* data)
      {
        GL.Delegates.glGetVariantIntegervEXT((uint) id, value, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantIntegervEXT", Version = "1.2")]
      public static unsafe void GetVariantInteger(uint id, ExtVertexShader value, [Out] int[] data)
      {
        fixed (int* data1 = data)
          GL.Delegates.glGetVariantIntegervEXT(id, value, data1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantIntegervEXT", Version = "1.2")]
      public static unsafe void GetVariantInteger(uint id, ExtVertexShader value, out int data)
      {
        fixed (int* data1 = &data)
        {
          GL.Delegates.glGetVariantIntegervEXT(id, value, data1);
          data = *data1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantIntegervEXT", Version = "1.2")]
      public static unsafe void GetVariantInteger(uint id, ExtVertexShader value, [Out] int* data)
      {
        GL.Delegates.glGetVariantIntegervEXT(id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      public static void GetVariantPointer(int id, ExtVertexShader value, [Out] IntPtr data)
      {
        GL.Delegates.glGetVariantPointervEXT((uint) id, value, data);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      public static void GetVariantPointer<T2>(int id, ExtVertexShader value, [In, Out] T2[] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVariantPointervEXT((uint) id, value, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      public static void GetVariantPointer<T2>(int id, ExtVertexShader value, [In, Out] T2[,] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVariantPointervEXT((uint) id, value, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      public static void GetVariantPointer<T2>(int id, ExtVertexShader value, [In, Out] T2[,,] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVariantPointervEXT((uint) id, value, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      public static void GetVariantPointer<T2>(int id, ExtVertexShader value, [In, Out] ref T2 data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVariantPointervEXT((uint) id, value, gcHandle.AddrOfPinnedObject());
          data = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      public static void GetVariantPointer(uint id, ExtVertexShader value, [Out] IntPtr data)
      {
        GL.Delegates.glGetVariantPointervEXT(id, value, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      public static void GetVariantPointer<T2>(uint id, ExtVertexShader value, [In, Out] T2[] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVariantPointervEXT(id, value, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void GetVariantPointer<T2>(uint id, ExtVertexShader value, [In, Out] T2[,] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVariantPointervEXT(id, value, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      public static void GetVariantPointer<T2>(uint id, ExtVertexShader value, [In, Out] T2[,,] data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVariantPointervEXT(id, value, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glGetVariantPointervEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void GetVariantPointer<T2>(uint id, ExtVertexShader value, [In, Out] ref T2 data) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVariantPointervEXT(id, value, gcHandle.AddrOfPinnedObject());
          data = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glGetVertexAttribIivEXT", Version = "")]
      public static unsafe void GetVertexAttribI(int index, NvVertexProgram4 pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribIivEXT((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glGetVertexAttribIivEXT", Version = "")]
      public static unsafe void GetVertexAttribI(int index, NvVertexProgram4 pname, [Out] int* @params)
      {
        GL.Delegates.glGetVertexAttribIivEXT((uint) index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glGetVertexAttribIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribI(uint index, NvVertexProgram4 pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribIivEXT(index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glGetVertexAttribIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribI(uint index, NvVertexProgram4 pname, [Out] int* @params)
      {
        GL.Delegates.glGetVertexAttribIivEXT(index, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glGetVertexAttribIuivEXT", Version = "")]
      public static unsafe void GetVertexAttribI(uint index, NvVertexProgram4 pname, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribIuivEXT(index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glGetVertexAttribIuivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribI(uint index, NvVertexProgram4 pname, [Out] uint* @params)
      {
        GL.Delegates.glGetVertexAttribIuivEXT(index, pname, @params);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdvEXT", Version = "4.1")]
      public static unsafe void GetVertexAttribL(int index, ExtVertexAttrib64bit pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetVertexAttribLdvEXT((uint) index, pname, params1);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdvEXT", Version = "4.1")]
      public static unsafe void GetVertexAttribL(int index, ExtVertexAttrib64bit pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribLdvEXT((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdvEXT", Version = "4.1")]
      public static unsafe void GetVertexAttribL(int index, ExtVertexAttrib64bit pname, [Out] double* @params)
      {
        GL.Delegates.glGetVertexAttribLdvEXT((uint) index, pname, @params);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdvEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribL(uint index, ExtVertexAttrib64bit pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetVertexAttribLdvEXT(index, pname, params1);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdvEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribL(uint index, ExtVertexAttrib64bit pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribLdvEXT(index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glGetVertexAttribLdvEXT", Version = "4.1")]
      public static unsafe void GetVertexAttribL(uint index, ExtVertexAttrib64bit pname, [Out] double* @params)
      {
        GL.Delegates.glGetVertexAttribLdvEXT(index, pname, @params);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glHistogramEXT", Version = "1.0")]
      public static void Histogram(ExtHistogram target, int width, PixelInternalFormat internalformat, bool sink)
      {
        GL.Delegates.glHistogramEXT(target, width, internalformat, sink);
      }

      [AutoGenerated(Category = "EXT_x11_sync_object", EntryPoint = "glImportSyncEXT", Version = "3.2")]
      public static IntPtr ImportSync(ExtX11SyncObject external_sync_type, IntPtr external_sync, int flags)
      {
        return GL.Delegates.glImportSyncEXT(external_sync_type, external_sync, (uint) flags);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_x11_sync_object", EntryPoint = "glImportSyncEXT", Version = "3.2")]
      public static IntPtr ImportSync(ExtX11SyncObject external_sync_type, IntPtr external_sync, uint flags)
      {
        return GL.Delegates.glImportSyncEXT(external_sync_type, external_sync, flags);
      }

      [AutoGenerated(Category = "EXT_index_func", EntryPoint = "glIndexFuncEXT", Version = "1.1")]
      public static void IndexFunc(ExtIndexFunc func, float @ref)
      {
        GL.Delegates.glIndexFuncEXT(func, @ref);
      }

      [AutoGenerated(Category = "EXT_index_material", EntryPoint = "glIndexMaterialEXT", Version = "1.1")]
      public static void IndexMaterial(MaterialFace face, ExtIndexMaterial mode)
      {
        GL.Delegates.glIndexMaterialEXT(face, mode);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glIndexPointerEXT", Version = "1.0")]
      public static void IndexPointer(IndexPointerType type, int stride, int count, IntPtr pointer)
      {
        GL.Delegates.glIndexPointerEXT(type, stride, count, pointer);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glIndexPointerEXT", Version = "1.0")]
      public static void IndexPointer<T3>(IndexPointerType type, int stride, int count, [In, Out] T3[] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIndexPointerEXT(type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glIndexPointerEXT", Version = "1.0")]
      public static void IndexPointer<T3>(IndexPointerType type, int stride, int count, [In, Out] T3[,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIndexPointerEXT(type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glIndexPointerEXT", Version = "1.0")]
      public static void IndexPointer<T3>(IndexPointerType type, int stride, int count, [In, Out] T3[,,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIndexPointerEXT(type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glIndexPointerEXT", Version = "1.0")]
      public static void IndexPointer<T3>(IndexPointerType type, int stride, int count, [In, Out] ref T3 pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIndexPointerEXT(type, stride, count, gcHandle.AddrOfPinnedObject());
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glInsertComponentEXT", Version = "1.2")]
      public static void InsertComponent(int res, int src, int num)
      {
        GL.Delegates.glInsertComponentEXT((uint) res, (uint) src, (uint) num);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glInsertComponentEXT", Version = "1.2")]
      public static void InsertComponent(uint res, uint src, uint num)
      {
        GL.Delegates.glInsertComponentEXT(res, src, num);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glIsEnabledIndexedEXT", Version = "2.0")]
      public static bool IsEnabledIndexed(IndexedEnableCap target, int index)
      {
        return GL.Delegates.glIsEnabledIndexedEXT(target, (uint) index);
      }

      [AutoGenerated(Category = "EXT_draw_buffers2", EntryPoint = "glIsEnabledIndexedEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static bool IsEnabledIndexed(IndexedEnableCap target, uint index)
      {
        return GL.Delegates.glIsEnabledIndexedEXT(target, index);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glIsFramebufferEXT", Version = "1.2")]
      public static bool IsFramebuffer(int framebuffer)
      {
        return GL.Delegates.glIsFramebufferEXT((uint) framebuffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glIsFramebufferEXT", Version = "1.2")]
      public static bool IsFramebuffer(uint framebuffer)
      {
        return GL.Delegates.glIsFramebufferEXT(framebuffer);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glIsRenderbufferEXT", Version = "1.2")]
      public static bool IsRenderbuffer(int renderbuffer)
      {
        return GL.Delegates.glIsRenderbufferEXT((uint) renderbuffer);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glIsRenderbufferEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static bool IsRenderbuffer(uint renderbuffer)
      {
        return GL.Delegates.glIsRenderbufferEXT(renderbuffer);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glIsTextureEXT", Version = "1.0")]
      public static bool IsTexture(int texture)
      {
        return GL.Delegates.glIsTextureEXT((uint) texture);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glIsTextureEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static bool IsTexture(uint texture)
      {
        return GL.Delegates.glIsTextureEXT(texture);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glIsVariantEnabledEXT", Version = "1.2")]
      public static bool IsVariantEnabled(int id, ExtVertexShader cap)
      {
        return GL.Delegates.glIsVariantEnabledEXT((uint) id, cap);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glIsVariantEnabledEXT", Version = "1.2")]
      public static bool IsVariantEnabled(uint id, ExtVertexShader cap)
      {
        return GL.Delegates.glIsVariantEnabledEXT(id, cap);
      }

      [AutoGenerated(Category = "EXT_compiled_vertex_array", EntryPoint = "glLockArraysEXT", Version = "1.1")]
      public static void LockArrays(int first, int count)
      {
        GL.Delegates.glLockArraysEXT(first, count);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMapNamedBufferEXT", Version = "")]
      [CLSCompliant(false)]
      public static IntPtr MapNamedBuffer(int buffer, ExtDirectStateAccess access)
      {
        return GL.Delegates.glMapNamedBufferEXT((uint) buffer, access);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMapNamedBufferEXT", Version = "")]
      public static IntPtr MapNamedBuffer(uint buffer, ExtDirectStateAccess access)
      {
        return GL.Delegates.glMapNamedBufferEXT(buffer, access);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMapNamedBufferRangeEXT", Version = "")]
      [CLSCompliant(false)]
      public static IntPtr MapNamedBufferRange(int buffer, IntPtr offset, IntPtr length, BufferAccessMask access)
      {
        return GL.Delegates.glMapNamedBufferRangeEXT((uint) buffer, offset, length, access);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMapNamedBufferRangeEXT", Version = "")]
      [CLSCompliant(false)]
      public static IntPtr MapNamedBufferRange(uint buffer, IntPtr offset, IntPtr length, BufferAccessMask access)
      {
        return GL.Delegates.glMapNamedBufferRangeEXT(buffer, offset, length, access);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixFrustumEXT", Version = "")]
      public static void MatrixFrustum(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
      {
        GL.Delegates.glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoaddEXT", Version = "")]
      public static unsafe void MatrixLoad(MatrixMode mode, double[] m)
      {
        fixed (double* m1 = m)
          GL.Delegates.glMatrixLoaddEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoaddEXT", Version = "")]
      public static unsafe void MatrixLoad(MatrixMode mode, ref double m)
      {
        fixed (double* m1 = &m)
          GL.Delegates.glMatrixLoaddEXT(mode, m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoaddEXT", Version = "")]
      public static unsafe void MatrixLoad(MatrixMode mode, double* m)
      {
        GL.Delegates.glMatrixLoaddEXT(mode, m);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadfEXT", Version = "")]
      public static unsafe void MatrixLoad(MatrixMode mode, float[] m)
      {
        fixed (float* m1 = m)
          GL.Delegates.glMatrixLoadfEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadfEXT", Version = "")]
      public static unsafe void MatrixLoad(MatrixMode mode, ref float m)
      {
        fixed (float* m1 = &m)
          GL.Delegates.glMatrixLoadfEXT(mode, m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadfEXT", Version = "")]
      public static unsafe void MatrixLoad(MatrixMode mode, float* m)
      {
        GL.Delegates.glMatrixLoadfEXT(mode, m);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadIdentityEXT", Version = "")]
      public static void MatrixLoadIdentity(MatrixMode mode)
      {
        GL.Delegates.glMatrixLoadIdentityEXT(mode);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadTransposedEXT", Version = "")]
      public static unsafe void MatrixLoadTranspose(MatrixMode mode, double[] m)
      {
        fixed (double* m1 = m)
          GL.Delegates.glMatrixLoadTransposedEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadTransposedEXT", Version = "")]
      public static unsafe void MatrixLoadTranspose(MatrixMode mode, ref double m)
      {
        fixed (double* m1 = &m)
          GL.Delegates.glMatrixLoadTransposedEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadTransposedEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void MatrixLoadTranspose(MatrixMode mode, double* m)
      {
        GL.Delegates.glMatrixLoadTransposedEXT(mode, m);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadTransposefEXT", Version = "")]
      public static unsafe void MatrixLoadTranspose(MatrixMode mode, float[] m)
      {
        fixed (float* m1 = m)
          GL.Delegates.glMatrixLoadTransposefEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadTransposefEXT", Version = "")]
      public static unsafe void MatrixLoadTranspose(MatrixMode mode, ref float m)
      {
        fixed (float* m1 = &m)
          GL.Delegates.glMatrixLoadTransposefEXT(mode, m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixLoadTransposefEXT", Version = "")]
      public static unsafe void MatrixLoadTranspose(MatrixMode mode, float* m)
      {
        GL.Delegates.glMatrixLoadTransposefEXT(mode, m);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultdEXT", Version = "")]
      public static unsafe void MatrixMult(MatrixMode mode, double[] m)
      {
        fixed (double* m1 = m)
          GL.Delegates.glMatrixMultdEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultdEXT", Version = "")]
      public static unsafe void MatrixMult(MatrixMode mode, ref double m)
      {
        fixed (double* m1 = &m)
          GL.Delegates.glMatrixMultdEXT(mode, m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultdEXT", Version = "")]
      public static unsafe void MatrixMult(MatrixMode mode, double* m)
      {
        GL.Delegates.glMatrixMultdEXT(mode, m);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultfEXT", Version = "")]
      public static unsafe void MatrixMult(MatrixMode mode, float[] m)
      {
        fixed (float* m1 = m)
          GL.Delegates.glMatrixMultfEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultfEXT", Version = "")]
      public static unsafe void MatrixMult(MatrixMode mode, ref float m)
      {
        fixed (float* m1 = &m)
          GL.Delegates.glMatrixMultfEXT(mode, m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultfEXT", Version = "")]
      public static unsafe void MatrixMult(MatrixMode mode, float* m)
      {
        GL.Delegates.glMatrixMultfEXT(mode, m);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultTransposedEXT", Version = "")]
      public static unsafe void MatrixMultTranspose(MatrixMode mode, double[] m)
      {
        fixed (double* m1 = m)
          GL.Delegates.glMatrixMultTransposedEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultTransposedEXT", Version = "")]
      public static unsafe void MatrixMultTranspose(MatrixMode mode, ref double m)
      {
        fixed (double* m1 = &m)
          GL.Delegates.glMatrixMultTransposedEXT(mode, m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultTransposedEXT", Version = "")]
      public static unsafe void MatrixMultTranspose(MatrixMode mode, double* m)
      {
        GL.Delegates.glMatrixMultTransposedEXT(mode, m);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultTransposefEXT", Version = "")]
      public static unsafe void MatrixMultTranspose(MatrixMode mode, float[] m)
      {
        fixed (float* m1 = m)
          GL.Delegates.glMatrixMultTransposefEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultTransposefEXT", Version = "")]
      public static unsafe void MatrixMultTranspose(MatrixMode mode, ref float m)
      {
        fixed (float* m1 = &m)
          GL.Delegates.glMatrixMultTransposefEXT(mode, m1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixMultTransposefEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void MatrixMultTranspose(MatrixMode mode, float* m)
      {
        GL.Delegates.glMatrixMultTransposefEXT(mode, m);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixOrthoEXT", Version = "")]
      public static void MatrixOrtho(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
      {
        GL.Delegates.glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixPopEXT", Version = "")]
      public static void MatrixPop(MatrixMode mode)
      {
        GL.Delegates.glMatrixPopEXT(mode);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixPushEXT", Version = "")]
      public static void MatrixPush(MatrixMode mode)
      {
        GL.Delegates.glMatrixPushEXT(mode);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixRotatedEXT", Version = "")]
      public static void MatrixRotate(MatrixMode mode, double angle, double x, double y, double z)
      {
        GL.Delegates.glMatrixRotatedEXT(mode, angle, x, y, z);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixRotatefEXT", Version = "")]
      public static void MatrixRotate(MatrixMode mode, float angle, float x, float y, float z)
      {
        GL.Delegates.glMatrixRotatefEXT(mode, angle, x, y, z);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixScaledEXT", Version = "")]
      public static void MatrixScale(MatrixMode mode, double x, double y, double z)
      {
        GL.Delegates.glMatrixScaledEXT(mode, x, y, z);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixScalefEXT", Version = "")]
      public static void MatrixScale(MatrixMode mode, float x, float y, float z)
      {
        GL.Delegates.glMatrixScalefEXT(mode, x, y, z);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixTranslatedEXT", Version = "")]
      public static void MatrixTranslate(MatrixMode mode, double x, double y, double z)
      {
        GL.Delegates.glMatrixTranslatedEXT(mode, x, y, z);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMatrixTranslatefEXT", Version = "")]
      public static void MatrixTranslate(MatrixMode mode, float x, float y, float z)
      {
        GL.Delegates.glMatrixTranslatefEXT(mode, x, y, z);
      }

      [AutoGenerated(Category = "EXT_shader_image_load_store", EntryPoint = "glMemoryBarrierEXT", Version = "4.1")]
      public static void MemoryBarrier(int barriers)
      {
        GL.Delegates.glMemoryBarrierEXT((uint) barriers);
      }

      [AutoGenerated(Category = "EXT_shader_image_load_store", EntryPoint = "glMemoryBarrierEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static void MemoryBarrier(uint barriers)
      {
        GL.Delegates.glMemoryBarrierEXT(barriers);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glMinmaxEXT", Version = "1.0")]
      public static void Minmax(ExtHistogram target, PixelInternalFormat internalformat, bool sink)
      {
        GL.Delegates.glMinmaxEXT(target, internalformat, sink);
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawArraysEXT", Version = "1.1")]
      public static unsafe void MultiDrawArrays(BeginMode mode, int[] first, int[] count, int primcount)
      {
        fixed (int* first1 = first)
          fixed (int* count1 = count)
            GL.Delegates.glMultiDrawArraysEXT(mode, first1, count1, primcount);
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawArraysEXT", Version = "1.1")]
      public static unsafe void MultiDrawArrays(BeginMode mode, ref int first, ref int count, int primcount)
      {
        fixed (int* first1 = &first)
          fixed (int* count1 = &count)
            GL.Delegates.glMultiDrawArraysEXT(mode, first1, count1, primcount);
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawArraysEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MultiDrawArrays(BeginMode mode, int* first, int* count, int primcount)
      {
        GL.Delegates.glMultiDrawArraysEXT(mode, first, count, primcount);
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements(BeginMode mode, int[] count, DrawElementsType type, IntPtr indices, int primcount)
      {
        fixed (int* count1 = count)
          GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, indices, primcount);
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] T3[] indices, int primcount) where T3 : struct
      {
        fixed (int* count1 = count)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] T3[,] indices, int primcount) where T3 : struct
      {
        fixed (int* count1 = count)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
      {
        fixed (int* count1 = count)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, int[] count, DrawElementsType type, [In, Out] ref T3 indices, int primcount) where T3 : struct
      {
        fixed (int* count1 = count)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
            indices = (T3) gcHandle.Target;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements(BeginMode mode, ref int count, DrawElementsType type, IntPtr indices, int primcount)
      {
        fixed (int* count1 = &count)
          GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, indices, primcount);
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[] indices, int primcount) where T3 : struct
      {
        fixed (int* count1 = &count)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[,] indices, int primcount) where T3 : struct
      {
        fixed (int* count1 = &count)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
      {
        fixed (int* count1 = &count)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, ref int count, DrawElementsType type, [In, Out] ref T3 indices, int primcount) where T3 : struct
      {
        fixed (int* count1 = &count)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, count1, type, gcHandle.AddrOfPinnedObject(), primcount);
            indices = (T3) gcHandle.Target;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount)
      {
        GL.Delegates.glMultiDrawElementsEXT(mode, count, type, indices, primcount);
      }

      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] T3[] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsEXT(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] T3[,] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsEXT(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsEXT(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_multi_draw_arrays", EntryPoint = "glMultiDrawElementsEXT", Version = "1.1")]
      public static unsafe void MultiDrawElements<T3>(BeginMode mode, int* count, DrawElementsType type, [In, Out] ref T3 indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsEXT(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount);
          indices = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexBufferEXT", Version = "")]
      public static void MultiTexBuffer(TextureUnit texunit, TextureTarget target, ExtDirectStateAccess internalformat, int buffer)
      {
        GL.Delegates.glMultiTexBufferEXT(texunit, target, internalformat, (uint) buffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexBufferEXT", Version = "")]
      public static void MultiTexBuffer(TextureUnit texunit, TextureTarget target, ExtDirectStateAccess internalformat, uint buffer)
      {
        GL.Delegates.glMultiTexBufferEXT(texunit, target, internalformat, buffer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexCoordPointerEXT", Version = "")]
      public static void MultiTexCoordPointer(TextureUnit texunit, int size, TexCoordPointerType type, int stride, IntPtr pointer)
      {
        GL.Delegates.glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexCoordPointerEXT", Version = "")]
      public static void MultiTexCoordPointer<T4>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexCoordPointerEXT(texunit, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexCoordPointerEXT", Version = "")]
      public static void MultiTexCoordPointer<T4>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexCoordPointerEXT(texunit, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexCoordPointerEXT", Version = "")]
      public static void MultiTexCoordPointer<T4>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexCoordPointerEXT(texunit, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexCoordPointerEXT", Version = "")]
      public static void MultiTexCoordPointer<T4>(TextureUnit texunit, int size, TexCoordPointerType type, int stride, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexCoordPointerEXT(texunit, size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexEnvfEXT", Version = "")]
      public static void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float param)
      {
        GL.Delegates.glMultiTexEnvfEXT(texunit, target, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexEnvfvEXT", Version = "")]
      public static unsafe void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glMultiTexEnvfvEXT(texunit, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexEnvfvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float* @params)
      {
        GL.Delegates.glMultiTexEnvfvEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexEnviEXT", Version = "")]
      public static void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int param)
      {
        GL.Delegates.glMultiTexEnviEXT(texunit, target, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexEnvivEXT", Version = "")]
      public static unsafe void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glMultiTexEnvivEXT(texunit, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexEnvivEXT", Version = "")]
      public static unsafe void MultiTexEnv(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int* @params)
      {
        GL.Delegates.glMultiTexEnvivEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGendEXT", Version = "")]
      public static void MultiTexGend(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double param)
      {
        GL.Delegates.glMultiTexGendEXT(texunit, coord, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGendvEXT", Version = "")]
      public static unsafe void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glMultiTexGendvEXT(texunit, coord, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGendvEXT", Version = "")]
      public static unsafe void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref double @params)
      {
        fixed (double* params1 = &@params)
          GL.Delegates.glMultiTexGendvEXT(texunit, coord, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGendvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double* @params)
      {
        GL.Delegates.glMultiTexGendvEXT(texunit, coord, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGenfEXT", Version = "")]
      public static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float param)
      {
        GL.Delegates.glMultiTexGenfEXT(texunit, coord, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGenfvEXT", Version = "")]
      public static unsafe void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glMultiTexGenfvEXT(texunit, coord, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGenfvEXT", Version = "")]
      public static unsafe void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float* @params)
      {
        GL.Delegates.glMultiTexGenfvEXT(texunit, coord, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGeniEXT", Version = "")]
      public static void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int param)
      {
        GL.Delegates.glMultiTexGeniEXT(texunit, coord, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGenivEXT", Version = "")]
      public static unsafe void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glMultiTexGenivEXT(texunit, coord, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexGenivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexGen(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int* @params)
      {
        GL.Delegates.glMultiTexGenivEXT(texunit, coord, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage1DEXT", Version = "")]
      public static void MultiTexImage1D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage1DEXT", Version = "")]
      public static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T8[] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage1DEXT", Version = "")]
      public static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T8[,] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage1DEXT", Version = "")]
      public static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T8[,,] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage1DEXT", Version = "")]
      public static void MultiTexImage1D<T8>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] ref T8 pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage2DEXT", Version = "")]
      public static void MultiTexImage2D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage2DEXT", Version = "")]
      public static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T9[] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage2DEXT", Version = "")]
      public static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T9[,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage2DEXT", Version = "")]
      public static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T9[,,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage2DEXT", Version = "")]
      public static void MultiTexImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] ref T9 pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage3DEXT", Version = "")]
      public static void MultiTexImage3D(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage3DEXT", Version = "")]
      public static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T10[] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage3DEXT", Version = "")]
      public static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T10[,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage3DEXT", Version = "")]
      public static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T10[,,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexImage3DEXT", Version = "")]
      public static void MultiTexImage3D<T10>(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] ref T10 pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T10) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterfEXT", Version = "")]
      public static void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param)
      {
        GL.Delegates.glMultiTexParameterfEXT(texunit, target, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterfvEXT", Version = "")]
      public static unsafe void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glMultiTexParameterfvEXT(texunit, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterfvEXT", Version = "")]
      public static unsafe void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float* @params)
      {
        GL.Delegates.glMultiTexParameterfvEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameteriEXT", Version = "")]
      public static void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int param)
      {
        GL.Delegates.glMultiTexParameteriEXT(texunit, target, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterIivEXT", Version = "")]
      public static unsafe void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glMultiTexParameterIivEXT(texunit, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterIivEXT", Version = "")]
      public static unsafe void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glMultiTexParameterIivEXT(texunit, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterIivEXT", Version = "")]
      public static unsafe void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int* @params)
      {
        GL.Delegates.glMultiTexParameterIivEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterIuivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glMultiTexParameterIuivEXT(texunit, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterIuivEXT", Version = "")]
      public static unsafe void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glMultiTexParameterIuivEXT(texunit, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterIuivEXT", Version = "")]
      public static unsafe void MultiTexParameterI(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint* @params)
      {
        GL.Delegates.glMultiTexParameterIuivEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterivEXT", Version = "")]
      public static unsafe void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glMultiTexParameterivEXT(texunit, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexParameterivEXT", Version = "")]
      public static unsafe void MultiTexParameter(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int* @params)
      {
        GL.Delegates.glMultiTexParameterivEXT(texunit, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexRenderbufferEXT", Version = "")]
      public static void MultiTexRenderbuffer(TextureUnit texunit, TextureTarget target, int renderbuffer)
      {
        GL.Delegates.glMultiTexRenderbufferEXT(texunit, target, (uint) renderbuffer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexRenderbufferEXT", Version = "")]
      [CLSCompliant(false)]
      public static void MultiTexRenderbuffer(TextureUnit texunit, TextureTarget target, uint renderbuffer)
      {
        GL.Delegates.glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage1DEXT", Version = "")]
      public static void MultiTexSubImage1D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage1DEXT", Version = "")]
      public static void MultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T7[] pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage1DEXT", Version = "")]
      public static void MultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T7[,] pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage1DEXT", Version = "")]
      public static void MultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T7[,,] pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage1DEXT", Version = "")]
      public static void MultiTexSubImage1D<T7>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] ref T7 pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage2DEXT", Version = "")]
      public static void MultiTexSubImage2D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage2DEXT", Version = "")]
      public static void MultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T9[] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage2DEXT", Version = "")]
      public static void MultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T9[,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage2DEXT", Version = "")]
      public static void MultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T9[,,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage2DEXT", Version = "")]
      public static void MultiTexSubImage2D<T9>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T9 pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage3DEXT", Version = "")]
      public static void MultiTexSubImage3D(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage3DEXT", Version = "")]
      public static void MultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T11[] pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage3DEXT", Version = "")]
      public static void MultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T11[,] pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage3DEXT", Version = "")]
      public static void MultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T11[,,] pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glMultiTexSubImage3DEXT", Version = "")]
      public static void MultiTexSubImage3D<T11>(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] ref T11 pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T11) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      public static void NamedBufferData(int buffer, IntPtr size, IntPtr data, ExtDirectStateAccess usage)
      {
        GL.Delegates.glNamedBufferDataEXT((uint) buffer, size, data, usage);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      public static void NamedBufferData<T2>(int buffer, IntPtr size, [In, Out] T2[] data, ExtDirectStateAccess usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferDataEXT((uint) buffer, size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      public static void NamedBufferData<T2>(int buffer, IntPtr size, [In, Out] T2[,] data, ExtDirectStateAccess usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferDataEXT((uint) buffer, size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      public static void NamedBufferData<T2>(int buffer, IntPtr size, [In, Out] T2[,,] data, ExtDirectStateAccess usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferDataEXT((uint) buffer, size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      public static void NamedBufferData<T2>(int buffer, IntPtr size, [In, Out] ref T2 data, ExtDirectStateAccess usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferDataEXT((uint) buffer, size, gcHandle.AddrOfPinnedObject(), usage);
          data = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedBufferData(uint buffer, IntPtr size, IntPtr data, ExtDirectStateAccess usage)
      {
        GL.Delegates.glNamedBufferDataEXT(buffer, size, data, usage);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      public static void NamedBufferData<T2>(uint buffer, IntPtr size, [In, Out] T2[] data, ExtDirectStateAccess usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferDataEXT(buffer, size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedBufferData<T2>(uint buffer, IntPtr size, [In, Out] T2[,] data, ExtDirectStateAccess usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferDataEXT(buffer, size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedBufferData<T2>(uint buffer, IntPtr size, [In, Out] T2[,,] data, ExtDirectStateAccess usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferDataEXT(buffer, size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferDataEXT", Version = "")]
      public static void NamedBufferData<T2>(uint buffer, IntPtr size, [In, Out] ref T2 data, ExtDirectStateAccess usage) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferDataEXT(buffer, size, gcHandle.AddrOfPinnedObject(), usage);
          data = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      public static void NamedBufferSubData(int buffer, IntPtr offset, IntPtr size, IntPtr data)
      {
        GL.Delegates.glNamedBufferSubDataEXT((uint) buffer, offset, size, data);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      public static void NamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferSubDataEXT((uint) buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      public static void NamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferSubDataEXT((uint) buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      public static void NamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferSubDataEXT((uint) buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      public static void NamedBufferSubData<T3>(int buffer, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferSubDataEXT((uint) buffer, offset, size, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedBufferSubData(uint buffer, IntPtr offset, IntPtr size, IntPtr data)
      {
        GL.Delegates.glNamedBufferSubDataEXT(buffer, offset, size, data);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferSubDataEXT(buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferSubDataEXT(buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferSubDataEXT(buffer, offset, size, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedBufferSubDataEXT", Version = "")]
      public static void NamedBufferSubData<T3>(uint buffer, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedBufferSubDataEXT(buffer, offset, size, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedCopyBufferSubDataEXT", Version = "")]
      public static void NamedCopyBufferSubData(int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
      {
        GL.Delegates.glNamedCopyBufferSubDataEXT((uint) readBuffer, (uint) writeBuffer, readOffset, writeOffset, size);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedCopyBufferSubDataEXT", Version = "")]
      public static void NamedCopyBufferSubData(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
      {
        GL.Delegates.glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferRenderbufferEXT", Version = "")]
      public static void NamedFramebufferRenderbuffer(int framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
      {
        GL.Delegates.glNamedFramebufferRenderbufferEXT((uint) framebuffer, attachment, renderbuffertarget, (uint) renderbuffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferRenderbufferEXT", Version = "")]
      public static void NamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
      {
        GL.Delegates.glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTexture1DEXT", Version = "")]
      public static void NamedFramebufferTexture1D(int framebuffer, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
      {
        GL.Delegates.glNamedFramebufferTexture1DEXT((uint) framebuffer, attachment, textarget, (uint) texture, level);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTexture1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedFramebufferTexture1D(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
      {
        GL.Delegates.glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTexture2DEXT", Version = "")]
      public static void NamedFramebufferTexture2D(int framebuffer, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level)
      {
        GL.Delegates.glNamedFramebufferTexture2DEXT((uint) framebuffer, attachment, textarget, (uint) texture, level);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTexture2DEXT", Version = "")]
      public static void NamedFramebufferTexture2D(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
      {
        GL.Delegates.glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTexture3DEXT", Version = "")]
      public static void NamedFramebufferTexture3D(int framebuffer, FramebufferAttachment attachment, TextureTarget textarget, int texture, int level, int zoffset)
      {
        GL.Delegates.glNamedFramebufferTexture3DEXT((uint) framebuffer, attachment, textarget, (uint) texture, level, zoffset);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTexture3DEXT", Version = "")]
      public static void NamedFramebufferTexture3D(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
      {
        GL.Delegates.glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTextureEXT", Version = "")]
      public static void NamedFramebufferTexture(int framebuffer, FramebufferAttachment attachment, int texture, int level)
      {
        GL.Delegates.glNamedFramebufferTextureEXT((uint) framebuffer, attachment, (uint) texture, level);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTextureEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level)
      {
        GL.Delegates.glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTextureFaceEXT", Version = "")]
      public static void NamedFramebufferTextureFace(int framebuffer, FramebufferAttachment attachment, int texture, int level, TextureTarget face)
      {
        GL.Delegates.glNamedFramebufferTextureFaceEXT((uint) framebuffer, attachment, (uint) texture, level, face);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTextureFaceEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedFramebufferTextureFace(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
      {
        GL.Delegates.glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTextureLayerEXT", Version = "")]
      public static void NamedFramebufferTextureLayer(int framebuffer, FramebufferAttachment attachment, int texture, int level, int layer)
      {
        GL.Delegates.glNamedFramebufferTextureLayerEXT((uint) framebuffer, attachment, (uint) texture, level, layer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedFramebufferTextureLayerEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer)
      {
        GL.Delegates.glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4dEXT", Version = "")]
      public static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, double x, double y, double z, double w)
      {
        GL.Delegates.glNamedProgramLocalParameter4dEXT((uint) program, target, (uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4dEXT", Version = "")]
      public static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, double x, double y, double z, double w)
      {
        GL.Delegates.glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4dvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glNamedProgramLocalParameter4dvEXT((uint) program, target, (uint) index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4dvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, ref double @params)
      {
        fixed (double* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParameter4dvEXT((uint) program, target, (uint) index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4dvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, double* @params)
      {
        GL.Delegates.glNamedProgramLocalParameter4dvEXT((uint) program, target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4dvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glNamedProgramLocalParameter4dvEXT(program, target, index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4dvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, ref double @params)
      {
        fixed (double* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParameter4dvEXT(program, target, index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4dvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, double* @params)
      {
        GL.Delegates.glNamedProgramLocalParameter4dvEXT(program, target, index, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4fEXT", Version = "")]
      public static void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, float x, float y, float z, float w)
      {
        GL.Delegates.glNamedProgramLocalParameter4fEXT((uint) program, target, (uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4fEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, float x, float y, float z, float w)
      {
        GL.Delegates.glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glNamedProgramLocalParameter4fvEXT((uint) program, target, (uint) index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParameter4fvEXT((uint) program, target, (uint) index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameter4(int program, ExtDirectStateAccess target, int index, float* @params)
      {
        GL.Delegates.glNamedProgramLocalParameter4fvEXT((uint) program, target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glNamedProgramLocalParameter4fvEXT(program, target, index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParameter4fvEXT(program, target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameter4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameter4(uint program, ExtDirectStateAccess target, uint index, float* @params)
      {
        GL.Delegates.glNamedProgramLocalParameter4fvEXT(program, target, index, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4iEXT", Version = "")]
      public static void NamedProgramLocalParameterI4(int program, ExtDirectStateAccess target, int index, int x, int y, int z, int w)
      {
        GL.Delegates.glNamedProgramLocalParameterI4iEXT((uint) program, target, (uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4iEXT", Version = "")]
      public static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, int x, int y, int z, int w)
      {
        GL.Delegates.glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4ivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameterI4(int program, ExtDirectStateAccess target, int index, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glNamedProgramLocalParameterI4ivEXT((uint) program, target, (uint) index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4ivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameterI4(int program, ExtDirectStateAccess target, int index, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParameterI4ivEXT((uint) program, target, (uint) index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParameterI4(int program, ExtDirectStateAccess target, int index, int* @params)
      {
        GL.Delegates.glNamedProgramLocalParameterI4ivEXT((uint) program, target, (uint) index, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glNamedProgramLocalParameterI4ivEXT(program, target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4ivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParameterI4ivEXT(program, target, index, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, int* @params)
      {
        GL.Delegates.glNamedProgramLocalParameterI4ivEXT(program, target, index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4uiEXT", Version = "")]
      public static void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, uint x, uint y, uint z, uint w)
      {
        GL.Delegates.glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glNamedProgramLocalParameterI4uivEXT(program, target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4uivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParameterI4uivEXT(program, target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameterI4uivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameterI4(uint program, ExtDirectStateAccess target, uint index, uint* @params)
      {
        GL.Delegates.glNamedProgramLocalParameterI4uivEXT(program, target, index, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameters4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameters4(int program, ExtDirectStateAccess target, int index, int count, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glNamedProgramLocalParameters4fvEXT((uint) program, target, (uint) index, count, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameters4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameters4(int program, ExtDirectStateAccess target, int index, int count, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParameters4fvEXT((uint) program, target, (uint) index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameters4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameters4(int program, ExtDirectStateAccess target, int index, int count, float* @params)
      {
        GL.Delegates.glNamedProgramLocalParameters4fvEXT((uint) program, target, (uint) index, count, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameters4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameters4(uint program, ExtDirectStateAccess target, uint index, int count, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glNamedProgramLocalParameters4fvEXT(program, target, index, count, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameters4fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParameters4(uint program, ExtDirectStateAccess target, uint index, int count, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParameters4fvEXT(program, target, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParameters4fvEXT", Version = "")]
      public static unsafe void NamedProgramLocalParameters4(uint program, ExtDirectStateAccess target, uint index, int count, float* @params)
      {
        GL.Delegates.glNamedProgramLocalParameters4fvEXT(program, target, index, count, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParametersI4ivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParametersI4(int program, ExtDirectStateAccess target, int index, int count, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glNamedProgramLocalParametersI4ivEXT((uint) program, target, (uint) index, count, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParametersI4ivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParametersI4(int program, ExtDirectStateAccess target, int index, int count, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParametersI4ivEXT((uint) program, target, (uint) index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParametersI4ivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParametersI4(int program, ExtDirectStateAccess target, int index, int count, int* @params)
      {
        GL.Delegates.glNamedProgramLocalParametersI4ivEXT((uint) program, target, (uint) index, count, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParametersI4ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParametersI4ivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParametersI4ivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, int* @params)
      {
        GL.Delegates.glNamedProgramLocalParametersI4ivEXT(program, target, index, count, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParametersI4uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParametersI4uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramLocalParametersI4uivEXT", Version = "")]
      public static unsafe void NamedProgramLocalParametersI4(uint program, ExtDirectStateAccess target, uint index, int count, uint* @params)
      {
        GL.Delegates.glNamedProgramLocalParametersI4uivEXT(program, target, index, count, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      public static void NamedProgramString(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, IntPtr @string)
      {
        GL.Delegates.glNamedProgramStringEXT((uint) program, target, format, len, @string);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      public static void NamedProgramString<T4>(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In, Out] T4[] @string) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedProgramStringEXT((uint) program, target, format, len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      public static void NamedProgramString<T4>(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In, Out] T4[,] @string) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedProgramStringEXT((uint) program, target, format, len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      public static void NamedProgramString<T4>(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In, Out] T4[,,] @string) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedProgramStringEXT((uint) program, target, format, len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      public static void NamedProgramString<T4>(int program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In, Out] ref T4 @string) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedProgramStringEXT((uint) program, target, format, len, gcHandle.AddrOfPinnedObject());
          @string = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedProgramString(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, IntPtr @string)
      {
        GL.Delegates.glNamedProgramStringEXT(program, target, format, len, @string);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedProgramString<T4>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In, Out] T4[] @string) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedProgramStringEXT(program, target, format, len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      public static void NamedProgramString<T4>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In, Out] T4[,] @string) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedProgramStringEXT(program, target, format, len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedProgramString<T4>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In, Out] T4[,,] @string) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedProgramStringEXT(program, target, format, len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedProgramStringEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedProgramString<T4>(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, [In, Out] ref T4 @string) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNamedProgramStringEXT(program, target, format, len, gcHandle.AddrOfPinnedObject());
          @string = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedRenderbufferStorageEXT", Version = "")]
      public static void NamedRenderbufferStorage(int renderbuffer, PixelInternalFormat internalformat, int width, int height)
      {
        GL.Delegates.glNamedRenderbufferStorageEXT((uint) renderbuffer, internalformat, width, height);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedRenderbufferStorageEXT", Version = "")]
      [CLSCompliant(false)]
      public static void NamedRenderbufferStorage(uint renderbuffer, PixelInternalFormat internalformat, int width, int height)
      {
        GL.Delegates.glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT", Version = "")]
      public static void NamedRenderbufferStorageMultisampleCoverage(int renderbuffer, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height)
      {
        GL.Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT((uint) renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedRenderbufferStorageMultisampleCoverageEXT", Version = "")]
      public static void NamedRenderbufferStorageMultisampleCoverage(uint renderbuffer, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height)
      {
        GL.Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT", Version = "")]
      public static void NamedRenderbufferStorageMultisample(int renderbuffer, int samples, PixelInternalFormat internalformat, int width, int height)
      {
        GL.Delegates.glNamedRenderbufferStorageMultisampleEXT((uint) renderbuffer, samples, internalformat, width, height);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glNamedRenderbufferStorageMultisampleEXT", Version = "")]
      public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, PixelInternalFormat internalformat, int width, int height)
      {
        GL.Delegates.glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glNormalPointerEXT", Version = "1.0")]
      public static void NormalPointer(NormalPointerType type, int stride, int count, IntPtr pointer)
      {
        GL.Delegates.glNormalPointerEXT(type, stride, count, pointer);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glNormalPointerEXT", Version = "1.0")]
      public static void NormalPointer<T3>(NormalPointerType type, int stride, int count, [In, Out] T3[] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointerEXT(type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glNormalPointerEXT", Version = "1.0")]
      public static void NormalPointer<T3>(NormalPointerType type, int stride, int count, [In, Out] T3[,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointerEXT(type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glNormalPointerEXT", Version = "1.0")]
      public static void NormalPointer<T3>(NormalPointerType type, int stride, int count, [In, Out] T3[,,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointerEXT(type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glNormalPointerEXT", Version = "1.0")]
      public static void NormalPointer<T3>(NormalPointerType type, int stride, int count, [In, Out] ref T3 pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointerEXT(type, stride, count, gcHandle.AddrOfPinnedObject());
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_pixel_transform", EntryPoint = "glPixelTransformParameterfEXT", Version = "1.1")]
      public static void PixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, float param)
      {
        GL.Delegates.glPixelTransformParameterfEXT(target, pname, param);
      }

      [AutoGenerated(Category = "EXT_pixel_transform", EntryPoint = "glPixelTransformParameterfvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void PixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, float* @params)
      {
        GL.Delegates.glPixelTransformParameterfvEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_pixel_transform", EntryPoint = "glPixelTransformParameteriEXT", Version = "1.1")]
      public static void PixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, int param)
      {
        GL.Delegates.glPixelTransformParameteriEXT(target, pname, param);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_pixel_transform", EntryPoint = "glPixelTransformParameterivEXT", Version = "1.1")]
      public static unsafe void PixelTransformParameter(ExtPixelTransform target, ExtPixelTransform pname, int* @params)
      {
        GL.Delegates.glPixelTransformParameterivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_point_parameters", EntryPoint = "glPointParameterfEXT", Version = "1.0")]
      public static void PointParameter(ExtPointParameters pname, float param)
      {
        GL.Delegates.glPointParameterfEXT(pname, param);
      }

      [AutoGenerated(Category = "EXT_point_parameters", EntryPoint = "glPointParameterfvEXT", Version = "1.0")]
      public static unsafe void PointParameter(ExtPointParameters pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glPointParameterfvEXT(pname, params1);
      }

      [AutoGenerated(Category = "EXT_point_parameters", EntryPoint = "glPointParameterfvEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void PointParameter(ExtPointParameters pname, float* @params)
      {
        GL.Delegates.glPointParameterfvEXT(pname, @params);
      }

      [AutoGenerated(Category = "EXT_polygon_offset", EntryPoint = "glPolygonOffsetEXT", Version = "1.0")]
      public static void PolygonOffset(float factor, float bias)
      {
        GL.Delegates.glPolygonOffsetEXT(factor, bias);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glPrioritizeTexturesEXT", Version = "1.0")]
      public static unsafe void PrioritizeTextures(int n, int[] textures, float[] priorities)
      {
        fixed (int* numPtr = textures)
          fixed (float* priorities1 = priorities)
            GL.Delegates.glPrioritizeTexturesEXT(n, (uint*) numPtr, priorities1);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glPrioritizeTexturesEXT", Version = "1.0")]
      public static unsafe void PrioritizeTextures(int n, ref int textures, ref float priorities)
      {
        fixed (int* numPtr = &textures)
          fixed (float* priorities1 = &priorities)
            GL.Delegates.glPrioritizeTexturesEXT(n, (uint*) numPtr, priorities1);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glPrioritizeTexturesEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void PrioritizeTextures(int n, int* textures, float* priorities)
      {
        GL.Delegates.glPrioritizeTexturesEXT(n, (uint*) textures, priorities);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glPrioritizeTexturesEXT", Version = "1.0")]
      public static unsafe void PrioritizeTextures(int n, uint[] textures, float[] priorities)
      {
        fixed (uint* textures1 = textures)
          fixed (float* priorities1 = priorities)
            GL.Delegates.glPrioritizeTexturesEXT(n, textures1, priorities1);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glPrioritizeTexturesEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void PrioritizeTextures(int n, ref uint textures, ref float priorities)
      {
        fixed (uint* textures1 = &textures)
          fixed (float* priorities1 = &priorities)
            GL.Delegates.glPrioritizeTexturesEXT(n, textures1, priorities1);
      }

      [AutoGenerated(Category = "EXT_texture_object", EntryPoint = "glPrioritizeTexturesEXT", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void PrioritizeTextures(int n, uint* textures, float* priorities)
      {
        GL.Delegates.glPrioritizeTexturesEXT(n, textures, priorities);
      }

      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramEnvParameters4fvEXT", Version = "1.2")]
      public static unsafe void ProgramEnvParameters4(ExtGpuProgramParameters target, int index, int count, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramEnvParameters4fvEXT(target, (uint) index, count, params1);
      }

      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramEnvParameters4fvEXT", Version = "1.2")]
      public static unsafe void ProgramEnvParameters4(ExtGpuProgramParameters target, int index, int count, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramEnvParameters4fvEXT(target, (uint) index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramEnvParameters4fvEXT", Version = "1.2")]
      public static unsafe void ProgramEnvParameters4(ExtGpuProgramParameters target, int index, int count, float* @params)
      {
        GL.Delegates.glProgramEnvParameters4fvEXT(target, (uint) index, count, @params);
      }

      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramEnvParameters4fvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParameters4(ExtGpuProgramParameters target, uint index, int count, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramEnvParameters4fvEXT(target, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramEnvParameters4fvEXT", Version = "1.2")]
      public static unsafe void ProgramEnvParameters4(ExtGpuProgramParameters target, uint index, int count, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramEnvParameters4fvEXT(target, index, count, params1);
      }

      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramEnvParameters4fvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParameters4(ExtGpuProgramParameters target, uint index, int count, float* @params)
      {
        GL.Delegates.glProgramEnvParameters4fvEXT(target, index, count, @params);
      }

      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramLocalParameters4fvEXT", Version = "1.2")]
      public static unsafe void ProgramLocalParameters4(ExtGpuProgramParameters target, int index, int count, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramLocalParameters4fvEXT(target, (uint) index, count, params1);
      }

      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramLocalParameters4fvEXT", Version = "1.2")]
      public static unsafe void ProgramLocalParameters4(ExtGpuProgramParameters target, int index, int count, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramLocalParameters4fvEXT(target, (uint) index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramLocalParameters4fvEXT", Version = "1.2")]
      public static unsafe void ProgramLocalParameters4(ExtGpuProgramParameters target, int index, int count, float* @params)
      {
        GL.Delegates.glProgramLocalParameters4fvEXT(target, (uint) index, count, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramLocalParameters4fvEXT", Version = "1.2")]
      public static unsafe void ProgramLocalParameters4(ExtGpuProgramParameters target, uint index, int count, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramLocalParameters4fvEXT(target, index, count, params1);
      }

      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramLocalParameters4fvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParameters4(ExtGpuProgramParameters target, uint index, int count, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramLocalParameters4fvEXT(target, index, count, params1);
      }

      [AutoGenerated(Category = "EXT_gpu_program_parameters", EntryPoint = "glProgramLocalParameters4fvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParameters4(ExtGpuProgramParameters target, uint index, int count, float* @params)
      {
        GL.Delegates.glProgramLocalParameters4fvEXT(target, index, count, @params);
      }

      [AutoGenerated(Category = "EXT_geometry_shader4", EntryPoint = "glProgramParameteriEXT", Version = "2.0")]
      public static void ProgramParameter(int program, AssemblyProgramParameterArb pname, int value)
      {
        GL.Delegates.glProgramParameteriEXT((uint) program, pname, value);
      }

      [AutoGenerated(Category = "EXT_geometry_shader4", EntryPoint = "glProgramParameteriEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static void ProgramParameter(uint program, AssemblyProgramParameterArb pname, int value)
      {
        GL.Delegates.glProgramParameteriEXT(program, pname, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1dEXT", Version = "1.2")]
      public static void ProgramUniform1(int program, int location, double x)
      {
        GL.Delegates.glProgramUniform1dEXT((uint) program, location, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1dEXT", Version = "1.2")]
      public static void ProgramUniform1(uint program, int location, double x)
      {
        GL.Delegates.glProgramUniform1dEXT(program, location, x);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform1(int program, int location, int count, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniform1dvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform1(int program, int location, int count, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniform1dvEXT((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform1(int program, int location, int count, double* value)
      {
        GL.Delegates.glProgramUniform1dvEXT((uint) program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniform1dvEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform1(uint program, int location, int count, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniform1dvEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, double* value)
      {
        GL.Delegates.glProgramUniform1dvEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1fEXT", Version = "")]
      public static void ProgramUniform1(int program, int location, float v0)
      {
        GL.Delegates.glProgramUniform1fEXT((uint) program, location, v0);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1fEXT", Version = "")]
      public static void ProgramUniform1(uint program, int location, float v0)
      {
        GL.Delegates.glProgramUniform1fEXT(program, location, v0);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1fvEXT", Version = "")]
      public static unsafe void ProgramUniform1(int program, int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniform1fvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1fvEXT", Version = "")]
      public static unsafe void ProgramUniform1(int program, int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniform1fvEXT((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1fvEXT", Version = "")]
      public static unsafe void ProgramUniform1(int program, int location, int count, float* value)
      {
        GL.Delegates.glProgramUniform1fvEXT((uint) program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniform1fvEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniform1fvEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, float* value)
      {
        GL.Delegates.glProgramUniform1fvEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1iEXT", Version = "")]
      public static void ProgramUniform1(int program, int location, int v0)
      {
        GL.Delegates.glProgramUniform1iEXT((uint) program, location, v0);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1iEXT", Version = "")]
      public static void ProgramUniform1(uint program, int location, int v0)
      {
        GL.Delegates.glProgramUniform1iEXT(program, location, v0);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1ivEXT", Version = "")]
      public static unsafe void ProgramUniform1(int program, int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glProgramUniform1ivEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1ivEXT", Version = "")]
      public static unsafe void ProgramUniform1(int program, int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glProgramUniform1ivEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(int program, int location, int count, int* value)
      {
        GL.Delegates.glProgramUniform1ivEXT((uint) program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glProgramUniform1ivEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glProgramUniform1ivEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1ivEXT", Version = "")]
      public static unsafe void ProgramUniform1(uint program, int location, int count, int* value)
      {
        GL.Delegates.glProgramUniform1ivEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1uiEXT", Version = "")]
      [CLSCompliant(false)]
      public static void ProgramUniform1(uint program, int location, uint v0)
      {
        GL.Delegates.glProgramUniform1uiEXT(program, location, v0);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1uivEXT", Version = "")]
      public static unsafe void ProgramUniform1(uint program, int location, int count, uint[] value)
      {
        fixed (uint* numPtr = value)
          GL.Delegates.glProgramUniform1uivEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, ref uint value)
      {
        fixed (uint* numPtr = &value)
          GL.Delegates.glProgramUniform1uivEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform1uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, uint* value)
      {
        GL.Delegates.glProgramUniform1uivEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2dEXT", Version = "1.2")]
      public static void ProgramUniform2(int program, int location, double x, double y)
      {
        GL.Delegates.glProgramUniform2dEXT((uint) program, location, x, y);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2dEXT", Version = "1.2")]
      public static void ProgramUniform2(uint program, int location, double x, double y)
      {
        GL.Delegates.glProgramUniform2dEXT(program, location, x, y);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform2(int program, int location, int count, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniform2dvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform2(int program, int location, int count, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniform2dvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(int program, int location, int count, double* value)
      {
        GL.Delegates.glProgramUniform2dvEXT((uint) program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform2(uint program, int location, int count, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniform2dvEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(uint program, int location, int count, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniform2dvEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform2(uint program, int location, int count, double* value)
      {
        GL.Delegates.glProgramUniform2dvEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2fEXT", Version = "")]
      public static void ProgramUniform2(int program, int location, float v0, float v1)
      {
        GL.Delegates.glProgramUniform2fEXT((uint) program, location, v0, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2fEXT", Version = "")]
      public static void ProgramUniform2(uint program, int location, float v0, float v1)
      {
        GL.Delegates.glProgramUniform2fEXT(program, location, v0, v1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2fvEXT", Version = "")]
      public static unsafe void ProgramUniform2(int program, int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniform2fvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2fvEXT", Version = "")]
      public static unsafe void ProgramUniform2(int program, int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniform2fvEXT((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2fvEXT", Version = "")]
      public static unsafe void ProgramUniform2(int program, int location, int count, float* value)
      {
        GL.Delegates.glProgramUniform2fvEXT((uint) program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(uint program, int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniform2fvEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2fvEXT", Version = "")]
      public static unsafe void ProgramUniform2(uint program, int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniform2fvEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(uint program, int location, int count, float* value)
      {
        GL.Delegates.glProgramUniform2fvEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2iEXT", Version = "")]
      public static void ProgramUniform2(int program, int location, int v0, int v1)
      {
        GL.Delegates.glProgramUniform2iEXT((uint) program, location, v0, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2iEXT", Version = "")]
      public static void ProgramUniform2(uint program, int location, int v0, int v1)
      {
        GL.Delegates.glProgramUniform2iEXT(program, location, v0, v1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2ivEXT", Version = "")]
      public static unsafe void ProgramUniform2(int program, int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glProgramUniform2ivEXT((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2ivEXT", Version = "")]
      public static unsafe void ProgramUniform2(int program, int location, int count, int* value)
      {
        GL.Delegates.glProgramUniform2ivEXT((uint) program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(uint program, int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glProgramUniform2ivEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2ivEXT", Version = "")]
      public static unsafe void ProgramUniform2(uint program, int location, int count, int* value)
      {
        GL.Delegates.glProgramUniform2ivEXT(program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2uiEXT", Version = "")]
      public static void ProgramUniform2(uint program, int location, uint v0, uint v1)
      {
        GL.Delegates.glProgramUniform2uiEXT(program, location, v0, v1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(uint program, int location, int count, uint[] value)
      {
        fixed (uint* numPtr = value)
          GL.Delegates.glProgramUniform2uivEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(uint program, int location, int count, ref uint value)
      {
        fixed (uint* numPtr = &value)
          GL.Delegates.glProgramUniform2uivEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform2uivEXT", Version = "")]
      public static unsafe void ProgramUniform2(uint program, int location, int count, uint* value)
      {
        GL.Delegates.glProgramUniform2uivEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3dEXT", Version = "1.2")]
      public static void ProgramUniform3(int program, int location, double x, double y, double z)
      {
        GL.Delegates.glProgramUniform3dEXT((uint) program, location, x, y, z);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3dEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void ProgramUniform3(uint program, int location, double x, double y, double z)
      {
        GL.Delegates.glProgramUniform3dEXT(program, location, x, y, z);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform3(int program, int location, int count, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniform3dvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform3(int program, int location, int count, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniform3dvEXT((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform3(int program, int location, int count, double* value)
      {
        GL.Delegates.glProgramUniform3dvEXT((uint) program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniform3dvEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform3(uint program, int location, int count, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniform3dvEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform3(uint program, int location, int count, double* value)
      {
        GL.Delegates.glProgramUniform3dvEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3fEXT", Version = "")]
      public static void ProgramUniform3(int program, int location, float v0, float v1, float v2)
      {
        GL.Delegates.glProgramUniform3fEXT((uint) program, location, v0, v1, v2);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3fEXT", Version = "")]
      public static void ProgramUniform3(uint program, int location, float v0, float v1, float v2)
      {
        GL.Delegates.glProgramUniform3fEXT(program, location, v0, v1, v2);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3fvEXT", Version = "")]
      public static unsafe void ProgramUniform3(int program, int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniform3fvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3fvEXT", Version = "")]
      public static unsafe void ProgramUniform3(int program, int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniform3fvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform3(int program, int location, int count, float* value)
      {
        GL.Delegates.glProgramUniform3fvEXT((uint) program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3fvEXT", Version = "")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniform3fvEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3fvEXT", Version = "")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniform3fvEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3fvEXT", Version = "")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, float* value)
      {
        GL.Delegates.glProgramUniform3fvEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3iEXT", Version = "")]
      public static void ProgramUniform3(int program, int location, int v0, int v1, int v2)
      {
        GL.Delegates.glProgramUniform3iEXT((uint) program, location, v0, v1, v2);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3iEXT", Version = "")]
      public static void ProgramUniform3(uint program, int location, int v0, int v1, int v2)
      {
        GL.Delegates.glProgramUniform3iEXT(program, location, v0, v1, v2);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3ivEXT", Version = "")]
      public static unsafe void ProgramUniform3(int program, int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glProgramUniform3ivEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3ivEXT", Version = "")]
      public static unsafe void ProgramUniform3(int program, int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glProgramUniform3ivEXT((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3ivEXT", Version = "")]
      public static unsafe void ProgramUniform3(int program, int location, int count, int* value)
      {
        GL.Delegates.glProgramUniform3ivEXT((uint) program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform3(uint program, int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glProgramUniform3ivEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform3(uint program, int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glProgramUniform3ivEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3ivEXT", Version = "")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, int* value)
      {
        GL.Delegates.glProgramUniform3ivEXT(program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3uiEXT", Version = "")]
      public static void ProgramUniform3(uint program, int location, uint v0, uint v1, uint v2)
      {
        GL.Delegates.glProgramUniform3uiEXT(program, location, v0, v1, v2);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform3(uint program, int location, int count, uint[] value)
      {
        fixed (uint* numPtr = value)
          GL.Delegates.glProgramUniform3uivEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3uivEXT", Version = "")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, ref uint value)
      {
        fixed (uint* numPtr = &value)
          GL.Delegates.glProgramUniform3uivEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform3uivEXT", Version = "")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, uint* value)
      {
        GL.Delegates.glProgramUniform3uivEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4dEXT", Version = "1.2")]
      public static void ProgramUniform4(int program, int location, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramUniform4dEXT((uint) program, location, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4dEXT", Version = "1.2")]
      public static void ProgramUniform4(uint program, int location, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramUniform4dEXT(program, location, x, y, z, w);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform4(int program, int location, int count, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniform4dvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform4(int program, int location, int count, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniform4dvEXT((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform4(int program, int location, int count, double* value)
      {
        GL.Delegates.glProgramUniform4dvEXT((uint) program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniform4dvEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniform4dvEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, double* value)
      {
        GL.Delegates.glProgramUniform4dvEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4fEXT", Version = "")]
      public static void ProgramUniform4(int program, int location, float v0, float v1, float v2, float v3)
      {
        GL.Delegates.glProgramUniform4fEXT((uint) program, location, v0, v1, v2, v3);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4fEXT", Version = "")]
      [CLSCompliant(false)]
      public static void ProgramUniform4(uint program, int location, float v0, float v1, float v2, float v3)
      {
        GL.Delegates.glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4fvEXT", Version = "")]
      public static unsafe void ProgramUniform4(int program, int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniform4fvEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4fvEXT", Version = "")]
      public static unsafe void ProgramUniform4(int program, int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniform4fvEXT((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4fvEXT", Version = "")]
      public static unsafe void ProgramUniform4(int program, int location, int count, float* value)
      {
        GL.Delegates.glProgramUniform4fvEXT((uint) program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform4(uint program, int location, int count, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniform4fvEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4fvEXT", Version = "")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniform4fvEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4fvEXT", Version = "")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, float* value)
      {
        GL.Delegates.glProgramUniform4fvEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4iEXT", Version = "")]
      public static void ProgramUniform4(int program, int location, int v0, int v1, int v2, int v3)
      {
        GL.Delegates.glProgramUniform4iEXT((uint) program, location, v0, v1, v2, v3);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4iEXT", Version = "")]
      public static void ProgramUniform4(uint program, int location, int v0, int v1, int v2, int v3)
      {
        GL.Delegates.glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4ivEXT", Version = "")]
      public static unsafe void ProgramUniform4(int program, int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glProgramUniform4ivEXT((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4ivEXT", Version = "")]
      public static unsafe void ProgramUniform4(int program, int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glProgramUniform4ivEXT((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4ivEXT", Version = "")]
      public static unsafe void ProgramUniform4(int program, int location, int count, int* value)
      {
        GL.Delegates.glProgramUniform4ivEXT((uint) program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform4(uint program, int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glProgramUniform4ivEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4ivEXT", Version = "")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glProgramUniform4ivEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform4(uint program, int location, int count, int* value)
      {
        GL.Delegates.glProgramUniform4ivEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4uiEXT", Version = "")]
      [CLSCompliant(false)]
      public static void ProgramUniform4(uint program, int location, uint v0, uint v1, uint v2, uint v3)
      {
        GL.Delegates.glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform4(uint program, int location, int count, uint[] value)
      {
        fixed (uint* numPtr = value)
          GL.Delegates.glProgramUniform4uivEXT(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4uivEXT", Version = "")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, ref uint value)
      {
        fixed (uint* numPtr = &value)
          GL.Delegates.glProgramUniform4uivEXT(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniform4uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform4(uint program, int location, int count, uint* value)
      {
        GL.Delegates.glProgramUniform4uivEXT(program, location, count, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix2dvEXT((uint) program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2dvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2dvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2(int program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix2fvEXT((uint) program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2fvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2(uint program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2x3dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2x3dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix2x3dvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2x3fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2x3fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2x3(int program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix2x3fvEXT((uint) program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2x3(uint program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2x4dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2x4dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix2x4dvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2x4fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2x4fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2x4(int program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix2x4fvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix2x4fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix2x4(uint program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix3dvEXT((uint) program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3dvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3dvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3(int program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix3fvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3fvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3(uint program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3x2dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3x2dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix3x2dvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3x2fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3x2fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3x2(int program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix3x2fvEXT((uint) program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3x2(uint program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3x4dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3x4dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix3x4dvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3x4fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3x4fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix3x4(int program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix3x4fvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix3x4fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix3x4(uint program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix4dvEXT((uint) program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4dvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4dvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4(int program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix4fvEXT((uint) program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4(uint program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4x2dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4x2dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix4x2dvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4x2fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4x2fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4x2(int program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix4x2fvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x2fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4x2(uint program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4x3dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4x3dvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix4x3dvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3dvEXT", Version = "1.2")]
      public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double[] value)
      {
        fixed (double* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref double value)
      {
        fixed (double* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3dvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, double* value)
      {
        GL.Delegates.glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4x3fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4x3fvEXT((uint) program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4x3(int program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix4x3fvEXT((uint) program, location, count, transpose, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, numPtr);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3fvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glProgramUniformMatrix4x3fvEXT", Version = "")]
      public static unsafe void ProgramUniformMatrix4x3(uint program, int location, int count, bool transpose, float* value)
      {
        GL.Delegates.glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
      }

      [AutoGenerated(Category = "EXT_provoking_vertex", EntryPoint = "glProvokingVertexEXT", Version = "2.1")]
      public static void ProvokingVertex(ExtProvokingVertex mode)
      {
        GL.Delegates.glProvokingVertexEXT(mode);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glPushClientAttribDefaultEXT", Version = "")]
      public static void PushClientAttribDefault(ClientAttribMask mask)
      {
        GL.Delegates.glPushClientAttribDefaultEXT(mask);
      }

      [AutoGenerated(Category = "EXT_framebuffer_object", EntryPoint = "glRenderbufferStorageEXT", Version = "1.2")]
      public static void RenderbufferStorage(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height)
      {
        GL.Delegates.glRenderbufferStorageEXT(target, internalformat, width, height);
      }

      [AutoGenerated(Category = "EXT_framebuffer_multisample", EntryPoint = "glRenderbufferStorageMultisampleEXT", Version = "1.5")]
      public static void RenderbufferStorageMultisample(ExtFramebufferMultisample target, int samples, ExtFramebufferMultisample internalformat, int width, int height)
      {
        GL.Delegates.glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glResetHistogramEXT", Version = "1.0")]
      public static void ResetHistogram(ExtHistogram target)
      {
        GL.Delegates.glResetHistogramEXT(target);
      }

      [AutoGenerated(Category = "EXT_histogram", EntryPoint = "glResetMinmaxEXT", Version = "1.0")]
      public static void ResetMinmax(ExtHistogram target)
      {
        GL.Delegates.glResetMinmaxEXT(target);
      }

      [AutoGenerated(Category = "EXT_multisample", EntryPoint = "glSampleMaskEXT", Version = "1.0")]
      public static void SampleMask(float value, bool invert)
      {
        GL.Delegates.glSampleMaskEXT(value, invert);
      }

      [AutoGenerated(Category = "EXT_multisample", EntryPoint = "glSamplePatternEXT", Version = "1.0")]
      public static void SamplePattern(ExtMultisample pattern)
      {
        GL.Delegates.glSamplePatternEXT(pattern);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3bEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static void SecondaryColor3(sbyte red, sbyte green, sbyte blue)
      {
        GL.Delegates.glSecondaryColor3bEXT(red, green, blue);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3bvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(sbyte[] v)
      {
        fixed (sbyte* v1 = v)
          GL.Delegates.glSecondaryColor3bvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3bvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void SecondaryColor3(ref sbyte v)
      {
        fixed (sbyte* v1 = &v)
          GL.Delegates.glSecondaryColor3bvEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3bvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(sbyte* v)
      {
        GL.Delegates.glSecondaryColor3bvEXT(v);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3dEXT", Version = "1.1")]
      public static void SecondaryColor3(double red, double green, double blue)
      {
        GL.Delegates.glSecondaryColor3dEXT(red, green, blue);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3dvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glSecondaryColor3dvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3dvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glSecondaryColor3dvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3dvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void SecondaryColor3(double* v)
      {
        GL.Delegates.glSecondaryColor3dvEXT(v);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3fEXT", Version = "1.1")]
      public static void SecondaryColor3(float red, float green, float blue)
      {
        GL.Delegates.glSecondaryColor3fEXT(red, green, blue);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3fvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glSecondaryColor3fvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3fvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glSecondaryColor3fvEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3fvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(float* v)
      {
        GL.Delegates.glSecondaryColor3fvEXT(v);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3iEXT", Version = "1.1")]
      public static void SecondaryColor3(int red, int green, int blue)
      {
        GL.Delegates.glSecondaryColor3iEXT(red, green, blue);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3ivEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glSecondaryColor3ivEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3ivEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glSecondaryColor3ivEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3ivEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void SecondaryColor3(int* v)
      {
        GL.Delegates.glSecondaryColor3ivEXT(v);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3sEXT", Version = "1.1")]
      public static void SecondaryColor3(short red, short green, short blue)
      {
        GL.Delegates.glSecondaryColor3sEXT(red, green, blue);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3svEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glSecondaryColor3svEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3svEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glSecondaryColor3svEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3svEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void SecondaryColor3(short* v)
      {
        GL.Delegates.glSecondaryColor3svEXT(v);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3ubEXT", Version = "1.1")]
      public static void SecondaryColor3(byte red, byte green, byte blue)
      {
        GL.Delegates.glSecondaryColor3ubEXT(red, green, blue);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3ubvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glSecondaryColor3ubvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3ubvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glSecondaryColor3ubvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3ubvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void SecondaryColor3(byte* v)
      {
        GL.Delegates.glSecondaryColor3ubvEXT(v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3uiEXT", Version = "1.1")]
      public static void SecondaryColor3(uint red, uint green, uint blue)
      {
        GL.Delegates.glSecondaryColor3uiEXT(red, green, blue);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3uivEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void SecondaryColor3(uint[] v)
      {
        fixed (uint* v1 = v)
          GL.Delegates.glSecondaryColor3uivEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3uivEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(ref uint v)
      {
        fixed (uint* v1 = &v)
          GL.Delegates.glSecondaryColor3uivEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3uivEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void SecondaryColor3(uint* v)
      {
        GL.Delegates.glSecondaryColor3uivEXT(v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3usEXT", Version = "1.1")]
      public static void SecondaryColor3(ushort red, ushort green, ushort blue)
      {
        GL.Delegates.glSecondaryColor3usEXT(red, green, blue);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3usvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void SecondaryColor3(ushort[] v)
      {
        fixed (ushort* v1 = v)
          GL.Delegates.glSecondaryColor3usvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3usvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void SecondaryColor3(ref ushort v)
      {
        fixed (ushort* v1 = &v)
          GL.Delegates.glSecondaryColor3usvEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColor3usvEXT", Version = "1.1")]
      public static unsafe void SecondaryColor3(ushort* v)
      {
        GL.Delegates.glSecondaryColor3usvEXT(v);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColorPointerEXT", Version = "1.1")]
      public static void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
      {
        GL.Delegates.glSecondaryColorPointerEXT(size, type, stride, pointer);
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColorPointerEXT", Version = "1.1")]
      public static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSecondaryColorPointerEXT(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColorPointerEXT", Version = "1.1")]
      public static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSecondaryColorPointerEXT(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColorPointerEXT", Version = "1.1")]
      public static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSecondaryColorPointerEXT(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_secondary_color", EntryPoint = "glSecondaryColorPointerEXT", Version = "1.1")]
      public static void SecondaryColorPointer<T3>(int size, ColorPointerType type, int stride, [In, Out] ref T3 pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSecondaryColorPointerEXT(size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glSeparableFilter2DEXT", Version = "1.0")]
      public static void SeparableFilter2D(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
      {
        GL.Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glSeparableFilter2DEXT", Version = "1.0")]
      public static void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In, Out] T7[] column) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glSeparableFilter2DEXT", Version = "1.0")]
      public static void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In, Out] T7[,] column) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glSeparableFilter2DEXT", Version = "1.0")]
      public static void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In, Out] T7[,,] column) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glSeparableFilter2DEXT", Version = "1.0")]
      public static void SeparableFilter2D<T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, [In, Out] ref T7 column) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, gcHandle.AddrOfPinnedObject());
          column = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glSeparableFilter2DEXT", Version = "1.0")]
      public static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[] row, [In, Out] T7[,,] column) where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glSeparableFilter2DEXT", Version = "1.0")]
      public static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,] row, [In, Out] T7[,,] column) where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glSeparableFilter2DEXT", Version = "1.0")]
      public static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,,] row, [In, Out] T7[,,] column) where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "EXT_convolution", EntryPoint = "glSeparableFilter2DEXT", Version = "1.0")]
      public static void SeparableFilter2D<T6, T7>(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T6 row, [In, Out] T7[,,] column) where T6 : struct where T7 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) row, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) column, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
          row = (T6) gcHandle1.Target;
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      public static void SetInvariant(int id, ExtVertexShader type, IntPtr addr)
      {
        GL.Delegates.glSetInvariantEXT((uint) id, type, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      public static void SetInvariant<T2>(int id, ExtVertexShader type, [In, Out] T2[] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetInvariantEXT((uint) id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      public static void SetInvariant<T2>(int id, ExtVertexShader type, [In, Out] T2[,] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetInvariantEXT((uint) id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      public static void SetInvariant<T2>(int id, ExtVertexShader type, [In, Out] T2[,,] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetInvariantEXT((uint) id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      public static void SetInvariant<T2>(int id, ExtVertexShader type, [In, Out] ref T2 addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetInvariantEXT((uint) id, type, gcHandle.AddrOfPinnedObject());
          addr = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void SetInvariant(uint id, ExtVertexShader type, IntPtr addr)
      {
        GL.Delegates.glSetInvariantEXT(id, type, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void SetInvariant<T2>(uint id, ExtVertexShader type, [In, Out] T2[] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetInvariantEXT(id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      public static void SetInvariant<T2>(uint id, ExtVertexShader type, [In, Out] T2[,] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetInvariantEXT(id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void SetInvariant<T2>(uint id, ExtVertexShader type, [In, Out] T2[,,] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetInvariantEXT(id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetInvariantEXT", Version = "1.2")]
      public static void SetInvariant<T2>(uint id, ExtVertexShader type, [In, Out] ref T2 addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetInvariantEXT(id, type, gcHandle.AddrOfPinnedObject());
          addr = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      public static void SetLocalConstant(int id, ExtVertexShader type, IntPtr addr)
      {
        GL.Delegates.glSetLocalConstantEXT((uint) id, type, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      public static void SetLocalConstant<T2>(int id, ExtVertexShader type, [In, Out] T2[] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetLocalConstantEXT((uint) id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      public static void SetLocalConstant<T2>(int id, ExtVertexShader type, [In, Out] T2[,] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetLocalConstantEXT((uint) id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      public static void SetLocalConstant<T2>(int id, ExtVertexShader type, [In, Out] T2[,,] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetLocalConstantEXT((uint) id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      public static void SetLocalConstant<T2>(int id, ExtVertexShader type, [In, Out] ref T2 addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetLocalConstantEXT((uint) id, type, gcHandle.AddrOfPinnedObject());
          addr = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void SetLocalConstant(uint id, ExtVertexShader type, IntPtr addr)
      {
        GL.Delegates.glSetLocalConstantEXT(id, type, addr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      public static void SetLocalConstant<T2>(uint id, ExtVertexShader type, [In, Out] T2[] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetLocalConstantEXT(id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void SetLocalConstant<T2>(uint id, ExtVertexShader type, [In, Out] T2[,] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetLocalConstantEXT(id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void SetLocalConstant<T2>(uint id, ExtVertexShader type, [In, Out] T2[,,] addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetLocalConstantEXT(id, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSetLocalConstantEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void SetLocalConstant<T2>(uint id, ExtVertexShader type, [In, Out] ref T2 addr) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSetLocalConstantEXT(id, type, gcHandle.AddrOfPinnedObject());
          addr = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glShaderOp1EXT", Version = "1.2")]
      public static void ShaderOp1(ExtVertexShader op, int res, int arg1)
      {
        GL.Delegates.glShaderOp1EXT(op, (uint) res, (uint) arg1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glShaderOp1EXT", Version = "1.2")]
      public static void ShaderOp1(ExtVertexShader op, uint res, uint arg1)
      {
        GL.Delegates.glShaderOp1EXT(op, res, arg1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glShaderOp2EXT", Version = "1.2")]
      public static void ShaderOp2(ExtVertexShader op, int res, int arg1, int arg2)
      {
        GL.Delegates.glShaderOp2EXT(op, (uint) res, (uint) arg1, (uint) arg2);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glShaderOp2EXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void ShaderOp2(ExtVertexShader op, uint res, uint arg1, uint arg2)
      {
        GL.Delegates.glShaderOp2EXT(op, res, arg1, arg2);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glShaderOp3EXT", Version = "1.2")]
      public static void ShaderOp3(ExtVertexShader op, int res, int arg1, int arg2, int arg3)
      {
        GL.Delegates.glShaderOp3EXT(op, (uint) res, (uint) arg1, (uint) arg2, (uint) arg3);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glShaderOp3EXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void ShaderOp3(ExtVertexShader op, uint res, uint arg1, uint arg2, uint arg3)
      {
        GL.Delegates.glShaderOp3EXT(op, res, arg1, arg2, arg3);
      }

      [AutoGenerated(Category = "EXT_stencil_clear_tag", EntryPoint = "glStencilClearTagEXT", Version = "1.5")]
      public static void StencilClearTag(int stencilTagBits, int stencilClearTag)
      {
        GL.Delegates.glStencilClearTagEXT(stencilTagBits, (uint) stencilClearTag);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_stencil_clear_tag", EntryPoint = "glStencilClearTagEXT", Version = "1.5")]
      public static void StencilClearTag(int stencilTagBits, uint stencilClearTag)
      {
        GL.Delegates.glStencilClearTagEXT(stencilTagBits, stencilClearTag);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSwizzleEXT", Version = "1.2")]
      public static void Swizzle(int res, int @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW)
      {
        GL.Delegates.glSwizzleEXT((uint) res, (uint) @in, outX, outY, outZ, outW);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glSwizzleEXT", Version = "1.2")]
      public static void Swizzle(uint res, uint @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW)
      {
        GL.Delegates.glSwizzleEXT(res, @in, outX, outY, outZ, outW);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3bEXT", Version = "1.1")]
      public static void Tangent3(byte tx, byte ty, byte tz)
      {
        GL.Delegates.glTangent3bEXT((sbyte) tx, (sbyte) ty, (sbyte) tz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3bEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static void Tangent3(sbyte tx, sbyte ty, sbyte tz)
      {
        GL.Delegates.glTangent3bEXT(tx, ty, tz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3bvEXT", Version = "1.1")]
      public static unsafe void Tangent3(byte[] v)
      {
        fixed (byte* numPtr = v)
          GL.Delegates.glTangent3bvEXT((sbyte*) numPtr);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3bvEXT", Version = "1.1")]
      public static unsafe void Tangent3(ref byte v)
      {
        fixed (byte* numPtr = &v)
          GL.Delegates.glTangent3bvEXT((sbyte*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3bvEXT", Version = "1.1")]
      public static unsafe void Tangent3(byte* v)
      {
        GL.Delegates.glTangent3bvEXT((sbyte*) v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3bvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Tangent3(sbyte[] v)
      {
        fixed (sbyte* v1 = v)
          GL.Delegates.glTangent3bvEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3bvEXT", Version = "1.1")]
      public static unsafe void Tangent3(ref sbyte v)
      {
        fixed (sbyte* v1 = &v)
          GL.Delegates.glTangent3bvEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3bvEXT", Version = "1.1")]
      public static unsafe void Tangent3(sbyte* v)
      {
        GL.Delegates.glTangent3bvEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3dEXT", Version = "1.1")]
      public static void Tangent3(double tx, double ty, double tz)
      {
        GL.Delegates.glTangent3dEXT(tx, ty, tz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3dvEXT", Version = "1.1")]
      public static unsafe void Tangent3(double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glTangent3dvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3dvEXT", Version = "1.1")]
      public static unsafe void Tangent3(ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glTangent3dvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3dvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Tangent3(double* v)
      {
        GL.Delegates.glTangent3dvEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3fEXT", Version = "1.1")]
      public static void Tangent3(float tx, float ty, float tz)
      {
        GL.Delegates.glTangent3fEXT(tx, ty, tz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3fvEXT", Version = "1.1")]
      public static unsafe void Tangent3(float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glTangent3fvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3fvEXT", Version = "1.1")]
      public static unsafe void Tangent3(ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glTangent3fvEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3fvEXT", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Tangent3(float* v)
      {
        GL.Delegates.glTangent3fvEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3iEXT", Version = "1.1")]
      public static void Tangent3(int tx, int ty, int tz)
      {
        GL.Delegates.glTangent3iEXT(tx, ty, tz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3ivEXT", Version = "1.1")]
      public static unsafe void Tangent3(int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glTangent3ivEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3ivEXT", Version = "1.1")]
      public static unsafe void Tangent3(ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glTangent3ivEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3ivEXT", Version = "1.1")]
      public static unsafe void Tangent3(int* v)
      {
        GL.Delegates.glTangent3ivEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3sEXT", Version = "1.1")]
      public static void Tangent3(short tx, short ty, short tz)
      {
        GL.Delegates.glTangent3sEXT(tx, ty, tz);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3svEXT", Version = "1.1")]
      public static unsafe void Tangent3(short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glTangent3svEXT(v1);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3svEXT", Version = "1.1")]
      public static unsafe void Tangent3(ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glTangent3svEXT(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangent3svEXT", Version = "1.1")]
      public static unsafe void Tangent3(short* v)
      {
        GL.Delegates.glTangent3svEXT(v);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangentPointerEXT", Version = "1.1")]
      public static void TangentPointer(NormalPointerType type, int stride, IntPtr pointer)
      {
        GL.Delegates.glTangentPointerEXT(type, stride, pointer);
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangentPointerEXT", Version = "1.1")]
      public static void TangentPointer<T2>(NormalPointerType type, int stride, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTangentPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangentPointerEXT", Version = "1.1")]
      public static void TangentPointer<T2>(NormalPointerType type, int stride, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTangentPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangentPointerEXT", Version = "1.1")]
      public static void TangentPointer<T2>(NormalPointerType type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTangentPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_coordinate_frame", EntryPoint = "glTangentPointerEXT", Version = "1.1")]
      public static void TangentPointer<T2>(NormalPointerType type, int stride, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTangentPointerEXT(type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture_buffer_object", EntryPoint = "glTexBufferEXT", Version = "2.0")]
      public static void TexBuffer(TextureTarget target, ExtTextureBufferObject internalformat, int buffer)
      {
        GL.Delegates.glTexBufferEXT(target, internalformat, (uint) buffer);
      }

      [AutoGenerated(Category = "EXT_texture_buffer_object", EntryPoint = "glTexBufferEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static void TexBuffer(TextureTarget target, ExtTextureBufferObject internalformat, uint buffer)
      {
        GL.Delegates.glTexBufferEXT(target, internalformat, buffer);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glTexCoordPointerEXT", Version = "1.0")]
      public static void TexCoordPointer(int size, TexCoordPointerType type, int stride, int count, IntPtr pointer)
      {
        GL.Delegates.glTexCoordPointerEXT(size, type, stride, count, pointer);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glTexCoordPointerEXT", Version = "1.0")]
      public static void TexCoordPointer<T4>(int size, TexCoordPointerType type, int stride, int count, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glTexCoordPointerEXT", Version = "1.0")]
      public static void TexCoordPointer<T4>(int size, TexCoordPointerType type, int stride, int count, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glTexCoordPointerEXT", Version = "1.0")]
      public static void TexCoordPointer<T4>(int size, TexCoordPointerType type, int stride, int count, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glTexCoordPointerEXT", Version = "1.0")]
      public static void TexCoordPointer<T4>(int size, TexCoordPointerType type, int stride, int count, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexImage3DEXT", Version = "1.0")]
      public static void TexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexImage3DEXT", Version = "1.0")]
      public static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T9[] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexImage3DEXT", Version = "1.0")]
      public static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T9[,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexImage3DEXT", Version = "1.0")]
      public static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T9[,,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexImage3DEXT", Version = "1.0")]
      public static void TexImage3D<T9>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] ref T9 pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glTexParameterIivEXT", Version = "2.0")]
      public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glTexParameterIivEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glTexParameterIivEXT", Version = "2.0")]
      public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glTexParameterIivEXT(target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glTexParameterIivEXT", Version = "2.0")]
      public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, int* @params)
      {
        GL.Delegates.glTexParameterIivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glTexParameterIuivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glTexParameterIuivEXT(target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glTexParameterIuivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glTexParameterIuivEXT(target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_texture_integer", EntryPoint = "glTexParameterIuivEXT", Version = "2.0")]
      public static unsafe void TexParameterI(TextureTarget target, TextureParameterName pname, uint* @params)
      {
        GL.Delegates.glTexParameterIuivEXT(target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage1DEXT", Version = "1.0")]
      public static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage1DEXT", Version = "1.0")]
      public static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T6[] pixels) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage1DEXT", Version = "1.0")]
      public static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T6[,] pixels) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage1DEXT", Version = "1.0")]
      public static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T6[,,] pixels) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage1DEXT", Version = "1.0")]
      public static void TexSubImage1D<T6>(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] ref T6 pixels) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T6) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage2DEXT", Version = "1.0")]
      public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage2DEXT", Version = "1.0")]
      public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T8[] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage2DEXT", Version = "1.0")]
      public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T8[,] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage2DEXT", Version = "1.0")]
      public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T8[,,] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_subtexture", EntryPoint = "glTexSubImage2DEXT", Version = "1.0")]
      public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T8 pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexSubImage3DEXT", Version = "1.0")]
      public static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexSubImage3DEXT", Version = "1.0")]
      public static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T10[] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexSubImage3DEXT", Version = "1.0")]
      public static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T10[,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexSubImage3DEXT", Version = "1.0")]
      public static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T10[,,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_texture3D", EntryPoint = "glTexSubImage3DEXT", Version = "1.0")]
      public static void TexSubImage3D<T10>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] ref T10 pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T10) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureBufferEXT", Version = "")]
      public static void TextureBuffer(int texture, TextureTarget target, ExtDirectStateAccess internalformat, int buffer)
      {
        GL.Delegates.glTextureBufferEXT((uint) texture, target, internalformat, (uint) buffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureBufferEXT", Version = "")]
      public static void TextureBuffer(uint texture, TextureTarget target, ExtDirectStateAccess internalformat, uint buffer)
      {
        GL.Delegates.glTextureBufferEXT(texture, target, internalformat, buffer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      public static void TextureImage1D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      public static void TextureImage1D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T8[] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      public static void TextureImage1D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T8[,] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      public static void TextureImage1D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T8[,,] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      public static void TextureImage1D<T8>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] ref T8 pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage1DEXT((uint) texture, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureImage1D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T8[] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      public static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T8[,] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      public static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] T8[,,] pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage1DEXT", Version = "")]
      public static void TextureImage1D<T8>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, [In, Out] ref T8 pixels) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      public static void TextureImage2D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      public static void TextureImage2D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T9[] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      public static void TextureImage2D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T9[,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      public static void TextureImage2D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T9[,,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      public static void TextureImage2D<T9>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] ref T9 pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage2DEXT((uint) texture, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureImage2D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T9[] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      public static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T9[,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T9[,,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureImage2D<T9>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] ref T9 pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      public static void TextureImage3D(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      public static void TextureImage3D<T10>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T10[] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      public static void TextureImage3D<T10>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T10[,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      public static void TextureImage3D<T10>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T10[,,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      public static void TextureImage3D<T10>(int texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] ref T10 pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage3DEXT((uint) texture, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T10) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      public static void TextureImage3D(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      public static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T10[] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      public static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T10[,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] T10[,,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureImage3D<T10>(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, [In, Out] ref T10 pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T10) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_light_texture", EntryPoint = "glTextureLightEXT", Version = "1.1")]
      public static void TextureLight(ExtLightTexture pname)
      {
        GL.Delegates.glTextureLightEXT(pname);
      }

      [AutoGenerated(Category = "EXT_light_texture", EntryPoint = "glTextureMaterialEXT", Version = "1.1")]
      public static void TextureMaterial(MaterialFace face, MaterialParameter mode)
      {
        GL.Delegates.glTextureMaterialEXT(face, mode);
      }

      [AutoGenerated(Category = "EXT_texture_perturb_normal", EntryPoint = "glTextureNormalEXT", Version = "1.1")]
      public static void TextureNormal(ExtTexturePerturbNormal mode)
      {
        GL.Delegates.glTextureNormalEXT(mode);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterfEXT", Version = "")]
      public static void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, float param)
      {
        GL.Delegates.glTextureParameterfEXT((uint) texture, target, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterfEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, float param)
      {
        GL.Delegates.glTextureParameterfEXT(texture, target, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterfvEXT", Version = "")]
      public static unsafe void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glTextureParameterfvEXT((uint) texture, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterfvEXT", Version = "")]
      public static unsafe void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, float* @params)
      {
        GL.Delegates.glTextureParameterfvEXT((uint) texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterfvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glTextureParameterfvEXT(texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterfvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, float* @params)
      {
        GL.Delegates.glTextureParameterfvEXT(texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameteriEXT", Version = "")]
      public static void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, int param)
      {
        GL.Delegates.glTextureParameteriEXT((uint) texture, target, pname, param);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameteriEXT", Version = "")]
      public static void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, int param)
      {
        GL.Delegates.glTextureParameteriEXT(texture, target, pname, param);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterIivEXT", Version = "")]
      public static unsafe void TextureParameterI(int texture, TextureTarget target, TextureParameterName pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glTextureParameterIivEXT((uint) texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterIivEXT", Version = "")]
      public static unsafe void TextureParameterI(int texture, TextureTarget target, TextureParameterName pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glTextureParameterIivEXT((uint) texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameterI(int texture, TextureTarget target, TextureParameterName pname, int* @params)
      {
        GL.Delegates.glTextureParameterIivEXT((uint) texture, target, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterIivEXT", Version = "")]
      public static unsafe void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glTextureParameterIivEXT(texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glTextureParameterIivEXT(texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterIivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, int* @params)
      {
        GL.Delegates.glTextureParameterIivEXT(texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterIuivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glTextureParameterIuivEXT(texture, target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterIuivEXT", Version = "")]
      public static unsafe void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glTextureParameterIuivEXT(texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterIuivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameterI(uint texture, TextureTarget target, TextureParameterName pname, uint* @params)
      {
        GL.Delegates.glTextureParameterIuivEXT(texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterivEXT", Version = "")]
      public static unsafe void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glTextureParameterivEXT((uint) texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameter(int texture, TextureTarget target, TextureParameterName pname, int* @params)
      {
        GL.Delegates.glTextureParameterivEXT((uint) texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glTextureParameterivEXT(texture, target, pname, params1);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureParameterivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void TextureParameter(uint texture, TextureTarget target, TextureParameterName pname, int* @params)
      {
        GL.Delegates.glTextureParameterivEXT(texture, target, pname, @params);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureRenderbufferEXT", Version = "")]
      public static void TextureRenderbuffer(int texture, TextureTarget target, int renderbuffer)
      {
        GL.Delegates.glTextureRenderbufferEXT((uint) texture, target, (uint) renderbuffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureRenderbufferEXT", Version = "")]
      public static void TextureRenderbuffer(uint texture, TextureTarget target, uint renderbuffer)
      {
        GL.Delegates.glTextureRenderbufferEXT(texture, target, renderbuffer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      public static void TextureSubImage1D(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      public static void TextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T7[] pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      public static void TextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T7[,] pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      public static void TextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T7[,,] pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      public static void TextureSubImage1D<T7>(int texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] ref T7 pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage1DEXT((uint) texture, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      public static void TextureSubImage1D(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T7[] pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T7[,] pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      public static void TextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] T7[,,] pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage1DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage1D<T7>(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, [In, Out] ref T7 pixels) where T7 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T7) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      public static void TextureSubImage2D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      public static void TextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T9[] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      public static void TextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T9[,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      public static void TextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T9[,,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      public static void TextureSubImage2D<T9>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T9 pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage2DEXT((uint) texture, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage2D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      public static void TextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T9[] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T9[,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      public static void TextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T9[,,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage2DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage2D<T9>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T9 pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      public static void TextureSubImage3D(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      public static void TextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T11[] pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      public static void TextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T11[,] pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      public static void TextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T11[,,] pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      public static void TextureSubImage3D<T11>(int texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] ref T11 pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage3DEXT((uint) texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T11) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage3D(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      public static void TextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T11[] pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T11[,] pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] T11[,,] pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glTextureSubImage3DEXT", Version = "")]
      [CLSCompliant(false)]
      public static void TextureSubImage3D<T11>(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, [In, Out] ref T11 pixels) where T11 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T11) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsEXT", Version = "2.0")]
      public static void TransformFeedbackVaryings(int program, int count, string[] varyings, ExtTransformFeedback bufferMode)
      {
        GL.Delegates.glTransformFeedbackVaryingsEXT((uint) program, count, varyings, bufferMode);
      }

      [AutoGenerated(Category = "EXT_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, ExtTransformFeedback bufferMode)
      {
        GL.Delegates.glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform1uiEXT", Version = "2.0")]
      public static void Uniform1(int location, int v0)
      {
        GL.Delegates.glUniform1uiEXT(location, (uint) v0);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform1uiEXT", Version = "2.0")]
      public static void Uniform1(int location, uint v0)
      {
        GL.Delegates.glUniform1uiEXT(location, v0);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform1uivEXT", Version = "2.0")]
      public static unsafe void Uniform1(int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glUniform1uivEXT(location, count, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform1uivEXT", Version = "2.0")]
      public static unsafe void Uniform1(int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glUniform1uivEXT(location, count, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform1uivEXT", Version = "2.0")]
      public static unsafe void Uniform1(int location, int count, int* value)
      {
        GL.Delegates.glUniform1uivEXT(location, count, (uint*) value);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform1uivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void Uniform1(int location, int count, uint[] value)
      {
        fixed (uint* numPtr = value)
          GL.Delegates.glUniform1uivEXT(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform1uivEXT", Version = "2.0")]
      public static unsafe void Uniform1(int location, int count, ref uint value)
      {
        fixed (uint* numPtr = &value)
          GL.Delegates.glUniform1uivEXT(location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform1uivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void Uniform1(int location, int count, uint* value)
      {
        GL.Delegates.glUniform1uivEXT(location, count, value);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform2uiEXT", Version = "2.0")]
      public static void Uniform2(int location, int v0, int v1)
      {
        GL.Delegates.glUniform2uiEXT(location, (uint) v0, (uint) v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform2uiEXT", Version = "2.0")]
      public static void Uniform2(int location, uint v0, uint v1)
      {
        GL.Delegates.glUniform2uiEXT(location, v0, v1);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform2uivEXT", Version = "2.0")]
      public static unsafe void Uniform2(int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glUniform2uivEXT(location, count, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform2uivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void Uniform2(int location, int count, int* value)
      {
        GL.Delegates.glUniform2uivEXT(location, count, (uint*) value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform2uivEXT", Version = "2.0")]
      public static unsafe void Uniform2(int location, int count, uint[] value)
      {
        fixed (uint* numPtr = value)
          GL.Delegates.glUniform2uivEXT(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform2uivEXT", Version = "2.0")]
      public static unsafe void Uniform2(int location, int count, ref uint value)
      {
        fixed (uint* numPtr = &value)
          GL.Delegates.glUniform2uivEXT(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform2uivEXT", Version = "2.0")]
      public static unsafe void Uniform2(int location, int count, uint* value)
      {
        GL.Delegates.glUniform2uivEXT(location, count, value);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform3uiEXT", Version = "2.0")]
      public static void Uniform3(int location, int v0, int v1, int v2)
      {
        GL.Delegates.glUniform3uiEXT(location, (uint) v0, (uint) v1, (uint) v2);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform3uiEXT", Version = "2.0")]
      public static void Uniform3(int location, uint v0, uint v1, uint v2)
      {
        GL.Delegates.glUniform3uiEXT(location, v0, v1, v2);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform3uivEXT", Version = "2.0")]
      public static unsafe void Uniform3(int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glUniform3uivEXT(location, count, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform3uivEXT", Version = "2.0")]
      public static unsafe void Uniform3(int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glUniform3uivEXT(location, count, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform3uivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void Uniform3(int location, int count, int* value)
      {
        GL.Delegates.glUniform3uivEXT(location, count, (uint*) value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform3uivEXT", Version = "2.0")]
      public static unsafe void Uniform3(int location, int count, uint[] value)
      {
        fixed (uint* numPtr = value)
          GL.Delegates.glUniform3uivEXT(location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform3uivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void Uniform3(int location, int count, ref uint value)
      {
        fixed (uint* numPtr = &value)
          GL.Delegates.glUniform3uivEXT(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform3uivEXT", Version = "2.0")]
      public static unsafe void Uniform3(int location, int count, uint* value)
      {
        GL.Delegates.glUniform3uivEXT(location, count, value);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform4uiEXT", Version = "2.0")]
      public static void Uniform4(int location, int v0, int v1, int v2, int v3)
      {
        GL.Delegates.glUniform4uiEXT(location, (uint) v0, (uint) v1, (uint) v2, (uint) v3);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform4uiEXT", Version = "2.0")]
      public static void Uniform4(int location, uint v0, uint v1, uint v2, uint v3)
      {
        GL.Delegates.glUniform4uiEXT(location, v0, v1, v2, v3);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform4uivEXT", Version = "2.0")]
      public static unsafe void Uniform4(int location, int count, int[] value)
      {
        fixed (int* numPtr = value)
          GL.Delegates.glUniform4uivEXT(location, count, (uint*) numPtr);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform4uivEXT", Version = "2.0")]
      public static unsafe void Uniform4(int location, int count, ref int value)
      {
        fixed (int* numPtr = &value)
          GL.Delegates.glUniform4uivEXT(location, count, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform4uivEXT", Version = "2.0")]
      public static unsafe void Uniform4(int location, int count, int* value)
      {
        GL.Delegates.glUniform4uivEXT(location, count, (uint*) value);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform4uivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void Uniform4(int location, int count, uint[] value)
      {
        fixed (uint* numPtr = value)
          GL.Delegates.glUniform4uivEXT(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform4uivEXT", Version = "2.0")]
      public static unsafe void Uniform4(int location, int count, ref uint value)
      {
        fixed (uint* numPtr = &value)
          GL.Delegates.glUniform4uivEXT(location, count, numPtr);
      }

      [AutoGenerated(Category = "EXT_gpu_shader4", EntryPoint = "glUniform4uivEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void Uniform4(int location, int count, uint* value)
      {
        GL.Delegates.glUniform4uivEXT(location, count, value);
      }

      [AutoGenerated(Category = "EXT_bindable_uniform", EntryPoint = "glUniformBufferEXT", Version = "2.0")]
      public static void UniformBuffer(int program, int location, int buffer)
      {
        GL.Delegates.glUniformBufferEXT((uint) program, location, (uint) buffer);
      }

      [AutoGenerated(Category = "EXT_bindable_uniform", EntryPoint = "glUniformBufferEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static void UniformBuffer(uint program, int location, uint buffer)
      {
        GL.Delegates.glUniformBufferEXT(program, location, buffer);
      }

      [AutoGenerated(Category = "EXT_compiled_vertex_array", EntryPoint = "glUnlockArraysEXT", Version = "1.1")]
      public static void UnlockArrays()
      {
        GL.Delegates.glUnlockArraysEXT();
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glUnmapNamedBufferEXT", Version = "")]
      public static bool UnmapNamedBuffer(int buffer)
      {
        return GL.Delegates.glUnmapNamedBufferEXT((uint) buffer);
      }

      [AutoGenerated(Category = "EXT_direct_state_access", EntryPoint = "glUnmapNamedBufferEXT", Version = "")]
      [CLSCompliant(false)]
      public static bool UnmapNamedBuffer(uint buffer)
      {
        return GL.Delegates.glUnmapNamedBufferEXT(buffer);
      }

      [AutoGenerated(Category = "EXT_separate_shader_objects", EntryPoint = "glUseShaderProgramEXT", Version = "1.2")]
      public static void UseShaderProgram(ExtSeparateShaderObjects type, int program)
      {
        GL.Delegates.glUseShaderProgramEXT(type, (uint) program);
      }

      [AutoGenerated(Category = "EXT_separate_shader_objects", EntryPoint = "glUseShaderProgramEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void UseShaderProgram(ExtSeparateShaderObjects type, uint program)
      {
        GL.Delegates.glUseShaderProgramEXT(type, program);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantbvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, sbyte[] addr)
      {
        fixed (sbyte* addr1 = addr)
          GL.Delegates.glVariantbvEXT(id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantbvEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, ref sbyte addr)
      {
        fixed (sbyte* addr1 = &addr)
          GL.Delegates.glVariantbvEXT(id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantbvEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, sbyte* addr)
      {
        GL.Delegates.glVariantbvEXT(id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantdvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, double[] addr)
      {
        fixed (double* addr1 = addr)
          GL.Delegates.glVariantdvEXT((uint) id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantdvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, ref double addr)
      {
        fixed (double* addr1 = &addr)
          GL.Delegates.glVariantdvEXT((uint) id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantdvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, double* addr)
      {
        GL.Delegates.glVariantdvEXT((uint) id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantdvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, double[] addr)
      {
        fixed (double* addr1 = addr)
          GL.Delegates.glVariantdvEXT(id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantdvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, ref double addr)
      {
        fixed (double* addr1 = &addr)
          GL.Delegates.glVariantdvEXT(id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantdvEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, double* addr)
      {
        GL.Delegates.glVariantdvEXT(id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantfvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, float[] addr)
      {
        fixed (float* addr1 = addr)
          GL.Delegates.glVariantfvEXT((uint) id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantfvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, ref float addr)
      {
        fixed (float* addr1 = &addr)
          GL.Delegates.glVariantfvEXT((uint) id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantfvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, float* addr)
      {
        GL.Delegates.glVariantfvEXT((uint) id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantfvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, float[] addr)
      {
        fixed (float* addr1 = addr)
          GL.Delegates.glVariantfvEXT(id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantfvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, ref float addr)
      {
        fixed (float* addr1 = &addr)
          GL.Delegates.glVariantfvEXT(id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantfvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, float* addr)
      {
        GL.Delegates.glVariantfvEXT(id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantivEXT", Version = "1.2")]
      public static unsafe void Variant(int id, int[] addr)
      {
        fixed (int* addr1 = addr)
          GL.Delegates.glVariantivEXT((uint) id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantivEXT", Version = "1.2")]
      public static unsafe void Variant(int id, ref int addr)
      {
        fixed (int* addr1 = &addr)
          GL.Delegates.glVariantivEXT((uint) id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantivEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(int id, int* addr)
      {
        GL.Delegates.glVariantivEXT((uint) id, addr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantivEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, int[] addr)
      {
        fixed (int* addr1 = addr)
          GL.Delegates.glVariantivEXT(id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantivEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, ref int addr)
      {
        fixed (int* addr1 = &addr)
          GL.Delegates.glVariantivEXT(id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantivEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, int* addr)
      {
        GL.Delegates.glVariantivEXT(id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      public static void VariantPointer(int id, ExtVertexShader type, int stride, IntPtr addr)
      {
        GL.Delegates.glVariantPointerEXT((uint) id, type, (uint) stride, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      public static void VariantPointer<T3>(int id, ExtVertexShader type, int stride, [In, Out] T3[] addr) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVariantPointerEXT((uint) id, type, (uint) stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      public static void VariantPointer<T3>(int id, ExtVertexShader type, int stride, [In, Out] T3[,] addr) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVariantPointerEXT((uint) id, type, (uint) stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      public static void VariantPointer<T3>(int id, ExtVertexShader type, int stride, [In, Out] T3[,,] addr) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVariantPointerEXT((uint) id, type, (uint) stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      public static void VariantPointer<T3>(int id, ExtVertexShader type, int stride, [In, Out] ref T3 addr) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVariantPointerEXT((uint) id, type, (uint) stride, gcHandle.AddrOfPinnedObject());
          addr = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      public static void VariantPointer(uint id, ExtVertexShader type, uint stride, IntPtr addr)
      {
        GL.Delegates.glVariantPointerEXT(id, type, stride, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VariantPointer<T3>(uint id, ExtVertexShader type, uint stride, [In, Out] T3[] addr) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVariantPointerEXT(id, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      public static void VariantPointer<T3>(uint id, ExtVertexShader type, uint stride, [In, Out] T3[,] addr) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVariantPointerEXT(id, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VariantPointer<T3>(uint id, ExtVertexShader type, uint stride, [In, Out] T3[,,] addr) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVariantPointerEXT(id, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantPointerEXT", Version = "1.2")]
      public static void VariantPointer<T3>(uint id, ExtVertexShader type, uint stride, [In, Out] ref T3 addr) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) addr, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVariantPointerEXT(id, type, stride, gcHandle.AddrOfPinnedObject());
          addr = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantsvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, short[] addr)
      {
        fixed (short* addr1 = addr)
          GL.Delegates.glVariantsvEXT((uint) id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantsvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, ref short addr)
      {
        fixed (short* addr1 = &addr)
          GL.Delegates.glVariantsvEXT((uint) id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantsvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, short* addr)
      {
        GL.Delegates.glVariantsvEXT((uint) id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantsvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, short[] addr)
      {
        fixed (short* addr1 = addr)
          GL.Delegates.glVariantsvEXT(id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantsvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, ref short addr)
      {
        fixed (short* addr1 = &addr)
          GL.Delegates.glVariantsvEXT(id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantsvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, short* addr)
      {
        GL.Delegates.glVariantsvEXT(id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantubvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, byte[] addr)
      {
        fixed (byte* addr1 = addr)
          GL.Delegates.glVariantubvEXT((uint) id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantubvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, ref byte addr)
      {
        fixed (byte* addr1 = &addr)
          GL.Delegates.glVariantubvEXT((uint) id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantubvEXT", Version = "1.2")]
      public static unsafe void Variant(int id, byte* addr)
      {
        GL.Delegates.glVariantubvEXT((uint) id, addr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantubvEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, byte[] addr)
      {
        fixed (byte* addr1 = addr)
          GL.Delegates.glVariantubvEXT(id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantubvEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, ref byte addr)
      {
        fixed (byte* addr1 = &addr)
          GL.Delegates.glVariantubvEXT(id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantubvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, byte* addr)
      {
        GL.Delegates.glVariantubvEXT(id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantuivEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, uint[] addr)
      {
        fixed (uint* addr1 = addr)
          GL.Delegates.glVariantuivEXT(id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantuivEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, ref uint addr)
      {
        fixed (uint* addr1 = &addr)
          GL.Delegates.glVariantuivEXT(id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantuivEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, uint* addr)
      {
        GL.Delegates.glVariantuivEXT(id, addr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantusvEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, ushort[] addr)
      {
        fixed (ushort* addr1 = addr)
          GL.Delegates.glVariantusvEXT(id, addr1);
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantusvEXT", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Variant(uint id, ref ushort addr)
      {
        fixed (ushort* addr1 = &addr)
          GL.Delegates.glVariantusvEXT(id, addr1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glVariantusvEXT", Version = "1.2")]
      public static unsafe void Variant(uint id, ushort* addr)
      {
        GL.Delegates.glVariantusvEXT(id, addr);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexArrayVertexAttribLOffsetEXT", Version = "4.1")]
      public static void VertexArrayVertexAttribLOffset(int vaobj, int buffer, int index, int size, ExtVertexAttrib64bit type, int stride, IntPtr offset)
      {
        GL.Delegates.glVertexArrayVertexAttribLOffsetEXT((uint) vaobj, (uint) buffer, (uint) index, size, type, stride, offset);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexArrayVertexAttribLOffsetEXT", Version = "4.1")]
      public static void VertexArrayVertexAttribLOffset(uint vaobj, uint buffer, uint index, int size, ExtVertexAttrib64bit type, int stride, IntPtr offset)
      {
        GL.Delegates.glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI1iEXT", Version = "")]
      public static void VertexAttribI1(int index, int x)
      {
        GL.Delegates.glVertexAttribI1iEXT((uint) index, x);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI1iEXT", Version = "")]
      [CLSCompliant(false)]
      public static void VertexAttribI1(uint index, int x)
      {
        GL.Delegates.glVertexAttribI1iEXT(index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI1ivEXT", Version = "")]
      public static unsafe void VertexAttribI1(int index, int* v)
      {
        GL.Delegates.glVertexAttribI1ivEXT((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI1ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI1(uint index, int* v)
      {
        GL.Delegates.glVertexAttribI1ivEXT(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI1uiEXT", Version = "")]
      [CLSCompliant(false)]
      public static void VertexAttribI1(uint index, uint x)
      {
        GL.Delegates.glVertexAttribI1uiEXT(index, x);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI1uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI1(uint index, uint* v)
      {
        GL.Delegates.glVertexAttribI1uivEXT(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2iEXT", Version = "")]
      public static void VertexAttribI2(int index, int x, int y)
      {
        GL.Delegates.glVertexAttribI2iEXT((uint) index, x, y);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2iEXT", Version = "")]
      public static void VertexAttribI2(uint index, int x, int y)
      {
        GL.Delegates.glVertexAttribI2iEXT(index, x, y);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2ivEXT", Version = "")]
      public static unsafe void VertexAttribI2(int index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttribI2ivEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2ivEXT", Version = "")]
      public static unsafe void VertexAttribI2(int index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttribI2ivEXT((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2ivEXT", Version = "")]
      public static unsafe void VertexAttribI2(int index, int* v)
      {
        GL.Delegates.glVertexAttribI2ivEXT((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI2(uint index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttribI2ivEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2ivEXT", Version = "")]
      public static unsafe void VertexAttribI2(uint index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttribI2ivEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2ivEXT", Version = "")]
      public static unsafe void VertexAttribI2(uint index, int* v)
      {
        GL.Delegates.glVertexAttribI2ivEXT(index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2uiEXT", Version = "")]
      public static void VertexAttribI2(uint index, uint x, uint y)
      {
        GL.Delegates.glVertexAttribI2uiEXT(index, x, y);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2uivEXT", Version = "")]
      public static unsafe void VertexAttribI2(uint index, uint[] v)
      {
        fixed (uint* v1 = v)
          GL.Delegates.glVertexAttribI2uivEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2uivEXT", Version = "")]
      public static unsafe void VertexAttribI2(uint index, ref uint v)
      {
        fixed (uint* v1 = &v)
          GL.Delegates.glVertexAttribI2uivEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI2uivEXT", Version = "")]
      public static unsafe void VertexAttribI2(uint index, uint* v)
      {
        GL.Delegates.glVertexAttribI2uivEXT(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3iEXT", Version = "")]
      public static void VertexAttribI3(int index, int x, int y, int z)
      {
        GL.Delegates.glVertexAttribI3iEXT((uint) index, x, y, z);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3iEXT", Version = "")]
      [CLSCompliant(false)]
      public static void VertexAttribI3(uint index, int x, int y, int z)
      {
        GL.Delegates.glVertexAttribI3iEXT(index, x, y, z);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3ivEXT", Version = "")]
      public static unsafe void VertexAttribI3(int index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttribI3ivEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3ivEXT", Version = "")]
      public static unsafe void VertexAttribI3(int index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttribI3ivEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI3(int index, int* v)
      {
        GL.Delegates.glVertexAttribI3ivEXT((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3ivEXT", Version = "")]
      public static unsafe void VertexAttribI3(uint index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttribI3ivEXT(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI3(uint index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttribI3ivEXT(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI3(uint index, int* v)
      {
        GL.Delegates.glVertexAttribI3ivEXT(index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3uiEXT", Version = "")]
      public static void VertexAttribI3(uint index, uint x, uint y, uint z)
      {
        GL.Delegates.glVertexAttribI3uiEXT(index, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3uivEXT", Version = "")]
      public static unsafe void VertexAttribI3(uint index, uint[] v)
      {
        fixed (uint* v1 = v)
          GL.Delegates.glVertexAttribI3uivEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3uivEXT", Version = "")]
      public static unsafe void VertexAttribI3(uint index, ref uint v)
      {
        fixed (uint* v1 = &v)
          GL.Delegates.glVertexAttribI3uivEXT(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI3uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI3(uint index, uint* v)
      {
        GL.Delegates.glVertexAttribI3uivEXT(index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4bvEXT", Version = "")]
      public static unsafe void VertexAttribI4(uint index, sbyte[] v)
      {
        fixed (sbyte* v1 = v)
          GL.Delegates.glVertexAttribI4bvEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4bvEXT", Version = "")]
      public static unsafe void VertexAttribI4(uint index, ref sbyte v)
      {
        fixed (sbyte* v1 = &v)
          GL.Delegates.glVertexAttribI4bvEXT(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4bvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(uint index, sbyte* v)
      {
        GL.Delegates.glVertexAttribI4bvEXT(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4iEXT", Version = "")]
      public static void VertexAttribI4(int index, int x, int y, int z, int w)
      {
        GL.Delegates.glVertexAttribI4iEXT((uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4iEXT", Version = "")]
      [CLSCompliant(false)]
      public static void VertexAttribI4(uint index, int x, int y, int z, int w)
      {
        GL.Delegates.glVertexAttribI4iEXT(index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ivEXT", Version = "")]
      public static unsafe void VertexAttribI4(int index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttribI4ivEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ivEXT", Version = "")]
      public static unsafe void VertexAttribI4(int index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttribI4ivEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(int index, int* v)
      {
        GL.Delegates.glVertexAttribI4ivEXT((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ivEXT", Version = "")]
      public static unsafe void VertexAttribI4(uint index, int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glVertexAttribI4ivEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ivEXT", Version = "")]
      public static unsafe void VertexAttribI4(uint index, ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glVertexAttribI4ivEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ivEXT", Version = "")]
      public static unsafe void VertexAttribI4(uint index, int* v)
      {
        GL.Delegates.glVertexAttribI4ivEXT(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4svEXT", Version = "")]
      public static unsafe void VertexAttribI4(int index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribI4svEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4svEXT", Version = "")]
      public static unsafe void VertexAttribI4(int index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribI4svEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4svEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(int index, short* v)
      {
        GL.Delegates.glVertexAttribI4svEXT((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4svEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(uint index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribI4svEXT(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4svEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(uint index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribI4svEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4svEXT", Version = "")]
      public static unsafe void VertexAttribI4(uint index, short* v)
      {
        GL.Delegates.glVertexAttribI4svEXT(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ubvEXT", Version = "")]
      public static unsafe void VertexAttribI4(int index, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttribI4ubvEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ubvEXT", Version = "")]
      public static unsafe void VertexAttribI4(int index, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttribI4ubvEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ubvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(int index, byte* v)
      {
        GL.Delegates.glVertexAttribI4ubvEXT((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ubvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(uint index, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttribI4ubvEXT(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ubvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(uint index, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttribI4ubvEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4ubvEXT", Version = "")]
      public static unsafe void VertexAttribI4(uint index, byte* v)
      {
        GL.Delegates.glVertexAttribI4ubvEXT(index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4uiEXT", Version = "")]
      public static void VertexAttribI4(uint index, uint x, uint y, uint z, uint w)
      {
        GL.Delegates.glVertexAttribI4uiEXT(index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(uint index, uint[] v)
      {
        fixed (uint* v1 = v)
          GL.Delegates.glVertexAttribI4uivEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4uivEXT", Version = "")]
      public static unsafe void VertexAttribI4(uint index, ref uint v)
      {
        fixed (uint* v1 = &v)
          GL.Delegates.glVertexAttribI4uivEXT(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4uivEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(uint index, uint* v)
      {
        GL.Delegates.glVertexAttribI4uivEXT(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4usvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(uint index, ushort[] v)
      {
        fixed (ushort* v1 = v)
          GL.Delegates.glVertexAttribI4usvEXT(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4usvEXT", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribI4(uint index, ref ushort v)
      {
        fixed (ushort* v1 = &v)
          GL.Delegates.glVertexAttribI4usvEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribI4usvEXT", Version = "")]
      public static unsafe void VertexAttribI4(uint index, ushort* v)
      {
        GL.Delegates.glVertexAttribI4usvEXT(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      public static void VertexAttribIPointer(int index, int size, NvVertexProgram4 type, int stride, IntPtr pointer)
      {
        GL.Delegates.glVertexAttribIPointerEXT((uint) index, size, type, stride, pointer);
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      public static void VertexAttribIPointer<T4>(int index, int size, NvVertexProgram4 type, int stride, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribIPointerEXT((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      public static void VertexAttribIPointer<T4>(int index, int size, NvVertexProgram4 type, int stride, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribIPointerEXT((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      public static void VertexAttribIPointer<T4>(int index, int size, NvVertexProgram4 type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribIPointerEXT((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      public static void VertexAttribIPointer<T4>(int index, int size, NvVertexProgram4 type, int stride, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribIPointerEXT((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      public static void VertexAttribIPointer(uint index, int size, NvVertexProgram4 type, int stride, IntPtr pointer)
      {
        GL.Delegates.glVertexAttribIPointerEXT(index, size, type, stride, pointer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      public static void VertexAttribIPointer<T4>(uint index, int size, NvVertexProgram4 type, int stride, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribIPointerEXT(index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      public static void VertexAttribIPointer<T4>(uint index, int size, NvVertexProgram4 type, int stride, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribIPointerEXT(index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      [CLSCompliant(false)]
      public static void VertexAttribIPointer<T4>(uint index, int size, NvVertexProgram4 type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribIPointerEXT(index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program4", EntryPoint = "glVertexAttribIPointerEXT", Version = "")]
      [CLSCompliant(false)]
      public static void VertexAttribIPointer<T4>(uint index, int size, NvVertexProgram4 type, int stride, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribIPointerEXT(index, size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1dEXT", Version = "4.1")]
      public static void VertexAttribL1(int index, double x)
      {
        GL.Delegates.glVertexAttribL1dEXT((uint) index, x);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1dEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static void VertexAttribL1(uint index, double x)
      {
        GL.Delegates.glVertexAttribL1dEXT(index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL1(int index, double* v)
      {
        GL.Delegates.glVertexAttribL1dvEXT((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL1dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL1(uint index, double* v)
      {
        GL.Delegates.glVertexAttribL1dvEXT(index, v);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dEXT", Version = "4.1")]
      public static void VertexAttribL2(int index, double x, double y)
      {
        GL.Delegates.glVertexAttribL2dEXT((uint) index, x, y);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static void VertexAttribL2(uint index, double x, double y)
      {
        GL.Delegates.glVertexAttribL2dEXT(index, x, y);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL2(int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribL2dvEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL2(int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribL2dvEXT((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL2(int index, double* v)
      {
        GL.Delegates.glVertexAttribL2dvEXT((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL2(uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribL2dvEXT(index, v1);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dvEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL2(uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribL2dvEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL2dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL2(uint index, double* v)
      {
        GL.Delegates.glVertexAttribL2dvEXT(index, v);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dEXT", Version = "4.1")]
      public static void VertexAttribL3(int index, double x, double y, double z)
      {
        GL.Delegates.glVertexAttribL3dEXT((uint) index, x, y, z);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static void VertexAttribL3(uint index, double x, double y, double z)
      {
        GL.Delegates.glVertexAttribL3dEXT(index, x, y, z);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL3(int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribL3dvEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL3(int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribL3dvEXT((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL3(int index, double* v)
      {
        GL.Delegates.glVertexAttribL3dvEXT((uint) index, v);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dvEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL3(uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribL3dvEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL3(uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribL3dvEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL3dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL3(uint index, double* v)
      {
        GL.Delegates.glVertexAttribL3dvEXT(index, v);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dEXT", Version = "4.1")]
      public static void VertexAttribL4(int index, double x, double y, double z, double w)
      {
        GL.Delegates.glVertexAttribL4dEXT((uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dEXT", Version = "4.1")]
      public static void VertexAttribL4(uint index, double x, double y, double z, double w)
      {
        GL.Delegates.glVertexAttribL4dEXT(index, x, y, z, w);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL4(int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribL4dvEXT((uint) index, v1);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL4(int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribL4dvEXT((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL4(int index, double* v)
      {
        GL.Delegates.glVertexAttribL4dvEXT((uint) index, v);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dvEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL4(uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribL4dvEXT(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dvEXT", Version = "4.1")]
      public static unsafe void VertexAttribL4(uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribL4dvEXT(index, v1);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribL4dvEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL4(uint index, double* v)
      {
        GL.Delegates.glVertexAttribL4dvEXT(index, v);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      public static void VertexAttribLPointer(int index, int size, ExtVertexAttrib64bit type, int stride, IntPtr pointer)
      {
        GL.Delegates.glVertexAttribLPointerEXT((uint) index, size, type, stride, pointer);
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      public static void VertexAttribLPointer<T4>(int index, int size, ExtVertexAttrib64bit type, int stride, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribLPointerEXT((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      public static void VertexAttribLPointer<T4>(int index, int size, ExtVertexAttrib64bit type, int stride, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribLPointerEXT((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      public static void VertexAttribLPointer<T4>(int index, int size, ExtVertexAttrib64bit type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribLPointerEXT((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      public static void VertexAttribLPointer<T4>(int index, int size, ExtVertexAttrib64bit type, int stride, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribLPointerEXT((uint) index, size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static void VertexAttribLPointer(uint index, int size, ExtVertexAttrib64bit type, int stride, IntPtr pointer)
      {
        GL.Delegates.glVertexAttribLPointerEXT(index, size, type, stride, pointer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      public static void VertexAttribLPointer<T4>(uint index, int size, ExtVertexAttrib64bit type, int stride, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribLPointerEXT(index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static void VertexAttribLPointer<T4>(uint index, int size, ExtVertexAttrib64bit type, int stride, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribLPointerEXT(index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      public static void VertexAttribLPointer<T4>(uint index, int size, ExtVertexAttrib64bit type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribLPointerEXT(index, size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_attrib_64bit", EntryPoint = "glVertexAttribLPointerEXT", Version = "4.1")]
      [CLSCompliant(false)]
      public static void VertexAttribLPointer<T4>(uint index, int size, ExtVertexAttrib64bit type, int stride, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribLPointerEXT(index, size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glVertexPointerEXT", Version = "1.0")]
      public static void VertexPointer(int size, VertexPointerType type, int stride, int count, IntPtr pointer)
      {
        GL.Delegates.glVertexPointerEXT(size, type, stride, count, pointer);
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glVertexPointerEXT", Version = "1.0")]
      public static void VertexPointer<T4>(int size, VertexPointerType type, int stride, int count, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glVertexPointerEXT", Version = "1.0")]
      public static void VertexPointer<T4>(int size, VertexPointerType type, int stride, int count, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glVertexPointerEXT", Version = "1.0")]
      public static void VertexPointer<T4>(int size, VertexPointerType type, int stride, int count, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_array", EntryPoint = "glVertexPointerEXT", Version = "1.0")]
      public static void VertexPointer<T4>(int size, VertexPointerType type, int stride, int count, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointerEXT(size, type, stride, count, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_weighting", EntryPoint = "glVertexWeightfEXT", Version = "1.1")]
      public static void VertexWeight(float weight)
      {
        GL.Delegates.glVertexWeightfEXT(weight);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_weighting", EntryPoint = "glVertexWeightfvEXT", Version = "1.1")]
      public static unsafe void VertexWeight(float* weight)
      {
        GL.Delegates.glVertexWeightfvEXT(weight);
      }

      [AutoGenerated(Category = "EXT_vertex_weighting", EntryPoint = "glVertexWeightPointerEXT", Version = "1.1")]
      public static void VertexWeightPointer(int size, ExtVertexWeighting type, int stride, IntPtr pointer)
      {
        GL.Delegates.glVertexWeightPointerEXT(size, type, stride, pointer);
      }

      [AutoGenerated(Category = "EXT_vertex_weighting", EntryPoint = "glVertexWeightPointerEXT", Version = "1.1")]
      public static void VertexWeightPointer<T3>(int size, ExtVertexWeighting type, int stride, [In, Out] T3[] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexWeightPointerEXT(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_weighting", EntryPoint = "glVertexWeightPointerEXT", Version = "1.1")]
      public static void VertexWeightPointer<T3>(int size, ExtVertexWeighting type, int stride, [In, Out] T3[,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexWeightPointerEXT(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_weighting", EntryPoint = "glVertexWeightPointerEXT", Version = "1.1")]
      public static void VertexWeightPointer<T3>(int size, ExtVertexWeighting type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexWeightPointerEXT(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_weighting", EntryPoint = "glVertexWeightPointerEXT", Version = "1.1")]
      public static void VertexWeightPointer<T3>(int size, ExtVertexWeighting type, int stride, [In, Out] ref T3 pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexWeightPointerEXT(size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glWriteMaskEXT", Version = "1.2")]
      public static void WriteMask(int res, int @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW)
      {
        GL.Delegates.glWriteMaskEXT((uint) res, (uint) @in, outX, outY, outZ, outW);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "EXT_vertex_shader", EntryPoint = "glWriteMaskEXT", Version = "1.2")]
      public static void WriteMask(uint res, uint @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW)
      {
        GL.Delegates.glWriteMaskEXT(res, @in, outX, outY, outZ, outW);
      }
    }

    public static class GL_3dfx
    {
      [AutoGenerated(Category = "3DFX_tbuffer", EntryPoint = "glTbufferMask3DFX", Version = "1.2")]
      public static void TbufferMask(int mask)
      {
        GL.Delegates.glTbufferMask3DFX((uint) mask);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "3DFX_tbuffer", EntryPoint = "glTbufferMask3DFX", Version = "1.2")]
      public static void TbufferMask(uint mask)
      {
        GL.Delegates.glTbufferMask3DFX(mask);
      }
    }

    public static class Amd
    {
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glBeginPerfMonitorAMD", Version = "1.2")]
      public static void BeginPerfMonitor(int monitor)
      {
        GL.Delegates.glBeginPerfMonitorAMD((uint) monitor);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glBeginPerfMonitorAMD", Version = "1.2")]
      public static void BeginPerfMonitor(uint monitor)
      {
        GL.Delegates.glBeginPerfMonitorAMD(monitor);
      }

      [AutoGenerated(Category = "AMD_draw_buffers_blend", EntryPoint = "glBlendEquationIndexedAMD", Version = "2.0")]
      public static void BlendEquationIndexed(int buf, AmdDrawBuffersBlend mode)
      {
        GL.Delegates.glBlendEquationIndexedAMD((uint) buf, mode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_draw_buffers_blend", EntryPoint = "glBlendEquationIndexedAMD", Version = "2.0")]
      public static void BlendEquationIndexed(uint buf, AmdDrawBuffersBlend mode)
      {
        GL.Delegates.glBlendEquationIndexedAMD(buf, mode);
      }

      [AutoGenerated(Category = "AMD_draw_buffers_blend", EntryPoint = "glBlendEquationSeparateIndexedAMD", Version = "2.0")]
      public static void BlendEquationSeparateIndexed(int buf, AmdDrawBuffersBlend modeRGB, AmdDrawBuffersBlend modeAlpha)
      {
        GL.Delegates.glBlendEquationSeparateIndexedAMD((uint) buf, modeRGB, modeAlpha);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_draw_buffers_blend", EntryPoint = "glBlendEquationSeparateIndexedAMD", Version = "2.0")]
      public static void BlendEquationSeparateIndexed(uint buf, AmdDrawBuffersBlend modeRGB, AmdDrawBuffersBlend modeAlpha)
      {
        GL.Delegates.glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
      }

      [AutoGenerated(Category = "AMD_draw_buffers_blend", EntryPoint = "glBlendFuncIndexedAMD", Version = "2.0")]
      public static void BlendFuncIndexed(int buf, AmdDrawBuffersBlend src, AmdDrawBuffersBlend dst)
      {
        GL.Delegates.glBlendFuncIndexedAMD((uint) buf, src, dst);
      }

      [AutoGenerated(Category = "AMD_draw_buffers_blend", EntryPoint = "glBlendFuncIndexedAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static void BlendFuncIndexed(uint buf, AmdDrawBuffersBlend src, AmdDrawBuffersBlend dst)
      {
        GL.Delegates.glBlendFuncIndexedAMD(buf, src, dst);
      }

      [AutoGenerated(Category = "AMD_draw_buffers_blend", EntryPoint = "glBlendFuncSeparateIndexedAMD", Version = "2.0")]
      public static void BlendFuncSeparateIndexed(int buf, AmdDrawBuffersBlend srcRGB, AmdDrawBuffersBlend dstRGB, AmdDrawBuffersBlend srcAlpha, AmdDrawBuffersBlend dstAlpha)
      {
        GL.Delegates.glBlendFuncSeparateIndexedAMD((uint) buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_draw_buffers_blend", EntryPoint = "glBlendFuncSeparateIndexedAMD", Version = "2.0")]
      public static void BlendFuncSeparateIndexed(uint buf, AmdDrawBuffersBlend srcRGB, AmdDrawBuffersBlend dstRGB, AmdDrawBuffersBlend srcAlpha, AmdDrawBuffersBlend dstAlpha)
      {
        GL.Delegates.glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageCallbackAMD", Version = "4.1")]
      public static void DebugMessageCallback(DebugProcAmd callback, [Out] IntPtr userParam)
      {
        GL.Delegates.glDebugMessageCallbackAMD(callback, userParam);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageCallbackAMD", Version = "4.1")]
      public static void DebugMessageCallback<T1>(DebugProcAmd callback, [In, Out] T1[] userParam) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) userParam, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDebugMessageCallbackAMD(callback, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageCallbackAMD", Version = "4.1")]
      public static void DebugMessageCallback<T1>(DebugProcAmd callback, [In, Out] T1[,] userParam) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) userParam, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDebugMessageCallbackAMD(callback, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageCallbackAMD", Version = "4.1")]
      public static void DebugMessageCallback<T1>(DebugProcAmd callback, [In, Out] T1[,,] userParam) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) userParam, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDebugMessageCallbackAMD(callback, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageCallbackAMD", Version = "4.1")]
      public static void DebugMessageCallback<T1>(DebugProcAmd callback, [In, Out] ref T1 userParam) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) userParam, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glDebugMessageCallbackAMD(callback, gcHandle.AddrOfPinnedObject());
          userParam = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageEnableAMD", Version = "4.1")]
      public static unsafe void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, int[] ids, bool enabled)
      {
        fixed (int* numPtr = ids)
          GL.Delegates.glDebugMessageEnableAMD(category, severity, count, (uint*) numPtr, enabled);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageEnableAMD", Version = "4.1")]
      public static unsafe void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, ref int ids, bool enabled)
      {
        fixed (int* numPtr = &ids)
          GL.Delegates.glDebugMessageEnableAMD(category, severity, count, (uint*) numPtr, enabled);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageEnableAMD", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, int* ids, bool enabled)
      {
        GL.Delegates.glDebugMessageEnableAMD(category, severity, count, (uint*) ids, enabled);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageEnableAMD", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, uint[] ids, bool enabled)
      {
        fixed (uint* ids1 = ids)
          GL.Delegates.glDebugMessageEnableAMD(category, severity, count, ids1, enabled);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageEnableAMD", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, ref uint ids, bool enabled)
      {
        fixed (uint* ids1 = &ids)
          GL.Delegates.glDebugMessageEnableAMD(category, severity, count, ids1, enabled);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageEnableAMD", Version = "4.1")]
      public static unsafe void DebugMessageEnable(AmdDebugOutput category, AmdDebugOutput severity, int count, uint* ids, bool enabled)
      {
        GL.Delegates.glDebugMessageEnableAMD(category, severity, count, ids, enabled);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageInsertAMD", Version = "4.1")]
      public static void DebugMessageInsert(AmdDebugOutput category, AmdDebugOutput severity, int id, int length, string buf)
      {
        GL.Delegates.glDebugMessageInsertAMD(category, severity, (uint) id, length, buf);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glDebugMessageInsertAMD", Version = "4.1")]
      public static void DebugMessageInsert(AmdDebugOutput category, AmdDebugOutput severity, uint id, int length, string buf)
      {
        GL.Delegates.glDebugMessageInsertAMD(category, severity, id, length, buf);
      }

      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glDeleteNamesAMD", Version = "4.1")]
      public static unsafe void DeleteNames(AmdNameGenDelete identifier, int num, int[] names)
      {
        fixed (int* numPtr = names)
          GL.Delegates.glDeleteNamesAMD(identifier, (uint) num, (uint*) numPtr);
      }

      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glDeleteNamesAMD", Version = "4.1")]
      public static unsafe void DeleteNames(AmdNameGenDelete identifier, int num, ref int names)
      {
        fixed (int* numPtr = &names)
          GL.Delegates.glDeleteNamesAMD(identifier, (uint) num, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glDeleteNamesAMD", Version = "4.1")]
      public static unsafe void DeleteNames(AmdNameGenDelete identifier, int num, int* names)
      {
        GL.Delegates.glDeleteNamesAMD(identifier, (uint) num, (uint*) names);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glDeleteNamesAMD", Version = "4.1")]
      public static unsafe void DeleteNames(AmdNameGenDelete identifier, uint num, uint[] names)
      {
        fixed (uint* names1 = names)
          GL.Delegates.glDeleteNamesAMD(identifier, num, names1);
      }

      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glDeleteNamesAMD", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void DeleteNames(AmdNameGenDelete identifier, uint num, ref uint names)
      {
        fixed (uint* names1 = &names)
          GL.Delegates.glDeleteNamesAMD(identifier, num, names1);
      }

      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glDeleteNamesAMD", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void DeleteNames(AmdNameGenDelete identifier, uint num, uint* names)
      {
        GL.Delegates.glDeleteNamesAMD(identifier, num, names);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glDeletePerfMonitorsAMD", Version = "1.2")]
      public static unsafe void DeletePerfMonitors(int n, [Out] int[] monitors)
      {
        fixed (int* numPtr = monitors)
          GL.Delegates.glDeletePerfMonitorsAMD(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glDeletePerfMonitorsAMD", Version = "1.2")]
      public static unsafe void DeletePerfMonitors(int n, out int monitors)
      {
        fixed (int* numPtr = &monitors)
        {
          GL.Delegates.glDeletePerfMonitorsAMD(n, (uint*) numPtr);
          monitors = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glDeletePerfMonitorsAMD", Version = "1.2")]
      public static unsafe void DeletePerfMonitors(int n, [Out] int* monitors)
      {
        GL.Delegates.glDeletePerfMonitorsAMD(n, (uint*) monitors);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glDeletePerfMonitorsAMD", Version = "1.2")]
      public static unsafe void DeletePerfMonitors(int n, [Out] uint[] monitors)
      {
        fixed (uint* monitors1 = monitors)
          GL.Delegates.glDeletePerfMonitorsAMD(n, monitors1);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glDeletePerfMonitorsAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeletePerfMonitors(int n, out uint monitors)
      {
        fixed (uint* monitors1 = &monitors)
        {
          GL.Delegates.glDeletePerfMonitorsAMD(n, monitors1);
          monitors = *monitors1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glDeletePerfMonitorsAMD", Version = "1.2")]
      public static unsafe void DeletePerfMonitors(int n, [Out] uint* monitors)
      {
        GL.Delegates.glDeletePerfMonitorsAMD(n, monitors);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glEndPerfMonitorAMD", Version = "1.2")]
      public static void EndPerfMonitor(int monitor)
      {
        GL.Delegates.glEndPerfMonitorAMD((uint) monitor);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glEndPerfMonitorAMD", Version = "1.2")]
      public static void EndPerfMonitor(uint monitor)
      {
        GL.Delegates.glEndPerfMonitorAMD(monitor);
      }

      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glGenNamesAMD", Version = "4.1")]
      public static unsafe void GenNames(AmdNameGenDelete identifier, int num, [Out] int[] names)
      {
        fixed (int* numPtr = names)
          GL.Delegates.glGenNamesAMD(identifier, (uint) num, (uint*) numPtr);
      }

      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glGenNamesAMD", Version = "4.1")]
      public static unsafe void GenNames(AmdNameGenDelete identifier, int num, out int names)
      {
        fixed (int* numPtr = &names)
        {
          GL.Delegates.glGenNamesAMD(identifier, (uint) num, (uint*) numPtr);
          names = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glGenNamesAMD", Version = "4.1")]
      public static unsafe void GenNames(AmdNameGenDelete identifier, int num, [Out] int* names)
      {
        GL.Delegates.glGenNamesAMD(identifier, (uint) num, (uint*) names);
      }

      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glGenNamesAMD", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GenNames(AmdNameGenDelete identifier, uint num, [Out] uint[] names)
      {
        fixed (uint* names1 = names)
          GL.Delegates.glGenNamesAMD(identifier, num, names1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glGenNamesAMD", Version = "4.1")]
      public static unsafe void GenNames(AmdNameGenDelete identifier, uint num, out uint names)
      {
        fixed (uint* names1 = &names)
        {
          GL.Delegates.glGenNamesAMD(identifier, num, names1);
          names = *names1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glGenNamesAMD", Version = "4.1")]
      public static unsafe void GenNames(AmdNameGenDelete identifier, uint num, [Out] uint* names)
      {
        GL.Delegates.glGenNamesAMD(identifier, num, names);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGenPerfMonitorsAMD", Version = "1.2")]
      public static unsafe void GenPerfMonitors(int n, [Out] int[] monitors)
      {
        fixed (int* numPtr = monitors)
          GL.Delegates.glGenPerfMonitorsAMD(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGenPerfMonitorsAMD", Version = "1.2")]
      public static unsafe void GenPerfMonitors(int n, out int monitors)
      {
        fixed (int* numPtr = &monitors)
        {
          GL.Delegates.glGenPerfMonitorsAMD(n, (uint*) numPtr);
          monitors = *numPtr;
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGenPerfMonitorsAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenPerfMonitors(int n, [Out] int* monitors)
      {
        GL.Delegates.glGenPerfMonitorsAMD(n, (uint*) monitors);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGenPerfMonitorsAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenPerfMonitors(int n, [Out] uint[] monitors)
      {
        fixed (uint* monitors1 = monitors)
          GL.Delegates.glGenPerfMonitorsAMD(n, monitors1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGenPerfMonitorsAMD", Version = "1.2")]
      public static unsafe void GenPerfMonitors(int n, out uint monitors)
      {
        fixed (uint* monitors1 = &monitors)
        {
          GL.Delegates.glGenPerfMonitorsAMD(n, monitors1);
          monitors = *monitors1;
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGenPerfMonitorsAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenPerfMonitors(int n, [Out] uint* monitors)
      {
        GL.Delegates.glGenPerfMonitorsAMD(n, monitors);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glGetDebugMessageLogAMD", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(int count, int bufsize, [Out] AmdDebugOutput[] categories, [Out] int[] severities, [Out] int[] ids, [Out] int[] lengths, [Out] StringBuilder message)
      {
        fixed (AmdDebugOutput* categories1 = categories)
          fixed (int* numPtr1 = severities)
            fixed (int* numPtr2 = ids)
              fixed (int* lengths1 = lengths)
                return GL.Delegates.glGetDebugMessageLogAMD((uint) count, bufsize, categories1, (uint*) numPtr1, (uint*) numPtr2, lengths1, message);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glGetDebugMessageLogAMD", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(int count, int bufsize, out AmdDebugOutput categories, out int severities, out int ids, out int lengths, [Out] StringBuilder message)
      {
        fixed (AmdDebugOutput* categories1 = &categories)
          fixed (int* numPtr1 = &severities)
            fixed (int* numPtr2 = &ids)
              fixed (int* lengths1 = &lengths)
              {
                int num = GL.Delegates.glGetDebugMessageLogAMD((uint) count, bufsize, categories1, (uint*) numPtr1, (uint*) numPtr2, lengths1, message);
                categories = *categories1;
                severities = *numPtr1;
                ids = *numPtr2;
                lengths = *lengths1;
                return num;
              }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glGetDebugMessageLogAMD", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(int count, int bufsize, [Out] AmdDebugOutput* categories, [Out] int* severities, [Out] int* ids, [Out] int* lengths, [Out] StringBuilder message)
      {
        return GL.Delegates.glGetDebugMessageLogAMD((uint) count, bufsize, categories, (uint*) severities, (uint*) ids, lengths, message);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glGetDebugMessageLogAMD", Version = "4.1")]
      public static unsafe int GetDebugMessageLog(uint count, int bufsize, [Out] AmdDebugOutput[] categories, [Out] uint[] severities, [Out] uint[] ids, [Out] int[] lengths, [Out] StringBuilder message)
      {
        fixed (AmdDebugOutput* categories1 = categories)
          fixed (uint* severities1 = severities)
            fixed (uint* ids1 = ids)
              fixed (int* lengths1 = lengths)
                return GL.Delegates.glGetDebugMessageLogAMD(count, bufsize, categories1, severities1, ids1, lengths1, message);
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glGetDebugMessageLogAMD", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe int GetDebugMessageLog(uint count, int bufsize, out AmdDebugOutput categories, out uint severities, out uint ids, out int lengths, [Out] StringBuilder message)
      {
        fixed (AmdDebugOutput* categories1 = &categories)
          fixed (uint* severities1 = &severities)
            fixed (uint* ids1 = &ids)
              fixed (int* lengths1 = &lengths)
              {
                int num = GL.Delegates.glGetDebugMessageLogAMD(count, bufsize, categories1, severities1, ids1, lengths1, message);
                categories = *categories1;
                severities = *severities1;
                ids = *ids1;
                lengths = *lengths1;
                return num;
              }
      }

      [AutoGenerated(Category = "AMD_debug_output", EntryPoint = "glGetDebugMessageLogAMD", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe int GetDebugMessageLog(uint count, int bufsize, [Out] AmdDebugOutput* categories, [Out] uint* severities, [Out] uint* ids, [Out] int* lengths, [Out] StringBuilder message)
      {
        return GL.Delegates.glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize, [Out] int[] data, [Out] int* bytesWritten)
      {
        fixed (int* numPtr = data)
          GL.Delegates.glGetPerfMonitorCounterDataAMD((uint) monitor, pname, dataSize, (uint*) numPtr, bytesWritten);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize, out int data, out int bytesWritten)
      {
        fixed (int* numPtr = &data)
          fixed (int* bytesWritten1 = &bytesWritten)
          {
            GL.Delegates.glGetPerfMonitorCounterDataAMD((uint) monitor, pname, dataSize, (uint*) numPtr, bytesWritten1);
            data = *numPtr;
            bytesWritten = *bytesWritten1;
          }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounterData(int monitor, AmdPerformanceMonitor pname, int dataSize, [Out] int* data, [Out] int* bytesWritten)
      {
        GL.Delegates.glGetPerfMonitorCounterDataAMD((uint) monitor, pname, dataSize, (uint*) data, bytesWritten);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounterData(uint monitor, AmdPerformanceMonitor pname, int dataSize, [Out] uint[] data, [Out] int* bytesWritten)
      {
        fixed (uint* data1 = data)
          GL.Delegates.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data1, bytesWritten);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounterData(uint monitor, AmdPerformanceMonitor pname, int dataSize, out uint data, out int bytesWritten)
      {
        fixed (uint* data1 = &data)
          fixed (int* bytesWritten1 = &bytesWritten)
          {
            GL.Delegates.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data1, bytesWritten1);
            data = *data1;
            bytesWritten = *bytesWritten1;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounterData(uint monitor, AmdPerformanceMonitor pname, int dataSize, [Out] uint* data, [Out] int* bytesWritten)
      {
        GL.Delegates.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      public static void GetPerfMonitorCounterInfo(int group, int counter, AmdPerformanceMonitor pname, [Out] IntPtr data)
      {
        GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, data);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      public static void GetPerfMonitorCounterInfo<T3>(int group, int counter, AmdPerformanceMonitor pname, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      public static void GetPerfMonitorCounterInfo<T3>(int group, int counter, AmdPerformanceMonitor pname, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      public static void GetPerfMonitorCounterInfo<T3>(int group, int counter, AmdPerformanceMonitor pname, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      public static void GetPerfMonitorCounterInfo<T3>(int group, int counter, AmdPerformanceMonitor pname, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static void GetPerfMonitorCounterInfo(uint group, uint counter, AmdPerformanceMonitor pname, [Out] IntPtr data)
      {
        GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, AmdPerformanceMonitor pname, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, AmdPerformanceMonitor pname, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, AmdPerformanceMonitor pname, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, AmdPerformanceMonitor pname, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounters(int group, out int numCounters, out int maxActiveCounters, int counterSize, out int counters)
      {
        fixed (int* numCounters1 = &numCounters)
          fixed (int* maxActiveCounters1 = &maxActiveCounters)
            fixed (int* numPtr = &counters)
            {
              GL.Delegates.glGetPerfMonitorCountersAMD((uint) group, numCounters1, maxActiveCounters1, counterSize, (uint*) numPtr);
              numCounters = *numCounters1;
              maxActiveCounters = *maxActiveCounters1;
              counters = *numPtr;
            }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounters(int group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] int[] counters)
      {
        fixed (int* numPtr = counters)
          GL.Delegates.glGetPerfMonitorCountersAMD((uint) group, numCounters, maxActiveCounters, counterSize, (uint*) numPtr);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounters(int group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] int* counters)
      {
        GL.Delegates.glGetPerfMonitorCountersAMD((uint) group, numCounters, maxActiveCounters, counterSize, (uint*) counters);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounters(uint group, out int numCounters, out int maxActiveCounters, int counterSize, out uint counters)
      {
        fixed (int* numCounters1 = &numCounters)
          fixed (int* maxActiveCounters1 = &maxActiveCounters)
            fixed (uint* counters1 = &counters)
            {
              GL.Delegates.glGetPerfMonitorCountersAMD(group, numCounters1, maxActiveCounters1, counterSize, counters1);
              numCounters = *numCounters1;
              maxActiveCounters = *maxActiveCounters1;
              counters = *counters1;
            }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounters(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint[] counters)
      {
        fixed (uint* counters1 = counters)
          GL.Delegates.glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounters(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint* counters)
      {
        GL.Delegates.glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounterString(int group, int counter, int bufSize, out int length, [Out] StringBuilder counterString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetPerfMonitorCounterStringAMD((uint) group, (uint) counter, bufSize, length1, counterString);
          length = *length1;
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounterString(int group, int counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString)
      {
        GL.Delegates.glGetPerfMonitorCounterStringAMD((uint) group, (uint) counter, bufSize, length, counterString);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, out int length, [Out] StringBuilder counterString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length1, counterString);
          length = *length1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString)
      {
        GL.Delegates.glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorGroup(out int numGroups, int groupsSize, out int groups)
      {
        fixed (int* numGroups1 = &numGroups)
          fixed (int* numPtr = &groups)
          {
            GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups1, groupsSize, (uint*) numPtr);
            numGroups = *numGroups1;
            groups = *numPtr;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorGroup(out int numGroups, int groupsSize, out uint groups)
      {
        fixed (int* numGroups1 = &numGroups)
          fixed (uint* groups1 = &groups)
          {
            GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups1, groupsSize, groups1);
            numGroups = *numGroups1;
            groups = *groups1;
          }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] int[] groups)
      {
        fixed (int* numPtr = groups)
          GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups, groupsSize, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] int* groups)
      {
        GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups, groupsSize, (uint*) groups);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] uint[] groups)
      {
        fixed (uint* groups1 = groups)
          GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] uint* groups)
      {
        GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorGroupString(int group, int bufSize, out int length, [Out] StringBuilder groupString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetPerfMonitorGroupStringAMD((uint) group, bufSize, length1, groupString);
          length = *length1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorGroupString(int group, int bufSize, [Out] int* length, [Out] StringBuilder groupString)
      {
        GL.Delegates.glGetPerfMonitorGroupStringAMD((uint) group, bufSize, length, groupString);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorGroupString(uint group, int bufSize, out int length, [Out] StringBuilder groupString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetPerfMonitorGroupStringAMD(group, bufSize, length1, groupString);
          length = *length1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "1.2")]
      public static unsafe void GetPerfMonitorGroupString(uint group, int bufSize, [Out] int* length, [Out] StringBuilder groupString)
      {
        GL.Delegates.glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
      }

      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glIsNameAMD", Version = "4.1")]
      public static bool IsName(AmdNameGenDelete identifier, int name)
      {
        return GL.Delegates.glIsNameAMD(identifier, (uint) name);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_name_gen_delete", EntryPoint = "glIsNameAMD", Version = "4.1")]
      public static bool IsName(AmdNameGenDelete identifier, uint name)
      {
        return GL.Delegates.glIsNameAMD(identifier, name);
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawArraysIndirectAMD", Version = "4.0")]
      public static void MultiDrawArraysIndirect(AmdMultiDrawIndirect mode, IntPtr indirect, int primcount, int stride)
      {
        GL.Delegates.glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawArraysIndirectAMD", Version = "4.0")]
      public static void MultiDrawArraysIndirect<T1>(AmdMultiDrawIndirect mode, [In, Out] T1[] indirect, int primcount, int stride) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawArraysIndirectAMD(mode, gcHandle.AddrOfPinnedObject(), primcount, stride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawArraysIndirectAMD", Version = "4.0")]
      public static void MultiDrawArraysIndirect<T1>(AmdMultiDrawIndirect mode, [In, Out] T1[,] indirect, int primcount, int stride) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawArraysIndirectAMD(mode, gcHandle.AddrOfPinnedObject(), primcount, stride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawArraysIndirectAMD", Version = "4.0")]
      public static void MultiDrawArraysIndirect<T1>(AmdMultiDrawIndirect mode, [In, Out] T1[,,] indirect, int primcount, int stride) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawArraysIndirectAMD(mode, gcHandle.AddrOfPinnedObject(), primcount, stride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawArraysIndirectAMD", Version = "4.0")]
      public static void MultiDrawArraysIndirect<T1>(AmdMultiDrawIndirect mode, [In, Out] ref T1 indirect, int primcount, int stride) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawArraysIndirectAMD(mode, gcHandle.AddrOfPinnedObject(), primcount, stride);
          indirect = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawElementsIndirectAMD", Version = "4.0")]
      public static void MultiDrawElementsIndirect(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, IntPtr indirect, int primcount, int stride)
      {
        GL.Delegates.glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawElementsIndirectAMD", Version = "4.0")]
      public static void MultiDrawElementsIndirect<T2>(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, [In, Out] T2[] indirect, int primcount, int stride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsIndirectAMD(mode, type, gcHandle.AddrOfPinnedObject(), primcount, stride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawElementsIndirectAMD", Version = "4.0")]
      public static void MultiDrawElementsIndirect<T2>(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, [In, Out] T2[,] indirect, int primcount, int stride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsIndirectAMD(mode, type, gcHandle.AddrOfPinnedObject(), primcount, stride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawElementsIndirectAMD", Version = "4.0")]
      public static void MultiDrawElementsIndirect<T2>(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, [In, Out] T2[,,] indirect, int primcount, int stride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsIndirectAMD(mode, type, gcHandle.AddrOfPinnedObject(), primcount, stride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_multi_draw_indirect", EntryPoint = "glMultiDrawElementsIndirectAMD", Version = "4.0")]
      public static void MultiDrawElementsIndirect<T2>(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, [In, Out] ref T2 indirect, int primcount, int stride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indirect, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsIndirectAMD(mode, type, gcHandle.AddrOfPinnedObject(), primcount, stride);
          indirect = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "1.2")]
      public static unsafe void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, [Out] int[] counterList)
      {
        fixed (int* numPtr = counterList)
          GL.Delegates.glSelectPerfMonitorCountersAMD((uint) monitor, enable, (uint) group, numCounters, (uint*) numPtr);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "1.2")]
      public static unsafe void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, out int counterList)
      {
        fixed (int* numPtr = &counterList)
        {
          GL.Delegates.glSelectPerfMonitorCountersAMD((uint) monitor, enable, (uint) group, numCounters, (uint*) numPtr);
          counterList = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "1.2")]
      public static unsafe void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, [Out] int* counterList)
      {
        GL.Delegates.glSelectPerfMonitorCountersAMD((uint) monitor, enable, (uint) group, numCounters, (uint*) counterList);
      }

      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, [Out] uint[] counterList)
      {
        fixed (uint* counterList1 = counterList)
          GL.Delegates.glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "1.2")]
      public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, out uint counterList)
      {
        fixed (uint* counterList1 = &counterList)
        {
          GL.Delegates.glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList1);
          counterList = *counterList1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_performance_monitor", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "1.2")]
      public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, [Out] uint* counterList)
      {
        GL.Delegates.glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
      }

      [AutoGenerated(Category = "AMD_sample_positions", EntryPoint = "glSetMultisamplefvAMD", Version = "3.2")]
      public static unsafe void SetMultisample(AmdSamplePositions pname, int index, float[] val)
      {
        fixed (float* val1 = val)
          GL.Delegates.glSetMultisamplefvAMD(pname, (uint) index, val1);
      }

      [AutoGenerated(Category = "AMD_sample_positions", EntryPoint = "glSetMultisamplefvAMD", Version = "3.2")]
      public static unsafe void SetMultisample(AmdSamplePositions pname, int index, ref float val)
      {
        fixed (float* val1 = &val)
          GL.Delegates.glSetMultisamplefvAMD(pname, (uint) index, val1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_sample_positions", EntryPoint = "glSetMultisamplefvAMD", Version = "3.2")]
      public static unsafe void SetMultisample(AmdSamplePositions pname, int index, float* val)
      {
        GL.Delegates.glSetMultisamplefvAMD(pname, (uint) index, val);
      }

      [AutoGenerated(Category = "AMD_sample_positions", EntryPoint = "glSetMultisamplefvAMD", Version = "3.2")]
      [CLSCompliant(false)]
      public static unsafe void SetMultisample(AmdSamplePositions pname, uint index, float[] val)
      {
        fixed (float* val1 = val)
          GL.Delegates.glSetMultisamplefvAMD(pname, index, val1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_sample_positions", EntryPoint = "glSetMultisamplefvAMD", Version = "3.2")]
      public static unsafe void SetMultisample(AmdSamplePositions pname, uint index, ref float val)
      {
        fixed (float* val1 = &val)
          GL.Delegates.glSetMultisamplefvAMD(pname, index, val1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "AMD_sample_positions", EntryPoint = "glSetMultisamplefvAMD", Version = "3.2")]
      public static unsafe void SetMultisample(AmdSamplePositions pname, uint index, float* val)
      {
        GL.Delegates.glSetMultisamplefvAMD(pname, index, val);
      }

      [AutoGenerated(Category = "AMD_vertex_shader_tesselator", EntryPoint = "glTessellationFactorAMD", Version = "2.0")]
      public static void TessellationFactor(float factor)
      {
        GL.Delegates.glTessellationFactorAMD(factor);
      }

      [AutoGenerated(Category = "AMD_vertex_shader_tesselator", EntryPoint = "glTessellationModeAMD", Version = "2.0")]
      public static void TessellationMode(AmdVertexShaderTesselator mode)
      {
        GL.Delegates.glTessellationModeAMD(mode);
      }
    }

    public static class Apple
    {
      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glBindVertexArrayAPPLE", Version = "1.2")]
      public static void BindVertexArray(int array)
      {
        GL.Delegates.glBindVertexArrayAPPLE((uint) array);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glBindVertexArrayAPPLE", Version = "1.2")]
      public static void BindVertexArray(uint array)
      {
        GL.Delegates.glBindVertexArrayAPPLE(array);
      }

      [AutoGenerated(Category = "APPLE_flush_buffer_range", EntryPoint = "glBufferParameteriAPPLE", Version = "1.5")]
      public static void BufferParameter(BufferTarget target, BufferParameterApple pname, int param)
      {
        GL.Delegates.glBufferParameteriAPPLE(target, pname, param);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glDeleteFencesAPPLE", Version = "1.2")]
      public static unsafe void DeleteFences(int n, int[] fences)
      {
        fixed (int* numPtr = fences)
          GL.Delegates.glDeleteFencesAPPLE(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glDeleteFencesAPPLE", Version = "1.2")]
      public static unsafe void DeleteFences(int n, ref int fences)
      {
        fixed (int* numPtr = &fences)
          GL.Delegates.glDeleteFencesAPPLE(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glDeleteFencesAPPLE", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFences(int n, int* fences)
      {
        GL.Delegates.glDeleteFencesAPPLE(n, (uint*) fences);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glDeleteFencesAPPLE", Version = "1.2")]
      public static unsafe void DeleteFences(int n, uint[] fences)
      {
        fixed (uint* fences1 = fences)
          GL.Delegates.glDeleteFencesAPPLE(n, fences1);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glDeleteFencesAPPLE", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFences(int n, ref uint fences)
      {
        fixed (uint* fences1 = &fences)
          GL.Delegates.glDeleteFencesAPPLE(n, fences1);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glDeleteFencesAPPLE", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFences(int n, uint* fences)
      {
        GL.Delegates.glDeleteFencesAPPLE(n, fences);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glDeleteVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void DeleteVertexArrays(int n, int[] arrays)
      {
        fixed (int* numPtr = arrays)
          GL.Delegates.glDeleteVertexArraysAPPLE(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glDeleteVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void DeleteVertexArrays(int n, ref int arrays)
      {
        fixed (int* numPtr = &arrays)
          GL.Delegates.glDeleteVertexArraysAPPLE(n, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glDeleteVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void DeleteVertexArrays(int n, int* arrays)
      {
        GL.Delegates.glDeleteVertexArraysAPPLE(n, (uint*) arrays);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glDeleteVertexArraysAPPLE", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteVertexArrays(int n, uint[] arrays)
      {
        fixed (uint* arrays1 = arrays)
          GL.Delegates.glDeleteVertexArraysAPPLE(n, arrays1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glDeleteVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void DeleteVertexArrays(int n, ref uint arrays)
      {
        fixed (uint* arrays1 = &arrays)
          GL.Delegates.glDeleteVertexArraysAPPLE(n, arrays1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glDeleteVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void DeleteVertexArrays(int n, uint* arrays)
      {
        GL.Delegates.glDeleteVertexArraysAPPLE(n, arrays);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glDisableVertexAttribAPPLE", Version = "1.5")]
      public static void DisableVertexAttrib(int index, AppleVertexProgramEvaluators pname)
      {
        GL.Delegates.glDisableVertexAttribAPPLE((uint) index, pname);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glDisableVertexAttribAPPLE", Version = "1.5")]
      public static void DisableVertexAttrib(uint index, AppleVertexProgramEvaluators pname)
      {
        GL.Delegates.glDisableVertexAttribAPPLE(index, pname);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glDrawElementArrayAPPLE", Version = "1.2")]
      public static void DrawElementArray(BeginMode mode, int first, int count)
      {
        GL.Delegates.glDrawElementArrayAPPLE(mode, first, count);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glDrawRangeElementArrayAPPLE", Version = "1.2")]
      public static void DrawRangeElementArray(BeginMode mode, int start, int end, int first, int count)
      {
        GL.Delegates.glDrawRangeElementArrayAPPLE(mode, (uint) start, (uint) end, first, count);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glDrawRangeElementArrayAPPLE", Version = "1.2")]
      [CLSCompliant(false)]
      public static void DrawRangeElementArray(BeginMode mode, uint start, uint end, int first, int count)
      {
        GL.Delegates.glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glElementPointerAPPLE", Version = "1.2")]
      public static void ElementPointer(AppleElementArray type, IntPtr pointer)
      {
        GL.Delegates.glElementPointerAPPLE(type, pointer);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glElementPointerAPPLE", Version = "1.2")]
      public static void ElementPointer<T1>(AppleElementArray type, [In, Out] T1[] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glElementPointerAPPLE(type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glElementPointerAPPLE", Version = "1.2")]
      public static void ElementPointer<T1>(AppleElementArray type, [In, Out] T1[,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glElementPointerAPPLE(type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glElementPointerAPPLE", Version = "1.2")]
      public static void ElementPointer<T1>(AppleElementArray type, [In, Out] T1[,,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glElementPointerAPPLE(type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glElementPointerAPPLE", Version = "1.2")]
      public static void ElementPointer<T1>(AppleElementArray type, [In, Out] ref T1 pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glElementPointerAPPLE(type, gcHandle.AddrOfPinnedObject());
          pointer = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glEnableVertexAttribAPPLE", Version = "1.5")]
      public static void EnableVertexAttrib(int index, AppleVertexProgramEvaluators pname)
      {
        GL.Delegates.glEnableVertexAttribAPPLE((uint) index, pname);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glEnableVertexAttribAPPLE", Version = "1.5")]
      public static void EnableVertexAttrib(uint index, AppleVertexProgramEvaluators pname)
      {
        GL.Delegates.glEnableVertexAttribAPPLE(index, pname);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glFinishFenceAPPLE", Version = "1.2")]
      public static void FinishFence(int fence)
      {
        GL.Delegates.glFinishFenceAPPLE((uint) fence);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glFinishFenceAPPLE", Version = "1.2")]
      public static void FinishFence(uint fence)
      {
        GL.Delegates.glFinishFenceAPPLE(fence);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glFinishObjectAPPLE", Version = "1.2")]
      public static void FinishObject(AppleFence @object, int name)
      {
        GL.Delegates.glFinishObjectAPPLE(@object, name);
      }

      [AutoGenerated(Category = "APPLE_flush_buffer_range", EntryPoint = "glFlushMappedBufferRangeAPPLE", Version = "1.5")]
      public static void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr size)
      {
        GL.Delegates.glFlushMappedBufferRangeAPPLE(target, offset, size);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glFlushVertexArrayRangeAPPLE", Version = "1.2")]
      public static void FlushVertexArrayRange(int length, [Out] IntPtr pointer)
      {
        GL.Delegates.glFlushVertexArrayRangeAPPLE(length, pointer);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glFlushVertexArrayRangeAPPLE", Version = "1.2")]
      public static void FlushVertexArrayRange<T1>(int length, [In, Out] T1[] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFlushVertexArrayRangeAPPLE(length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glFlushVertexArrayRangeAPPLE", Version = "1.2")]
      public static void FlushVertexArrayRange<T1>(int length, [In, Out] T1[,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFlushVertexArrayRangeAPPLE(length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glFlushVertexArrayRangeAPPLE", Version = "1.2")]
      public static void FlushVertexArrayRange<T1>(int length, [In, Out] T1[,,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFlushVertexArrayRangeAPPLE(length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glFlushVertexArrayRangeAPPLE", Version = "1.2")]
      public static void FlushVertexArrayRange<T1>(int length, [In, Out] ref T1 pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFlushVertexArrayRangeAPPLE(length, gcHandle.AddrOfPinnedObject());
          pointer = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glGenFencesAPPLE", Version = "1.2")]
      public static unsafe void GenFences(int n, [Out] int[] fences)
      {
        fixed (int* numPtr = fences)
          GL.Delegates.glGenFencesAPPLE(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glGenFencesAPPLE", Version = "1.2")]
      public static unsafe void GenFences(int n, out int fences)
      {
        fixed (int* numPtr = &fences)
        {
          GL.Delegates.glGenFencesAPPLE(n, (uint*) numPtr);
          fences = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glGenFencesAPPLE", Version = "1.2")]
      public static unsafe void GenFences(int n, [Out] int* fences)
      {
        GL.Delegates.glGenFencesAPPLE(n, (uint*) fences);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glGenFencesAPPLE", Version = "1.2")]
      public static unsafe void GenFences(int n, [Out] uint[] fences)
      {
        fixed (uint* fences1 = fences)
          GL.Delegates.glGenFencesAPPLE(n, fences1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glGenFencesAPPLE", Version = "1.2")]
      public static unsafe void GenFences(int n, out uint fences)
      {
        fixed (uint* fences1 = &fences)
        {
          GL.Delegates.glGenFencesAPPLE(n, fences1);
          fences = *fences1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glGenFencesAPPLE", Version = "1.2")]
      public static unsafe void GenFences(int n, [Out] uint* fences)
      {
        GL.Delegates.glGenFencesAPPLE(n, fences);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glGenVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void GenVertexArrays(int n, [Out] int[] arrays)
      {
        fixed (int* numPtr = arrays)
          GL.Delegates.glGenVertexArraysAPPLE(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glGenVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void GenVertexArrays(int n, out int arrays)
      {
        fixed (int* numPtr = &arrays)
        {
          GL.Delegates.glGenVertexArraysAPPLE(n, (uint*) numPtr);
          arrays = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glGenVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void GenVertexArrays(int n, [Out] int* arrays)
      {
        GL.Delegates.glGenVertexArraysAPPLE(n, (uint*) arrays);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glGenVertexArraysAPPLE", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenVertexArrays(int n, [Out] uint[] arrays)
      {
        fixed (uint* arrays1 = arrays)
          GL.Delegates.glGenVertexArraysAPPLE(n, arrays1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glGenVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void GenVertexArrays(int n, out uint arrays)
      {
        fixed (uint* arrays1 = &arrays)
        {
          GL.Delegates.glGenVertexArraysAPPLE(n, arrays1);
          arrays = *arrays1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glGenVertexArraysAPPLE", Version = "1.2")]
      public static unsafe void GenVertexArrays(int n, [Out] uint* arrays)
      {
        GL.Delegates.glGenVertexArraysAPPLE(n, arrays);
      }

      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glGetObjectParameterivAPPLE", Version = "1.5")]
      public static unsafe void GetObjectParameter(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetObjectParameterivAPPLE(objectType, (uint) name, pname, params1);
      }

      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glGetObjectParameterivAPPLE", Version = "1.5")]
      public static unsafe void GetObjectParameter(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetObjectParameterivAPPLE(objectType, (uint) name, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glGetObjectParameterivAPPLE", Version = "1.5")]
      public static unsafe void GetObjectParameter(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable pname, [Out] int* @params)
      {
        GL.Delegates.glGetObjectParameterivAPPLE(objectType, (uint) name, pname, @params);
      }

      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glGetObjectParameterivAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GetObjectParameter(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetObjectParameterivAPPLE(objectType, name, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glGetObjectParameterivAPPLE", Version = "1.5")]
      public static unsafe void GetObjectParameter(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetObjectParameterivAPPLE(objectType, name, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glGetObjectParameterivAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GetObjectParameter(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable pname, [Out] int* @params)
      {
        GL.Delegates.glGetObjectParameterivAPPLE(objectType, name, pname, @params);
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glGetTexParameterPointervAPPLE", Version = "1.2")]
      public static void GetTexParameterPointer(AppleTextureRange target, AppleTextureRange pname, [Out] IntPtr @params)
      {
        GL.Delegates.glGetTexParameterPointervAPPLE(target, pname, @params);
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glGetTexParameterPointervAPPLE", Version = "1.2")]
      public static void GetTexParameterPointer<T2>(AppleTextureRange target, AppleTextureRange pname, [In, Out] T2[] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTexParameterPointervAPPLE(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glGetTexParameterPointervAPPLE", Version = "1.2")]
      public static void GetTexParameterPointer<T2>(AppleTextureRange target, AppleTextureRange pname, [In, Out] T2[,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTexParameterPointervAPPLE(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glGetTexParameterPointervAPPLE", Version = "1.2")]
      public static void GetTexParameterPointer<T2>(AppleTextureRange target, AppleTextureRange pname, [In, Out] T2[,,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTexParameterPointervAPPLE(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glGetTexParameterPointervAPPLE", Version = "1.2")]
      public static void GetTexParameterPointer<T2>(AppleTextureRange target, AppleTextureRange pname, [In, Out] ref T2 @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetTexParameterPointervAPPLE(target, pname, gcHandle.AddrOfPinnedObject());
          @params = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glIsFenceAPPLE", Version = "1.2")]
      public static bool IsFence(int fence)
      {
        return GL.Delegates.glIsFenceAPPLE((uint) fence);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glIsFenceAPPLE", Version = "1.2")]
      [CLSCompliant(false)]
      public static bool IsFence(uint fence)
      {
        return GL.Delegates.glIsFenceAPPLE(fence);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glIsVertexArrayAPPLE", Version = "1.2")]
      public static bool IsVertexArray(int array)
      {
        return GL.Delegates.glIsVertexArrayAPPLE((uint) array);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_array_object", EntryPoint = "glIsVertexArrayAPPLE", Version = "1.2")]
      public static bool IsVertexArray(uint array)
      {
        return GL.Delegates.glIsVertexArrayAPPLE(array);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glIsVertexAttribEnabledAPPLE", Version = "1.5")]
      public static bool IsVertexAttribEnabled(int index, AppleVertexProgramEvaluators pname)
      {
        return GL.Delegates.glIsVertexAttribEnabledAPPLE((uint) index, pname);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glIsVertexAttribEnabledAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static bool IsVertexAttribEnabled(uint index, AppleVertexProgramEvaluators pname)
      {
        return GL.Delegates.glIsVertexAttribEnabledAPPLE(index, pname);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1dAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(int index, int size, double u1, double u2, int stride, int order, double[] points)
      {
        fixed (double* points1 = points)
          GL.Delegates.glMapVertexAttrib1dAPPLE((uint) index, (uint) size, u1, u2, stride, order, points1);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1dAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(int index, int size, double u1, double u2, int stride, int order, ref double points)
      {
        fixed (double* points1 = &points)
          GL.Delegates.glMapVertexAttrib1dAPPLE((uint) index, (uint) size, u1, u2, stride, order, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1dAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(int index, int size, double u1, double u2, int stride, int order, double* points)
      {
        GL.Delegates.glMapVertexAttrib1dAPPLE((uint) index, (uint) size, u1, u2, stride, order, points);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1dAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(uint index, uint size, double u1, double u2, int stride, int order, double[] points)
      {
        fixed (double* points1 = points)
          GL.Delegates.glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1dAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(uint index, uint size, double u1, double u2, int stride, int order, ref double points)
      {
        fixed (double* points1 = &points)
          GL.Delegates.glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points1);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1dAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void MapVertexAttrib1(uint index, uint size, double u1, double u2, int stride, int order, double* points)
      {
        GL.Delegates.glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1fAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(int index, int size, float u1, float u2, int stride, int order, float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glMapVertexAttrib1fAPPLE((uint) index, (uint) size, u1, u2, stride, order, points1);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1fAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(int index, int size, float u1, float u2, int stride, int order, ref float points)
      {
        fixed (float* points1 = &points)
          GL.Delegates.glMapVertexAttrib1fAPPLE((uint) index, (uint) size, u1, u2, stride, order, points1);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1fAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void MapVertexAttrib1(int index, int size, float u1, float u2, int stride, int order, float* points)
      {
        GL.Delegates.glMapVertexAttrib1fAPPLE((uint) index, (uint) size, u1, u2, stride, order, points);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1fAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(uint index, uint size, float u1, float u2, int stride, int order, float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1fAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(uint index, uint size, float u1, float u2, int stride, int order, ref float points)
      {
        fixed (float* points1 = &points)
          GL.Delegates.glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib1fAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib1(uint index, uint size, float u1, float u2, int stride, int order, float* points)
      {
        GL.Delegates.glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2dAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib2(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
      {
        fixed (double* points1 = points)
          GL.Delegates.glMapVertexAttrib2dAPPLE((uint) index, (uint) size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2dAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib2(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
      {
        fixed (double* points1 = &points)
          GL.Delegates.glMapVertexAttrib2dAPPLE((uint) index, (uint) size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2dAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib2(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
      {
        GL.Delegates.glMapVertexAttrib2dAPPLE((uint) index, (uint) size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2dAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void MapVertexAttrib2(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points)
      {
        fixed (double* points1 = points)
          GL.Delegates.glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2dAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib2(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
      {
        fixed (double* points1 = &points)
          GL.Delegates.glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2dAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void MapVertexAttrib2(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
      {
        GL.Delegates.glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2fAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib2(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glMapVertexAttrib2fAPPLE((uint) index, (uint) size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2fAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib2(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
      {
        fixed (float* points1 = &points)
          GL.Delegates.glMapVertexAttrib2fAPPLE((uint) index, (uint) size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2fAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void MapVertexAttrib2(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
      {
        GL.Delegates.glMapVertexAttrib2fAPPLE((uint) index, (uint) size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
      }

      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2fAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void MapVertexAttrib2(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2fAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib2(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
      {
        fixed (float* points1 = &points)
          GL.Delegates.glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_vertex_program_evaluators", EntryPoint = "glMapVertexAttrib2fAPPLE", Version = "1.5")]
      public static unsafe void MapVertexAttrib2(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
      {
        GL.Delegates.glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glMultiDrawElementArrayAPPLE", Version = "1.2")]
      public static unsafe void MultiDrawElementArray(BeginMode mode, int[] first, int[] count, int primcount)
      {
        fixed (int* first1 = first)
          fixed (int* count1 = count)
            GL.Delegates.glMultiDrawElementArrayAPPLE(mode, first1, count1, primcount);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glMultiDrawElementArrayAPPLE", Version = "1.2")]
      public static unsafe void MultiDrawElementArray(BeginMode mode, ref int first, ref int count, int primcount)
      {
        fixed (int* first1 = &first)
          fixed (int* count1 = &count)
            GL.Delegates.glMultiDrawElementArrayAPPLE(mode, first1, count1, primcount);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glMultiDrawElementArrayAPPLE", Version = "1.2")]
      public static unsafe void MultiDrawElementArray(BeginMode mode, int* first, int* count, int primcount)
      {
        GL.Delegates.glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glMultiDrawRangeElementArrayAPPLE", Version = "1.2")]
      public static unsafe void MultiDrawRangeElementArray(BeginMode mode, int start, int end, int[] first, int[] count, int primcount)
      {
        fixed (int* first1 = first)
          fixed (int* count1 = count)
            GL.Delegates.glMultiDrawRangeElementArrayAPPLE(mode, (uint) start, (uint) end, first1, count1, primcount);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glMultiDrawRangeElementArrayAPPLE", Version = "1.2")]
      public static unsafe void MultiDrawRangeElementArray(BeginMode mode, int start, int end, ref int first, ref int count, int primcount)
      {
        fixed (int* first1 = &first)
          fixed (int* count1 = &count)
            GL.Delegates.glMultiDrawRangeElementArrayAPPLE(mode, (uint) start, (uint) end, first1, count1, primcount);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glMultiDrawRangeElementArrayAPPLE", Version = "1.2")]
      public static unsafe void MultiDrawRangeElementArray(BeginMode mode, int start, int end, int* first, int* count, int primcount)
      {
        GL.Delegates.glMultiDrawRangeElementArrayAPPLE(mode, (uint) start, (uint) end, first, count, primcount);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glMultiDrawRangeElementArrayAPPLE", Version = "1.2")]
      public static unsafe void MultiDrawRangeElementArray(BeginMode mode, uint start, uint end, int[] first, int[] count, int primcount)
      {
        fixed (int* first1 = first)
          fixed (int* count1 = count)
            GL.Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first1, count1, primcount);
      }

      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glMultiDrawRangeElementArrayAPPLE", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiDrawRangeElementArray(BeginMode mode, uint start, uint end, ref int first, ref int count, int primcount)
      {
        fixed (int* first1 = &first)
          fixed (int* count1 = &count)
            GL.Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first1, count1, primcount);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_element_array", EntryPoint = "glMultiDrawRangeElementArrayAPPLE", Version = "1.2")]
      public static unsafe void MultiDrawRangeElementArray(BeginMode mode, uint start, uint end, int* first, int* count, int primcount)
      {
        GL.Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
      }

      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glObjectPurgeableAPPLE", Version = "1.5")]
      public static AppleObjectPurgeable ObjectPurgeable(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable option)
      {
        return GL.Delegates.glObjectPurgeableAPPLE(objectType, (uint) name, option);
      }

      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glObjectPurgeableAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static AppleObjectPurgeable ObjectPurgeable(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable option)
      {
        return GL.Delegates.glObjectPurgeableAPPLE(objectType, name, option);
      }

      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glObjectUnpurgeableAPPLE", Version = "1.5")]
      public static AppleObjectPurgeable ObjectUnpurgeable(AppleObjectPurgeable objectType, int name, AppleObjectPurgeable option)
      {
        return GL.Delegates.glObjectUnpurgeableAPPLE(objectType, (uint) name, option);
      }

      [AutoGenerated(Category = "APPLE_object_purgeable", EntryPoint = "glObjectUnpurgeableAPPLE", Version = "1.5")]
      [CLSCompliant(false)]
      public static AppleObjectPurgeable ObjectUnpurgeable(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable option)
      {
        return GL.Delegates.glObjectUnpurgeableAPPLE(objectType, name, option);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glSetFenceAPPLE", Version = "1.2")]
      public static void SetFence(int fence)
      {
        GL.Delegates.glSetFenceAPPLE((uint) fence);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glSetFenceAPPLE", Version = "1.2")]
      public static void SetFence(uint fence)
      {
        GL.Delegates.glSetFenceAPPLE(fence);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glTestFenceAPPLE", Version = "1.2")]
      public static bool TestFence(int fence)
      {
        return GL.Delegates.glTestFenceAPPLE((uint) fence);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glTestFenceAPPLE", Version = "1.2")]
      public static bool TestFence(uint fence)
      {
        return GL.Delegates.glTestFenceAPPLE(fence);
      }

      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glTestObjectAPPLE", Version = "1.2")]
      public static bool TestObject(AppleFence @object, int name)
      {
        return GL.Delegates.glTestObjectAPPLE(@object, (uint) name);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "APPLE_fence", EntryPoint = "glTestObjectAPPLE", Version = "1.2")]
      public static bool TestObject(AppleFence @object, uint name)
      {
        return GL.Delegates.glTestObjectAPPLE(@object, name);
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glTextureRangeAPPLE", Version = "1.2")]
      public static void TextureRange(AppleTextureRange target, int length, IntPtr pointer)
      {
        GL.Delegates.glTextureRangeAPPLE(target, length, pointer);
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glTextureRangeAPPLE", Version = "1.2")]
      public static void TextureRange<T2>(AppleTextureRange target, int length, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureRangeAPPLE(target, length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glTextureRangeAPPLE", Version = "1.2")]
      public static void TextureRange<T2>(AppleTextureRange target, int length, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureRangeAPPLE(target, length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glTextureRangeAPPLE", Version = "1.2")]
      public static void TextureRange<T2>(AppleTextureRange target, int length, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureRangeAPPLE(target, length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_texture_range", EntryPoint = "glTextureRangeAPPLE", Version = "1.2")]
      public static void TextureRange<T2>(AppleTextureRange target, int length, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTextureRangeAPPLE(target, length, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glVertexArrayParameteriAPPLE", Version = "1.2")]
      public static void VertexArrayParameter(AppleVertexArrayRange pname, int param)
      {
        GL.Delegates.glVertexArrayParameteriAPPLE(pname, param);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glVertexArrayRangeAPPLE", Version = "1.2")]
      public static void VertexArrayRange(int length, [Out] IntPtr pointer)
      {
        GL.Delegates.glVertexArrayRangeAPPLE(length, pointer);
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glVertexArrayRangeAPPLE", Version = "1.2")]
      public static void VertexArrayRange<T1>(int length, [In, Out] T1[] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexArrayRangeAPPLE(length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glVertexArrayRangeAPPLE", Version = "1.2")]
      public static void VertexArrayRange<T1>(int length, [In, Out] T1[,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexArrayRangeAPPLE(length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glVertexArrayRangeAPPLE", Version = "1.2")]
      public static void VertexArrayRange<T1>(int length, [In, Out] T1[,,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexArrayRangeAPPLE(length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "APPLE_vertex_array_range", EntryPoint = "glVertexArrayRangeAPPLE", Version = "1.2")]
      public static void VertexArrayRange<T1>(int length, [In, Out] ref T1 pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexArrayRangeAPPLE(length, gcHandle.AddrOfPinnedObject());
          pointer = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    public static class Ati
    {
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glAlphaFragmentOp1ATI", Version = "1.2")]
      public static void AlphaFragmentOp1(AtiFragmentShader op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod)
      {
        GL.Delegates.glAlphaFragmentOp1ATI(op, (uint) dst, (uint) dstMod, (uint) arg1, (uint) arg1Rep, (uint) arg1Mod);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glAlphaFragmentOp1ATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void AlphaFragmentOp1(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
      {
        GL.Delegates.glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glAlphaFragmentOp2ATI", Version = "1.2")]
      public static void AlphaFragmentOp2(AtiFragmentShader op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)
      {
        GL.Delegates.glAlphaFragmentOp2ATI(op, (uint) dst, (uint) dstMod, (uint) arg1, (uint) arg1Rep, (uint) arg1Mod, (uint) arg2, (uint) arg2Rep, (uint) arg2Mod);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glAlphaFragmentOp2ATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void AlphaFragmentOp2(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
      {
        GL.Delegates.glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glAlphaFragmentOp3ATI", Version = "1.2")]
      public static void AlphaFragmentOp3(AtiFragmentShader op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)
      {
        GL.Delegates.glAlphaFragmentOp3ATI(op, (uint) dst, (uint) dstMod, (uint) arg1, (uint) arg1Rep, (uint) arg1Mod, (uint) arg2, (uint) arg2Rep, (uint) arg2Mod, (uint) arg3, (uint) arg3Rep, (uint) arg3Mod);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glAlphaFragmentOp3ATI", Version = "1.2")]
      public static void AlphaFragmentOp3(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
      {
        GL.Delegates.glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glArrayObjectATI", Version = "1.2")]
      public static void ArrayObject(EnableCap array, int size, AtiVertexArrayObject type, int stride, int buffer, int offset)
      {
        GL.Delegates.glArrayObjectATI(array, size, type, stride, (uint) buffer, (uint) offset);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glArrayObjectATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void ArrayObject(EnableCap array, int size, AtiVertexArrayObject type, int stride, uint buffer, uint offset)
      {
        GL.Delegates.glArrayObjectATI(array, size, type, stride, buffer, offset);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glBeginFragmentShaderATI", Version = "1.2")]
      public static void BeginFragmentShader()
      {
        GL.Delegates.glBeginFragmentShaderATI();
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glBindFragmentShaderATI", Version = "1.2")]
      public static void BindFragmentShader(int id)
      {
        GL.Delegates.glBindFragmentShaderATI((uint) id);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glBindFragmentShaderATI", Version = "1.2")]
      public static void BindFragmentShader(uint id)
      {
        GL.Delegates.glBindFragmentShaderATI(id);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glClientActiveVertexStreamATI", Version = "1.2")]
      public static void ClientActiveVertexStream(AtiVertexStreams stream)
      {
        GL.Delegates.glClientActiveVertexStreamATI(stream);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glColorFragmentOp1ATI", Version = "1.2")]
      public static void ColorFragmentOp1(AtiFragmentShader op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod)
      {
        GL.Delegates.glColorFragmentOp1ATI(op, (uint) dst, (uint) dstMask, (uint) dstMod, (uint) arg1, (uint) arg1Rep, (uint) arg1Mod);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glColorFragmentOp1ATI", Version = "1.2")]
      public static void ColorFragmentOp1(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
      {
        GL.Delegates.glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glColorFragmentOp2ATI", Version = "1.2")]
      public static void ColorFragmentOp2(AtiFragmentShader op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod)
      {
        GL.Delegates.glColorFragmentOp2ATI(op, (uint) dst, (uint) dstMask, (uint) dstMod, (uint) arg1, (uint) arg1Rep, (uint) arg1Mod, (uint) arg2, (uint) arg2Rep, (uint) arg2Mod);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glColorFragmentOp2ATI", Version = "1.2")]
      public static void ColorFragmentOp2(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
      {
        GL.Delegates.glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glColorFragmentOp3ATI", Version = "1.2")]
      public static void ColorFragmentOp3(AtiFragmentShader op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod)
      {
        GL.Delegates.glColorFragmentOp3ATI(op, (uint) dst, (uint) dstMask, (uint) dstMod, (uint) arg1, (uint) arg1Rep, (uint) arg1Mod, (uint) arg2, (uint) arg2Rep, (uint) arg2Mod, (uint) arg3, (uint) arg3Rep, (uint) arg3Mod);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glColorFragmentOp3ATI", Version = "1.2")]
      public static void ColorFragmentOp3(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
      {
        GL.Delegates.glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glDeleteFragmentShaderATI", Version = "1.2")]
      public static void DeleteFragmentShader(int id)
      {
        GL.Delegates.glDeleteFragmentShaderATI((uint) id);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glDeleteFragmentShaderATI", Version = "1.2")]
      public static void DeleteFragmentShader(uint id)
      {
        GL.Delegates.glDeleteFragmentShaderATI(id);
      }

      [AutoGenerated(Category = "ATI_draw_buffers", EntryPoint = "glDrawBuffersATI", Version = "1.2")]
      public static unsafe void DrawBuffers(int n, AtiDrawBuffers[] bufs)
      {
        fixed (AtiDrawBuffers* bufs1 = bufs)
          GL.Delegates.glDrawBuffersATI(n, bufs1);
      }

      [AutoGenerated(Category = "ATI_draw_buffers", EntryPoint = "glDrawBuffersATI", Version = "1.2")]
      public static unsafe void DrawBuffers(int n, ref AtiDrawBuffers bufs)
      {
        fixed (AtiDrawBuffers* bufs1 = &bufs)
          GL.Delegates.glDrawBuffersATI(n, bufs1);
      }

      [AutoGenerated(Category = "ATI_draw_buffers", EntryPoint = "glDrawBuffersATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DrawBuffers(int n, AtiDrawBuffers* bufs)
      {
        GL.Delegates.glDrawBuffersATI(n, bufs);
      }

      [AutoGenerated(Category = "ATI_element_array", EntryPoint = "glDrawElementArrayATI", Version = "1.2")]
      public static void DrawElementArray(BeginMode mode, int count)
      {
        GL.Delegates.glDrawElementArrayATI(mode, count);
      }

      [AutoGenerated(Category = "ATI_element_array", EntryPoint = "glDrawRangeElementArrayATI", Version = "1.2")]
      public static void DrawRangeElementArray(BeginMode mode, int start, int end, int count)
      {
        GL.Delegates.glDrawRangeElementArrayATI(mode, (uint) start, (uint) end, count);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_element_array", EntryPoint = "glDrawRangeElementArrayATI", Version = "1.2")]
      public static void DrawRangeElementArray(BeginMode mode, uint start, uint end, int count)
      {
        GL.Delegates.glDrawRangeElementArrayATI(mode, start, end, count);
      }

      [AutoGenerated(Category = "ATI_element_array", EntryPoint = "glElementPointerATI", Version = "1.2")]
      public static void ElementPointer(AtiElementArray type, IntPtr pointer)
      {
        GL.Delegates.glElementPointerATI(type, pointer);
      }

      [AutoGenerated(Category = "ATI_element_array", EntryPoint = "glElementPointerATI", Version = "1.2")]
      public static void ElementPointer<T1>(AtiElementArray type, [In, Out] T1[] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glElementPointerATI(type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_element_array", EntryPoint = "glElementPointerATI", Version = "1.2")]
      public static void ElementPointer<T1>(AtiElementArray type, [In, Out] T1[,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glElementPointerATI(type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_element_array", EntryPoint = "glElementPointerATI", Version = "1.2")]
      public static void ElementPointer<T1>(AtiElementArray type, [In, Out] T1[,,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glElementPointerATI(type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_element_array", EntryPoint = "glElementPointerATI", Version = "1.2")]
      public static void ElementPointer<T1>(AtiElementArray type, [In, Out] ref T1 pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glElementPointerATI(type, gcHandle.AddrOfPinnedObject());
          pointer = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glEndFragmentShaderATI", Version = "1.2")]
      public static void EndFragmentShader()
      {
        GL.Delegates.glEndFragmentShaderATI();
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glFreeObjectBufferATI", Version = "1.2")]
      public static void FreeObjectBuffer(int buffer)
      {
        GL.Delegates.glFreeObjectBufferATI((uint) buffer);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glFreeObjectBufferATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void FreeObjectBuffer(uint buffer)
      {
        GL.Delegates.glFreeObjectBufferATI(buffer);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glGenFragmentShadersATI", Version = "1.2")]
      public static int GenFragmentShaders(int range)
      {
        return GL.Delegates.glGenFragmentShadersATI((uint) range);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glGenFragmentShadersATI", Version = "1.2")]
      public static int GenFragmentShaders(uint range)
      {
        return GL.Delegates.glGenFragmentShadersATI(range);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetArrayObjectfvATI", Version = "1.2")]
      public static unsafe void GetArrayObject(EnableCap array, AtiVertexArrayObject pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetArrayObjectfvATI(array, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetArrayObjectfvATI", Version = "1.2")]
      public static unsafe void GetArrayObject(EnableCap array, AtiVertexArrayObject pname, [Out] float* @params)
      {
        GL.Delegates.glGetArrayObjectfvATI(array, pname, @params);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetArrayObjectivATI", Version = "1.2")]
      public static unsafe void GetArrayObject(EnableCap array, AtiVertexArrayObject pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetArrayObjectivATI(array, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetArrayObjectivATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetArrayObject(EnableCap array, AtiVertexArrayObject pname, [Out] int* @params)
      {
        GL.Delegates.glGetArrayObjectivATI(array, pname, @params);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetObjectBufferfvATI", Version = "1.2")]
      public static unsafe void GetObjectBuffer(int buffer, AtiVertexArrayObject pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetObjectBufferfvATI((uint) buffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetObjectBufferfvATI", Version = "1.2")]
      public static unsafe void GetObjectBuffer(int buffer, AtiVertexArrayObject pname, [Out] float* @params)
      {
        GL.Delegates.glGetObjectBufferfvATI((uint) buffer, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetObjectBufferfvATI", Version = "1.2")]
      public static unsafe void GetObjectBuffer(uint buffer, AtiVertexArrayObject pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetObjectBufferfvATI(buffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetObjectBufferfvATI", Version = "1.2")]
      public static unsafe void GetObjectBuffer(uint buffer, AtiVertexArrayObject pname, [Out] float* @params)
      {
        GL.Delegates.glGetObjectBufferfvATI(buffer, pname, @params);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetObjectBufferivATI", Version = "1.2")]
      public static unsafe void GetObjectBuffer(int buffer, AtiVertexArrayObject pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetObjectBufferivATI((uint) buffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetObjectBufferivATI", Version = "1.2")]
      public static unsafe void GetObjectBuffer(int buffer, AtiVertexArrayObject pname, [Out] int* @params)
      {
        GL.Delegates.glGetObjectBufferivATI((uint) buffer, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetObjectBufferivATI", Version = "1.2")]
      public static unsafe void GetObjectBuffer(uint buffer, AtiVertexArrayObject pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetObjectBufferivATI(buffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetObjectBufferivATI", Version = "1.2")]
      public static unsafe void GetObjectBuffer(uint buffer, AtiVertexArrayObject pname, [Out] int* @params)
      {
        GL.Delegates.glGetObjectBufferivATI(buffer, pname, @params);
      }

      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glGetTexBumpParameterfvATI", Version = "1.2")]
      public static unsafe void GetTexBumpParameter(AtiEnvmapBumpmap pname, [Out] float[] param)
      {
        fixed (float* numPtr = param)
          GL.Delegates.glGetTexBumpParameterfvATI(pname, numPtr);
      }

      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glGetTexBumpParameterfvATI", Version = "1.2")]
      public static unsafe void GetTexBumpParameter(AtiEnvmapBumpmap pname, out float param)
      {
        fixed (float* numPtr = &param)
        {
          GL.Delegates.glGetTexBumpParameterfvATI(pname, numPtr);
          param = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glGetTexBumpParameterfvATI", Version = "1.2")]
      public static unsafe void GetTexBumpParameter(AtiEnvmapBumpmap pname, [Out] float* param)
      {
        GL.Delegates.glGetTexBumpParameterfvATI(pname, param);
      }

      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glGetTexBumpParameterivATI", Version = "1.2")]
      public static unsafe void GetTexBumpParameter(AtiEnvmapBumpmap pname, [Out] int[] param)
      {
        fixed (int* numPtr = param)
          GL.Delegates.glGetTexBumpParameterivATI(pname, numPtr);
      }

      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glGetTexBumpParameterivATI", Version = "1.2")]
      public static unsafe void GetTexBumpParameter(AtiEnvmapBumpmap pname, out int param)
      {
        fixed (int* numPtr = &param)
        {
          GL.Delegates.glGetTexBumpParameterivATI(pname, numPtr);
          param = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glGetTexBumpParameterivATI", Version = "1.2")]
      public static unsafe void GetTexBumpParameter(AtiEnvmapBumpmap pname, [Out] int* param)
      {
        GL.Delegates.glGetTexBumpParameterivATI(pname, param);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetVariantArrayObjectfvATI", Version = "1.2")]
      public static unsafe void GetVariantArrayObject(int id, AtiVertexArrayObject pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVariantArrayObjectfvATI((uint) id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetVariantArrayObjectfvATI", Version = "1.2")]
      public static unsafe void GetVariantArrayObject(int id, AtiVertexArrayObject pname, [Out] float* @params)
      {
        GL.Delegates.glGetVariantArrayObjectfvATI((uint) id, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetVariantArrayObjectfvATI", Version = "1.2")]
      public static unsafe void GetVariantArrayObject(uint id, AtiVertexArrayObject pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVariantArrayObjectfvATI(id, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetVariantArrayObjectfvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVariantArrayObject(uint id, AtiVertexArrayObject pname, [Out] float* @params)
      {
        GL.Delegates.glGetVariantArrayObjectfvATI(id, pname, @params);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetVariantArrayObjectivATI", Version = "1.2")]
      public static unsafe void GetVariantArrayObject(int id, AtiVertexArrayObject pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVariantArrayObjectivATI((uint) id, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetVariantArrayObjectivATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVariantArrayObject(int id, AtiVertexArrayObject pname, [Out] int* @params)
      {
        GL.Delegates.glGetVariantArrayObjectivATI((uint) id, pname, @params);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetVariantArrayObjectivATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVariantArrayObject(uint id, AtiVertexArrayObject pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVariantArrayObjectivATI(id, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glGetVariantArrayObjectivATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVariantArrayObject(uint id, AtiVertexArrayObject pname, [Out] int* @params)
      {
        GL.Delegates.glGetVariantArrayObjectivATI(id, pname, @params);
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectfvATI", Version = "1.2")]
      public static unsafe void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetVertexAttribArrayObjectfvATI((uint) index, pname, params1);
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectfvATI", Version = "1.2")]
      public static unsafe void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribArrayObjectfvATI((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectfvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, [Out] float* @params)
      {
        GL.Delegates.glGetVertexAttribArrayObjectfvATI((uint) index, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectfvATI", Version = "1.2")]
      public static unsafe void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectfvATI", Version = "1.2")]
      public static unsafe void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectfvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, [Out] float* @params)
      {
        GL.Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, @params);
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectivATI", Version = "1.2")]
      public static unsafe void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVertexAttribArrayObjectivATI((uint) index, pname, params1);
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectivATI", Version = "1.2")]
      public static unsafe void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribArrayObjectivATI((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectivATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribArrayObject(int index, AtiVertexAttribArrayObject pname, [Out] int* @params)
      {
        GL.Delegates.glGetVertexAttribArrayObjectivATI((uint) index, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectivATI", Version = "1.2")]
      public static unsafe void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVertexAttribArrayObjectivATI(index, pname, params1);
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectivATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribArrayObjectivATI(index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glGetVertexAttribArrayObjectivATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttribArrayObject(uint index, AtiVertexAttribArrayObject pname, [Out] int* @params)
      {
        GL.Delegates.glGetVertexAttribArrayObjectivATI(index, pname, @params);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glIsObjectBufferATI", Version = "1.2")]
      public static bool IsObjectBuffer(int buffer)
      {
        return GL.Delegates.glIsObjectBufferATI((uint) buffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glIsObjectBufferATI", Version = "1.2")]
      public static bool IsObjectBuffer(uint buffer)
      {
        return GL.Delegates.glIsObjectBufferATI(buffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_map_object_buffer", EntryPoint = "glMapObjectBufferATI", Version = "1.2")]
      public static IntPtr MapObjectBuffer(int buffer)
      {
        return GL.Delegates.glMapObjectBufferATI((uint) buffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_map_object_buffer", EntryPoint = "glMapObjectBufferATI", Version = "1.2")]
      public static IntPtr MapObjectBuffer(uint buffer)
      {
        return GL.Delegates.glMapObjectBufferATI(buffer);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glNewObjectBufferATI", Version = "1.2")]
      public static int NewObjectBuffer(int size, IntPtr pointer, AtiVertexArrayObject usage)
      {
        return GL.Delegates.glNewObjectBufferATI(size, pointer, usage);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glNewObjectBufferATI", Version = "1.2")]
      public static int NewObjectBuffer<T1>(int size, [In, Out] T1[] pointer, AtiVertexArrayObject usage) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glNewObjectBufferATI(size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glNewObjectBufferATI", Version = "1.2")]
      public static int NewObjectBuffer<T1>(int size, [In, Out] T1[,] pointer, AtiVertexArrayObject usage) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glNewObjectBufferATI(size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glNewObjectBufferATI", Version = "1.2")]
      public static int NewObjectBuffer<T1>(int size, [In, Out] T1[,,] pointer, AtiVertexArrayObject usage) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glNewObjectBufferATI(size, gcHandle.AddrOfPinnedObject(), usage);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glNewObjectBufferATI", Version = "1.2")]
      public static int NewObjectBuffer<T1>(int size, [In, Out] ref T1 pointer, AtiVertexArrayObject usage) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          int num = GL.Delegates.glNewObjectBufferATI(size, gcHandle.AddrOfPinnedObject(), usage);
          pointer = (T1) gcHandle.Target;
          return num;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3bATI", Version = "1.2")]
      public static void NormalStream3(AtiVertexStreams stream, byte nx, byte ny, byte nz)
      {
        GL.Delegates.glNormalStream3bATI(stream, (sbyte) nx, (sbyte) ny, (sbyte) nz);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3bATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void NormalStream3(AtiVertexStreams stream, sbyte nx, sbyte ny, sbyte nz)
      {
        GL.Delegates.glNormalStream3bATI(stream, nx, ny, nz);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3bvATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, byte[] coords)
      {
        fixed (byte* numPtr = coords)
          GL.Delegates.glNormalStream3bvATI(stream, (sbyte*) numPtr);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3bvATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, ref byte coords)
      {
        fixed (byte* numPtr = &coords)
          GL.Delegates.glNormalStream3bvATI(stream, (sbyte*) numPtr);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3bvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void NormalStream3(AtiVertexStreams stream, byte* coords)
      {
        GL.Delegates.glNormalStream3bvATI(stream, (sbyte*) coords);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3bvATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, sbyte[] coords)
      {
        fixed (sbyte* coords1 = coords)
          GL.Delegates.glNormalStream3bvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3bvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void NormalStream3(AtiVertexStreams stream, ref sbyte coords)
      {
        fixed (sbyte* coords1 = &coords)
          GL.Delegates.glNormalStream3bvATI(stream, coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3bvATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, sbyte* coords)
      {
        GL.Delegates.glNormalStream3bvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3dATI", Version = "1.2")]
      public static void NormalStream3(AtiVertexStreams stream, double nx, double ny, double nz)
      {
        GL.Delegates.glNormalStream3dATI(stream, nx, ny, nz);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3dvATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, double[] coords)
      {
        fixed (double* coords1 = coords)
          GL.Delegates.glNormalStream3dvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3dvATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, ref double coords)
      {
        fixed (double* coords1 = &coords)
          GL.Delegates.glNormalStream3dvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3dvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void NormalStream3(AtiVertexStreams stream, double* coords)
      {
        GL.Delegates.glNormalStream3dvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3fATI", Version = "1.2")]
      public static void NormalStream3(AtiVertexStreams stream, float nx, float ny, float nz)
      {
        GL.Delegates.glNormalStream3fATI(stream, nx, ny, nz);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3fvATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, float[] coords)
      {
        fixed (float* coords1 = coords)
          GL.Delegates.glNormalStream3fvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3fvATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, ref float coords)
      {
        fixed (float* coords1 = &coords)
          GL.Delegates.glNormalStream3fvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3fvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void NormalStream3(AtiVertexStreams stream, float* coords)
      {
        GL.Delegates.glNormalStream3fvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3iATI", Version = "1.2")]
      public static void NormalStream3(AtiVertexStreams stream, int nx, int ny, int nz)
      {
        GL.Delegates.glNormalStream3iATI(stream, nx, ny, nz);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3ivATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, int[] coords)
      {
        fixed (int* coords1 = coords)
          GL.Delegates.glNormalStream3ivATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3ivATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, ref int coords)
      {
        fixed (int* coords1 = &coords)
          GL.Delegates.glNormalStream3ivATI(stream, coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3ivATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, int* coords)
      {
        GL.Delegates.glNormalStream3ivATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3sATI", Version = "1.2")]
      public static void NormalStream3(AtiVertexStreams stream, short nx, short ny, short nz)
      {
        GL.Delegates.glNormalStream3sATI(stream, nx, ny, nz);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3svATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, short[] coords)
      {
        fixed (short* coords1 = coords)
          GL.Delegates.glNormalStream3svATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3svATI", Version = "1.2")]
      public static unsafe void NormalStream3(AtiVertexStreams stream, ref short coords)
      {
        fixed (short* coords1 = &coords)
          GL.Delegates.glNormalStream3svATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glNormalStream3svATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void NormalStream3(AtiVertexStreams stream, short* coords)
      {
        GL.Delegates.glNormalStream3svATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glPassTexCoordATI", Version = "1.2")]
      public static void PassTexCoord(int dst, int coord, AtiFragmentShader swizzle)
      {
        GL.Delegates.glPassTexCoordATI((uint) dst, (uint) coord, swizzle);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glPassTexCoordATI", Version = "1.2")]
      public static void PassTexCoord(uint dst, uint coord, AtiFragmentShader swizzle)
      {
        GL.Delegates.glPassTexCoordATI(dst, coord, swizzle);
      }

      [AutoGenerated(Category = "ATI_pn_triangles", EntryPoint = "glPNTrianglesfATI", Version = "1.2")]
      public static void PNTriangles(AtiPnTriangles pname, float param)
      {
        GL.Delegates.glPNTrianglesfATI(pname, param);
      }

      [AutoGenerated(Category = "ATI_pn_triangles", EntryPoint = "glPNTrianglesiATI", Version = "1.2")]
      public static void PNTriangles(AtiPnTriangles pname, int param)
      {
        GL.Delegates.glPNTrianglesiATI(pname, param);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glSampleMapATI", Version = "1.2")]
      public static void SampleMap(int dst, int interp, AtiFragmentShader swizzle)
      {
        GL.Delegates.glSampleMapATI((uint) dst, (uint) interp, swizzle);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glSampleMapATI", Version = "1.2")]
      public static void SampleMap(uint dst, uint interp, AtiFragmentShader swizzle)
      {
        GL.Delegates.glSampleMapATI(dst, interp, swizzle);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glSetFragmentShaderConstantATI", Version = "1.2")]
      public static unsafe void SetFragmentShaderConstant(int dst, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glSetFragmentShaderConstantATI((uint) dst, numPtr);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glSetFragmentShaderConstantATI", Version = "1.2")]
      public static unsafe void SetFragmentShaderConstant(int dst, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glSetFragmentShaderConstantATI((uint) dst, numPtr);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glSetFragmentShaderConstantATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void SetFragmentShaderConstant(int dst, float* value)
      {
        GL.Delegates.glSetFragmentShaderConstantATI((uint) dst, value);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glSetFragmentShaderConstantATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void SetFragmentShaderConstant(uint dst, float[] value)
      {
        fixed (float* numPtr = value)
          GL.Delegates.glSetFragmentShaderConstantATI(dst, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glSetFragmentShaderConstantATI", Version = "1.2")]
      public static unsafe void SetFragmentShaderConstant(uint dst, ref float value)
      {
        fixed (float* numPtr = &value)
          GL.Delegates.glSetFragmentShaderConstantATI(dst, numPtr);
      }

      [AutoGenerated(Category = "ATI_fragment_shader", EntryPoint = "glSetFragmentShaderConstantATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void SetFragmentShaderConstant(uint dst, float* value)
      {
        GL.Delegates.glSetFragmentShaderConstantATI(dst, value);
      }

      [AutoGenerated(Category = "ATI_separate_stencil", EntryPoint = "glStencilFuncSeparateATI", Version = "1.2")]
      public static void StencilFuncSeparate(StencilFunction frontfunc, StencilFunction backfunc, int @ref, int mask)
      {
        GL.Delegates.glStencilFuncSeparateATI(frontfunc, backfunc, @ref, (uint) mask);
      }

      [AutoGenerated(Category = "ATI_separate_stencil", EntryPoint = "glStencilFuncSeparateATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void StencilFuncSeparate(StencilFunction frontfunc, StencilFunction backfunc, int @ref, uint mask)
      {
        GL.Delegates.glStencilFuncSeparateATI(frontfunc, backfunc, @ref, mask);
      }

      [AutoGenerated(Category = "ATI_separate_stencil", EntryPoint = "glStencilOpSeparateATI", Version = "1.2")]
      public static void StencilOpSeparate(AtiSeparateStencil face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
      {
        GL.Delegates.glStencilOpSeparateATI(face, sfail, dpfail, dppass);
      }

      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glTexBumpParameterfvATI", Version = "1.2")]
      public static unsafe void TexBumpParameter(AtiEnvmapBumpmap pname, float[] param)
      {
        fixed (float* numPtr = param)
          GL.Delegates.glTexBumpParameterfvATI(pname, numPtr);
      }

      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glTexBumpParameterfvATI", Version = "1.2")]
      public static unsafe void TexBumpParameter(AtiEnvmapBumpmap pname, ref float param)
      {
        fixed (float* numPtr = &param)
          GL.Delegates.glTexBumpParameterfvATI(pname, numPtr);
      }

      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glTexBumpParameterfvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void TexBumpParameter(AtiEnvmapBumpmap pname, float* param)
      {
        GL.Delegates.glTexBumpParameterfvATI(pname, param);
      }

      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glTexBumpParameterivATI", Version = "1.2")]
      public static unsafe void TexBumpParameter(AtiEnvmapBumpmap pname, int[] param)
      {
        fixed (int* numPtr = param)
          GL.Delegates.glTexBumpParameterivATI(pname, numPtr);
      }

      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glTexBumpParameterivATI", Version = "1.2")]
      public static unsafe void TexBumpParameter(AtiEnvmapBumpmap pname, ref int param)
      {
        fixed (int* numPtr = &param)
          GL.Delegates.glTexBumpParameterivATI(pname, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_envmap_bumpmap", EntryPoint = "glTexBumpParameterivATI", Version = "1.2")]
      public static unsafe void TexBumpParameter(AtiEnvmapBumpmap pname, int* param)
      {
        GL.Delegates.glTexBumpParameterivATI(pname, param);
      }

      [AutoGenerated(Category = "ATI_map_object_buffer", EntryPoint = "glUnmapObjectBufferATI", Version = "1.2")]
      public static void UnmapObjectBuffer(int buffer)
      {
        GL.Delegates.glUnmapObjectBufferATI((uint) buffer);
      }

      [AutoGenerated(Category = "ATI_map_object_buffer", EntryPoint = "glUnmapObjectBufferATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void UnmapObjectBuffer(uint buffer)
      {
        GL.Delegates.glUnmapObjectBufferATI(buffer);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      public static void UpdateObjectBuffer(int buffer, int offset, int size, IntPtr pointer, AtiVertexArrayObject preserve)
      {
        GL.Delegates.glUpdateObjectBufferATI((uint) buffer, (uint) offset, size, pointer, preserve);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      public static void UpdateObjectBuffer<T3>(int buffer, int offset, int size, [In, Out] T3[] pointer, AtiVertexArrayObject preserve) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glUpdateObjectBufferATI((uint) buffer, (uint) offset, size, gcHandle.AddrOfPinnedObject(), preserve);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      public static void UpdateObjectBuffer<T3>(int buffer, int offset, int size, [In, Out] T3[,] pointer, AtiVertexArrayObject preserve) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glUpdateObjectBufferATI((uint) buffer, (uint) offset, size, gcHandle.AddrOfPinnedObject(), preserve);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      public static void UpdateObjectBuffer<T3>(int buffer, int offset, int size, [In, Out] T3[,,] pointer, AtiVertexArrayObject preserve) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glUpdateObjectBufferATI((uint) buffer, (uint) offset, size, gcHandle.AddrOfPinnedObject(), preserve);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      public static void UpdateObjectBuffer<T3>(int buffer, int offset, int size, [In, Out] ref T3 pointer, AtiVertexArrayObject preserve) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glUpdateObjectBufferATI((uint) buffer, (uint) offset, size, gcHandle.AddrOfPinnedObject(), preserve);
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      public static void UpdateObjectBuffer(uint buffer, uint offset, int size, IntPtr pointer, AtiVertexArrayObject preserve)
      {
        GL.Delegates.glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void UpdateObjectBuffer<T3>(uint buffer, uint offset, int size, [In, Out] T3[] pointer, AtiVertexArrayObject preserve) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glUpdateObjectBufferATI(buffer, offset, size, gcHandle.AddrOfPinnedObject(), preserve);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void UpdateObjectBuffer<T3>(uint buffer, uint offset, int size, [In, Out] T3[,] pointer, AtiVertexArrayObject preserve) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glUpdateObjectBufferATI(buffer, offset, size, gcHandle.AddrOfPinnedObject(), preserve);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static void UpdateObjectBuffer<T3>(uint buffer, uint offset, int size, [In, Out] T3[,,] pointer, AtiVertexArrayObject preserve) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glUpdateObjectBufferATI(buffer, offset, size, gcHandle.AddrOfPinnedObject(), preserve);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glUpdateObjectBufferATI", Version = "1.2")]
      public static void UpdateObjectBuffer<T3>(uint buffer, uint offset, int size, [In, Out] ref T3 pointer, AtiVertexArrayObject preserve) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glUpdateObjectBufferATI(buffer, offset, size, gcHandle.AddrOfPinnedObject(), preserve);
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glVariantArrayObjectATI", Version = "1.2")]
      public static void VariantArrayObject(int id, AtiVertexArrayObject type, int stride, int buffer, int offset)
      {
        GL.Delegates.glVariantArrayObjectATI((uint) id, type, stride, (uint) buffer, (uint) offset);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_array_object", EntryPoint = "glVariantArrayObjectATI", Version = "1.2")]
      public static void VariantArrayObject(uint id, AtiVertexArrayObject type, int stride, uint buffer, uint offset)
      {
        GL.Delegates.glVariantArrayObjectATI(id, type, stride, buffer, offset);
      }

      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glVertexAttribArrayObjectATI", Version = "1.2")]
      public static void VertexAttribArrayObject(int index, int size, AtiVertexAttribArrayObject type, bool normalized, int stride, int buffer, int offset)
      {
        GL.Delegates.glVertexAttribArrayObjectATI((uint) index, size, type, normalized, stride, (uint) buffer, (uint) offset);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_attrib_array_object", EntryPoint = "glVertexAttribArrayObjectATI", Version = "1.2")]
      public static void VertexAttribArrayObject(uint index, int size, AtiVertexAttribArrayObject type, bool normalized, int stride, uint buffer, uint offset)
      {
        GL.Delegates.glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexBlendEnvfATI", Version = "1.2")]
      public static void VertexBlendEnv(AtiVertexStreams pname, float param)
      {
        GL.Delegates.glVertexBlendEnvfATI(pname, param);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexBlendEnviATI", Version = "1.2")]
      public static void VertexBlendEnv(AtiVertexStreams pname, int param)
      {
        GL.Delegates.glVertexBlendEnviATI(pname, param);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream1dATI", Version = "1.2")]
      public static void VertexStream1(AtiVertexStreams stream, double x)
      {
        GL.Delegates.glVertexStream1dATI(stream, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream1dvATI", Version = "1.2")]
      public static unsafe void VertexStream1(AtiVertexStreams stream, double* coords)
      {
        GL.Delegates.glVertexStream1dvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream1fATI", Version = "1.2")]
      public static void VertexStream1(AtiVertexStreams stream, float x)
      {
        GL.Delegates.glVertexStream1fATI(stream, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream1fvATI", Version = "1.2")]
      public static unsafe void VertexStream1(AtiVertexStreams stream, float* coords)
      {
        GL.Delegates.glVertexStream1fvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream1iATI", Version = "1.2")]
      public static void VertexStream1(AtiVertexStreams stream, int x)
      {
        GL.Delegates.glVertexStream1iATI(stream, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream1ivATI", Version = "1.2")]
      public static unsafe void VertexStream1(AtiVertexStreams stream, int* coords)
      {
        GL.Delegates.glVertexStream1ivATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream1sATI", Version = "1.2")]
      public static void VertexStream1(AtiVertexStreams stream, short x)
      {
        GL.Delegates.glVertexStream1sATI(stream, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream1svATI", Version = "1.2")]
      public static unsafe void VertexStream1(AtiVertexStreams stream, short* coords)
      {
        GL.Delegates.glVertexStream1svATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2dATI", Version = "1.2")]
      public static void VertexStream2(AtiVertexStreams stream, double x, double y)
      {
        GL.Delegates.glVertexStream2dATI(stream, x, y);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2dvATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, double[] coords)
      {
        fixed (double* coords1 = coords)
          GL.Delegates.glVertexStream2dvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2dvATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, ref double coords)
      {
        fixed (double* coords1 = &coords)
          GL.Delegates.glVertexStream2dvATI(stream, coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2dvATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, double* coords)
      {
        GL.Delegates.glVertexStream2dvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2fATI", Version = "1.2")]
      public static void VertexStream2(AtiVertexStreams stream, float x, float y)
      {
        GL.Delegates.glVertexStream2fATI(stream, x, y);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2fvATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, float[] coords)
      {
        fixed (float* coords1 = coords)
          GL.Delegates.glVertexStream2fvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2fvATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, ref float coords)
      {
        fixed (float* coords1 = &coords)
          GL.Delegates.glVertexStream2fvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2fvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexStream2(AtiVertexStreams stream, float* coords)
      {
        GL.Delegates.glVertexStream2fvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2iATI", Version = "1.2")]
      public static void VertexStream2(AtiVertexStreams stream, int x, int y)
      {
        GL.Delegates.glVertexStream2iATI(stream, x, y);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2ivATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, int[] coords)
      {
        fixed (int* coords1 = coords)
          GL.Delegates.glVertexStream2ivATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2ivATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, ref int coords)
      {
        fixed (int* coords1 = &coords)
          GL.Delegates.glVertexStream2ivATI(stream, coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2ivATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, int* coords)
      {
        GL.Delegates.glVertexStream2ivATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2sATI", Version = "1.2")]
      public static void VertexStream2(AtiVertexStreams stream, short x, short y)
      {
        GL.Delegates.glVertexStream2sATI(stream, x, y);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2svATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, short[] coords)
      {
        fixed (short* coords1 = coords)
          GL.Delegates.glVertexStream2svATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2svATI", Version = "1.2")]
      public static unsafe void VertexStream2(AtiVertexStreams stream, ref short coords)
      {
        fixed (short* coords1 = &coords)
          GL.Delegates.glVertexStream2svATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream2svATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexStream2(AtiVertexStreams stream, short* coords)
      {
        GL.Delegates.glVertexStream2svATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3dATI", Version = "1.2")]
      public static void VertexStream3(AtiVertexStreams stream, double x, double y, double z)
      {
        GL.Delegates.glVertexStream3dATI(stream, x, y, z);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3dvATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, double[] coords)
      {
        fixed (double* coords1 = coords)
          GL.Delegates.glVertexStream3dvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3dvATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, ref double coords)
      {
        fixed (double* coords1 = &coords)
          GL.Delegates.glVertexStream3dvATI(stream, coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3dvATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, double* coords)
      {
        GL.Delegates.glVertexStream3dvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3fATI", Version = "1.2")]
      public static void VertexStream3(AtiVertexStreams stream, float x, float y, float z)
      {
        GL.Delegates.glVertexStream3fATI(stream, x, y, z);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3fvATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, float[] coords)
      {
        fixed (float* coords1 = coords)
          GL.Delegates.glVertexStream3fvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3fvATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, ref float coords)
      {
        fixed (float* coords1 = &coords)
          GL.Delegates.glVertexStream3fvATI(stream, coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3fvATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, float* coords)
      {
        GL.Delegates.glVertexStream3fvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3iATI", Version = "1.2")]
      public static void VertexStream3(AtiVertexStreams stream, int x, int y, int z)
      {
        GL.Delegates.glVertexStream3iATI(stream, x, y, z);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3ivATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, int[] coords)
      {
        fixed (int* coords1 = coords)
          GL.Delegates.glVertexStream3ivATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3ivATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, ref int coords)
      {
        fixed (int* coords1 = &coords)
          GL.Delegates.glVertexStream3ivATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3ivATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexStream3(AtiVertexStreams stream, int* coords)
      {
        GL.Delegates.glVertexStream3ivATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3sATI", Version = "1.2")]
      public static void VertexStream3(AtiVertexStreams stream, short x, short y, short z)
      {
        GL.Delegates.glVertexStream3sATI(stream, x, y, z);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3svATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, short[] coords)
      {
        fixed (short* coords1 = coords)
          GL.Delegates.glVertexStream3svATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3svATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, ref short coords)
      {
        fixed (short* coords1 = &coords)
          GL.Delegates.glVertexStream3svATI(stream, coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream3svATI", Version = "1.2")]
      public static unsafe void VertexStream3(AtiVertexStreams stream, short* coords)
      {
        GL.Delegates.glVertexStream3svATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4dATI", Version = "1.2")]
      public static void VertexStream4(AtiVertexStreams stream, double x, double y, double z, double w)
      {
        GL.Delegates.glVertexStream4dATI(stream, x, y, z, w);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4dvATI", Version = "1.2")]
      public static unsafe void VertexStream4(AtiVertexStreams stream, double[] coords)
      {
        fixed (double* coords1 = coords)
          GL.Delegates.glVertexStream4dvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4dvATI", Version = "1.2")]
      public static unsafe void VertexStream4(AtiVertexStreams stream, ref double coords)
      {
        fixed (double* coords1 = &coords)
          GL.Delegates.glVertexStream4dvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4dvATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexStream4(AtiVertexStreams stream, double* coords)
      {
        GL.Delegates.glVertexStream4dvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4fATI", Version = "1.2")]
      public static void VertexStream4(AtiVertexStreams stream, float x, float y, float z, float w)
      {
        GL.Delegates.glVertexStream4fATI(stream, x, y, z, w);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4fvATI", Version = "1.2")]
      public static unsafe void VertexStream4(AtiVertexStreams stream, float[] coords)
      {
        fixed (float* coords1 = coords)
          GL.Delegates.glVertexStream4fvATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4fvATI", Version = "1.2")]
      public static unsafe void VertexStream4(AtiVertexStreams stream, ref float coords)
      {
        fixed (float* coords1 = &coords)
          GL.Delegates.glVertexStream4fvATI(stream, coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4fvATI", Version = "1.2")]
      public static unsafe void VertexStream4(AtiVertexStreams stream, float* coords)
      {
        GL.Delegates.glVertexStream4fvATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4iATI", Version = "1.2")]
      public static void VertexStream4(AtiVertexStreams stream, int x, int y, int z, int w)
      {
        GL.Delegates.glVertexStream4iATI(stream, x, y, z, w);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4ivATI", Version = "1.2")]
      public static unsafe void VertexStream4(AtiVertexStreams stream, int[] coords)
      {
        fixed (int* coords1 = coords)
          GL.Delegates.glVertexStream4ivATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4ivATI", Version = "1.2")]
      public static unsafe void VertexStream4(AtiVertexStreams stream, ref int coords)
      {
        fixed (int* coords1 = &coords)
          GL.Delegates.glVertexStream4ivATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4ivATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexStream4(AtiVertexStreams stream, int* coords)
      {
        GL.Delegates.glVertexStream4ivATI(stream, coords);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4sATI", Version = "1.2")]
      public static void VertexStream4(AtiVertexStreams stream, short x, short y, short z, short w)
      {
        GL.Delegates.glVertexStream4sATI(stream, x, y, z, w);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4svATI", Version = "1.2")]
      public static unsafe void VertexStream4(AtiVertexStreams stream, short[] coords)
      {
        fixed (short* coords1 = coords)
          GL.Delegates.glVertexStream4svATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4svATI", Version = "1.2")]
      public static unsafe void VertexStream4(AtiVertexStreams stream, ref short coords)
      {
        fixed (short* coords1 = &coords)
          GL.Delegates.glVertexStream4svATI(stream, coords1);
      }

      [AutoGenerated(Category = "ATI_vertex_streams", EntryPoint = "glVertexStream4svATI", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexStream4(AtiVertexStreams stream, short* coords)
      {
        GL.Delegates.glVertexStream4svATI(stream, coords);
      }
    }

    public static class Gremedy
    {
      [AutoGenerated(Category = "GREMEDY_frame_terminator", EntryPoint = "glFrameTerminatorGREMEDY", Version = "1.0")]
      public static void FrameTerminator()
      {
        GL.Delegates.glFrameTerminatorGREMEDY();
      }

      [AutoGenerated(Category = "GREMEDY_string_marker", EntryPoint = "glStringMarkerGREMEDY", Version = "1.0")]
      public static void StringMarker(int len, IntPtr @string)
      {
        GL.Delegates.glStringMarkerGREMEDY(len, @string);
      }

      [AutoGenerated(Category = "GREMEDY_string_marker", EntryPoint = "glStringMarkerGREMEDY", Version = "1.0")]
      public static void StringMarker<T1>(int len, [In, Out] T1[] @string) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glStringMarkerGREMEDY(len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "GREMEDY_string_marker", EntryPoint = "glStringMarkerGREMEDY", Version = "1.0")]
      public static void StringMarker<T1>(int len, [In, Out] T1[,] @string) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glStringMarkerGREMEDY(len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "GREMEDY_string_marker", EntryPoint = "glStringMarkerGREMEDY", Version = "1.0")]
      public static void StringMarker<T1>(int len, [In, Out] T1[,,] @string) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glStringMarkerGREMEDY(len, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "GREMEDY_string_marker", EntryPoint = "glStringMarkerGREMEDY", Version = "1.0")]
      public static void StringMarker<T1>(int len, [In, Out] ref T1 @string) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @string, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glStringMarkerGREMEDY(len, gcHandle.AddrOfPinnedObject());
          @string = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    public static class HP
    {
      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glGetImageTransformParameterfvHP", Version = "1.1")]
      public static unsafe void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetImageTransformParameterfvHP(target, pname, params1);
      }

      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glGetImageTransformParameterfvHP", Version = "1.1")]
      public static unsafe void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetImageTransformParameterfvHP(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glGetImageTransformParameterfvHP", Version = "1.1")]
      public static unsafe void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, [Out] float* @params)
      {
        GL.Delegates.glGetImageTransformParameterfvHP(target, pname, @params);
      }

      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glGetImageTransformParameterivHP", Version = "1.1")]
      public static unsafe void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetImageTransformParameterivHP(target, pname, params1);
      }

      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glGetImageTransformParameterivHP", Version = "1.1")]
      public static unsafe void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetImageTransformParameterivHP(target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glGetImageTransformParameterivHP", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetImageTransformParameter(HpImageTransform target, HpImageTransform pname, [Out] int* @params)
      {
        GL.Delegates.glGetImageTransformParameterivHP(target, pname, @params);
      }

      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glImageTransformParameterfHP", Version = "1.1")]
      public static void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, float param)
      {
        GL.Delegates.glImageTransformParameterfHP(target, pname, param);
      }

      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glImageTransformParameterfvHP", Version = "1.1")]
      public static unsafe void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glImageTransformParameterfvHP(target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glImageTransformParameterfvHP", Version = "1.1")]
      public static unsafe void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, float* @params)
      {
        GL.Delegates.glImageTransformParameterfvHP(target, pname, @params);
      }

      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glImageTransformParameteriHP", Version = "1.1")]
      public static void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, int param)
      {
        GL.Delegates.glImageTransformParameteriHP(target, pname, param);
      }

      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glImageTransformParameterivHP", Version = "1.1")]
      public static unsafe void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glImageTransformParameterivHP(target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "HP_image_transform", EntryPoint = "glImageTransformParameterivHP", Version = "1.1")]
      public static unsafe void ImageTransformParameter(HpImageTransform target, HpImageTransform pname, int* @params)
      {
        GL.Delegates.glImageTransformParameterivHP(target, pname, @params);
      }
    }

    public static class Ibm
    {
      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glColorPointerListIBM", Version = "1.1")]
      public static void ColorPointerList(int size, ColorPointerType type, int stride, IntPtr pointer, int ptrstride)
      {
        GL.Delegates.glColorPointerListIBM(size, type, stride, pointer, ptrstride);
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glColorPointerListIBM", Version = "1.1")]
      public static void ColorPointerList<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glColorPointerListIBM", Version = "1.1")]
      public static void ColorPointerList<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[,] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glColorPointerListIBM", Version = "1.1")]
      public static void ColorPointerList<T3>(int size, ColorPointerType type, int stride, [In, Out] T3[,,] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glColorPointerListIBM", Version = "1.1")]
      public static void ColorPointerList<T3>(int size, ColorPointerType type, int stride, [In, Out] ref T3 pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glEdgeFlagPointerListIBM", Version = "1.1")]
      public static unsafe void EdgeFlagPointerList(int stride, bool[] pointer, int ptrstride)
      {
        fixed (bool* pointer1 = pointer)
          GL.Delegates.glEdgeFlagPointerListIBM(stride, pointer1, ptrstride);
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glEdgeFlagPointerListIBM", Version = "1.1")]
      public static unsafe void EdgeFlagPointerList(int stride, ref bool pointer, int ptrstride)
      {
        fixed (bool* pointer1 = &pointer)
          GL.Delegates.glEdgeFlagPointerListIBM(stride, pointer1, ptrstride);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glEdgeFlagPointerListIBM", Version = "1.1")]
      public static unsafe void EdgeFlagPointerList(int stride, bool* pointer, int ptrstride)
      {
        GL.Delegates.glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glFogCoordPointerListIBM", Version = "1.1")]
      public static void FogCoordPointerList(IbmVertexArrayLists type, int stride, IntPtr pointer, int ptrstride)
      {
        GL.Delegates.glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glFogCoordPointerListIBM", Version = "1.1")]
      public static void FogCoordPointerList<T2>(IbmVertexArrayLists type, int stride, [In, Out] T2[] pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFogCoordPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glFogCoordPointerListIBM", Version = "1.1")]
      public static void FogCoordPointerList<T2>(IbmVertexArrayLists type, int stride, [In, Out] T2[,] pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFogCoordPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glFogCoordPointerListIBM", Version = "1.1")]
      public static void FogCoordPointerList<T2>(IbmVertexArrayLists type, int stride, [In, Out] T2[,,] pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFogCoordPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glFogCoordPointerListIBM", Version = "1.1")]
      public static void FogCoordPointerList<T2>(IbmVertexArrayLists type, int stride, [In, Out] ref T2 pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glFogCoordPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glIndexPointerListIBM", Version = "1.1")]
      public static void IndexPointerList(IndexPointerType type, int stride, IntPtr pointer, int ptrstride)
      {
        GL.Delegates.glIndexPointerListIBM(type, stride, pointer, ptrstride);
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glIndexPointerListIBM", Version = "1.1")]
      public static void IndexPointerList<T2>(IndexPointerType type, int stride, [In, Out] T2[] pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIndexPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glIndexPointerListIBM", Version = "1.1")]
      public static void IndexPointerList<T2>(IndexPointerType type, int stride, [In, Out] T2[,] pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIndexPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glIndexPointerListIBM", Version = "1.1")]
      public static void IndexPointerList<T2>(IndexPointerType type, int stride, [In, Out] T2[,,] pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIndexPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glIndexPointerListIBM", Version = "1.1")]
      public static void IndexPointerList<T2>(IndexPointerType type, int stride, [In, Out] ref T2 pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIndexPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawArraysIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawArrays(BeginMode[] mode, int[] first, int[] count, int primcount, int modestride)
      {
        fixed (BeginMode* mode1 = mode)
          fixed (int* first1 = first)
            fixed (int* count1 = count)
              GL.Delegates.glMultiModeDrawArraysIBM(mode1, first1, count1, primcount, modestride);
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawArraysIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawArrays(ref BeginMode mode, ref int first, ref int count, int primcount, int modestride)
      {
        fixed (BeginMode* mode1 = &mode)
          fixed (int* first1 = &first)
            fixed (int* count1 = &count)
              GL.Delegates.glMultiModeDrawArraysIBM(mode1, first1, count1, primcount, modestride);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawArraysIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawArrays(BeginMode* mode, int* first, int* count, int primcount, int modestride)
      {
        GL.Delegates.glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements(BeginMode[] mode, int[] count, DrawElementsType type, IntPtr indices, int primcount, int modestride)
      {
        fixed (BeginMode* mode1 = mode)
          fixed (int* count1 = count)
            GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, indices, primcount, modestride);
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type, [In, Out] T3[] indices, int primcount, int modestride) where T3 : struct
      {
        fixed (BeginMode* mode1 = mode)
          fixed (int* count1 = count)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type, [In, Out] T3[,] indices, int primcount, int modestride) where T3 : struct
      {
        fixed (BeginMode* mode1 = mode)
          fixed (int* count1 = count)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount, int modestride) where T3 : struct
      {
        fixed (BeginMode* mode1 = mode)
          fixed (int* count1 = count)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(BeginMode[] mode, int[] count, DrawElementsType type, [In, Out] ref T3 indices, int primcount, int modestride) where T3 : struct
      {
        fixed (BeginMode* mode1 = mode)
          fixed (int* count1 = count)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
              indices = (T3) gcHandle.Target;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements(ref BeginMode mode, ref int count, DrawElementsType type, IntPtr indices, int primcount, int modestride)
      {
        fixed (BeginMode* mode1 = &mode)
          fixed (int* count1 = &count)
            GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, indices, primcount, modestride);
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[] indices, int primcount, int modestride) where T3 : struct
      {
        fixed (BeginMode* mode1 = &mode)
          fixed (int* count1 = &count)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[,] indices, int primcount, int modestride) where T3 : struct
      {
        fixed (BeginMode* mode1 = &mode)
          fixed (int* count1 = &count)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount, int modestride) where T3 : struct
      {
        fixed (BeginMode* mode1 = &mode)
          fixed (int* count1 = &count)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(ref BeginMode mode, ref int count, DrawElementsType type, [In, Out] ref T3 indices, int primcount, int modestride) where T3 : struct
      {
        fixed (BeginMode* mode1 = &mode)
          fixed (int* count1 = &count)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glMultiModeDrawElementsIBM(mode1, count1, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
              indices = (T3) gcHandle.Target;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements(BeginMode* mode, int* count, DrawElementsType type, IntPtr indices, int primcount, int modestride)
      {
        GL.Delegates.glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type, [In, Out] T3[] indices, int primcount, int modestride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiModeDrawElementsIBM(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type, [In, Out] T3[,] indices, int primcount, int modestride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiModeDrawElementsIBM(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      public static unsafe void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type, [In, Out] T3[,,] indices, int primcount, int modestride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiModeDrawElementsIBM(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_multimode_draw_arrays", EntryPoint = "glMultiModeDrawElementsIBM", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MultiModeDrawElements<T3>(BeginMode* mode, int* count, DrawElementsType type, [In, Out] ref T3 indices, int primcount, int modestride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiModeDrawElementsIBM(mode, count, type, gcHandle.AddrOfPinnedObject(), primcount, modestride);
          indices = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glNormalPointerListIBM", Version = "1.1")]
      public static void NormalPointerList(NormalPointerType type, int stride, IntPtr pointer, int ptrstride)
      {
        GL.Delegates.glNormalPointerListIBM(type, stride, pointer, ptrstride);
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glNormalPointerListIBM", Version = "1.1")]
      public static void NormalPointerList<T2>(NormalPointerType type, int stride, [In, Out] T2[] pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glNormalPointerListIBM", Version = "1.1")]
      public static void NormalPointerList<T2>(NormalPointerType type, int stride, [In, Out] T2[,] pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glNormalPointerListIBM", Version = "1.1")]
      public static void NormalPointerList<T2>(NormalPointerType type, int stride, [In, Out] T2[,,] pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glNormalPointerListIBM", Version = "1.1")]
      public static void NormalPointerList<T2>(NormalPointerType type, int stride, [In, Out] ref T2 pointer, int ptrstride) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointerListIBM(type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glSecondaryColorPointerListIBM", Version = "1.1")]
      public static void SecondaryColorPointerList(int size, IbmVertexArrayLists type, int stride, IntPtr pointer, int ptrstride)
      {
        GL.Delegates.glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glSecondaryColorPointerListIBM", Version = "1.1")]
      public static void SecondaryColorPointerList<T3>(int size, IbmVertexArrayLists type, int stride, [In, Out] T3[] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSecondaryColorPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glSecondaryColorPointerListIBM", Version = "1.1")]
      public static void SecondaryColorPointerList<T3>(int size, IbmVertexArrayLists type, int stride, [In, Out] T3[,] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSecondaryColorPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glSecondaryColorPointerListIBM", Version = "1.1")]
      public static void SecondaryColorPointerList<T3>(int size, IbmVertexArrayLists type, int stride, [In, Out] T3[,,] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSecondaryColorPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glSecondaryColorPointerListIBM", Version = "1.1")]
      public static void SecondaryColorPointerList<T3>(int size, IbmVertexArrayLists type, int stride, [In, Out] ref T3 pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glSecondaryColorPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glTexCoordPointerListIBM", Version = "1.1")]
      public static void TexCoordPointerList(int size, TexCoordPointerType type, int stride, IntPtr pointer, int ptrstride)
      {
        GL.Delegates.glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glTexCoordPointerListIBM", Version = "1.1")]
      public static void TexCoordPointerList<T3>(int size, TexCoordPointerType type, int stride, [In, Out] T3[] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glTexCoordPointerListIBM", Version = "1.1")]
      public static void TexCoordPointerList<T3>(int size, TexCoordPointerType type, int stride, [In, Out] T3[,] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glTexCoordPointerListIBM", Version = "1.1")]
      public static void TexCoordPointerList<T3>(int size, TexCoordPointerType type, int stride, [In, Out] T3[,,] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glTexCoordPointerListIBM", Version = "1.1")]
      public static void TexCoordPointerList<T3>(int size, TexCoordPointerType type, int stride, [In, Out] ref T3 pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glVertexPointerListIBM", Version = "1.1")]
      public static void VertexPointerList(int size, VertexPointerType type, int stride, IntPtr pointer, int ptrstride)
      {
        GL.Delegates.glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glVertexPointerListIBM", Version = "1.1")]
      public static void VertexPointerList<T3>(int size, VertexPointerType type, int stride, [In, Out] T3[] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glVertexPointerListIBM", Version = "1.1")]
      public static void VertexPointerList<T3>(int size, VertexPointerType type, int stride, [In, Out] T3[,] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glVertexPointerListIBM", Version = "1.1")]
      public static void VertexPointerList<T3>(int size, VertexPointerType type, int stride, [In, Out] T3[,,] pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "IBM_vertex_array_lists", EntryPoint = "glVertexPointerListIBM", Version = "1.1")]
      public static void VertexPointerList<T3>(int size, VertexPointerType type, int stride, [In, Out] ref T3 pointer, int ptrstride) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointerListIBM(size, type, stride, gcHandle.AddrOfPinnedObject(), ptrstride);
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    public static class Ingr
    {
      [AutoGenerated(Category = "INGR_blend_func_separate", EntryPoint = "glBlendFuncSeparateINGR", Version = "1.0")]
      public static void BlendFuncSeparate(All sfactorRGB, All dfactorRGB, All sfactorAlpha, All dfactorAlpha)
      {
        GL.Delegates.glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
      }
    }

    public static class Intel
    {
      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glColorPointervINTEL", Version = "1.1")]
      public static void ColorPointer(int size, VertexPointerType type, IntPtr pointer)
      {
        GL.Delegates.glColorPointervINTEL(size, type, pointer);
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glColorPointervINTEL", Version = "1.1")]
      public static void ColorPointer<T2>(int size, VertexPointerType type, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glColorPointervINTEL", Version = "1.1")]
      public static void ColorPointer<T2>(int size, VertexPointerType type, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glColorPointervINTEL", Version = "1.1")]
      public static void ColorPointer<T2>(int size, VertexPointerType type, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glColorPointervINTEL", Version = "1.1")]
      public static void ColorPointer<T2>(int size, VertexPointerType type, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glNormalPointervINTEL", Version = "1.1")]
      public static void NormalPointer(NormalPointerType type, IntPtr pointer)
      {
        GL.Delegates.glNormalPointervINTEL(type, pointer);
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glNormalPointervINTEL", Version = "1.1")]
      public static void NormalPointer<T1>(NormalPointerType type, [In, Out] T1[] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointervINTEL(type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glNormalPointervINTEL", Version = "1.1")]
      public static void NormalPointer<T1>(NormalPointerType type, [In, Out] T1[,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointervINTEL(type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glNormalPointervINTEL", Version = "1.1")]
      public static void NormalPointer<T1>(NormalPointerType type, [In, Out] T1[,,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointervINTEL(type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glNormalPointervINTEL", Version = "1.1")]
      public static void NormalPointer<T1>(NormalPointerType type, [In, Out] ref T1 pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glNormalPointervINTEL(type, gcHandle.AddrOfPinnedObject());
          pointer = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glTexCoordPointervINTEL", Version = "1.1")]
      public static void TexCoordPointer(int size, VertexPointerType type, IntPtr pointer)
      {
        GL.Delegates.glTexCoordPointervINTEL(size, type, pointer);
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glTexCoordPointervINTEL", Version = "1.1")]
      public static void TexCoordPointer<T2>(int size, VertexPointerType type, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glTexCoordPointervINTEL", Version = "1.1")]
      public static void TexCoordPointer<T2>(int size, VertexPointerType type, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glTexCoordPointervINTEL", Version = "1.1")]
      public static void TexCoordPointer<T2>(int size, VertexPointerType type, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glTexCoordPointervINTEL", Version = "1.1")]
      public static void TexCoordPointer<T2>(int size, VertexPointerType type, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexCoordPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glVertexPointervINTEL", Version = "1.1")]
      public static void VertexPointer(int size, VertexPointerType type, IntPtr pointer)
      {
        GL.Delegates.glVertexPointervINTEL(size, type, pointer);
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glVertexPointervINTEL", Version = "1.1")]
      public static void VertexPointer<T2>(int size, VertexPointerType type, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glVertexPointervINTEL", Version = "1.1")]
      public static void VertexPointer<T2>(int size, VertexPointerType type, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glVertexPointervINTEL", Version = "1.1")]
      public static void VertexPointer<T2>(int size, VertexPointerType type, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "INTEL_parallel_arrays", EntryPoint = "glVertexPointervINTEL", Version = "1.1")]
      public static void VertexPointer<T2>(int size, VertexPointerType type, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexPointervINTEL(size, type, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    public static class Mesa
    {
      [AutoGenerated(Category = "MESA_resize_buffers", EntryPoint = "glResizeBuffersMESA", Version = "1.0")]
      public static void ResizeBuffers()
      {
        GL.Delegates.glResizeBuffersMESA();
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2dMESA", Version = "1.0")]
      public static void WindowPos2(double x, double y)
      {
        GL.Delegates.glWindowPos2dMESA(x, y);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2dvMESA", Version = "1.0")]
      public static unsafe void WindowPos2(double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glWindowPos2dvMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2dvMESA", Version = "1.0")]
      public static unsafe void WindowPos2(ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glWindowPos2dvMESA(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2dvMESA", Version = "1.0")]
      public static unsafe void WindowPos2(double* v)
      {
        GL.Delegates.glWindowPos2dvMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2fMESA", Version = "1.0")]
      public static void WindowPos2(float x, float y)
      {
        GL.Delegates.glWindowPos2fMESA(x, y);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2fvMESA", Version = "1.0")]
      public static unsafe void WindowPos2(float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glWindowPos2fvMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2fvMESA", Version = "1.0")]
      public static unsafe void WindowPos2(ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glWindowPos2fvMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2fvMESA", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void WindowPos2(float* v)
      {
        GL.Delegates.glWindowPos2fvMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2iMESA", Version = "1.0")]
      public static void WindowPos2(int x, int y)
      {
        GL.Delegates.glWindowPos2iMESA(x, y);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2ivMESA", Version = "1.0")]
      public static unsafe void WindowPos2(int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glWindowPos2ivMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2ivMESA", Version = "1.0")]
      public static unsafe void WindowPos2(ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glWindowPos2ivMESA(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2ivMESA", Version = "1.0")]
      public static unsafe void WindowPos2(int* v)
      {
        GL.Delegates.glWindowPos2ivMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2sMESA", Version = "1.0")]
      public static void WindowPos2(short x, short y)
      {
        GL.Delegates.glWindowPos2sMESA(x, y);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2svMESA", Version = "1.0")]
      public static unsafe void WindowPos2(short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glWindowPos2svMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2svMESA", Version = "1.0")]
      public static unsafe void WindowPos2(ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glWindowPos2svMESA(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos2svMESA", Version = "1.0")]
      public static unsafe void WindowPos2(short* v)
      {
        GL.Delegates.glWindowPos2svMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3dMESA", Version = "1.0")]
      public static void WindowPos3(double x, double y, double z)
      {
        GL.Delegates.glWindowPos3dMESA(x, y, z);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3dvMESA", Version = "1.0")]
      public static unsafe void WindowPos3(double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glWindowPos3dvMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3dvMESA", Version = "1.0")]
      public static unsafe void WindowPos3(ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glWindowPos3dvMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3dvMESA", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void WindowPos3(double* v)
      {
        GL.Delegates.glWindowPos3dvMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3fMESA", Version = "1.0")]
      public static void WindowPos3(float x, float y, float z)
      {
        GL.Delegates.glWindowPos3fMESA(x, y, z);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3fvMESA", Version = "1.0")]
      public static unsafe void WindowPos3(float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glWindowPos3fvMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3fvMESA", Version = "1.0")]
      public static unsafe void WindowPos3(ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glWindowPos3fvMESA(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3fvMESA", Version = "1.0")]
      public static unsafe void WindowPos3(float* v)
      {
        GL.Delegates.glWindowPos3fvMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3iMESA", Version = "1.0")]
      public static void WindowPos3(int x, int y, int z)
      {
        GL.Delegates.glWindowPos3iMESA(x, y, z);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3ivMESA", Version = "1.0")]
      public static unsafe void WindowPos3(int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glWindowPos3ivMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3ivMESA", Version = "1.0")]
      public static unsafe void WindowPos3(ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glWindowPos3ivMESA(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3ivMESA", Version = "1.0")]
      public static unsafe void WindowPos3(int* v)
      {
        GL.Delegates.glWindowPos3ivMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3sMESA", Version = "1.0")]
      public static void WindowPos3(short x, short y, short z)
      {
        GL.Delegates.glWindowPos3sMESA(x, y, z);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3svMESA", Version = "1.0")]
      public static unsafe void WindowPos3(short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glWindowPos3svMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3svMESA", Version = "1.0")]
      public static unsafe void WindowPos3(ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glWindowPos3svMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos3svMESA", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void WindowPos3(short* v)
      {
        GL.Delegates.glWindowPos3svMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4dMESA", Version = "1.0")]
      public static void WindowPos4(double x, double y, double z, double w)
      {
        GL.Delegates.glWindowPos4dMESA(x, y, z, w);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4dvMESA", Version = "1.0")]
      public static unsafe void WindowPos4(double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glWindowPos4dvMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4dvMESA", Version = "1.0")]
      public static unsafe void WindowPos4(ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glWindowPos4dvMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4dvMESA", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void WindowPos4(double* v)
      {
        GL.Delegates.glWindowPos4dvMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4fMESA", Version = "1.0")]
      public static void WindowPos4(float x, float y, float z, float w)
      {
        GL.Delegates.glWindowPos4fMESA(x, y, z, w);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4fvMESA", Version = "1.0")]
      public static unsafe void WindowPos4(float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glWindowPos4fvMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4fvMESA", Version = "1.0")]
      public static unsafe void WindowPos4(ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glWindowPos4fvMESA(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4fvMESA", Version = "1.0")]
      public static unsafe void WindowPos4(float* v)
      {
        GL.Delegates.glWindowPos4fvMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4iMESA", Version = "1.0")]
      public static void WindowPos4(int x, int y, int z, int w)
      {
        GL.Delegates.glWindowPos4iMESA(x, y, z, w);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4ivMESA", Version = "1.0")]
      public static unsafe void WindowPos4(int[] v)
      {
        fixed (int* v1 = v)
          GL.Delegates.glWindowPos4ivMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4ivMESA", Version = "1.0")]
      public static unsafe void WindowPos4(ref int v)
      {
        fixed (int* v1 = &v)
          GL.Delegates.glWindowPos4ivMESA(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4ivMESA", Version = "1.0")]
      public static unsafe void WindowPos4(int* v)
      {
        GL.Delegates.glWindowPos4ivMESA(v);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4sMESA", Version = "1.0")]
      public static void WindowPos4(short x, short y, short z, short w)
      {
        GL.Delegates.glWindowPos4sMESA(x, y, z, w);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4svMESA", Version = "1.0")]
      public static unsafe void WindowPos4(short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glWindowPos4svMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4svMESA", Version = "1.0")]
      public static unsafe void WindowPos4(ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glWindowPos4svMESA(v1);
      }

      [AutoGenerated(Category = "MESA_window_pos", EntryPoint = "glWindowPos4svMESA", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void WindowPos4(short* v)
      {
        GL.Delegates.glWindowPos4svMESA(v);
      }
    }

    public static class NV
    {
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glActiveVaryingNV", Version = "1.5")]
      public static void ActiveVarying(int program, string name)
      {
        GL.Delegates.glActiveVaryingNV((uint) program, name);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glActiveVaryingNV", Version = "1.5")]
      public static void ActiveVarying(uint program, string name)
      {
        GL.Delegates.glActiveVaryingNV(program, name);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glAreProgramsResidentNV", Version = "1.2")]
      public static unsafe bool AreProgramsResident(int n, int[] programs, [Out] bool[] residences)
      {
        fixed (int* numPtr = programs)
          fixed (bool* residences1 = residences)
            return GL.Delegates.glAreProgramsResidentNV(n, (uint*) numPtr, residences1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glAreProgramsResidentNV", Version = "1.2")]
      public static unsafe bool AreProgramsResident(int n, ref int programs, out bool residences)
      {
        fixed (int* numPtr = &programs)
          fixed (bool* residences1 = &residences)
          {
            bool flag = GL.Delegates.glAreProgramsResidentNV(n, (uint*) numPtr, residences1);
            residences = *residences1;
            return flag;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glAreProgramsResidentNV", Version = "1.2")]
      public static unsafe bool AreProgramsResident(int n, int* programs, [Out] bool* residences)
      {
        return GL.Delegates.glAreProgramsResidentNV(n, (uint*) programs, residences);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glAreProgramsResidentNV", Version = "1.2")]
      public static unsafe bool AreProgramsResident(int n, uint[] programs, [Out] bool[] residences)
      {
        fixed (uint* programs1 = programs)
          fixed (bool* residences1 = residences)
            return GL.Delegates.glAreProgramsResidentNV(n, programs1, residences1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glAreProgramsResidentNV", Version = "1.2")]
      public static unsafe bool AreProgramsResident(int n, ref uint programs, out bool residences)
      {
        fixed (uint* programs1 = &programs)
          fixed (bool* residences1 = &residences)
          {
            bool flag = GL.Delegates.glAreProgramsResidentNV(n, programs1, residences1);
            residences = *residences1;
            return flag;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glAreProgramsResidentNV", Version = "1.2")]
      public static unsafe bool AreProgramsResident(int n, uint* programs, [Out] bool* residences)
      {
        return GL.Delegates.glAreProgramsResidentNV(n, programs, residences);
      }

      [AutoGenerated(Category = "NV_conditional_render", EntryPoint = "glBeginConditionalRenderNV", Version = "")]
      public static void BeginConditionalRender(int id, NvConditionalRender mode)
      {
        GL.Delegates.glBeginConditionalRenderNV((uint) id, mode);
      }

      [AutoGenerated(Category = "NV_conditional_render", EntryPoint = "glBeginConditionalRenderNV", Version = "")]
      [CLSCompliant(false)]
      public static void BeginConditionalRender(uint id, NvConditionalRender mode)
      {
        GL.Delegates.glBeginConditionalRenderNV(id, mode);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glBeginOcclusionQueryNV", Version = "1.2")]
      public static void BeginOcclusionQuery(int id)
      {
        GL.Delegates.glBeginOcclusionQueryNV((uint) id);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glBeginOcclusionQueryNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BeginOcclusionQuery(uint id)
      {
        GL.Delegates.glBeginOcclusionQueryNV(id);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glBeginTransformFeedbackNV", Version = "1.5")]
      public static void BeginTransformFeedback(NvTransformFeedback primitiveMode)
      {
        GL.Delegates.glBeginTransformFeedbackNV(primitiveMode);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glBeginVideoCaptureNV", Version = "1.2")]
      public static void BeginVideoCapture(int video_capture_slot)
      {
        GL.Delegates.glBeginVideoCaptureNV((uint) video_capture_slot);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glBeginVideoCaptureNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BeginVideoCapture(uint video_capture_slot)
      {
        GL.Delegates.glBeginVideoCaptureNV(video_capture_slot);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glBindBufferBaseNV", Version = "1.5")]
      public static void BindBufferBase(NvTransformFeedback target, int index, int buffer)
      {
        GL.Delegates.glBindBufferBaseNV(target, (uint) index, (uint) buffer);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glBindBufferBaseNV", Version = "1.5")]
      [CLSCompliant(false)]
      public static void BindBufferBase(NvTransformFeedback target, uint index, uint buffer)
      {
        GL.Delegates.glBindBufferBaseNV(target, index, buffer);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glBindBufferOffsetNV", Version = "1.5")]
      public static void BindBufferOffset(NvTransformFeedback target, int index, int buffer, IntPtr offset)
      {
        GL.Delegates.glBindBufferOffsetNV(target, (uint) index, (uint) buffer, offset);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glBindBufferOffsetNV", Version = "1.5")]
      public static void BindBufferOffset(NvTransformFeedback target, uint index, uint buffer, IntPtr offset)
      {
        GL.Delegates.glBindBufferOffsetNV(target, index, buffer, offset);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glBindBufferRangeNV", Version = "1.5")]
      public static void BindBufferRange(NvTransformFeedback target, int index, int buffer, IntPtr offset, IntPtr size)
      {
        GL.Delegates.glBindBufferRangeNV(target, (uint) index, (uint) buffer, offset, size);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glBindBufferRangeNV", Version = "1.5")]
      public static void BindBufferRange(NvTransformFeedback target, uint index, uint buffer, IntPtr offset, IntPtr size)
      {
        GL.Delegates.glBindBufferRangeNV(target, index, buffer, offset, size);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glBindProgramNV", Version = "1.2")]
      public static void BindProgram(AssemblyProgramTargetArb target, int id)
      {
        GL.Delegates.glBindProgramNV(target, (uint) id);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glBindProgramNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BindProgram(AssemblyProgramTargetArb target, uint id)
      {
        GL.Delegates.glBindProgramNV(target, id);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glBindTransformFeedbackNV", Version = "")]
      public static void BindTransformFeedback(NvTransformFeedback2 target, int id)
      {
        GL.Delegates.glBindTransformFeedbackNV(target, (uint) id);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glBindTransformFeedbackNV", Version = "")]
      [CLSCompliant(false)]
      public static void BindTransformFeedback(NvTransformFeedback2 target, uint id)
      {
        GL.Delegates.glBindTransformFeedbackNV(target, id);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glBindVideoCaptureStreamBufferNV", Version = "1.2")]
      public static void BindVideoCaptureStreamBuffer(int video_capture_slot, int stream, NvVideoCapture frame_region, IntPtr offset)
      {
        GL.Delegates.glBindVideoCaptureStreamBufferNV((uint) video_capture_slot, (uint) stream, frame_region, offset);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glBindVideoCaptureStreamBufferNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BindVideoCaptureStreamBuffer(uint video_capture_slot, uint stream, NvVideoCapture frame_region, IntPtr offset)
      {
        GL.Delegates.glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glBindVideoCaptureStreamTextureNV", Version = "1.2")]
      public static void BindVideoCaptureStreamTexture(int video_capture_slot, int stream, NvVideoCapture frame_region, NvVideoCapture target, int texture)
      {
        GL.Delegates.glBindVideoCaptureStreamTextureNV((uint) video_capture_slot, (uint) stream, frame_region, target, (uint) texture);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glBindVideoCaptureStreamTextureNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BindVideoCaptureStreamTexture(uint video_capture_slot, uint stream, NvVideoCapture frame_region, NvVideoCapture target, uint texture)
      {
        GL.Delegates.glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glBufferAddressRangeNV", Version = "1.2")]
      public static void BufferAddressRange(NvVertexBufferUnifiedMemory pname, int index, long address, IntPtr length)
      {
        GL.Delegates.glBufferAddressRangeNV(pname, (uint) index, (ulong) address, length);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glBufferAddressRangeNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void BufferAddressRange(NvVertexBufferUnifiedMemory pname, uint index, ulong address, IntPtr length)
      {
        GL.Delegates.glBufferAddressRangeNV(pname, index, address, length);
      }

      [AutoGenerated(Category = "NV_depth_buffer_float", EntryPoint = "glClearDepthdNV", Version = "2.0")]
      public static void ClearDepth(double depth)
      {
        GL.Delegates.glClearDepthdNV(depth);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glColor3hNV", Version = "1.2")]
      public static void Color3h(Half red, Half green, Half blue)
      {
        GL.Delegates.glColor3hNV(red, green, blue);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glColor3hvNV", Version = "1.2")]
      public static unsafe void Color3h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glColor3hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glColor3hvNV", Version = "1.2")]
      public static unsafe void Color3h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glColor3hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glColor3hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Color3h(Half* v)
      {
        GL.Delegates.glColor3hvNV(v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glColor4hNV", Version = "1.2")]
      public static void Color4h(Half red, Half green, Half blue, Half alpha)
      {
        GL.Delegates.glColor4hNV(red, green, blue, alpha);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glColor4hvNV", Version = "1.2")]
      public static unsafe void Color4h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glColor4hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glColor4hvNV", Version = "1.2")]
      public static unsafe void Color4h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glColor4hvNV(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glColor4hvNV", Version = "1.2")]
      public static unsafe void Color4h(Half* v)
      {
        GL.Delegates.glColor4hvNV(v);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glColorFormatNV", Version = "1.2")]
      public static void ColorFormat(int size, NvVertexBufferUnifiedMemory type, int stride)
      {
        GL.Delegates.glColorFormatNV(size, type, stride);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glCombinerInputNV", Version = "1.1")]
      public static void CombinerInput(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners input, NvRegisterCombiners mapping, NvRegisterCombiners componentUsage)
      {
        GL.Delegates.glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glCombinerOutputNV", Version = "1.1")]
      public static void CombinerOutput(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners abOutput, NvRegisterCombiners cdOutput, NvRegisterCombiners sumOutput, NvRegisterCombiners scale, NvRegisterCombiners bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
      {
        GL.Delegates.glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glCombinerParameterfNV", Version = "1.1")]
      public static void CombinerParameter(NvRegisterCombiners pname, float param)
      {
        GL.Delegates.glCombinerParameterfNV(pname, param);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glCombinerParameterfvNV", Version = "1.1")]
      public static unsafe void CombinerParameter(NvRegisterCombiners pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glCombinerParameterfvNV(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glCombinerParameterfvNV", Version = "1.1")]
      public static unsafe void CombinerParameter(NvRegisterCombiners pname, float* @params)
      {
        GL.Delegates.glCombinerParameterfvNV(pname, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glCombinerParameteriNV", Version = "1.1")]
      public static void CombinerParameter(NvRegisterCombiners pname, int param)
      {
        GL.Delegates.glCombinerParameteriNV(pname, param);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glCombinerParameterivNV", Version = "1.1")]
      public static unsafe void CombinerParameter(NvRegisterCombiners pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glCombinerParameterivNV(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glCombinerParameterivNV", Version = "1.1")]
      public static unsafe void CombinerParameter(NvRegisterCombiners pname, int* @params)
      {
        GL.Delegates.glCombinerParameterivNV(pname, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners2", EntryPoint = "glCombinerStageParameterfvNV", Version = "1.1")]
      public static unsafe void CombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glCombinerStageParameterfvNV(stage, pname, params1);
      }

      [AutoGenerated(Category = "NV_register_combiners2", EntryPoint = "glCombinerStageParameterfvNV", Version = "1.1")]
      public static unsafe void CombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glCombinerStageParameterfvNV(stage, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_register_combiners2", EntryPoint = "glCombinerStageParameterfvNV", Version = "1.1")]
      public static unsafe void CombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, float* @params)
      {
        GL.Delegates.glCombinerStageParameterfvNV(stage, pname, @params);
      }

      [AutoGenerated(Category = "NV_copy_image", EntryPoint = "glCopyImageSubDataNV", Version = "1.2")]
      public static void CopyImageSubData(int srcName, NvCopyImage srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, NvCopyImage dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
      {
        GL.Delegates.glCopyImageSubDataNV((uint) srcName, srcTarget, srcLevel, srcX, srcY, srcZ, (uint) dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_copy_image", EntryPoint = "glCopyImageSubDataNV", Version = "1.2")]
      public static void CopyImageSubData(uint srcName, NvCopyImage srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, NvCopyImage dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
      {
        GL.Delegates.glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glDeleteFencesNV", Version = "1.2")]
      public static unsafe void DeleteFences(int n, int[] fences)
      {
        fixed (int* numPtr = fences)
          GL.Delegates.glDeleteFencesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glDeleteFencesNV", Version = "1.2")]
      public static unsafe void DeleteFences(int n, ref int fences)
      {
        fixed (int* numPtr = &fences)
          GL.Delegates.glDeleteFencesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glDeleteFencesNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFences(int n, int* fences)
      {
        GL.Delegates.glDeleteFencesNV(n, (uint*) fences);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fence", EntryPoint = "glDeleteFencesNV", Version = "1.2")]
      public static unsafe void DeleteFences(int n, uint[] fences)
      {
        fixed (uint* fences1 = fences)
          GL.Delegates.glDeleteFencesNV(n, fences1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fence", EntryPoint = "glDeleteFencesNV", Version = "1.2")]
      public static unsafe void DeleteFences(int n, ref uint fences)
      {
        fixed (uint* fences1 = &fences)
          GL.Delegates.glDeleteFencesNV(n, fences1);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glDeleteFencesNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFences(int n, uint* fences)
      {
        GL.Delegates.glDeleteFencesNV(n, fences);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glDeleteOcclusionQueriesNV", Version = "1.2")]
      public static unsafe void DeleteOcclusionQueries(int n, int[] ids)
      {
        fixed (int* numPtr = ids)
          GL.Delegates.glDeleteOcclusionQueriesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glDeleteOcclusionQueriesNV", Version = "1.2")]
      public static unsafe void DeleteOcclusionQueries(int n, ref int ids)
      {
        fixed (int* numPtr = &ids)
          GL.Delegates.glDeleteOcclusionQueriesNV(n, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glDeleteOcclusionQueriesNV", Version = "1.2")]
      public static unsafe void DeleteOcclusionQueries(int n, int* ids)
      {
        GL.Delegates.glDeleteOcclusionQueriesNV(n, (uint*) ids);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glDeleteOcclusionQueriesNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteOcclusionQueries(int n, uint[] ids)
      {
        fixed (uint* ids1 = ids)
          GL.Delegates.glDeleteOcclusionQueriesNV(n, ids1);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glDeleteOcclusionQueriesNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteOcclusionQueries(int n, ref uint ids)
      {
        fixed (uint* ids1 = &ids)
          GL.Delegates.glDeleteOcclusionQueriesNV(n, ids1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glDeleteOcclusionQueriesNV", Version = "1.2")]
      public static unsafe void DeleteOcclusionQueries(int n, uint* ids)
      {
        GL.Delegates.glDeleteOcclusionQueriesNV(n, ids);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glDeleteProgramsNV", Version = "1.2")]
      public static unsafe void DeleteProgram(int n, int[] programs)
      {
        fixed (int* numPtr = programs)
          GL.Delegates.glDeleteProgramsNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glDeleteProgramsNV", Version = "1.2")]
      public static unsafe void DeleteProgram(int n, ref int programs)
      {
        fixed (int* numPtr = &programs)
          GL.Delegates.glDeleteProgramsNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glDeleteProgramsNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteProgram(int n, int* programs)
      {
        GL.Delegates.glDeleteProgramsNV(n, (uint*) programs);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glDeleteProgramsNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteProgram(int n, uint[] programs)
      {
        fixed (uint* programs1 = programs)
          GL.Delegates.glDeleteProgramsNV(n, programs1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glDeleteProgramsNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void DeleteProgram(int n, ref uint programs)
      {
        fixed (uint* programs1 = &programs)
          GL.Delegates.glDeleteProgramsNV(n, programs1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glDeleteProgramsNV", Version = "1.2")]
      public static unsafe void DeleteProgram(int n, uint* programs)
      {
        GL.Delegates.glDeleteProgramsNV(n, programs);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacksNV", Version = "")]
      public static unsafe void DeleteTransformFeedback(int n, int[] ids)
      {
        fixed (int* numPtr = ids)
          GL.Delegates.glDeleteTransformFeedbacksNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacksNV", Version = "")]
      public static unsafe void DeleteTransformFeedback(int n, ref int ids)
      {
        fixed (int* numPtr = &ids)
          GL.Delegates.glDeleteTransformFeedbacksNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacksNV", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void DeleteTransformFeedback(int n, int* ids)
      {
        GL.Delegates.glDeleteTransformFeedbacksNV(n, (uint*) ids);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacksNV", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void DeleteTransformFeedback(int n, uint[] ids)
      {
        fixed (uint* ids1 = ids)
          GL.Delegates.glDeleteTransformFeedbacksNV(n, ids1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacksNV", Version = "")]
      public static unsafe void DeleteTransformFeedback(int n, ref uint ids)
      {
        fixed (uint* ids1 = &ids)
          GL.Delegates.glDeleteTransformFeedbacksNV(n, ids1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glDeleteTransformFeedbacksNV", Version = "")]
      public static unsafe void DeleteTransformFeedback(int n, uint* ids)
      {
        GL.Delegates.glDeleteTransformFeedbacksNV(n, ids);
      }

      [AutoGenerated(Category = "NV_depth_buffer_float", EntryPoint = "glDepthBoundsdNV", Version = "2.0")]
      public static void DepthBounds(double zmin, double zmax)
      {
        GL.Delegates.glDepthBoundsdNV(zmin, zmax);
      }

      [AutoGenerated(Category = "NV_depth_buffer_float", EntryPoint = "glDepthRangedNV", Version = "2.0")]
      public static void DepthRange(double zNear, double zFar)
      {
        GL.Delegates.glDepthRangedNV(zNear, zFar);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glDrawTransformFeedbackNV", Version = "")]
      public static void DrawTransformFeedback(NvTransformFeedback2 mode, int id)
      {
        GL.Delegates.glDrawTransformFeedbackNV(mode, (uint) id);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glDrawTransformFeedbackNV", Version = "")]
      public static void DrawTransformFeedback(NvTransformFeedback2 mode, uint id)
      {
        GL.Delegates.glDrawTransformFeedbackNV(mode, id);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glEdgeFlagFormatNV", Version = "1.2")]
      public static void EdgeFlagFormat(int stride)
      {
        GL.Delegates.glEdgeFlagFormatNV(stride);
      }

      [AutoGenerated(Category = "NV_conditional_render", EntryPoint = "glEndConditionalRenderNV", Version = "")]
      public static void EndConditionalRender()
      {
        GL.Delegates.glEndConditionalRenderNV();
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glEndOcclusionQueryNV", Version = "1.2")]
      public static void EndOcclusionQuery()
      {
        GL.Delegates.glEndOcclusionQueryNV();
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glEndTransformFeedbackNV", Version = "1.5")]
      public static void EndTransformFeedback()
      {
        GL.Delegates.glEndTransformFeedbackNV();
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glEndVideoCaptureNV", Version = "1.2")]
      public static void EndVideoCapture(int video_capture_slot)
      {
        GL.Delegates.glEndVideoCaptureNV((uint) video_capture_slot);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glEndVideoCaptureNV", Version = "1.2")]
      public static void EndVideoCapture(uint video_capture_slot)
      {
        GL.Delegates.glEndVideoCaptureNV(video_capture_slot);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glEvalMapsNV", Version = "1.1")]
      public static void EvalMap(NvEvaluators target, NvEvaluators mode)
      {
        GL.Delegates.glEvalMapsNV(target, mode);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glExecuteProgramNV", Version = "1.2")]
      public static unsafe void ExecuteProgram(AssemblyProgramTargetArb target, int id, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glExecuteProgramNV(target, (uint) id, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glExecuteProgramNV", Version = "1.2")]
      public static unsafe void ExecuteProgram(AssemblyProgramTargetArb target, int id, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glExecuteProgramNV(target, (uint) id, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glExecuteProgramNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ExecuteProgram(AssemblyProgramTargetArb target, int id, float* @params)
      {
        GL.Delegates.glExecuteProgramNV(target, (uint) id, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glExecuteProgramNV", Version = "1.2")]
      public static unsafe void ExecuteProgram(AssemblyProgramTargetArb target, uint id, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glExecuteProgramNV(target, id, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glExecuteProgramNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ExecuteProgram(AssemblyProgramTargetArb target, uint id, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glExecuteProgramNV(target, id, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glExecuteProgramNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ExecuteProgram(AssemblyProgramTargetArb target, uint id, float* @params)
      {
        GL.Delegates.glExecuteProgramNV(target, id, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glFinalCombinerInputNV", Version = "1.1")]
      public static void FinalCombinerInput(NvRegisterCombiners variable, NvRegisterCombiners input, NvRegisterCombiners mapping, NvRegisterCombiners componentUsage)
      {
        GL.Delegates.glFinalCombinerInputNV(variable, input, mapping, componentUsage);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glFinishFenceNV", Version = "1.2")]
      public static void FinishFence(int fence)
      {
        GL.Delegates.glFinishFenceNV((uint) fence);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fence", EntryPoint = "glFinishFenceNV", Version = "1.2")]
      public static void FinishFence(uint fence)
      {
        GL.Delegates.glFinishFenceNV(fence);
      }

      [AutoGenerated(Category = "NV_pixel_data_range", EntryPoint = "glFlushPixelDataRangeNV", Version = "1.2")]
      public static void FlushPixelDataRange(NvPixelDataRange target)
      {
        GL.Delegates.glFlushPixelDataRangeNV(target);
      }

      [AutoGenerated(Category = "NV_vertex_array_range", EntryPoint = "glFlushVertexArrayRangeNV", Version = "1.1")]
      public static void FlushVertexArrayRange()
      {
        GL.Delegates.glFlushVertexArrayRangeNV();
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glFogCoordFormatNV", Version = "1.2")]
      public static void FogCoordFormat(NvVertexBufferUnifiedMemory type, int stride)
      {
        GL.Delegates.glFogCoordFormatNV(type, stride);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glFogCoordhNV", Version = "1.2")]
      public static void FogCoordh(Half fog)
      {
        GL.Delegates.glFogCoordhNV(fog);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glFogCoordhvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void FogCoordh(Half* fog)
      {
        GL.Delegates.glFogCoordhvNV(fog);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGenFencesNV", Version = "1.2")]
      public static unsafe void GenFences(int n, [Out] int[] fences)
      {
        fixed (int* numPtr = fences)
          GL.Delegates.glGenFencesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGenFencesNV", Version = "1.2")]
      public static unsafe void GenFences(int n, out int fences)
      {
        fixed (int* numPtr = &fences)
        {
          GL.Delegates.glGenFencesNV(n, (uint*) numPtr);
          fences = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGenFencesNV", Version = "1.2")]
      public static unsafe void GenFences(int n, [Out] int* fences)
      {
        GL.Delegates.glGenFencesNV(n, (uint*) fences);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGenFencesNV", Version = "1.2")]
      public static unsafe void GenFences(int n, [Out] uint[] fences)
      {
        fixed (uint* fences1 = fences)
          GL.Delegates.glGenFencesNV(n, fences1);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGenFencesNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenFences(int n, out uint fences)
      {
        fixed (uint* fences1 = &fences)
        {
          GL.Delegates.glGenFencesNV(n, fences1);
          fences = *fences1;
        }
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGenFencesNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenFences(int n, [Out] uint* fences)
      {
        GL.Delegates.glGenFencesNV(n, fences);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGenOcclusionQueriesNV", Version = "1.2")]
      public static unsafe void GenOcclusionQueries(int n, [Out] int[] ids)
      {
        fixed (int* numPtr = ids)
          GL.Delegates.glGenOcclusionQueriesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGenOcclusionQueriesNV", Version = "1.2")]
      public static unsafe void GenOcclusionQueries(int n, out int ids)
      {
        fixed (int* numPtr = &ids)
        {
          GL.Delegates.glGenOcclusionQueriesNV(n, (uint*) numPtr);
          ids = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGenOcclusionQueriesNV", Version = "1.2")]
      public static unsafe void GenOcclusionQueries(int n, [Out] int* ids)
      {
        GL.Delegates.glGenOcclusionQueriesNV(n, (uint*) ids);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGenOcclusionQueriesNV", Version = "1.2")]
      public static unsafe void GenOcclusionQueries(int n, [Out] uint[] ids)
      {
        fixed (uint* ids1 = ids)
          GL.Delegates.glGenOcclusionQueriesNV(n, ids1);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGenOcclusionQueriesNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenOcclusionQueries(int n, out uint ids)
      {
        fixed (uint* ids1 = &ids)
        {
          GL.Delegates.glGenOcclusionQueriesNV(n, ids1);
          ids = *ids1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGenOcclusionQueriesNV", Version = "1.2")]
      public static unsafe void GenOcclusionQueries(int n, [Out] uint* ids)
      {
        GL.Delegates.glGenOcclusionQueriesNV(n, ids);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGenProgramsNV", Version = "1.2")]
      public static unsafe void GenProgram(int n, [Out] int[] programs)
      {
        fixed (int* numPtr = programs)
          GL.Delegates.glGenProgramsNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGenProgramsNV", Version = "1.2")]
      public static unsafe void GenProgram(int n, out int programs)
      {
        fixed (int* numPtr = &programs)
        {
          GL.Delegates.glGenProgramsNV(n, (uint*) numPtr);
          programs = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGenProgramsNV", Version = "1.2")]
      public static unsafe void GenProgram(int n, [Out] int* programs)
      {
        GL.Delegates.glGenProgramsNV(n, (uint*) programs);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGenProgramsNV", Version = "1.2")]
      public static unsafe void GenProgram(int n, [Out] uint[] programs)
      {
        fixed (uint* programs1 = programs)
          GL.Delegates.glGenProgramsNV(n, programs1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGenProgramsNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GenProgram(int n, out uint programs)
      {
        fixed (uint* programs1 = &programs)
        {
          GL.Delegates.glGenProgramsNV(n, programs1);
          programs = *programs1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGenProgramsNV", Version = "1.2")]
      public static unsafe void GenProgram(int n, [Out] uint* programs)
      {
        GL.Delegates.glGenProgramsNV(n, programs);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glGenTransformFeedbacksNV", Version = "")]
      public static unsafe void GenTransformFeedback(int n, [Out] int[] ids)
      {
        fixed (int* numPtr = ids)
          GL.Delegates.glGenTransformFeedbacksNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glGenTransformFeedbacksNV", Version = "")]
      public static unsafe void GenTransformFeedback(int n, out int ids)
      {
        fixed (int* numPtr = &ids)
        {
          GL.Delegates.glGenTransformFeedbacksNV(n, (uint*) numPtr);
          ids = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glGenTransformFeedbacksNV", Version = "")]
      public static unsafe void GenTransformFeedback(int n, [Out] int* ids)
      {
        GL.Delegates.glGenTransformFeedbacksNV(n, (uint*) ids);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glGenTransformFeedbacksNV", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GenTransformFeedback(int n, [Out] uint[] ids)
      {
        fixed (uint* ids1 = ids)
          GL.Delegates.glGenTransformFeedbacksNV(n, ids1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glGenTransformFeedbacksNV", Version = "")]
      public static unsafe void GenTransformFeedback(int n, out uint ids)
      {
        fixed (uint* ids1 = &ids)
        {
          GL.Delegates.glGenTransformFeedbacksNV(n, ids1);
          ids = *ids1;
        }
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glGenTransformFeedbacksNV", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GenTransformFeedback(int n, [Out] uint* ids)
      {
        GL.Delegates.glGenTransformFeedbacksNV(n, ids);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetActiveVaryingNV", Version = "1.5")]
      public static unsafe void GetActiveVarying(int program, int index, int bufSize, out int length, out int size, out NvTransformFeedback type, [Out] StringBuilder name)
      {
        fixed (int* length1 = &length)
          fixed (int* size1 = &size)
            fixed (NvTransformFeedback* type1 = &type)
            {
              GL.Delegates.glGetActiveVaryingNV((uint) program, (uint) index, bufSize, length1, size1, type1, name);
              length = *length1;
              size = *size1;
              type = *type1;
            }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetActiveVaryingNV", Version = "1.5")]
      public static unsafe void GetActiveVarying(int program, int index, int bufSize, [Out] int* length, [Out] int* size, [Out] NvTransformFeedback* type, [Out] StringBuilder name)
      {
        GL.Delegates.glGetActiveVaryingNV((uint) program, (uint) index, bufSize, length, size, type, name);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetActiveVaryingNV", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GetActiveVarying(uint program, uint index, int bufSize, out int length, out int size, out NvTransformFeedback type, [Out] StringBuilder name)
      {
        fixed (int* length1 = &length)
          fixed (int* size1 = &size)
            fixed (NvTransformFeedback* type1 = &type)
            {
              GL.Delegates.glGetActiveVaryingNV(program, index, bufSize, length1, size1, type1, name);
              length = *length1;
              size = *size1;
              type = *type1;
            }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetActiveVaryingNV", Version = "1.5")]
      public static unsafe void GetActiveVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] NvTransformFeedback* type, [Out] StringBuilder name)
      {
        GL.Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetBufferParameterui64vNV", Version = "1.2")]
      public static unsafe void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] long[] @params)
      {
        fixed (long* numPtr = @params)
          GL.Delegates.glGetBufferParameterui64vNV(target, pname, (ulong*) numPtr);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetBufferParameterui64vNV", Version = "1.2")]
      public static unsafe void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, out long @params)
      {
        fixed (long* numPtr = &@params)
        {
          GL.Delegates.glGetBufferParameterui64vNV(target, pname, (ulong*) numPtr);
          @params = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetBufferParameterui64vNV", Version = "1.2")]
      public static unsafe void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] long* @params)
      {
        GL.Delegates.glGetBufferParameterui64vNV(target, pname, (ulong*) @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetBufferParameterui64vNV", Version = "1.2")]
      public static unsafe void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] ulong[] @params)
      {
        fixed (ulong* params1 = @params)
          GL.Delegates.glGetBufferParameterui64vNV(target, pname, params1);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetBufferParameterui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, out ulong @params)
      {
        fixed (ulong* params1 = &@params)
        {
          GL.Delegates.glGetBufferParameterui64vNV(target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetBufferParameterui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetBufferParameter(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] ulong* @params)
      {
        GL.Delegates.glGetBufferParameterui64vNV(target, pname, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerInputParameterfvNV", Version = "1.1")]
      public static unsafe void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params1);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerInputParameterfvNV", Version = "1.1")]
      public static unsafe void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerInputParameterfvNV", Version = "1.1")]
      public static unsafe void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float* @params)
      {
        GL.Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerInputParameterivNV", Version = "1.1")]
      public static unsafe void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, params1);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerInputParameterivNV", Version = "1.1")]
      public static unsafe void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerInputParameterivNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetCombinerInputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int* @params)
      {
        GL.Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerOutputParameterfvNV", Version = "1.1")]
      public static unsafe void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, params1);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerOutputParameterfvNV", Version = "1.1")]
      public static unsafe void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerOutputParameterfvNV", Version = "1.1")]
      public static unsafe void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] float* @params)
      {
        GL.Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerOutputParameterivNV", Version = "1.1")]
      public static unsafe void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, params1);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerOutputParameterivNV", Version = "1.1")]
      public static unsafe void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetCombinerOutputParameterivNV", Version = "1.1")]
      public static unsafe void GetCombinerOutputParameter(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] int* @params)
      {
        GL.Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners2", EntryPoint = "glGetCombinerStageParameterfvNV", Version = "1.1")]
      public static unsafe void GetCombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetCombinerStageParameterfvNV(stage, pname, params1);
      }

      [AutoGenerated(Category = "NV_register_combiners2", EntryPoint = "glGetCombinerStageParameterfvNV", Version = "1.1")]
      public static unsafe void GetCombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetCombinerStageParameterfvNV(stage, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_register_combiners2", EntryPoint = "glGetCombinerStageParameterfvNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetCombinerStageParameter(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, [Out] float* @params)
      {
        GL.Delegates.glGetCombinerStageParameterfvNV(stage, pname, @params);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGetFenceivNV", Version = "1.2")]
      public static unsafe void GetFence(int fence, NvFence pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFenceivNV((uint) fence, pname, params1);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGetFenceivNV", Version = "1.2")]
      public static unsafe void GetFence(int fence, NvFence pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFenceivNV((uint) fence, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGetFenceivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetFence(int fence, NvFence pname, [Out] int* @params)
      {
        GL.Delegates.glGetFenceivNV((uint) fence, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGetFenceivNV", Version = "1.2")]
      public static unsafe void GetFence(uint fence, NvFence pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFenceivNV(fence, pname, params1);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGetFenceivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetFence(uint fence, NvFence pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFenceivNV(fence, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glGetFenceivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetFence(uint fence, NvFence pname, [Out] int* @params)
      {
        GL.Delegates.glGetFenceivNV(fence, pname, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetFinalCombinerInputParameterfvNV", Version = "1.1")]
      public static unsafe void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, params1);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetFinalCombinerInputParameterfvNV", Version = "1.1")]
      public static unsafe void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetFinalCombinerInputParameterfvNV", Version = "1.1")]
      public static unsafe void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float* @params)
      {
        GL.Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, @params);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetFinalCombinerInputParameterivNV", Version = "1.1")]
      public static unsafe void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, params1);
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetFinalCombinerInputParameterivNV", Version = "1.1")]
      public static unsafe void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_register_combiners", EntryPoint = "glGetFinalCombinerInputParameterivNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetFinalCombinerInputParameter(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int* @params)
      {
        GL.Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glGetIntegerui64i_vNV", Version = "1.2")]
      public static unsafe void GetInteger(NvVertexBufferUnifiedMemory value, int index, [Out] long[] result)
      {
        fixed (long* numPtr = result)
          GL.Delegates.glGetIntegerui64i_vNV(value, (uint) index, (ulong*) numPtr);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glGetIntegerui64i_vNV", Version = "1.2")]
      public static unsafe void GetInteger(NvVertexBufferUnifiedMemory value, int index, out long result)
      {
        fixed (long* numPtr = &result)
        {
          GL.Delegates.glGetIntegerui64i_vNV(value, (uint) index, (ulong*) numPtr);
          result = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glGetIntegerui64i_vNV", Version = "1.2")]
      public static unsafe void GetInteger(NvVertexBufferUnifiedMemory value, int index, [Out] long* result)
      {
        GL.Delegates.glGetIntegerui64i_vNV(value, (uint) index, (ulong*) result);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glGetIntegerui64i_vNV", Version = "1.2")]
      public static unsafe void GetInteger(NvVertexBufferUnifiedMemory value, uint index, [Out] ulong[] result)
      {
        fixed (ulong* result1 = result)
          GL.Delegates.glGetIntegerui64i_vNV(value, index, result1);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glGetIntegerui64i_vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInteger(NvVertexBufferUnifiedMemory value, uint index, out ulong result)
      {
        fixed (ulong* result1 = &result)
        {
          GL.Delegates.glGetIntegerui64i_vNV(value, index, result1);
          result = *result1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glGetIntegerui64i_vNV", Version = "1.2")]
      public static unsafe void GetInteger(NvVertexBufferUnifiedMemory value, uint index, [Out] ulong* result)
      {
        GL.Delegates.glGetIntegerui64i_vNV(value, index, result);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetIntegerui64vNV", Version = "1.2")]
      public static unsafe void GetInteger(NvShaderBufferLoad value, [Out] long[] result)
      {
        fixed (long* numPtr = result)
          GL.Delegates.glGetIntegerui64vNV(value, (ulong*) numPtr);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetIntegerui64vNV", Version = "1.2")]
      public static unsafe void GetInteger(NvShaderBufferLoad value, out long result)
      {
        fixed (long* numPtr = &result)
        {
          GL.Delegates.glGetIntegerui64vNV(value, (ulong*) numPtr);
          result = *numPtr;
        }
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetIntegerui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInteger(NvShaderBufferLoad value, [Out] long* result)
      {
        GL.Delegates.glGetIntegerui64vNV(value, (ulong*) result);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetIntegerui64vNV", Version = "1.2")]
      public static unsafe void GetInteger(NvShaderBufferLoad value, [Out] ulong[] result)
      {
        fixed (ulong* result1 = result)
          GL.Delegates.glGetIntegerui64vNV(value, result1);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetIntegerui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetInteger(NvShaderBufferLoad value, out ulong result)
      {
        fixed (ulong* result1 = &result)
        {
          GL.Delegates.glGetIntegerui64vNV(value, result1);
          result = *result1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetIntegerui64vNV", Version = "1.2")]
      public static unsafe void GetInteger(NvShaderBufferLoad value, [Out] ulong* result)
      {
        GL.Delegates.glGetIntegerui64vNV(value, result);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterfvNV", Version = "1.1")]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetMapAttribParameterfvNV(target, (uint) index, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterfvNV", Version = "1.1")]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetMapAttribParameterfvNV(target, (uint) index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterfvNV", Version = "1.1")]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, [Out] float* @params)
      {
        GL.Delegates.glGetMapAttribParameterfvNV(target, (uint) index, pname, @params);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterfvNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetMapAttribParameterfvNV(target, index, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterfvNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetMapAttribParameterfvNV(target, index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterfvNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, [Out] float* @params)
      {
        GL.Delegates.glGetMapAttribParameterfvNV(target, index, pname, @params);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterivNV", Version = "1.1")]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMapAttribParameterivNV(target, (uint) index, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterivNV", Version = "1.1")]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetMapAttribParameterivNV(target, (uint) index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterivNV", Version = "1.1")]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, int index, NvEvaluators pname, [Out] int* @params)
      {
        GL.Delegates.glGetMapAttribParameterivNV(target, (uint) index, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterivNV", Version = "1.1")]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMapAttribParameterivNV(target, index, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterivNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetMapAttribParameterivNV(target, index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapAttribParameterivNV", Version = "1.1")]
      public static unsafe void GetMapAttribParameter(NvEvaluators target, uint index, NvEvaluators pname, [Out] int* @params)
      {
        GL.Delegates.glGetMapAttribParameterivNV(target, index, pname, @params);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      public static void GetMapControlPoints(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [Out] IntPtr points)
      {
        GL.Delegates.glGetMapControlPointsNV(target, (uint) index, type, ustride, vstride, packed, points);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      public static void GetMapControlPoints<T6>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [In, Out] T6[] points) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMapControlPointsNV(target, (uint) index, type, ustride, vstride, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      public static void GetMapControlPoints<T6>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [In, Out] T6[,] points) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMapControlPointsNV(target, (uint) index, type, ustride, vstride, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      public static void GetMapControlPoints<T6>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [In, Out] T6[,,] points) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMapControlPointsNV(target, (uint) index, type, ustride, vstride, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      public static void GetMapControlPoints<T6>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, bool packed, [In, Out] ref T6 points) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMapControlPointsNV(target, (uint) index, type, ustride, vstride, packed, gcHandle.AddrOfPinnedObject());
          points = (T6) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static void GetMapControlPoints(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [Out] IntPtr points)
      {
        GL.Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static void GetMapControlPoints<T6>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [In, Out] T6[] points) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static void GetMapControlPoints<T6>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [In, Out] T6[,] points) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static void GetMapControlPoints<T6>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [In, Out] T6[,,] points) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapControlPointsNV", Version = "1.1")]
      public static void GetMapControlPoints<T6>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [In, Out] ref T6 points) where T6 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, gcHandle.AddrOfPinnedObject());
          points = (T6) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapParameterfvNV", Version = "1.1")]
      public static unsafe void GetMapParameter(NvEvaluators target, NvEvaluators pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetMapParameterfvNV(target, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapParameterfvNV", Version = "1.1")]
      public static unsafe void GetMapParameter(NvEvaluators target, NvEvaluators pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetMapParameterfvNV(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapParameterfvNV", Version = "1.1")]
      public static unsafe void GetMapParameter(NvEvaluators target, NvEvaluators pname, [Out] float* @params)
      {
        GL.Delegates.glGetMapParameterfvNV(target, pname, @params);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapParameterivNV", Version = "1.1")]
      public static unsafe void GetMapParameter(NvEvaluators target, NvEvaluators pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMapParameterivNV(target, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapParameterivNV", Version = "1.1")]
      public static unsafe void GetMapParameter(NvEvaluators target, NvEvaluators pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetMapParameterivNV(target, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glGetMapParameterivNV", Version = "1.1")]
      public static unsafe void GetMapParameter(NvEvaluators target, NvEvaluators pname, [Out] int* @params)
      {
        GL.Delegates.glGetMapParameterivNV(target, pname, @params);
      }

      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glGetMultisamplefvNV", Version = "")]
      public static unsafe void GetMultisample(NvExplicitMultisample pname, int index, [Out] float[] val)
      {
        fixed (float* val1 = val)
          GL.Delegates.glGetMultisamplefvNV(pname, (uint) index, val1);
      }

      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glGetMultisamplefvNV", Version = "")]
      public static unsafe void GetMultisample(NvExplicitMultisample pname, int index, out float val)
      {
        fixed (float* val1 = &val)
        {
          GL.Delegates.glGetMultisamplefvNV(pname, (uint) index, val1);
          val = *val1;
        }
      }

      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glGetMultisamplefvNV", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetMultisample(NvExplicitMultisample pname, int index, [Out] float* val)
      {
        GL.Delegates.glGetMultisamplefvNV(pname, (uint) index, val);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glGetMultisamplefvNV", Version = "")]
      public static unsafe void GetMultisample(NvExplicitMultisample pname, uint index, [Out] float[] val)
      {
        fixed (float* val1 = val)
          GL.Delegates.glGetMultisamplefvNV(pname, index, val1);
      }

      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glGetMultisamplefvNV", Version = "")]
      [CLSCompliant(false)]
      public static unsafe void GetMultisample(NvExplicitMultisample pname, uint index, out float val)
      {
        fixed (float* val1 = &val)
        {
          GL.Delegates.glGetMultisamplefvNV(pname, index, val1);
          val = *val1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glGetMultisamplefvNV", Version = "")]
      public static unsafe void GetMultisample(NvExplicitMultisample pname, uint index, [Out] float* val)
      {
        GL.Delegates.glGetMultisamplefvNV(pname, index, val);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetNamedBufferParameterui64vNV", Version = "1.2")]
      public static unsafe void GetNamedBufferParameter(int buffer, NvShaderBufferLoad pname, [Out] long[] @params)
      {
        fixed (long* numPtr = @params)
          GL.Delegates.glGetNamedBufferParameterui64vNV((uint) buffer, pname, (ulong*) numPtr);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetNamedBufferParameterui64vNV", Version = "1.2")]
      public static unsafe void GetNamedBufferParameter(int buffer, NvShaderBufferLoad pname, out long @params)
      {
        fixed (long* numPtr = &@params)
        {
          GL.Delegates.glGetNamedBufferParameterui64vNV((uint) buffer, pname, (ulong*) numPtr);
          @params = *numPtr;
        }
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetNamedBufferParameterui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedBufferParameter(int buffer, NvShaderBufferLoad pname, [Out] long* @params)
      {
        GL.Delegates.glGetNamedBufferParameterui64vNV((uint) buffer, pname, (ulong*) @params);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetNamedBufferParameterui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetNamedBufferParameter(uint buffer, NvShaderBufferLoad pname, [Out] ulong[] @params)
      {
        fixed (ulong* params1 = @params)
          GL.Delegates.glGetNamedBufferParameterui64vNV(buffer, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetNamedBufferParameterui64vNV", Version = "1.2")]
      public static unsafe void GetNamedBufferParameter(uint buffer, NvShaderBufferLoad pname, out ulong @params)
      {
        fixed (ulong* params1 = &@params)
        {
          GL.Delegates.glGetNamedBufferParameterui64vNV(buffer, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetNamedBufferParameterui64vNV", Version = "1.2")]
      public static unsafe void GetNamedBufferParameter(uint buffer, NvShaderBufferLoad pname, [Out] ulong* @params)
      {
        GL.Delegates.glGetNamedBufferParameterui64vNV(buffer, pname, @params);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGetOcclusionQueryivNV", Version = "1.2")]
      public static unsafe void GetOcclusionQuery(int id, NvOcclusionQuery pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetOcclusionQueryivNV((uint) id, pname, params1);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGetOcclusionQueryivNV", Version = "1.2")]
      public static unsafe void GetOcclusionQuery(int id, NvOcclusionQuery pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetOcclusionQueryivNV((uint) id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGetOcclusionQueryivNV", Version = "1.2")]
      public static unsafe void GetOcclusionQuery(int id, NvOcclusionQuery pname, [Out] int* @params)
      {
        GL.Delegates.glGetOcclusionQueryivNV((uint) id, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGetOcclusionQueryivNV", Version = "1.2")]
      public static unsafe void GetOcclusionQuery(uint id, NvOcclusionQuery pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetOcclusionQueryivNV(id, pname, params1);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGetOcclusionQueryivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetOcclusionQuery(uint id, NvOcclusionQuery pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetOcclusionQueryivNV(id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGetOcclusionQueryivNV", Version = "1.2")]
      public static unsafe void GetOcclusionQuery(uint id, NvOcclusionQuery pname, [Out] int* @params)
      {
        GL.Delegates.glGetOcclusionQueryivNV(id, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGetOcclusionQueryuivNV", Version = "1.2")]
      public static unsafe void GetOcclusionQuery(uint id, NvOcclusionQuery pname, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetOcclusionQueryuivNV(id, pname, params1);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGetOcclusionQueryuivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetOcclusionQuery(uint id, NvOcclusionQuery pname, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetOcclusionQueryuivNV(id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glGetOcclusionQueryuivNV", Version = "1.2")]
      public static unsafe void GetOcclusionQuery(uint id, NvOcclusionQuery pname, [Out] uint* @params)
      {
        GL.Delegates.glGetOcclusionQueryuivNV(id, pname, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramEnvParameterIivNV", Version = "1.3")]
      public static unsafe void GetProgramEnvParameterI(NvGpuProgram4 target, int index, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetProgramEnvParameterIivNV(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramEnvParameterIivNV", Version = "1.3")]
      public static unsafe void GetProgramEnvParameterI(NvGpuProgram4 target, int index, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetProgramEnvParameterIivNV(target, (uint) index, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramEnvParameterIivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramEnvParameterI(NvGpuProgram4 target, int index, [Out] int* @params)
      {
        GL.Delegates.glGetProgramEnvParameterIivNV(target, (uint) index, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramEnvParameterIivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetProgramEnvParameterIivNV(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramEnvParameterIivNV", Version = "1.3")]
      public static unsafe void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetProgramEnvParameterIivNV(target, index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramEnvParameterIivNV", Version = "1.3")]
      public static unsafe void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, [Out] int* @params)
      {
        GL.Delegates.glGetProgramEnvParameterIivNV(target, index, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramEnvParameterIuivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetProgramEnvParameterIuivNV(target, index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramEnvParameterIuivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetProgramEnvParameterIuivNV(target, index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramEnvParameterIuivNV", Version = "1.3")]
      public static unsafe void GetProgramEnvParameterI(NvGpuProgram4 target, uint index, [Out] uint* @params)
      {
        GL.Delegates.glGetProgramEnvParameterIuivNV(target, index, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramivNV", Version = "1.2")]
      public static unsafe void GetProgram(int id, NvVertexProgram pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetProgramivNV((uint) id, pname, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramivNV", Version = "1.2")]
      public static unsafe void GetProgram(int id, NvVertexProgram pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetProgramivNV((uint) id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramivNV", Version = "1.2")]
      public static unsafe void GetProgram(int id, NvVertexProgram pname, [Out] int* @params)
      {
        GL.Delegates.glGetProgramivNV((uint) id, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgram(uint id, NvVertexProgram pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetProgramivNV(id, pname, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgram(uint id, NvVertexProgram pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetProgramivNV(id, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramivNV", Version = "1.2")]
      public static unsafe void GetProgram(uint id, NvVertexProgram pname, [Out] int* @params)
      {
        GL.Delegates.glGetProgramivNV(id, pname, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramLocalParameterIivNV", Version = "1.3")]
      public static unsafe void GetProgramLocalParameterI(NvGpuProgram4 target, int index, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetProgramLocalParameterIivNV(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramLocalParameterIivNV", Version = "1.3")]
      public static unsafe void GetProgramLocalParameterI(NvGpuProgram4 target, int index, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetProgramLocalParameterIivNV(target, (uint) index, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramLocalParameterIivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramLocalParameterI(NvGpuProgram4 target, int index, [Out] int* @params)
      {
        GL.Delegates.glGetProgramLocalParameterIivNV(target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramLocalParameterIivNV", Version = "1.3")]
      public static unsafe void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetProgramLocalParameterIivNV(target, index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramLocalParameterIivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetProgramLocalParameterIivNV(target, index, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramLocalParameterIivNV", Version = "1.3")]
      public static unsafe void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, [Out] int* @params)
      {
        GL.Delegates.glGetProgramLocalParameterIivNV(target, index, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramLocalParameterIuivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetProgramLocalParameterIuivNV(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramLocalParameterIuivNV", Version = "1.3")]
      public static unsafe void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetProgramLocalParameterIuivNV(target, index, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glGetProgramLocalParameterIuivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramLocalParameterI(NvGpuProgram4 target, uint index, [Out] uint* @params)
      {
        GL.Delegates.glGetProgramLocalParameterIuivNV(target, index, @params);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterdvNV", Version = "1.2")]
      public static unsafe void GetProgramNamedParameter(int id, int len, ref byte name, out double @params)
      {
        fixed (byte* name1 = &name)
          fixed (double* params1 = &@params)
          {
            GL.Delegates.glGetProgramNamedParameterdvNV((uint) id, len, name1, params1);
            @params = *params1;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterdvNV", Version = "1.2")]
      public static unsafe void GetProgramNamedParameter(int id, int len, byte* name, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetProgramNamedParameterdvNV((uint) id, len, name, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterdvNV", Version = "1.2")]
      public static unsafe void GetProgramNamedParameter(int id, int len, byte* name, [Out] double* @params)
      {
        GL.Delegates.glGetProgramNamedParameterdvNV((uint) id, len, name, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterdvNV", Version = "1.2")]
      public static unsafe void GetProgramNamedParameter(uint id, int len, ref byte name, out double @params)
      {
        fixed (byte* name1 = &name)
          fixed (double* params1 = &@params)
          {
            GL.Delegates.glGetProgramNamedParameterdvNV(id, len, name1, params1);
            @params = *params1;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterdvNV", Version = "1.2")]
      public static unsafe void GetProgramNamedParameter(uint id, int len, byte* name, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetProgramNamedParameterdvNV(id, len, name, params1);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterdvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramNamedParameter(uint id, int len, byte* name, [Out] double* @params)
      {
        GL.Delegates.glGetProgramNamedParameterdvNV(id, len, name, @params);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterfvNV", Version = "1.2")]
      public static unsafe void GetProgramNamedParameter(int id, int len, ref byte name, out float @params)
      {
        fixed (byte* name1 = &name)
          fixed (float* params1 = &@params)
          {
            GL.Delegates.glGetProgramNamedParameterfvNV((uint) id, len, name1, params1);
            @params = *params1;
          }
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramNamedParameter(int id, int len, byte* name, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetProgramNamedParameterfvNV((uint) id, len, name, params1);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramNamedParameter(int id, int len, byte* name, [Out] float* @params)
      {
        GL.Delegates.glGetProgramNamedParameterfvNV((uint) id, len, name, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterfvNV", Version = "1.2")]
      public static unsafe void GetProgramNamedParameter(uint id, int len, ref byte name, out float @params)
      {
        fixed (byte* name1 = &name)
          fixed (float* params1 = &@params)
          {
            GL.Delegates.glGetProgramNamedParameterfvNV(id, len, name1, params1);
            @params = *params1;
          }
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramNamedParameter(uint id, int len, byte* name, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetProgramNamedParameterfvNV(id, len, name, params1);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glGetProgramNamedParameterfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramNamedParameter(uint id, int len, byte* name, [Out] float* @params)
      {
        GL.Delegates.glGetProgramNamedParameterfvNV(id, len, name, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterdvNV", Version = "1.2")]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetProgramParameterdvNV(target, (uint) index, pname, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterdvNV", Version = "1.2")]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetProgramParameterdvNV(target, (uint) index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterdvNV", Version = "1.2")]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, [Out] double* @params)
      {
        GL.Delegates.glGetProgramParameterdvNV(target, (uint) index, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterdvNV", Version = "1.2")]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetProgramParameterdvNV(target, index, pname, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterdvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetProgramParameterdvNV(target, index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterdvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] double* @params)
      {
        GL.Delegates.glGetProgramParameterdvNV(target, index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterfvNV", Version = "1.2")]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetProgramParameterfvNV(target, (uint) index, pname, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterfvNV", Version = "1.2")]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetProgramParameterfvNV(target, (uint) index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, int index, AssemblyProgramParameterArb pname, [Out] float* @params)
      {
        GL.Delegates.glGetProgramParameterfvNV(target, (uint) index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetProgramParameterfvNV(target, index, pname, params1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetProgramParameterfvNV(target, index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramParameterfvNV", Version = "1.2")]
      public static unsafe void GetProgramParameter(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] float* @params)
      {
        GL.Delegates.glGetProgramParameterfvNV(target, index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramStringNV", Version = "1.2")]
      public static unsafe void GetProgramString(int id, NvVertexProgram pname, [Out] byte[] program)
      {
        fixed (byte* program1 = program)
          GL.Delegates.glGetProgramStringNV((uint) id, pname, program1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramStringNV", Version = "1.2")]
      public static unsafe void GetProgramString(int id, NvVertexProgram pname, out byte program)
      {
        fixed (byte* program1 = &program)
        {
          GL.Delegates.glGetProgramStringNV((uint) id, pname, program1);
          program = *program1;
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramStringNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramString(int id, NvVertexProgram pname, [Out] byte* program)
      {
        GL.Delegates.glGetProgramStringNV((uint) id, pname, program);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramStringNV", Version = "1.2")]
      public static unsafe void GetProgramString(uint id, NvVertexProgram pname, [Out] byte[] program)
      {
        fixed (byte* program1 = program)
          GL.Delegates.glGetProgramStringNV(id, pname, program1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramStringNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramString(uint id, NvVertexProgram pname, out byte program)
      {
        fixed (byte* program1 = &program)
        {
          GL.Delegates.glGetProgramStringNV(id, pname, program1);
          program = *program1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetProgramStringNV", Version = "1.2")]
      public static unsafe void GetProgramString(uint id, NvVertexProgram pname, [Out] byte* program)
      {
        GL.Delegates.glGetProgramStringNV(id, pname, program);
      }

      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glGetProgramSubroutineParameteruivNV", Version = "4.1")]
      public static unsafe void GetProgramSubroutineParameter(NvGpuProgram5 target, int index, [Out] int[] param)
      {
        fixed (int* numPtr = param)
          GL.Delegates.glGetProgramSubroutineParameteruivNV(target, (uint) index, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glGetProgramSubroutineParameteruivNV", Version = "4.1")]
      public static unsafe void GetProgramSubroutineParameter(NvGpuProgram5 target, int index, out int param)
      {
        fixed (int* numPtr = &param)
        {
          GL.Delegates.glGetProgramSubroutineParameteruivNV(target, (uint) index, (uint*) numPtr);
          param = *numPtr;
        }
      }

      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glGetProgramSubroutineParameteruivNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramSubroutineParameter(NvGpuProgram5 target, int index, [Out] int* param)
      {
        GL.Delegates.glGetProgramSubroutineParameteruivNV(target, (uint) index, (uint*) param);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glGetProgramSubroutineParameteruivNV", Version = "4.1")]
      public static unsafe void GetProgramSubroutineParameter(NvGpuProgram5 target, uint index, [Out] uint[] param)
      {
        fixed (uint* numPtr = param)
          GL.Delegates.glGetProgramSubroutineParameteruivNV(target, index, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glGetProgramSubroutineParameteruivNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramSubroutineParameter(NvGpuProgram5 target, uint index, out uint param)
      {
        fixed (uint* numPtr = &param)
        {
          GL.Delegates.glGetProgramSubroutineParameteruivNV(target, index, numPtr);
          param = *numPtr;
        }
      }

      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glGetProgramSubroutineParameteruivNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramSubroutineParameter(NvGpuProgram5 target, uint index, [Out] uint* param)
      {
        GL.Delegates.glGetProgramSubroutineParameteruivNV(target, index, param);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetTrackMatrixivNV", Version = "1.2")]
      public static unsafe void GetTrackMatrix(AssemblyProgramTargetArb target, int address, AssemblyProgramParameterArb pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetTrackMatrixivNV(target, (uint) address, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetTrackMatrixivNV", Version = "1.2")]
      public static unsafe void GetTrackMatrix(AssemblyProgramTargetArb target, int address, AssemblyProgramParameterArb pname, [Out] int* @params)
      {
        GL.Delegates.glGetTrackMatrixivNV(target, (uint) address, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetTrackMatrixivNV", Version = "1.2")]
      public static unsafe void GetTrackMatrix(AssemblyProgramTargetArb target, uint address, AssemblyProgramParameterArb pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetTrackMatrixivNV(target, address, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetTrackMatrixivNV", Version = "1.2")]
      public static unsafe void GetTrackMatrix(AssemblyProgramTargetArb target, uint address, AssemblyProgramParameterArb pname, [Out] int* @params)
      {
        GL.Delegates.glGetTrackMatrixivNV(target, address, pname, @params);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetTransformFeedbackVaryingNV", Version = "1.5")]
      public static unsafe void GetTransformFeedbackVarying(int program, int index, out int location)
      {
        fixed (int* location1 = &location)
        {
          GL.Delegates.glGetTransformFeedbackVaryingNV((uint) program, (uint) index, location1);
          location = *location1;
        }
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetTransformFeedbackVaryingNV", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GetTransformFeedbackVarying(int program, int index, [Out] int* location)
      {
        GL.Delegates.glGetTransformFeedbackVaryingNV((uint) program, (uint) index, location);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetTransformFeedbackVaryingNV", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GetTransformFeedbackVarying(uint program, uint index, out int location)
      {
        fixed (int* location1 = &location)
        {
          GL.Delegates.glGetTransformFeedbackVaryingNV(program, index, location1);
          location = *location1;
        }
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetTransformFeedbackVaryingNV", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void GetTransformFeedbackVarying(uint program, uint index, [Out] int* location)
      {
        GL.Delegates.glGetTransformFeedbackVaryingNV(program, index, location);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glGetUniformi64vNV", Version = "4.1")]
      public static unsafe void GetUniform(int program, int location, [Out] long[] @params)
      {
        fixed (long* params1 = @params)
          GL.Delegates.glGetUniformi64vNV((uint) program, location, params1);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glGetUniformi64vNV", Version = "4.1")]
      public static unsafe void GetUniform(int program, int location, out long @params)
      {
        fixed (long* params1 = &@params)
        {
          GL.Delegates.glGetUniformi64vNV((uint) program, location, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glGetUniformi64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(int program, int location, [Out] long* @params)
      {
        GL.Delegates.glGetUniformi64vNV((uint) program, location, @params);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glGetUniformi64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(uint program, int location, [Out] long[] @params)
      {
        fixed (long* params1 = @params)
          GL.Delegates.glGetUniformi64vNV(program, location, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glGetUniformi64vNV", Version = "4.1")]
      public static unsafe void GetUniform(uint program, int location, out long @params)
      {
        fixed (long* params1 = &@params)
        {
          GL.Delegates.glGetUniformi64vNV(program, location, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glGetUniformi64vNV", Version = "4.1")]
      public static unsafe void GetUniform(uint program, int location, [Out] long* @params)
      {
        GL.Delegates.glGetUniformi64vNV(program, location, @params);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetUniformui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetUniform(uint program, int location, [Out] ulong[] @params)
      {
        fixed (ulong* params1 = @params)
          GL.Delegates.glGetUniformui64vNV(program, location, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetUniformui64vNV", Version = "1.2")]
      public static unsafe void GetUniform(uint program, int location, out ulong @params)
      {
        fixed (ulong* params1 = &@params)
        {
          GL.Delegates.glGetUniformui64vNV(program, location, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glGetUniformui64vNV", Version = "1.2")]
      public static unsafe void GetUniform(uint program, int location, [Out] ulong* @params)
      {
        GL.Delegates.glGetUniformui64vNV(program, location, @params);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetVaryingLocationNV", Version = "1.5")]
      public static int GetVaryingLocation(int program, string name)
      {
        return GL.Delegates.glGetVaryingLocationNV((uint) program, name);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glGetVaryingLocationNV", Version = "1.5")]
      public static int GetVaryingLocation(uint program, string name)
      {
        return GL.Delegates.glGetVaryingLocationNV(program, name);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribdvNV", Version = "1.2")]
      public static unsafe void GetVertexAttrib(int index, NvVertexProgram pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribdvNV((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribdvNV", Version = "1.2")]
      public static unsafe void GetVertexAttrib(int index, NvVertexProgram pname, [Out] double* @params)
      {
        GL.Delegates.glGetVertexAttribdvNV((uint) index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribdvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, NvVertexProgram pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribdvNV(index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribdvNV", Version = "1.2")]
      public static unsafe void GetVertexAttrib(uint index, NvVertexProgram pname, [Out] double* @params)
      {
        GL.Delegates.glGetVertexAttribdvNV(index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribfvNV", Version = "1.2")]
      public static unsafe void GetVertexAttrib(int index, NvVertexProgram pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribfvNV((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribfvNV", Version = "1.2")]
      public static unsafe void GetVertexAttrib(int index, NvVertexProgram pname, [Out] float* @params)
      {
        GL.Delegates.glGetVertexAttribfvNV((uint) index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, NvVertexProgram pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribfvNV(index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribfvNV", Version = "1.2")]
      public static unsafe void GetVertexAttrib(uint index, NvVertexProgram pname, [Out] float* @params)
      {
        GL.Delegates.glGetVertexAttribfvNV(index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribivNV", Version = "1.2")]
      public static unsafe void GetVertexAttrib(int index, NvVertexProgram pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribivNV((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribivNV", Version = "1.2")]
      public static unsafe void GetVertexAttrib(int index, NvVertexProgram pname, [Out] int* @params)
      {
        GL.Delegates.glGetVertexAttribivNV((uint) index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, NvVertexProgram pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribivNV(index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribivNV", Version = "1.2")]
      public static unsafe void GetVertexAttrib(uint index, NvVertexProgram pname, [Out] int* @params)
      {
        GL.Delegates.glGetVertexAttribivNV(index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glGetVertexAttribLi64vNV", Version = "4.1")]
      public static unsafe void GetVertexAttrib(int index, NvVertexAttribInteger64bit pname, [Out] long[] @params)
      {
        fixed (long* params1 = @params)
          GL.Delegates.glGetVertexAttribLi64vNV((uint) index, pname, params1);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glGetVertexAttribLi64vNV", Version = "4.1")]
      public static unsafe void GetVertexAttrib(int index, NvVertexAttribInteger64bit pname, out long @params)
      {
        fixed (long* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribLi64vNV((uint) index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glGetVertexAttribLi64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(int index, NvVertexAttribInteger64bit pname, [Out] long* @params)
      {
        GL.Delegates.glGetVertexAttribLi64vNV((uint) index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glGetVertexAttribLi64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, [Out] long[] @params)
      {
        fixed (long* params1 = @params)
          GL.Delegates.glGetVertexAttribLi64vNV(index, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glGetVertexAttribLi64vNV", Version = "4.1")]
      public static unsafe void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, out long @params)
      {
        fixed (long* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribLi64vNV(index, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glGetVertexAttribLi64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, [Out] long* @params)
      {
        GL.Delegates.glGetVertexAttribLi64vNV(index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glGetVertexAttribLui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, [Out] ulong[] @params)
      {
        fixed (ulong* params1 = @params)
          GL.Delegates.glGetVertexAttribLui64vNV(index, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glGetVertexAttribLui64vNV", Version = "4.1")]
      public static unsafe void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, out ulong @params)
      {
        fixed (ulong* params1 = &@params)
        {
          GL.Delegates.glGetVertexAttribLui64vNV(index, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glGetVertexAttribLui64vNV", Version = "4.1")]
      public static unsafe void GetVertexAttrib(uint index, NvVertexAttribInteger64bit pname, [Out] ulong* @params)
      {
        GL.Delegates.glGetVertexAttribLui64vNV(index, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      public static void GetVertexAttribPointer(int index, NvVertexProgram pname, [Out] IntPtr pointer)
      {
        GL.Delegates.glGetVertexAttribPointervNV((uint) index, pname, pointer);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      public static void GetVertexAttribPointer<T2>(int index, NvVertexProgram pname, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervNV((uint) index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      public static void GetVertexAttribPointer<T2>(int index, NvVertexProgram pname, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervNV((uint) index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      public static void GetVertexAttribPointer<T2>(int index, NvVertexProgram pname, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervNV((uint) index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      public static void GetVertexAttribPointer<T2>(int index, NvVertexProgram pname, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervNV((uint) index, pname, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      public static void GetVertexAttribPointer(uint index, NvVertexProgram pname, [Out] IntPtr pointer)
      {
        GL.Delegates.glGetVertexAttribPointervNV(index, pname, pointer);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void GetVertexAttribPointer<T2>(uint index, NvVertexProgram pname, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervNV(index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      public static void GetVertexAttribPointer<T2>(uint index, NvVertexProgram pname, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervNV(index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void GetVertexAttribPointer<T2>(uint index, NvVertexProgram pname, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervNV(index, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glGetVertexAttribPointervNV", Version = "1.2")]
      public static void GetVertexAttribPointer<T2>(uint index, NvVertexProgram pname, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetVertexAttribPointervNV(index, pname, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureivNV", Version = "1.2")]
      public static unsafe void GetVideoCapture(int video_capture_slot, NvVideoCapture pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVideoCaptureivNV((uint) video_capture_slot, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureivNV", Version = "1.2")]
      public static unsafe void GetVideoCapture(int video_capture_slot, NvVideoCapture pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVideoCaptureivNV((uint) video_capture_slot, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureivNV", Version = "1.2")]
      public static unsafe void GetVideoCapture(int video_capture_slot, NvVideoCapture pname, [Out] int* @params)
      {
        GL.Delegates.glGetVideoCaptureivNV((uint) video_capture_slot, pname, @params);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideoCapture(uint video_capture_slot, NvVideoCapture pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVideoCaptureivNV(video_capture_slot, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureivNV", Version = "1.2")]
      public static unsafe void GetVideoCapture(uint video_capture_slot, NvVideoCapture pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVideoCaptureivNV(video_capture_slot, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureivNV", Version = "1.2")]
      public static unsafe void GetVideoCapture(uint video_capture_slot, NvVideoCapture pname, [Out] int* @params)
      {
        GL.Delegates.glGetVideoCaptureivNV(video_capture_slot, pname, @params);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamdvNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetVideoCaptureStreamdvNV((uint) video_capture_slot, (uint) stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamdvNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetVideoCaptureStreamdvNV((uint) video_capture_slot, (uint) stream, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamdvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] double* @params)
      {
        GL.Delegates.glGetVideoCaptureStreamdvNV((uint) video_capture_slot, (uint) stream, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamdvNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamdvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, out double @params)
      {
        fixed (double* params1 = &@params)
        {
          GL.Delegates.glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamdvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] double* @params)
      {
        GL.Delegates.glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, @params);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamfvNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetVideoCaptureStreamfvNV((uint) video_capture_slot, (uint) stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamfvNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVideoCaptureStreamfvNV((uint) video_capture_slot, (uint) stream, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamfvNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] float* @params)
      {
        GL.Delegates.glGetVideoCaptureStreamfvNV((uint) video_capture_slot, (uint) stream, pname, @params);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamfvNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] float* @params)
      {
        GL.Delegates.glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, @params);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamivNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVideoCaptureStreamivNV((uint) video_capture_slot, (uint) stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamivNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVideoCaptureStreamivNV((uint) video_capture_slot, (uint) stream, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamivNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(int video_capture_slot, int stream, NvVideoCapture pname, [Out] int* @params)
      {
        GL.Delegates.glGetVideoCaptureStreamivNV((uint) video_capture_slot, (uint) stream, pname, @params);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamivNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glGetVideoCaptureStreamivNV", Version = "1.2")]
      public static unsafe void GetVideoCaptureStream(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] int* @params)
      {
        GL.Delegates.glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, @params);
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoi64vNV", Version = "1.2")]
      public static unsafe void GetVideo(int video_slot, NvPresentVideo pname, [Out] long[] @params)
      {
        fixed (long* params1 = @params)
          GL.Delegates.glGetVideoi64vNV((uint) video_slot, pname, params1);
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoi64vNV", Version = "1.2")]
      public static unsafe void GetVideo(int video_slot, NvPresentVideo pname, out long @params)
      {
        fixed (long* params1 = &@params)
        {
          GL.Delegates.glGetVideoi64vNV((uint) video_slot, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoi64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideo(int video_slot, NvPresentVideo pname, [Out] long* @params)
      {
        GL.Delegates.glGetVideoi64vNV((uint) video_slot, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoi64vNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, [Out] long[] @params)
      {
        fixed (long* params1 = @params)
          GL.Delegates.glGetVideoi64vNV(video_slot, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoi64vNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, out long @params)
      {
        fixed (long* params1 = &@params)
        {
          GL.Delegates.glGetVideoi64vNV(video_slot, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoi64vNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, [Out] long* @params)
      {
        GL.Delegates.glGetVideoi64vNV(video_slot, pname, @params);
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoivNV", Version = "1.2")]
      public static unsafe void GetVideo(int video_slot, NvPresentVideo pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVideoivNV((uint) video_slot, pname, params1);
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoivNV", Version = "1.2")]
      public static unsafe void GetVideo(int video_slot, NvPresentVideo pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVideoivNV((uint) video_slot, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideo(int video_slot, NvPresentVideo pname, [Out] int* @params)
      {
        GL.Delegates.glGetVideoivNV((uint) video_slot, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoivNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetVideoivNV(video_slot, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoivNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetVideoivNV(video_slot, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, [Out] int* @params)
      {
        GL.Delegates.glGetVideoivNV(video_slot, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoui64vNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, [Out] ulong[] @params)
      {
        fixed (ulong* params1 = @params)
          GL.Delegates.glGetVideoui64vNV(video_slot, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoui64vNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, out ulong @params)
      {
        fixed (ulong* params1 = &@params)
        {
          GL.Delegates.glGetVideoui64vNV(video_slot, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideoui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, [Out] ulong* @params)
      {
        GL.Delegates.glGetVideoui64vNV(video_slot, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideouivNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, [Out] uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glGetVideouivNV(video_slot, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideouivNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, out uint @params)
      {
        fixed (uint* params1 = &@params)
        {
          GL.Delegates.glGetVideouivNV(video_slot, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glGetVideouivNV", Version = "1.2")]
      public static unsafe void GetVideo(uint video_slot, NvPresentVideo pname, [Out] uint* @params)
      {
        GL.Delegates.glGetVideouivNV(video_slot, pname, @params);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glIndexFormatNV", Version = "1.2")]
      public static void IndexFormat(NvVertexBufferUnifiedMemory type, int stride)
      {
        GL.Delegates.glIndexFormatNV(type, stride);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glIsBufferResidentNV", Version = "1.2")]
      public static bool IsBufferResident(NvShaderBufferLoad target)
      {
        return GL.Delegates.glIsBufferResidentNV(target);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glIsFenceNV", Version = "1.2")]
      public static bool IsFence(int fence)
      {
        return GL.Delegates.glIsFenceNV((uint) fence);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glIsFenceNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static bool IsFence(uint fence)
      {
        return GL.Delegates.glIsFenceNV(fence);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glIsNamedBufferResidentNV", Version = "1.2")]
      public static bool IsNamedBufferResident(int buffer)
      {
        return GL.Delegates.glIsNamedBufferResidentNV((uint) buffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glIsNamedBufferResidentNV", Version = "1.2")]
      public static bool IsNamedBufferResident(uint buffer)
      {
        return GL.Delegates.glIsNamedBufferResidentNV(buffer);
      }

      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glIsOcclusionQueryNV", Version = "1.2")]
      public static bool IsOcclusionQuery(int id)
      {
        return GL.Delegates.glIsOcclusionQueryNV((uint) id);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_occlusion_query", EntryPoint = "glIsOcclusionQueryNV", Version = "1.2")]
      public static bool IsOcclusionQuery(uint id)
      {
        return GL.Delegates.glIsOcclusionQueryNV(id);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glIsProgramNV", Version = "1.2")]
      public static bool IsProgram(int id)
      {
        return GL.Delegates.glIsProgramNV((uint) id);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glIsProgramNV", Version = "1.2")]
      public static bool IsProgram(uint id)
      {
        return GL.Delegates.glIsProgramNV(id);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glIsTransformFeedbackNV", Version = "")]
      public static bool IsTransformFeedback(int id)
      {
        return GL.Delegates.glIsTransformFeedbackNV((uint) id);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glIsTransformFeedbackNV", Version = "")]
      [CLSCompliant(false)]
      public static bool IsTransformFeedback(uint id)
      {
        return GL.Delegates.glIsTransformFeedbackNV(id);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glLoadProgramNV", Version = "1.2")]
      public static unsafe void LoadProgram(AssemblyProgramTargetArb target, int id, int len, byte[] program)
      {
        fixed (byte* program1 = program)
          GL.Delegates.glLoadProgramNV(target, (uint) id, len, program1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glLoadProgramNV", Version = "1.2")]
      public static unsafe void LoadProgram(AssemblyProgramTargetArb target, int id, int len, ref byte program)
      {
        fixed (byte* program1 = &program)
          GL.Delegates.glLoadProgramNV(target, (uint) id, len, program1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glLoadProgramNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void LoadProgram(AssemblyProgramTargetArb target, int id, int len, byte* program)
      {
        GL.Delegates.glLoadProgramNV(target, (uint) id, len, program);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glLoadProgramNV", Version = "1.2")]
      public static unsafe void LoadProgram(AssemblyProgramTargetArb target, uint id, int len, byte[] program)
      {
        fixed (byte* program1 = program)
          GL.Delegates.glLoadProgramNV(target, id, len, program1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glLoadProgramNV", Version = "1.2")]
      public static unsafe void LoadProgram(AssemblyProgramTargetArb target, uint id, int len, ref byte program)
      {
        fixed (byte* program1 = &program)
          GL.Delegates.glLoadProgramNV(target, id, len, program1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glLoadProgramNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void LoadProgram(AssemblyProgramTargetArb target, uint id, int len, byte* program)
      {
        GL.Delegates.glLoadProgramNV(target, id, len, program);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glMakeBufferNonResidentNV", Version = "1.2")]
      public static void MakeBufferNonResident(NvShaderBufferLoad target)
      {
        GL.Delegates.glMakeBufferNonResidentNV(target);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glMakeBufferResidentNV", Version = "1.2")]
      public static void MakeBufferResident(NvShaderBufferLoad target, NvShaderBufferLoad access)
      {
        GL.Delegates.glMakeBufferResidentNV(target, access);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glMakeNamedBufferNonResidentNV", Version = "1.2")]
      public static void MakeNamedBufferNonResident(int buffer)
      {
        GL.Delegates.glMakeNamedBufferNonResidentNV((uint) buffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glMakeNamedBufferNonResidentNV", Version = "1.2")]
      public static void MakeNamedBufferNonResident(uint buffer)
      {
        GL.Delegates.glMakeNamedBufferNonResidentNV(buffer);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glMakeNamedBufferResidentNV", Version = "1.2")]
      public static void MakeNamedBufferResident(int buffer, NvShaderBufferLoad access)
      {
        GL.Delegates.glMakeNamedBufferResidentNV((uint) buffer, access);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glMakeNamedBufferResidentNV", Version = "1.2")]
      public static void MakeNamedBufferResident(uint buffer, NvShaderBufferLoad access)
      {
        GL.Delegates.glMakeNamedBufferResidentNV(buffer, access);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      public static void MapControlPoints(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
      {
        GL.Delegates.glMapControlPointsNV(target, (uint) index, type, ustride, vstride, uorder, vorder, packed, points);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      public static void MapControlPoints<T8>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In, Out] T8[] points) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMapControlPointsNV(target, (uint) index, type, ustride, vstride, uorder, vorder, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      public static void MapControlPoints<T8>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In, Out] T8[,] points) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMapControlPointsNV(target, (uint) index, type, ustride, vstride, uorder, vorder, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      public static void MapControlPoints<T8>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In, Out] T8[,,] points) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMapControlPointsNV(target, (uint) index, type, ustride, vstride, uorder, vorder, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      public static void MapControlPoints<T8>(NvEvaluators target, int index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In, Out] ref T8 points) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMapControlPointsNV(target, (uint) index, type, ustride, vstride, uorder, vorder, packed, gcHandle.AddrOfPinnedObject());
          points = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static void MapControlPoints(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points)
      {
        GL.Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      public static void MapControlPoints<T8>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In, Out] T8[] points) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      public static void MapControlPoints<T8>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In, Out] T8[,] points) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static void MapControlPoints<T8>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In, Out] T8[,,] points) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapControlPointsNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static void MapControlPoints<T8>(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, [In, Out] ref T8 points) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) points, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, gcHandle.AddrOfPinnedObject());
          points = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapParameterfvNV", Version = "1.1")]
      public static unsafe void MapParameter(NvEvaluators target, NvEvaluators pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glMapParameterfvNV(target, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapParameterfvNV", Version = "1.1")]
      public static unsafe void MapParameter(NvEvaluators target, NvEvaluators pname, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glMapParameterfvNV(target, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapParameterfvNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MapParameter(NvEvaluators target, NvEvaluators pname, float* @params)
      {
        GL.Delegates.glMapParameterfvNV(target, pname, @params);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapParameterivNV", Version = "1.1")]
      public static unsafe void MapParameter(NvEvaluators target, NvEvaluators pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glMapParameterivNV(target, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapParameterivNV", Version = "1.1")]
      public static unsafe void MapParameter(NvEvaluators target, NvEvaluators pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glMapParameterivNV(target, pname, params1);
      }

      [AutoGenerated(Category = "NV_evaluators", EntryPoint = "glMapParameterivNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void MapParameter(NvEvaluators target, NvEvaluators pname, int* @params)
      {
        GL.Delegates.glMapParameterivNV(target, pname, @params);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord1hNV", Version = "1.2")]
      public static void MultiTexCoord1h(TextureUnit target, Half s)
      {
        GL.Delegates.glMultiTexCoord1hNV(target, s);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord1hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord1h(TextureUnit target, Half* v)
      {
        GL.Delegates.glMultiTexCoord1hvNV(target, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord2hNV", Version = "1.2")]
      public static void MultiTexCoord2h(TextureUnit target, Half s, Half t)
      {
        GL.Delegates.glMultiTexCoord2hNV(target, s, t);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord2hvNV", Version = "1.2")]
      public static unsafe void MultiTexCoord2h(TextureUnit target, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glMultiTexCoord2hvNV(target, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord2hvNV", Version = "1.2")]
      public static unsafe void MultiTexCoord2h(TextureUnit target, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glMultiTexCoord2hvNV(target, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord2hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord2h(TextureUnit target, Half* v)
      {
        GL.Delegates.glMultiTexCoord2hvNV(target, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord3hNV", Version = "1.2")]
      public static void MultiTexCoord3h(TextureUnit target, Half s, Half t, Half r)
      {
        GL.Delegates.glMultiTexCoord3hNV(target, s, t, r);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord3hvNV", Version = "1.2")]
      public static unsafe void MultiTexCoord3h(TextureUnit target, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glMultiTexCoord3hvNV(target, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord3hvNV", Version = "1.2")]
      public static unsafe void MultiTexCoord3h(TextureUnit target, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glMultiTexCoord3hvNV(target, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord3hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void MultiTexCoord3h(TextureUnit target, Half* v)
      {
        GL.Delegates.glMultiTexCoord3hvNV(target, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord4hNV", Version = "1.2")]
      public static void MultiTexCoord4h(TextureUnit target, Half s, Half t, Half r, Half q)
      {
        GL.Delegates.glMultiTexCoord4hNV(target, s, t, r, q);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord4hvNV", Version = "1.2")]
      public static unsafe void MultiTexCoord4h(TextureUnit target, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glMultiTexCoord4hvNV(target, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord4hvNV", Version = "1.2")]
      public static unsafe void MultiTexCoord4h(TextureUnit target, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glMultiTexCoord4hvNV(target, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glMultiTexCoord4hvNV", Version = "1.2")]
      public static unsafe void MultiTexCoord4h(TextureUnit target, Half* v)
      {
        GL.Delegates.glMultiTexCoord4hvNV(target, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glNormal3hNV", Version = "1.2")]
      public static void Normal3h(Half nx, Half ny, Half nz)
      {
        GL.Delegates.glNormal3hNV(nx, ny, nz);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glNormal3hvNV", Version = "1.2")]
      public static unsafe void Normal3h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glNormal3hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glNormal3hvNV", Version = "1.2")]
      public static unsafe void Normal3h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glNormal3hvNV(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glNormal3hvNV", Version = "1.2")]
      public static unsafe void Normal3h(Half* v)
      {
        GL.Delegates.glNormal3hvNV(v);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glNormalFormatNV", Version = "1.2")]
      public static void NormalFormat(NvVertexBufferUnifiedMemory type, int stride)
      {
        GL.Delegates.glNormalFormatNV(type, stride);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glPauseTransformFeedbackNV", Version = "")]
      public static void PauseTransformFeedback()
      {
        GL.Delegates.glPauseTransformFeedbackNV();
      }

      [AutoGenerated(Category = "NV_pixel_data_range", EntryPoint = "glPixelDataRangeNV", Version = "1.2")]
      public static void PixelDataRange(NvPixelDataRange target, int length, [Out] IntPtr pointer)
      {
        GL.Delegates.glPixelDataRangeNV(target, length, pointer);
      }

      [AutoGenerated(Category = "NV_pixel_data_range", EntryPoint = "glPixelDataRangeNV", Version = "1.2")]
      public static void PixelDataRange<T2>(NvPixelDataRange target, int length, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glPixelDataRangeNV(target, length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_pixel_data_range", EntryPoint = "glPixelDataRangeNV", Version = "1.2")]
      public static void PixelDataRange<T2>(NvPixelDataRange target, int length, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glPixelDataRangeNV(target, length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_pixel_data_range", EntryPoint = "glPixelDataRangeNV", Version = "1.2")]
      public static void PixelDataRange<T2>(NvPixelDataRange target, int length, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glPixelDataRangeNV(target, length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_pixel_data_range", EntryPoint = "glPixelDataRangeNV", Version = "1.2")]
      public static void PixelDataRange<T2>(NvPixelDataRange target, int length, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glPixelDataRangeNV(target, length, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_point_sprite", EntryPoint = "glPointParameteriNV", Version = "1.2")]
      public static void PointParameter(NvPointSprite pname, int param)
      {
        GL.Delegates.glPointParameteriNV(pname, param);
      }

      [AutoGenerated(Category = "NV_point_sprite", EntryPoint = "glPointParameterivNV", Version = "1.2")]
      public static unsafe void PointParameter(NvPointSprite pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glPointParameterivNV(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_point_sprite", EntryPoint = "glPointParameterivNV", Version = "1.2")]
      public static unsafe void PointParameter(NvPointSprite pname, int* @params)
      {
        GL.Delegates.glPointParameterivNV(pname, @params);
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glPresentFrameDualFillNV", Version = "1.2")]
      public static void PresentFrameDualFill(int video_slot, long minPresentTime, int beginPresentTimeId, int presentDurationId, NvPresentVideo type, NvPresentVideo target0, int fill0, NvPresentVideo target1, int fill1, NvPresentVideo target2, int fill2, NvPresentVideo target3, int fill3)
      {
        GL.Delegates.glPresentFrameDualFillNV((uint) video_slot, (ulong) minPresentTime, (uint) beginPresentTimeId, (uint) presentDurationId, type, target0, (uint) fill0, target1, (uint) fill1, target2, (uint) fill2, target3, (uint) fill3);
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glPresentFrameDualFillNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void PresentFrameDualFill(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, NvPresentVideo type, NvPresentVideo target0, uint fill0, NvPresentVideo target1, uint fill1, NvPresentVideo target2, uint fill2, NvPresentVideo target3, uint fill3)
      {
        GL.Delegates.glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
      }

      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glPresentFrameKeyedNV", Version = "1.2")]
      public static void PresentFrameKeye(int video_slot, long minPresentTime, int beginPresentTimeId, int presentDurationId, NvPresentVideo type, NvPresentVideo target0, int fill0, int key0, NvPresentVideo target1, int fill1, int key1)
      {
        GL.Delegates.glPresentFrameKeyedNV((uint) video_slot, (ulong) minPresentTime, (uint) beginPresentTimeId, (uint) presentDurationId, type, target0, (uint) fill0, (uint) key0, target1, (uint) fill1, (uint) key1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_present_video", EntryPoint = "glPresentFrameKeyedNV", Version = "1.2")]
      public static void PresentFrameKeye(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, NvPresentVideo type, NvPresentVideo target0, uint fill0, uint key0, NvPresentVideo target1, uint fill1, uint key1)
      {
        GL.Delegates.glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
      }

      [AutoGenerated(Category = "NV_primitive_restart", EntryPoint = "glPrimitiveRestartIndexNV", Version = "1.2")]
      public static void PrimitiveRestartIndex(int index)
      {
        GL.Delegates.glPrimitiveRestartIndexNV((uint) index);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_primitive_restart", EntryPoint = "glPrimitiveRestartIndexNV", Version = "1.2")]
      public static void PrimitiveRestartIndex(uint index)
      {
        GL.Delegates.glPrimitiveRestartIndexNV(index);
      }

      [AutoGenerated(Category = "NV_primitive_restart", EntryPoint = "glPrimitiveRestartNV", Version = "1.2")]
      public static void PrimitiveRestart()
      {
        GL.Delegates.glPrimitiveRestartNV();
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersfvNV", Version = "1.2")]
      public static unsafe void ProgramBufferParameters(NvParameterBufferObject target, int buffer, int index, int count, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramBufferParametersfvNV(target, (uint) buffer, (uint) index, count, params1);
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersfvNV", Version = "1.2")]
      public static unsafe void ProgramBufferParameters(NvParameterBufferObject target, int buffer, int index, int count, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramBufferParametersfvNV(target, (uint) buffer, (uint) index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersfvNV", Version = "1.2")]
      public static unsafe void ProgramBufferParameters(NvParameterBufferObject target, int buffer, int index, int count, float* @params)
      {
        GL.Delegates.glProgramBufferParametersfvNV(target, (uint) buffer, (uint) index, count, @params);
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramBufferParameters(NvParameterBufferObject target, uint buffer, uint index, int count, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersfvNV", Version = "1.2")]
      public static unsafe void ProgramBufferParameters(NvParameterBufferObject target, uint buffer, uint index, int count, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, params1);
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramBufferParameters(NvParameterBufferObject target, uint buffer, uint index, int count, float* @params)
      {
        GL.Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, @params);
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersIivNV", Version = "1.2")]
      public static unsafe void ProgramBufferParametersI(NvParameterBufferObject target, int buffer, int index, int count, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramBufferParametersIivNV(target, (uint) buffer, (uint) index, count, params1);
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersIivNV", Version = "1.2")]
      public static unsafe void ProgramBufferParametersI(NvParameterBufferObject target, int buffer, int index, int count, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramBufferParametersIivNV(target, (uint) buffer, (uint) index, count, params1);
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersIivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramBufferParametersI(NvParameterBufferObject target, int buffer, int index, int count, int* @params)
      {
        GL.Delegates.glProgramBufferParametersIivNV(target, (uint) buffer, (uint) index, count, @params);
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersIivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramBufferParametersI(NvParameterBufferObject target, uint buffer, uint index, int count, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, params1);
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersIivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramBufferParametersI(NvParameterBufferObject target, uint buffer, uint index, int count, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, params1);
      }

      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersIivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramBufferParametersI(NvParameterBufferObject target, uint buffer, uint index, int count, int* @params)
      {
        GL.Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersIuivNV", Version = "1.2")]
      public static unsafe void ProgramBufferParametersI(NvParameterBufferObject target, uint buffer, uint index, int count, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersIuivNV", Version = "1.2")]
      public static unsafe void ProgramBufferParametersI(NvParameterBufferObject target, uint buffer, uint index, int count, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_parameter_buffer_object", EntryPoint = "glProgramBufferParametersIuivNV", Version = "1.2")]
      public static unsafe void ProgramBufferParametersI(NvParameterBufferObject target, uint buffer, uint index, int count, uint* @params)
      {
        GL.Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4iNV", Version = "1.3")]
      public static void ProgramEnvParameterI4(NvGpuProgram4 target, int index, int x, int y, int z, int w)
      {
        GL.Delegates.glProgramEnvParameterI4iNV(target, (uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4iNV", Version = "1.3")]
      public static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, int x, int y, int z, int w)
      {
        GL.Delegates.glProgramEnvParameterI4iNV(target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4ivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParameterI4(NvGpuProgram4 target, int index, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramEnvParameterI4ivNV(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4ivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParameterI4(NvGpuProgram4 target, int index, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramEnvParameterI4ivNV(target, (uint) index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4ivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParameterI4(NvGpuProgram4 target, int index, int* @params)
      {
        GL.Delegates.glProgramEnvParameterI4ivNV(target, (uint) index, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4ivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramEnvParameterI4ivNV(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4ivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramEnvParameterI4ivNV(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4ivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, int* @params)
      {
        GL.Delegates.glProgramEnvParameterI4ivNV(target, index, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4uiNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, uint x, uint y, uint z, uint w)
      {
        GL.Delegates.glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4uivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glProgramEnvParameterI4uivNV(target, index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4uivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glProgramEnvParameterI4uivNV(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParameterI4uivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParameterI4(NvGpuProgram4 target, uint index, uint* @params)
      {
        GL.Delegates.glProgramEnvParameterI4uivNV(target, index, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParametersI4ivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParametersI4(NvGpuProgram4 target, int index, int count, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramEnvParametersI4ivNV(target, (uint) index, count, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParametersI4ivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParametersI4(NvGpuProgram4 target, int index, int count, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramEnvParametersI4ivNV(target, (uint) index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParametersI4ivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParametersI4(NvGpuProgram4 target, int index, int count, int* @params)
      {
        GL.Delegates.glProgramEnvParametersI4ivNV(target, (uint) index, count, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParametersI4ivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramEnvParametersI4ivNV(target, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParametersI4ivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramEnvParametersI4ivNV(target, index, count, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParametersI4ivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, int* @params)
      {
        GL.Delegates.glProgramEnvParametersI4ivNV(target, index, count, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParametersI4uivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glProgramEnvParametersI4uivNV(target, index, count, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParametersI4uivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glProgramEnvParametersI4uivNV(target, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramEnvParametersI4uivNV", Version = "1.3")]
      public static unsafe void ProgramEnvParametersI4(NvGpuProgram4 target, uint index, int count, uint* @params)
      {
        GL.Delegates.glProgramEnvParametersI4uivNV(target, index, count, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4iNV", Version = "1.3")]
      public static void ProgramLocalParameterI4(NvGpuProgram4 target, int index, int x, int y, int z, int w)
      {
        GL.Delegates.glProgramLocalParameterI4iNV(target, (uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4iNV", Version = "1.3")]
      public static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, int x, int y, int z, int w)
      {
        GL.Delegates.glProgramLocalParameterI4iNV(target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4ivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParameterI4(NvGpuProgram4 target, int index, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramLocalParameterI4ivNV(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4ivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParameterI4(NvGpuProgram4 target, int index, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramLocalParameterI4ivNV(target, (uint) index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4ivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParameterI4(NvGpuProgram4 target, int index, int* @params)
      {
        GL.Delegates.glProgramLocalParameterI4ivNV(target, (uint) index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4ivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramLocalParameterI4ivNV(target, index, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4ivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramLocalParameterI4ivNV(target, index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4ivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, int* @params)
      {
        GL.Delegates.glProgramLocalParameterI4ivNV(target, index, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4uiNV", Version = "1.3")]
      public static void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, uint x, uint y, uint z, uint w)
      {
        GL.Delegates.glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4uivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glProgramLocalParameterI4uivNV(target, index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4uivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glProgramLocalParameterI4uivNV(target, index, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParameterI4uivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParameterI4(NvGpuProgram4 target, uint index, uint* @params)
      {
        GL.Delegates.glProgramLocalParameterI4uivNV(target, index, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParametersI4ivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParametersI4(NvGpuProgram4 target, int index, int count, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramLocalParametersI4ivNV(target, (uint) index, count, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParametersI4ivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParametersI4(NvGpuProgram4 target, int index, int count, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramLocalParametersI4ivNV(target, (uint) index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParametersI4ivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParametersI4(NvGpuProgram4 target, int index, int count, int* @params)
      {
        GL.Delegates.glProgramLocalParametersI4ivNV(target, (uint) index, count, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParametersI4ivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glProgramLocalParametersI4ivNV(target, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParametersI4ivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glProgramLocalParametersI4ivNV(target, index, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParametersI4ivNV", Version = "1.3")]
      public static unsafe void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, int* @params)
      {
        GL.Delegates.glProgramLocalParametersI4ivNV(target, index, count, @params);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParametersI4uivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glProgramLocalParametersI4uivNV(target, index, count, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParametersI4uivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glProgramLocalParametersI4uivNV(target, index, count, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program4", EntryPoint = "glProgramLocalParametersI4uivNV", Version = "1.3")]
      [CLSCompliant(false)]
      public static unsafe void ProgramLocalParametersI4(NvGpuProgram4 target, uint index, int count, uint* @params)
      {
        GL.Delegates.glProgramLocalParametersI4uivNV(target, index, count, @params);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(int id, int len, ref byte name, double x, double y, double z, double w)
      {
        fixed (byte* name1 = &name)
          GL.Delegates.glProgramNamedParameter4dNV((uint) id, len, name1, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramNamedParameter4(int id, int len, byte* name, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramNamedParameter4dNV((uint) id, len, name, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramNamedParameter4(uint id, int len, ref byte name, double x, double y, double z, double w)
      {
        fixed (byte* name1 = &name)
          GL.Delegates.glProgramNamedParameter4dNV(id, len, name1, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(uint id, int len, byte* name, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dvNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(int id, int len, ref byte name, ref double v)
      {
        fixed (byte* name1 = &name)
          fixed (double* v1 = &v)
            GL.Delegates.glProgramNamedParameter4dvNV((uint) id, len, name1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dvNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(int id, int len, byte* name, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glProgramNamedParameter4dvNV((uint) id, len, name, v1);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramNamedParameter4(int id, int len, byte* name, double* v)
      {
        GL.Delegates.glProgramNamedParameter4dvNV((uint) id, len, name, v);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramNamedParameter4(uint id, int len, ref byte name, ref double v)
      {
        fixed (byte* name1 = &name)
          fixed (double* v1 = &v)
            GL.Delegates.glProgramNamedParameter4dvNV(id, len, name1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dvNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(uint id, int len, byte* name, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glProgramNamedParameter4dvNV(id, len, name, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4dvNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(uint id, int len, byte* name, double* v)
      {
        GL.Delegates.glProgramNamedParameter4dvNV(id, len, name, v);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(int id, int len, ref byte name, float x, float y, float z, float w)
      {
        fixed (byte* name1 = &name)
          GL.Delegates.glProgramNamedParameter4fNV((uint) id, len, name1, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramNamedParameter4(int id, int len, byte* name, float x, float y, float z, float w)
      {
        GL.Delegates.glProgramNamedParameter4fNV((uint) id, len, name, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(uint id, int len, ref byte name, float x, float y, float z, float w)
      {
        fixed (byte* name1 = &name)
          GL.Delegates.glProgramNamedParameter4fNV(id, len, name1, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(uint id, int len, byte* name, float x, float y, float z, float w)
      {
        GL.Delegates.glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fvNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(int id, int len, ref byte name, ref float v)
      {
        fixed (byte* name1 = &name)
          fixed (float* v1 = &v)
            GL.Delegates.glProgramNamedParameter4fvNV((uint) id, len, name1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fvNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(int id, int len, byte* name, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glProgramNamedParameter4fvNV((uint) id, len, name, v1);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramNamedParameter4(int id, int len, byte* name, float* v)
      {
        GL.Delegates.glProgramNamedParameter4fvNV((uint) id, len, name, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fvNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(uint id, int len, ref byte name, ref float v)
      {
        fixed (byte* name1 = &name)
          fixed (float* v1 = &v)
            GL.Delegates.glProgramNamedParameter4fvNV(id, len, name1, v1);
      }

      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramNamedParameter4(uint id, int len, byte* name, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glProgramNamedParameter4fvNV(id, len, name, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fragment_program", EntryPoint = "glProgramNamedParameter4fvNV", Version = "1.2")]
      public static unsafe void ProgramNamedParameter4(uint id, int len, byte* name, float* v)
      {
        GL.Delegates.glProgramNamedParameter4fvNV(id, len, name, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4dNV", Version = "1.2")]
      public static void ProgramParameter4(AssemblyProgramTargetArb target, int index, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramParameter4dNV(target, (uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4dNV", Version = "1.2")]
      public static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w)
      {
        GL.Delegates.glProgramParameter4dNV(target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4dvNV", Version = "1.2")]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glProgramParameter4dvNV(target, (uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4dvNV", Version = "1.2")]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glProgramParameter4dvNV(target, (uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, int index, double* v)
      {
        GL.Delegates.glProgramParameter4dvNV(target, (uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glProgramParameter4dvNV(target, index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4dvNV", Version = "1.2")]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glProgramParameter4dvNV(target, index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4dvNV", Version = "1.2")]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, uint index, double* v)
      {
        GL.Delegates.glProgramParameter4dvNV(target, index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4fNV", Version = "1.2")]
      public static void ProgramParameter4(AssemblyProgramTargetArb target, int index, float x, float y, float z, float w)
      {
        GL.Delegates.glProgramParameter4fNV(target, (uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4fNV", Version = "1.2")]
      public static void ProgramParameter4(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w)
      {
        GL.Delegates.glProgramParameter4fNV(target, index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4fvNV", Version = "1.2")]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, int index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glProgramParameter4fvNV(target, (uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4fvNV", Version = "1.2")]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, int index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glProgramParameter4fvNV(target, (uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4fvNV", Version = "1.2")]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, int index, float* v)
      {
        GL.Delegates.glProgramParameter4fvNV(target, (uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, uint index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glProgramParameter4fvNV(target, index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4fvNV", Version = "1.2")]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, uint index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glProgramParameter4fvNV(target, index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameter4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramParameter4(AssemblyProgramTargetArb target, uint index, float* v)
      {
        GL.Delegates.glProgramParameter4fvNV(target, index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4dvNV", Version = "1.2")]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glProgramParameters4dvNV(target, (uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4dvNV", Version = "1.2")]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glProgramParameters4dvNV(target, (uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, double* v)
      {
        GL.Delegates.glProgramParameters4dvNV(target, (uint) index, count, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4dvNV", Version = "1.2")]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glProgramParameters4dvNV(target, index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glProgramParameters4dvNV(target, index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4dvNV", Version = "1.2")]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, double* v)
      {
        GL.Delegates.glProgramParameters4dvNV(target, index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4fvNV", Version = "1.2")]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glProgramParameters4fvNV(target, (uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4fvNV", Version = "1.2")]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glProgramParameters4fvNV(target, (uint) index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4fvNV", Version = "1.2")]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, int index, int count, float* v)
      {
        GL.Delegates.glProgramParameters4fvNV(target, (uint) index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glProgramParameters4fvNV(target, index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glProgramParameters4fvNV(target, index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glProgramParameters4fvNV", Version = "1.2")]
      public static unsafe void ProgramParameters4(AssemblyProgramTargetArb target, uint index, int count, float* v)
      {
        GL.Delegates.glProgramParameters4fvNV(target, index, count, v);
      }

      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glProgramSubroutineParametersuivNV", Version = "4.1")]
      public static unsafe void ProgramSubroutineParameters(NvGpuProgram5 target, int count, int[] @params)
      {
        fixed (int* numPtr = @params)
          GL.Delegates.glProgramSubroutineParametersuivNV(target, count, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glProgramSubroutineParametersuivNV", Version = "4.1")]
      public static unsafe void ProgramSubroutineParameters(NvGpuProgram5 target, int count, ref int @params)
      {
        fixed (int* numPtr = &@params)
          GL.Delegates.glProgramSubroutineParametersuivNV(target, count, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glProgramSubroutineParametersuivNV", Version = "4.1")]
      public static unsafe void ProgramSubroutineParameters(NvGpuProgram5 target, int count, int* @params)
      {
        GL.Delegates.glProgramSubroutineParametersuivNV(target, count, (uint*) @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glProgramSubroutineParametersuivNV", Version = "4.1")]
      public static unsafe void ProgramSubroutineParameters(NvGpuProgram5 target, int count, uint[] @params)
      {
        fixed (uint* params1 = @params)
          GL.Delegates.glProgramSubroutineParametersuivNV(target, count, params1);
      }

      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glProgramSubroutineParametersuivNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramSubroutineParameters(NvGpuProgram5 target, int count, ref uint @params)
      {
        fixed (uint* params1 = &@params)
          GL.Delegates.glProgramSubroutineParametersuivNV(target, count, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_program5", EntryPoint = "glProgramSubroutineParametersuivNV", Version = "4.1")]
      public static unsafe void ProgramSubroutineParameters(NvGpuProgram5 target, int count, uint* @params)
      {
        GL.Delegates.glProgramSubroutineParametersuivNV(target, count, @params);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1i64NV", Version = "4.1")]
      public static void ProgramUniform1(int program, int location, long x)
      {
        GL.Delegates.glProgramUniform1i64NV((uint) program, location, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1i64NV", Version = "4.1")]
      public static void ProgramUniform1(uint program, int location, long x)
      {
        GL.Delegates.glProgramUniform1i64NV(program, location, x);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform1(int program, int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glProgramUniform1i64vNV((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform1(int program, int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glProgramUniform1i64vNV((uint) program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform1(int program, int location, int count, long* value)
      {
        GL.Delegates.glProgramUniform1i64vNV((uint) program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform1(uint program, int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glProgramUniform1i64vNV(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glProgramUniform1i64vNV(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, long* value)
      {
        GL.Delegates.glProgramUniform1i64vNV(program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1ui64NV", Version = "4.1")]
      public static void ProgramUniform1(uint program, int location, ulong x)
      {
        GL.Delegates.glProgramUniform1ui64NV(program, location, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1ui64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform1(uint program, int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glProgramUniform1ui64vNV(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1ui64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform1(uint program, int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glProgramUniform1ui64vNV(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform1ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform1(uint program, int location, int count, ulong* value)
      {
        GL.Delegates.glProgramUniform1ui64vNV(program, location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2i64NV", Version = "4.1")]
      public static void ProgramUniform2(int program, int location, long x, long y)
      {
        GL.Delegates.glProgramUniform2i64NV((uint) program, location, x, y);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2i64NV", Version = "4.1")]
      [CLSCompliant(false)]
      public static void ProgramUniform2(uint program, int location, long x, long y)
      {
        GL.Delegates.glProgramUniform2i64NV(program, location, x, y);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform2(int program, int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glProgramUniform2i64vNV((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform2(int program, int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glProgramUniform2i64vNV((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(int program, int location, int count, long* value)
      {
        GL.Delegates.glProgramUniform2i64vNV((uint) program, location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(uint program, int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glProgramUniform2i64vNV(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform2(uint program, int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glProgramUniform2i64vNV(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(uint program, int location, int count, long* value)
      {
        GL.Delegates.glProgramUniform2i64vNV(program, location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2ui64NV", Version = "4.1")]
      [CLSCompliant(false)]
      public static void ProgramUniform2(uint program, int location, ulong x, ulong y)
      {
        GL.Delegates.glProgramUniform2ui64NV(program, location, x, y);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2ui64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform2(uint program, int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glProgramUniform2ui64vNV(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform2(uint program, int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glProgramUniform2ui64vNV(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform2ui64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform2(uint program, int location, int count, ulong* value)
      {
        GL.Delegates.glProgramUniform2ui64vNV(program, location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3i64NV", Version = "4.1")]
      public static void ProgramUniform3(int program, int location, long x, long y, long z)
      {
        GL.Delegates.glProgramUniform3i64NV((uint) program, location, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3i64NV", Version = "4.1")]
      public static void ProgramUniform3(uint program, int location, long x, long y, long z)
      {
        GL.Delegates.glProgramUniform3i64NV(program, location, x, y, z);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform3(int program, int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glProgramUniform3i64vNV((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform3(int program, int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glProgramUniform3i64vNV((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform3(int program, int location, int count, long* value)
      {
        GL.Delegates.glProgramUniform3i64vNV((uint) program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glProgramUniform3i64vNV(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glProgramUniform3i64vNV(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform3(uint program, int location, int count, long* value)
      {
        GL.Delegates.glProgramUniform3i64vNV(program, location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3ui64NV", Version = "4.1")]
      [CLSCompliant(false)]
      public static void ProgramUniform3(uint program, int location, ulong x, ulong y, ulong z)
      {
        GL.Delegates.glProgramUniform3ui64NV(program, location, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3ui64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glProgramUniform3ui64vNV(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3ui64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glProgramUniform3ui64vNV(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform3ui64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform3(uint program, int location, int count, ulong* value)
      {
        GL.Delegates.glProgramUniform3ui64vNV(program, location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4i64NV", Version = "4.1")]
      public static void ProgramUniform4(int program, int location, long x, long y, long z, long w)
      {
        GL.Delegates.glProgramUniform4i64NV((uint) program, location, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4i64NV", Version = "4.1")]
      public static void ProgramUniform4(uint program, int location, long x, long y, long z, long w)
      {
        GL.Delegates.glProgramUniform4i64NV(program, location, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform4(int program, int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glProgramUniform4i64vNV((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform4(int program, int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glProgramUniform4i64vNV((uint) program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform4(int program, int location, int count, long* value)
      {
        GL.Delegates.glProgramUniform4i64vNV((uint) program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glProgramUniform4i64vNV(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform4(uint program, int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glProgramUniform4i64vNV(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4i64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, long* value)
      {
        GL.Delegates.glProgramUniform4i64vNV(program, location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4ui64NV", Version = "4.1")]
      public static void ProgramUniform4(uint program, int location, ulong x, ulong y, ulong z, ulong w)
      {
        GL.Delegates.glProgramUniform4ui64NV(program, location, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform4(uint program, int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glProgramUniform4ui64vNV(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform4(uint program, int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glProgramUniform4ui64vNV(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glProgramUniform4ui64vNV", Version = "4.1")]
      public static unsafe void ProgramUniform4(uint program, int location, int count, ulong* value)
      {
        GL.Delegates.glProgramUniform4ui64vNV(program, location, count, value);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glProgramUniformui64NV", Version = "1.2")]
      public static void ProgramUniform(int program, int location, long value)
      {
        GL.Delegates.glProgramUniformui64NV((uint) program, location, (ulong) value);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glProgramUniformui64NV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void ProgramUniform(uint program, int location, ulong value)
      {
        GL.Delegates.glProgramUniformui64NV(program, location, value);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glProgramUniformui64vNV", Version = "1.2")]
      public static unsafe void ProgramUniform(int program, int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glProgramUniformui64vNV((uint) program, location, count, (ulong*) numPtr);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glProgramUniformui64vNV", Version = "1.2")]
      public static unsafe void ProgramUniform(int program, int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glProgramUniformui64vNV((uint) program, location, count, (ulong*) numPtr);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glProgramUniformui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform(int program, int location, int count, long* value)
      {
        GL.Delegates.glProgramUniformui64vNV((uint) program, location, count, (ulong*) value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glProgramUniformui64vNV", Version = "1.2")]
      public static unsafe void ProgramUniform(uint program, int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glProgramUniformui64vNV(program, location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glProgramUniformui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void ProgramUniform(uint program, int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glProgramUniformui64vNV(program, location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glProgramUniformui64vNV", Version = "1.2")]
      public static unsafe void ProgramUniform(uint program, int location, int count, ulong* value)
      {
        GL.Delegates.glProgramUniformui64vNV(program, location, count, value);
      }

      [AutoGenerated(Category = "NV_geometry_program4", EntryPoint = "glProgramVertexLimitNV", Version = "2.0")]
      public static void ProgramVertexLimit(NvGeometryProgram4 target, int limit)
      {
        GL.Delegates.glProgramVertexLimitNV(target, limit);
      }

      [AutoGenerated(Category = "NV_framebuffer_multisample_coverage", EntryPoint = "glRenderbufferStorageMultisampleCoverageNV", Version = "1.5")]
      public static void RenderbufferStorageMultisampleCoverage(RenderbufferTarget target, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height)
      {
        GL.Delegates.glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glRequestResidentProgramsNV", Version = "1.2")]
      public static unsafe void RequestResidentProgram(int n, int[] programs)
      {
        fixed (int* numPtr = programs)
          GL.Delegates.glRequestResidentProgramsNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glRequestResidentProgramsNV", Version = "1.2")]
      public static unsafe void RequestResidentProgram(int n, ref int programs)
      {
        fixed (int* numPtr = &programs)
          GL.Delegates.glRequestResidentProgramsNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glRequestResidentProgramsNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void RequestResidentProgram(int n, int* programs)
      {
        GL.Delegates.glRequestResidentProgramsNV(n, (uint*) programs);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glRequestResidentProgramsNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void RequestResidentProgram(int n, uint[] programs)
      {
        fixed (uint* programs1 = programs)
          GL.Delegates.glRequestResidentProgramsNV(n, programs1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glRequestResidentProgramsNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void RequestResidentProgram(int n, ref uint programs)
      {
        fixed (uint* programs1 = &programs)
          GL.Delegates.glRequestResidentProgramsNV(n, programs1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glRequestResidentProgramsNV", Version = "1.2")]
      public static unsafe void RequestResidentProgram(int n, uint* programs)
      {
        GL.Delegates.glRequestResidentProgramsNV(n, programs);
      }

      [AutoGenerated(Category = "NV_transform_feedback2", EntryPoint = "glResumeTransformFeedbackNV", Version = "")]
      public static void ResumeTransformFeedback()
      {
        GL.Delegates.glResumeTransformFeedbackNV();
      }

      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glSampleMaskIndexedNV", Version = "")]
      public static void SampleMaskIndexed(int index, int mask)
      {
        GL.Delegates.glSampleMaskIndexedNV((uint) index, (uint) mask);
      }

      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glSampleMaskIndexedNV", Version = "")]
      [CLSCompliant(false)]
      public static void SampleMaskIndexed(uint index, uint mask)
      {
        GL.Delegates.glSampleMaskIndexedNV(index, mask);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glSecondaryColor3hNV", Version = "1.2")]
      public static void SecondaryColor3h(Half red, Half green, Half blue)
      {
        GL.Delegates.glSecondaryColor3hNV(red, green, blue);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glSecondaryColor3hvNV", Version = "1.2")]
      public static unsafe void SecondaryColor3h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glSecondaryColor3hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glSecondaryColor3hvNV", Version = "1.2")]
      public static unsafe void SecondaryColor3h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glSecondaryColor3hvNV(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glSecondaryColor3hvNV", Version = "1.2")]
      public static unsafe void SecondaryColor3h(Half* v)
      {
        GL.Delegates.glSecondaryColor3hvNV(v);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glSecondaryColorFormatNV", Version = "1.2")]
      public static void SecondaryColorFormat(int size, NvVertexBufferUnifiedMemory type, int stride)
      {
        GL.Delegates.glSecondaryColorFormatNV(size, type, stride);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glSetFenceNV", Version = "1.2")]
      public static void SetFence(int fence, NvFence condition)
      {
        GL.Delegates.glSetFenceNV((uint) fence, condition);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fence", EntryPoint = "glSetFenceNV", Version = "1.2")]
      public static void SetFence(uint fence, NvFence condition)
      {
        GL.Delegates.glSetFenceNV(fence, condition);
      }

      [AutoGenerated(Category = "NV_fence", EntryPoint = "glTestFenceNV", Version = "1.2")]
      public static bool TestFence(int fence)
      {
        return GL.Delegates.glTestFenceNV((uint) fence);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_fence", EntryPoint = "glTestFenceNV", Version = "1.2")]
      public static bool TestFence(uint fence)
      {
        return GL.Delegates.glTestFenceNV(fence);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord1hNV", Version = "1.2")]
      public static void TexCoord1h(Half s)
      {
        GL.Delegates.glTexCoord1hNV(s);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord1hvNV", Version = "1.2")]
      public static unsafe void TexCoord1h(Half* v)
      {
        GL.Delegates.glTexCoord1hvNV(v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord2hNV", Version = "1.2")]
      public static void TexCoord2h(Half s, Half t)
      {
        GL.Delegates.glTexCoord2hNV(s, t);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord2hvNV", Version = "1.2")]
      public static unsafe void TexCoord2h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glTexCoord2hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord2hvNV", Version = "1.2")]
      public static unsafe void TexCoord2h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glTexCoord2hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord2hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void TexCoord2h(Half* v)
      {
        GL.Delegates.glTexCoord2hvNV(v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord3hNV", Version = "1.2")]
      public static void TexCoord3h(Half s, Half t, Half r)
      {
        GL.Delegates.glTexCoord3hNV(s, t, r);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord3hvNV", Version = "1.2")]
      public static unsafe void TexCoord3h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glTexCoord3hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord3hvNV", Version = "1.2")]
      public static unsafe void TexCoord3h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glTexCoord3hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord3hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void TexCoord3h(Half* v)
      {
        GL.Delegates.glTexCoord3hvNV(v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord4hNV", Version = "1.2")]
      public static void TexCoord4h(Half s, Half t, Half r, Half q)
      {
        GL.Delegates.glTexCoord4hNV(s, t, r, q);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord4hvNV", Version = "1.2")]
      public static unsafe void TexCoord4h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glTexCoord4hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord4hvNV", Version = "1.2")]
      public static unsafe void TexCoord4h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glTexCoord4hvNV(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glTexCoord4hvNV", Version = "1.2")]
      public static unsafe void TexCoord4h(Half* v)
      {
        GL.Delegates.glTexCoord4hvNV(v);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glTexCoordFormatNV", Version = "1.2")]
      public static void TexCoordFormat(int size, NvVertexBufferUnifiedMemory type, int stride)
      {
        GL.Delegates.glTexCoordFormatNV(size, type, stride);
      }

      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTexImage2DMultisampleCoverageNV", Version = "4.1")]
      public static void TexImage2DMultisampleCoverage(NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
      {
        GL.Delegates.glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
      }

      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTexImage3DMultisampleCoverageNV", Version = "4.1")]
      public static void TexImage3DMultisampleCoverage(NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
      {
        GL.Delegates.glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
      }

      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glTexRenderbufferNV", Version = "")]
      public static void TexRenderbuffer(TextureTarget target, int renderbuffer)
      {
        GL.Delegates.glTexRenderbufferNV(target, (uint) renderbuffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_explicit_multisample", EntryPoint = "glTexRenderbufferNV", Version = "")]
      public static void TexRenderbuffer(TextureTarget target, uint renderbuffer)
      {
        GL.Delegates.glTexRenderbufferNV(target, renderbuffer);
      }

      [AutoGenerated(Category = "NV_texture_barrier", EntryPoint = "glTextureBarrierNV", Version = "1.2")]
      public static void TextureBarrier()
      {
        GL.Delegates.glTextureBarrierNV();
      }

      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTextureImage2DMultisampleCoverageNV", Version = "4.1")]
      public static void TextureImage2DMultisampleCoverage(int texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
      {
        GL.Delegates.glTextureImage2DMultisampleCoverageNV((uint) texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTextureImage2DMultisampleCoverageNV", Version = "4.1")]
      public static void TextureImage2DMultisampleCoverage(uint texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations)
      {
        GL.Delegates.glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
      }

      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTextureImage2DMultisampleNV", Version = "4.1")]
      public static void TextureImage2DMultisample(int texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations)
      {
        GL.Delegates.glTextureImage2DMultisampleNV((uint) texture, target, samples, internalFormat, width, height, fixedSampleLocations);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTextureImage2DMultisampleNV", Version = "4.1")]
      public static void TextureImage2DMultisample(uint texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations)
      {
        GL.Delegates.glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
      }

      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTextureImage3DMultisampleCoverageNV", Version = "4.1")]
      public static void TextureImage3DMultisampleCoverage(int texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
      {
        GL.Delegates.glTextureImage3DMultisampleCoverageNV((uint) texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
      }

      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTextureImage3DMultisampleCoverageNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static void TextureImage3DMultisampleCoverage(uint texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
      {
        GL.Delegates.glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
      }

      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTextureImage3DMultisampleNV", Version = "4.1")]
      public static void TextureImage3DMultisample(int texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
      {
        GL.Delegates.glTextureImage3DMultisampleNV((uint) texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_texture_multisample", EntryPoint = "glTextureImage3DMultisampleNV", Version = "4.1")]
      public static void TextureImage3DMultisample(uint texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations)
      {
        GL.Delegates.glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glTrackMatrixNV", Version = "1.2")]
      public static void TrackMatrix(AssemblyProgramTargetArb target, int address, NvVertexProgram matrix, NvVertexProgram transform)
      {
        GL.Delegates.glTrackMatrixNV(target, (uint) address, matrix, transform);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glTrackMatrixNV", Version = "1.2")]
      public static void TrackMatrix(AssemblyProgramTargetArb target, uint address, NvVertexProgram matrix, NvVertexProgram transform)
      {
        GL.Delegates.glTrackMatrixNV(target, address, matrix, transform);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackAttribsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackAttrib(int count, int[] attribs, NvTransformFeedback bufferMode)
      {
        fixed (int* attribs1 = attribs)
          GL.Delegates.glTransformFeedbackAttribsNV((uint) count, attribs1, bufferMode);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackAttribsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackAttrib(int count, ref int attribs, NvTransformFeedback bufferMode)
      {
        fixed (int* attribs1 = &attribs)
          GL.Delegates.glTransformFeedbackAttribsNV((uint) count, attribs1, bufferMode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackAttribsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackAttrib(int count, int* attribs, NvTransformFeedback bufferMode)
      {
        GL.Delegates.glTransformFeedbackAttribsNV((uint) count, attribs, bufferMode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackAttribsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackAttrib(uint count, int[] attribs, NvTransformFeedback bufferMode)
      {
        fixed (int* attribs1 = attribs)
          GL.Delegates.glTransformFeedbackAttribsNV(count, attribs1, bufferMode);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackAttribsNV", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void TransformFeedbackAttrib(uint count, ref int attribs, NvTransformFeedback bufferMode)
      {
        fixed (int* attribs1 = &attribs)
          GL.Delegates.glTransformFeedbackAttribsNV(count, attribs1, bufferMode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackAttribsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackAttrib(uint count, int* attribs, NvTransformFeedback bufferMode)
      {
        GL.Delegates.glTransformFeedbackAttribsNV(count, attribs, bufferMode);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackStreamAttribsNV", Version = "4.1")]
      public static unsafe void TransformFeedbackStreamAttrib(int count, int[] attribs, int nbuffers, int[] bufstreams, NvTransformFeedback bufferMode)
      {
        fixed (int* attribs1 = attribs)
          fixed (int* bufstreams1 = bufstreams)
            GL.Delegates.glTransformFeedbackStreamAttribsNV(count, attribs1, nbuffers, bufstreams1, bufferMode);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackStreamAttribsNV", Version = "4.1")]
      public static unsafe void TransformFeedbackStreamAttrib(int count, ref int attribs, int nbuffers, ref int bufstreams, NvTransformFeedback bufferMode)
      {
        fixed (int* attribs1 = &attribs)
          fixed (int* bufstreams1 = &bufstreams)
            GL.Delegates.glTransformFeedbackStreamAttribsNV(count, attribs1, nbuffers, bufstreams1, bufferMode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackStreamAttribsNV", Version = "4.1")]
      public static unsafe void TransformFeedbackStreamAttrib(int count, int* attribs, int nbuffers, int* bufstreams, NvTransformFeedback bufferMode)
      {
        GL.Delegates.glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackVaryings(int program, int count, int[] locations, NvTransformFeedback bufferMode)
      {
        fixed (int* locations1 = locations)
          GL.Delegates.glTransformFeedbackVaryingsNV((uint) program, count, locations1, bufferMode);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackVaryings(int program, int count, ref int locations, NvTransformFeedback bufferMode)
      {
        fixed (int* locations1 = &locations)
          GL.Delegates.glTransformFeedbackVaryingsNV((uint) program, count, locations1, bufferMode);
      }

      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsNV", Version = "1.5")]
      [CLSCompliant(false)]
      public static unsafe void TransformFeedbackVaryings(int program, int count, int* locations, NvTransformFeedback bufferMode)
      {
        GL.Delegates.glTransformFeedbackVaryingsNV((uint) program, count, locations, bufferMode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackVaryings(uint program, int count, int[] locations, NvTransformFeedback bufferMode)
      {
        fixed (int* locations1 = locations)
          GL.Delegates.glTransformFeedbackVaryingsNV(program, count, locations1, bufferMode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackVaryings(uint program, int count, ref int locations, NvTransformFeedback bufferMode)
      {
        fixed (int* locations1 = &locations)
          GL.Delegates.glTransformFeedbackVaryingsNV(program, count, locations1, bufferMode);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_transform_feedback", EntryPoint = "glTransformFeedbackVaryingsNV", Version = "1.5")]
      public static unsafe void TransformFeedbackVaryings(uint program, int count, int* locations, NvTransformFeedback bufferMode)
      {
        GL.Delegates.glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform1i64NV", Version = "4.1")]
      public static void Uniform1(int location, long x)
      {
        GL.Delegates.glUniform1i64NV(location, x);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform1i64vNV", Version = "4.1")]
      public static unsafe void Uniform1(int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glUniform1i64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform1i64vNV", Version = "4.1")]
      public static unsafe void Uniform1(int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glUniform1i64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform1i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void Uniform1(int location, int count, long* value)
      {
        GL.Delegates.glUniform1i64vNV(location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform1ui64NV", Version = "4.1")]
      [CLSCompliant(false)]
      public static void Uniform1(int location, ulong x)
      {
        GL.Delegates.glUniform1ui64NV(location, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform1ui64vNV", Version = "4.1")]
      public static unsafe void Uniform1(int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glUniform1ui64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform1ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void Uniform1(int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glUniform1ui64vNV(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform1ui64vNV", Version = "4.1")]
      public static unsafe void Uniform1(int location, int count, ulong* value)
      {
        GL.Delegates.glUniform1ui64vNV(location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform2i64NV", Version = "4.1")]
      public static void Uniform2(int location, long x, long y)
      {
        GL.Delegates.glUniform2i64NV(location, x, y);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform2i64vNV", Version = "4.1")]
      public static unsafe void Uniform2(int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glUniform2i64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform2i64vNV", Version = "4.1")]
      public static unsafe void Uniform2(int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glUniform2i64vNV(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform2i64vNV", Version = "4.1")]
      public static unsafe void Uniform2(int location, int count, long* value)
      {
        GL.Delegates.glUniform2i64vNV(location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform2ui64NV", Version = "4.1")]
      public static void Uniform2(int location, ulong x, ulong y)
      {
        GL.Delegates.glUniform2ui64NV(location, x, y);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform2ui64vNV", Version = "4.1")]
      public static unsafe void Uniform2(int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glUniform2ui64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform2ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void Uniform2(int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glUniform2ui64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform2ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void Uniform2(int location, int count, ulong* value)
      {
        GL.Delegates.glUniform2ui64vNV(location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform3i64NV", Version = "4.1")]
      public static void Uniform3(int location, long x, long y, long z)
      {
        GL.Delegates.glUniform3i64NV(location, x, y, z);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform3i64vNV", Version = "4.1")]
      public static unsafe void Uniform3(int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glUniform3i64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform3i64vNV", Version = "4.1")]
      public static unsafe void Uniform3(int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glUniform3i64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform3i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void Uniform3(int location, int count, long* value)
      {
        GL.Delegates.glUniform3i64vNV(location, count, value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform3ui64NV", Version = "4.1")]
      public static void Uniform3(int location, ulong x, ulong y, ulong z)
      {
        GL.Delegates.glUniform3ui64NV(location, x, y, z);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform3ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void Uniform3(int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glUniform3ui64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform3ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void Uniform3(int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glUniform3ui64vNV(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform3ui64vNV", Version = "4.1")]
      public static unsafe void Uniform3(int location, int count, ulong* value)
      {
        GL.Delegates.glUniform3ui64vNV(location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform4i64NV", Version = "4.1")]
      public static void Uniform4(int location, long x, long y, long z, long w)
      {
        GL.Delegates.glUniform4i64NV(location, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform4i64vNV", Version = "4.1")]
      public static unsafe void Uniform4(int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glUniform4i64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform4i64vNV", Version = "4.1")]
      public static unsafe void Uniform4(int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glUniform4i64vNV(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform4i64vNV", Version = "4.1")]
      public static unsafe void Uniform4(int location, int count, long* value)
      {
        GL.Delegates.glUniform4i64vNV(location, count, value);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform4ui64NV", Version = "4.1")]
      [CLSCompliant(false)]
      public static void Uniform4(int location, ulong x, ulong y, ulong z, ulong w)
      {
        GL.Delegates.glUniform4ui64NV(location, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform4ui64vNV", Version = "4.1")]
      public static unsafe void Uniform4(int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glUniform4ui64vNV(location, count, numPtr);
      }

      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform4ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void Uniform4(int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glUniform4ui64vNV(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_gpu_shader5", EntryPoint = "glUniform4ui64vNV", Version = "4.1")]
      public static unsafe void Uniform4(int location, int count, ulong* value)
      {
        GL.Delegates.glUniform4ui64vNV(location, count, value);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glUniformui64NV", Version = "1.2")]
      public static void Uniform(int location, long value)
      {
        GL.Delegates.glUniformui64NV(location, (ulong) value);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glUniformui64NV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void Uniform(int location, ulong value)
      {
        GL.Delegates.glUniformui64NV(location, value);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glUniformui64vNV", Version = "1.2")]
      public static unsafe void Uniform(int location, int count, long[] value)
      {
        fixed (long* numPtr = value)
          GL.Delegates.glUniformui64vNV(location, count, (ulong*) numPtr);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glUniformui64vNV", Version = "1.2")]
      public static unsafe void Uniform(int location, int count, ref long value)
      {
        fixed (long* numPtr = &value)
          GL.Delegates.glUniformui64vNV(location, count, (ulong*) numPtr);
      }

      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glUniformui64vNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Uniform(int location, int count, long* value)
      {
        GL.Delegates.glUniformui64vNV(location, count, (ulong*) value);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glUniformui64vNV", Version = "1.2")]
      public static unsafe void Uniform(int location, int count, ulong[] value)
      {
        fixed (ulong* numPtr = value)
          GL.Delegates.glUniformui64vNV(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glUniformui64vNV", Version = "1.2")]
      public static unsafe void Uniform(int location, int count, ref ulong value)
      {
        fixed (ulong* numPtr = &value)
          GL.Delegates.glUniformui64vNV(location, count, numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_shader_buffer_load", EntryPoint = "glUniformui64vNV", Version = "1.2")]
      public static unsafe void Uniform(int location, int count, ulong* value)
      {
        GL.Delegates.glUniformui64vNV(location, count, value);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUFiniNV", Version = "4.1")]
      public static void VDPAUFin()
      {
        GL.Delegates.glVDPAUFiniNV();
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUGetSurfaceivNV", Version = "4.1")]
      public static unsafe void VDPAUGetSurface(IntPtr surface, NvVdpauInterop pname, int bufSize, [Out] int[] length, [Out] int[] values)
      {
        fixed (int* length1 = length)
          fixed (int* values1 = values)
            GL.Delegates.glVDPAUGetSurfaceivNV(surface, pname, bufSize, length1, values1);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUGetSurfaceivNV", Version = "4.1")]
      public static unsafe void VDPAUGetSurface(IntPtr surface, NvVdpauInterop pname, int bufSize, out int length, out int values)
      {
        fixed (int* length1 = &length)
          fixed (int* values1 = &values)
          {
            GL.Delegates.glVDPAUGetSurfaceivNV(surface, pname, bufSize, length1, values1);
            length = *length1;
            values = *values1;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUGetSurfaceivNV", Version = "4.1")]
      public static unsafe void VDPAUGetSurface(IntPtr surface, NvVdpauInterop pname, int bufSize, [Out] int* length, [Out] int* values)
      {
        GL.Delegates.glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUInitNV", Version = "4.1")]
      public static void VDPAUInit(IntPtr vdpDevice, IntPtr getProcAddress)
      {
        GL.Delegates.glVDPAUInitNV(vdpDevice, getProcAddress);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUInitNV", Version = "4.1")]
      public static void VDPAUInit<T1>(IntPtr vdpDevice, [In, Out] T1[] getProcAddress) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) getProcAddress, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVDPAUInitNV(vdpDevice, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUInitNV", Version = "4.1")]
      public static void VDPAUInit<T1>(IntPtr vdpDevice, [In, Out] T1[,] getProcAddress) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) getProcAddress, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVDPAUInitNV(vdpDevice, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUInitNV", Version = "4.1")]
      public static void VDPAUInit<T1>(IntPtr vdpDevice, [In, Out] T1[,,] getProcAddress) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) getProcAddress, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVDPAUInitNV(vdpDevice, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUInitNV", Version = "4.1")]
      public static void VDPAUInit<T1>(IntPtr vdpDevice, [In, Out] ref T1 getProcAddress) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) getProcAddress, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVDPAUInitNV(vdpDevice, gcHandle.AddrOfPinnedObject());
          getProcAddress = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUInitNV", Version = "4.1")]
      public static void VDPAUInit<T0, T1>([In, Out] T0[] vdpDevice, [In, Out] T1[,,] getProcAddress) where T0 : struct where T1 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) vdpDevice, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) getProcAddress, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVDPAUInitNV(gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUInitNV", Version = "4.1")]
      public static void VDPAUInit<T0, T1>([In, Out] T0[,] vdpDevice, [In, Out] T1[,,] getProcAddress) where T0 : struct where T1 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) vdpDevice, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) getProcAddress, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVDPAUInitNV(gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUInitNV", Version = "4.1")]
      public static void VDPAUInit<T0, T1>([In, Out] T0[,,] vdpDevice, [In, Out] T1[,,] getProcAddress) where T0 : struct where T1 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) vdpDevice, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) getProcAddress, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVDPAUInitNV(gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUInitNV", Version = "4.1")]
      public static void VDPAUInit<T0, T1>([In, Out] ref T0 vdpDevice, [In, Out] T1[,,] getProcAddress) where T0 : struct where T1 : struct
      {
        GCHandle gcHandle1 = GCHandle.Alloc((object) vdpDevice, GCHandleType.Pinned);
        GCHandle gcHandle2 = GCHandle.Alloc((object) getProcAddress, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVDPAUInitNV(gcHandle1.AddrOfPinnedObject(), gcHandle2.AddrOfPinnedObject());
          vdpDevice = (T0) gcHandle1.Target;
        }
        finally
        {
          gcHandle1.Free();
          gcHandle2.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUIsSurfaceNV", Version = "4.1")]
      public static void VDPAUIsSurface(IntPtr surface)
      {
        GL.Delegates.glVDPAUIsSurfaceNV(surface);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUMapSurfacesNV", Version = "4.1")]
      public static unsafe void VDPAUMapSurfaces(int numSurfaces, IntPtr[] surfaces)
      {
        fixed (IntPtr* surfaces1 = surfaces)
          GL.Delegates.glVDPAUMapSurfacesNV(numSurfaces, surfaces1);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUMapSurfacesNV", Version = "4.1")]
      public static unsafe void VDPAUMapSurfaces(int numSurfaces, ref IntPtr surfaces)
      {
        fixed (IntPtr* surfaces1 = &surfaces)
          GL.Delegates.glVDPAUMapSurfacesNV(numSurfaces, surfaces1);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUMapSurfacesNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VDPAUMapSurfaces(int numSurfaces, IntPtr* surfaces)
      {
        GL.Delegates.glVDPAUMapSurfacesNV(numSurfaces, surfaces);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames)
      {
        fixed (int* numPtr = textureNames)
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames)
      {
        fixed (int* numPtr = &textureNames)
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterOutputSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames)
      {
        return GL.Delegates.glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, (uint*) textureNames);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames)
      {
        fixed (uint* textureNames1 = textureNames)
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames1);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterOutputSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames)
      {
        fixed (uint* textureNames1 = &textureNames)
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames)
      {
        return GL.Delegates.glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
      {
        fixed (int* numPtr = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
      {
        fixed (int* numPtr = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
      {
        fixed (int* numPtr = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
      {
        fixed (int* numPtr = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
      {
        fixed (int* numPtr = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
      {
        fixed (int* numPtr = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
      {
        fixed (int* numPtr = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            IntPtr num = GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
            vdpSurface = (T0) gcHandle.Target;
            return num;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
      {
        fixed (int* numPtr = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            IntPtr num = GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
            vdpSurface = (T0) gcHandle.Target;
            return num;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          IntPtr num = GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) textureNames);
          vdpSurface = (T0) gcHandle.Target;
          return num;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            IntPtr num = GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
            vdpSurface = (T0) gcHandle.Target;
            return num;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            IntPtr num = GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
            vdpSurface = (T0) gcHandle.Target;
            return num;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterOutputSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterOutputSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          IntPtr num = GL.Delegates.glVDPAURegisterOutputSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
          vdpSurface = (T0) gcHandle.Target;
          return num;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames)
      {
        fixed (int* numPtr = textureNames)
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, (uint*) numPtr);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames)
      {
        fixed (int* numPtr = &textureNames)
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames)
      {
        return GL.Delegates.glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, (uint*) textureNames);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterVideoSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames)
      {
        fixed (uint* textureNames1 = textureNames)
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames1);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterVideoSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames)
      {
        fixed (uint* textureNames1 = &textureNames)
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames)
      {
        return GL.Delegates.glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
      {
        fixed (int* numPtr = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
      {
        fixed (int* numPtr = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
      {
        fixed (int* numPtr = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
      {
        fixed (int* numPtr = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
      {
        fixed (int* numPtr = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
      {
        fixed (int* numPtr = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] T0[,,] vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          return GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, int[] textureNames) where T0 : struct
      {
        fixed (int* numPtr = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            IntPtr num = GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
            vdpSurface = (T0) gcHandle.Target;
            return num;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, ref int textureNames) where T0 : struct
      {
        fixed (int* numPtr = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            IntPtr num = GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) numPtr);
            vdpSurface = (T0) gcHandle.Target;
            return num;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, int* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          IntPtr num = GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, (uint*) textureNames);
          vdpSurface = (T0) gcHandle.Target;
          return num;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, uint[] textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            IntPtr num = GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
            vdpSurface = (T0) gcHandle.Target;
            return num;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, ref uint textureNames) where T0 : struct
      {
        fixed (uint* textureNames1 = &textureNames)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
          try
          {
            IntPtr num = GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames1);
            vdpSurface = (T0) gcHandle.Target;
            return num;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAURegisterVideoSurfaceNV", Version = "4.1")]
      public static unsafe IntPtr VDPAURegisterVideoSurface<T0>([In, Out] ref T0 vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames) where T0 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) vdpSurface, GCHandleType.Pinned);
        try
        {
          IntPtr num = GL.Delegates.glVDPAURegisterVideoSurfaceNV(gcHandle.AddrOfPinnedObject(), target, numTextureNames, textureNames);
          vdpSurface = (T0) gcHandle.Target;
          return num;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUSurfaceAccessNV", Version = "4.1")]
      public static void VDPAUSurfaceAccess(IntPtr surface, NvVdpauInterop access)
      {
        GL.Delegates.glVDPAUSurfaceAccessNV(surface, access);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUUnmapSurfacesNV", Version = "4.1")]
      public static unsafe void VDPAUUnmapSurfaces(int numSurface, IntPtr[] surfaces)
      {
        fixed (IntPtr* surfaces1 = surfaces)
          GL.Delegates.glVDPAUUnmapSurfacesNV(numSurface, surfaces1);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUUnmapSurfacesNV", Version = "4.1")]
      public static unsafe void VDPAUUnmapSurfaces(int numSurface, ref IntPtr surfaces)
      {
        fixed (IntPtr* surfaces1 = &surfaces)
          GL.Delegates.glVDPAUUnmapSurfacesNV(numSurface, surfaces1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUUnmapSurfacesNV", Version = "4.1")]
      public static unsafe void VDPAUUnmapSurfaces(int numSurface, IntPtr* surfaces)
      {
        GL.Delegates.glVDPAUUnmapSurfacesNV(numSurface, surfaces);
      }

      [AutoGenerated(Category = "NV_vdpau_interop", EntryPoint = "glVDPAUUnregisterSurfaceNV", Version = "4.1")]
      public static void VDPAUUnregisterSurface(IntPtr surface)
      {
        GL.Delegates.glVDPAUUnregisterSurfaceNV(surface);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex2hNV", Version = "1.2")]
      public static void Vertex2h(Half x, Half y)
      {
        GL.Delegates.glVertex2hNV(x, y);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex2hvNV", Version = "1.2")]
      public static unsafe void Vertex2h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertex2hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex2hvNV", Version = "1.2")]
      public static unsafe void Vertex2h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertex2hvNV(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex2hvNV", Version = "1.2")]
      public static unsafe void Vertex2h(Half* v)
      {
        GL.Delegates.glVertex2hvNV(v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex3hNV", Version = "1.2")]
      public static void Vertex3h(Half x, Half y, Half z)
      {
        GL.Delegates.glVertex3hNV(x, y, z);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex3hvNV", Version = "1.2")]
      public static unsafe void Vertex3h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertex3hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex3hvNV", Version = "1.2")]
      public static unsafe void Vertex3h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertex3hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex3hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void Vertex3h(Half* v)
      {
        GL.Delegates.glVertex3hvNV(v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex4hNV", Version = "1.2")]
      public static void Vertex4h(Half x, Half y, Half z, Half w)
      {
        GL.Delegates.glVertex4hNV(x, y, z, w);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex4hvNV", Version = "1.2")]
      public static unsafe void Vertex4h(Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertex4hvNV(v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex4hvNV", Version = "1.2")]
      public static unsafe void Vertex4h(ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertex4hvNV(v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertex4hvNV", Version = "1.2")]
      public static unsafe void Vertex4h(Half* v)
      {
        GL.Delegates.glVertex4hvNV(v);
      }

      [AutoGenerated(Category = "NV_vertex_array_range", EntryPoint = "glVertexArrayRangeNV", Version = "1.1")]
      public static void VertexArrayRange(int length, IntPtr pointer)
      {
        GL.Delegates.glVertexArrayRangeNV(length, pointer);
      }

      [AutoGenerated(Category = "NV_vertex_array_range", EntryPoint = "glVertexArrayRangeNV", Version = "1.1")]
      public static void VertexArrayRange<T1>(int length, [In, Out] T1[] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexArrayRangeNV(length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_array_range", EntryPoint = "glVertexArrayRangeNV", Version = "1.1")]
      public static void VertexArrayRange<T1>(int length, [In, Out] T1[,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexArrayRangeNV(length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_array_range", EntryPoint = "glVertexArrayRangeNV", Version = "1.1")]
      public static void VertexArrayRange<T1>(int length, [In, Out] T1[,,] pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexArrayRangeNV(length, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_array_range", EntryPoint = "glVertexArrayRangeNV", Version = "1.1")]
      public static void VertexArrayRange<T1>(int length, [In, Out] ref T1 pointer) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexArrayRangeNV(length, gcHandle.AddrOfPinnedObject());
          pointer = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1dNV", Version = "1.2")]
      public static void VertexAttrib1(int index, double x)
      {
        GL.Delegates.glVertexAttrib1dNV((uint) index, x);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1dNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttrib1(uint index, double x)
      {
        GL.Delegates.glVertexAttrib1dNV(index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib1(int index, double* v)
      {
        GL.Delegates.glVertexAttrib1dvNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib1(uint index, double* v)
      {
        GL.Delegates.glVertexAttrib1dvNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1fNV", Version = "1.2")]
      public static void VertexAttrib1(int index, float x)
      {
        GL.Delegates.glVertexAttrib1fNV((uint) index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1fNV", Version = "1.2")]
      public static void VertexAttrib1(uint index, float x)
      {
        GL.Delegates.glVertexAttrib1fNV(index, x);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib1(int index, float* v)
      {
        GL.Delegates.glVertexAttrib1fvNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib1(uint index, float* v)
      {
        GL.Delegates.glVertexAttrib1fvNV(index, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib1hNV", Version = "1.2")]
      public static void VertexAttrib1h(int index, Half x)
      {
        GL.Delegates.glVertexAttrib1hNV((uint) index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib1hNV", Version = "1.2")]
      public static void VertexAttrib1h(uint index, Half x)
      {
        GL.Delegates.glVertexAttrib1hNV(index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib1hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib1h(int index, Half* v)
      {
        GL.Delegates.glVertexAttrib1hvNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib1hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib1h(uint index, Half* v)
      {
        GL.Delegates.glVertexAttrib1hvNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1sNV", Version = "1.2")]
      public static void VertexAttrib1(int index, short x)
      {
        GL.Delegates.glVertexAttrib1sNV((uint) index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1sNV", Version = "1.2")]
      public static void VertexAttrib1(uint index, short x)
      {
        GL.Delegates.glVertexAttrib1sNV(index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1svNV", Version = "1.2")]
      public static unsafe void VertexAttrib1(int index, short* v)
      {
        GL.Delegates.glVertexAttrib1svNV((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib1svNV", Version = "1.2")]
      public static unsafe void VertexAttrib1(uint index, short* v)
      {
        GL.Delegates.glVertexAttrib1svNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2dNV", Version = "1.2")]
      public static void VertexAttrib2(int index, double x, double y)
      {
        GL.Delegates.glVertexAttrib2dNV((uint) index, x, y);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2dNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttrib2(uint index, double x, double y)
      {
        GL.Delegates.glVertexAttrib2dNV(index, x, y);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib2dvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib2dvNV((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(int index, double* v)
      {
        GL.Delegates.glVertexAttrib2dvNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib2dvNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib2dvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(uint index, double* v)
      {
        GL.Delegates.glVertexAttrib2dvNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2fNV", Version = "1.2")]
      public static void VertexAttrib2(int index, float x, float y)
      {
        GL.Delegates.glVertexAttrib2fNV((uint) index, x, y);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2fNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttrib2(uint index, float x, float y)
      {
        GL.Delegates.glVertexAttrib2fNV(index, x, y);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(int index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib2fvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(int index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib2fvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(int index, float* v)
      {
        GL.Delegates.glVertexAttrib2fvNV((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(uint index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib2fvNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(uint index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib2fvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(uint index, float* v)
      {
        GL.Delegates.glVertexAttrib2fvNV(index, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib2hNV", Version = "1.2")]
      public static void VertexAttrib2h(int index, Half x, Half y)
      {
        GL.Delegates.glVertexAttrib2hNV((uint) index, x, y);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib2hNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttrib2h(uint index, Half x, Half y)
      {
        GL.Delegates.glVertexAttrib2hNV(index, x, y);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib2hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2h(int index, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttrib2hvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib2hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2h(int index, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttrib2hvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib2hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2h(int index, Half* v)
      {
        GL.Delegates.glVertexAttrib2hvNV((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib2hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2h(uint index, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttrib2hvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib2hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2h(uint index, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttrib2hvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib2hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib2h(uint index, Half* v)
      {
        GL.Delegates.glVertexAttrib2hvNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2sNV", Version = "1.2")]
      public static void VertexAttrib2(int index, short x, short y)
      {
        GL.Delegates.glVertexAttrib2sNV((uint) index, x, y);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2sNV", Version = "1.2")]
      public static void VertexAttrib2(uint index, short x, short y)
      {
        GL.Delegates.glVertexAttrib2sNV(index, x, y);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2svNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(int index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib2svNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2svNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(int index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib2svNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(int index, short* v)
      {
        GL.Delegates.glVertexAttrib2svNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib2(uint index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib2svNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2svNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(uint index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib2svNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib2svNV", Version = "1.2")]
      public static unsafe void VertexAttrib2(uint index, short* v)
      {
        GL.Delegates.glVertexAttrib2svNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3dNV", Version = "1.2")]
      public static void VertexAttrib3(int index, double x, double y, double z)
      {
        GL.Delegates.glVertexAttrib3dNV((uint) index, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3dNV", Version = "1.2")]
      public static void VertexAttrib3(uint index, double x, double y, double z)
      {
        GL.Delegates.glVertexAttrib3dNV(index, x, y, z);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib3dvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib3dvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(int index, double* v)
      {
        GL.Delegates.glVertexAttrib3dvNV((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib3dvNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib3dvNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, double* v)
      {
        GL.Delegates.glVertexAttrib3dvNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3fNV", Version = "1.2")]
      public static void VertexAttrib3(int index, float x, float y, float z)
      {
        GL.Delegates.glVertexAttrib3fNV((uint) index, x, y, z);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3fNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttrib3(uint index, float x, float y, float z)
      {
        GL.Delegates.glVertexAttrib3fNV(index, x, y, z);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(int index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib3fvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(int index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib3fvNV((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(int index, float* v)
      {
        GL.Delegates.glVertexAttrib3fvNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib3fvNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib3fvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(uint index, float* v)
      {
        GL.Delegates.glVertexAttrib3fvNV(index, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib3hNV", Version = "1.2")]
      public static void VertexAttrib3h(int index, Half x, Half y, Half z)
      {
        GL.Delegates.glVertexAttrib3hNV((uint) index, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib3hNV", Version = "1.2")]
      public static void VertexAttrib3h(uint index, Half x, Half y, Half z)
      {
        GL.Delegates.glVertexAttrib3hNV(index, x, y, z);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib3hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3h(int index, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttrib3hvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib3hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3h(int index, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttrib3hvNV((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib3hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3h(int index, Half* v)
      {
        GL.Delegates.glVertexAttrib3hvNV((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib3hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3h(uint index, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttrib3hvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib3hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3h(uint index, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttrib3hvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib3hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib3h(uint index, Half* v)
      {
        GL.Delegates.glVertexAttrib3hvNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3sNV", Version = "1.2")]
      public static void VertexAttrib3(int index, short x, short y, short z)
      {
        GL.Delegates.glVertexAttrib3sNV((uint) index, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3sNV", Version = "1.2")]
      public static void VertexAttrib3(uint index, short x, short y, short z)
      {
        GL.Delegates.glVertexAttrib3sNV(index, x, y, z);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3svNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(int index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib3svNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3svNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(int index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib3svNV((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3svNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(int index, short* v)
      {
        GL.Delegates.glVertexAttrib3svNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib3svNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib3(uint index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib3svNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib3svNV", Version = "1.2")]
      public static unsafe void VertexAttrib3(uint index, short* v)
      {
        GL.Delegates.glVertexAttrib3svNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4dNV", Version = "1.2")]
      public static void VertexAttrib4(int index, double x, double y, double z, double w)
      {
        GL.Delegates.glVertexAttrib4dNV((uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4dNV", Version = "1.2")]
      public static void VertexAttrib4(uint index, double x, double y, double z, double w)
      {
        GL.Delegates.glVertexAttrib4dNV(index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(int index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib4dvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(int index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib4dvNV((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(int index, double* v)
      {
        GL.Delegates.glVertexAttrib4dvNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttrib4dvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4dvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(uint index, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttrib4dvNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, double* v)
      {
        GL.Delegates.glVertexAttrib4dvNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4fNV", Version = "1.2")]
      public static void VertexAttrib4(int index, float x, float y, float z, float w)
      {
        GL.Delegates.glVertexAttrib4fNV((uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4fNV", Version = "1.2")]
      public static void VertexAttrib4(uint index, float x, float y, float z, float w)
      {
        GL.Delegates.glVertexAttrib4fNV(index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(int index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib4fvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(int index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib4fvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(int index, float* v)
      {
        GL.Delegates.glVertexAttrib4fvNV((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4fvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(uint index, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttrib4fvNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttrib4fvNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, float* v)
      {
        GL.Delegates.glVertexAttrib4fvNV(index, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib4hNV", Version = "1.2")]
      public static void VertexAttrib4h(int index, Half x, Half y, Half z, Half w)
      {
        GL.Delegates.glVertexAttrib4hNV((uint) index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib4hNV", Version = "1.2")]
      public static void VertexAttrib4h(uint index, Half x, Half y, Half z, Half w)
      {
        GL.Delegates.glVertexAttrib4hNV(index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib4hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4h(int index, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttrib4hvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib4hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4h(int index, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttrib4hvNV((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib4hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4h(int index, Half* v)
      {
        GL.Delegates.glVertexAttrib4hvNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib4hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4h(uint index, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttrib4hvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib4hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4h(uint index, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttrib4hvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttrib4hvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4h(uint index, Half* v)
      {
        GL.Delegates.glVertexAttrib4hvNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4sNV", Version = "1.2")]
      public static void VertexAttrib4(int index, short x, short y, short z, short w)
      {
        GL.Delegates.glVertexAttrib4sNV((uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4sNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttrib4(uint index, short x, short y, short z, short w)
      {
        GL.Delegates.glVertexAttrib4sNV(index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4svNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(int index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib4svNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4svNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(int index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib4svNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(int index, short* v)
      {
        GL.Delegates.glVertexAttrib4svNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttrib4svNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttrib4svNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4svNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(uint index, short* v)
      {
        GL.Delegates.glVertexAttrib4svNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4ubNV", Version = "1.2")]
      public static void VertexAttrib4(int index, byte x, byte y, byte z, byte w)
      {
        GL.Delegates.glVertexAttrib4ubNV((uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4ubNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttrib4(uint index, byte x, byte y, byte z, byte w)
      {
        GL.Delegates.glVertexAttrib4ubNV(index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4ubvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(int index, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttrib4ubvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4ubvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(int index, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttrib4ubvNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4ubvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(int index, byte* v)
      {
        GL.Delegates.glVertexAttrib4ubvNV((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4ubvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(uint index, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttrib4ubvNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4ubvNV", Version = "1.2")]
      public static unsafe void VertexAttrib4(uint index, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttrib4ubvNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttrib4ubvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttrib4(uint index, byte* v)
      {
        GL.Delegates.glVertexAttrib4ubvNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glVertexAttribFormatNV", Version = "1.2")]
      public static void VertexAttribFormat(int index, int size, NvVertexBufferUnifiedMemory type, bool normalized, int stride)
      {
        GL.Delegates.glVertexAttribFormatNV((uint) index, size, type, normalized, stride);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glVertexAttribFormatNV", Version = "1.2")]
      public static void VertexAttribFormat(uint index, int size, NvVertexBufferUnifiedMemory type, bool normalized, int stride)
      {
        GL.Delegates.glVertexAttribFormatNV(index, size, type, normalized, stride);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glVertexAttribIFormatNV", Version = "1.2")]
      public static void VertexAttribIFormat(int index, int size, NvVertexBufferUnifiedMemory type, int stride)
      {
        GL.Delegates.glVertexAttribIFormatNV((uint) index, size, type, stride);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glVertexAttribIFormatNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttribIFormat(uint index, int size, NvVertexBufferUnifiedMemory type, int stride)
      {
        GL.Delegates.glVertexAttribIFormatNV(index, size, type, stride);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL1i64NV", Version = "4.1")]
      public static void VertexAttribL1(int index, long x)
      {
        GL.Delegates.glVertexAttribL1i64NV((uint) index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL1i64NV", Version = "4.1")]
      public static void VertexAttribL1(uint index, long x)
      {
        GL.Delegates.glVertexAttribL1i64NV(index, x);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL1i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL1(int index, long* v)
      {
        GL.Delegates.glVertexAttribL1i64vNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL1i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL1(uint index, long* v)
      {
        GL.Delegates.glVertexAttribL1i64vNV(index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL1ui64NV", Version = "4.1")]
      public static void VertexAttribL1(uint index, ulong x)
      {
        GL.Delegates.glVertexAttribL1ui64NV(index, x);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL1ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL1(uint index, ulong* v)
      {
        GL.Delegates.glVertexAttribL1ui64vNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2i64NV", Version = "4.1")]
      public static void VertexAttribL2(int index, long x, long y)
      {
        GL.Delegates.glVertexAttribL2i64NV((uint) index, x, y);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2i64NV", Version = "4.1")]
      [CLSCompliant(false)]
      public static void VertexAttribL2(uint index, long x, long y)
      {
        GL.Delegates.glVertexAttribL2i64NV(index, x, y);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL2(int index, long[] v)
      {
        fixed (long* v1 = v)
          GL.Delegates.glVertexAttribL2i64vNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL2(int index, ref long v)
      {
        fixed (long* v1 = &v)
          GL.Delegates.glVertexAttribL2i64vNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL2(int index, long* v)
      {
        GL.Delegates.glVertexAttribL2i64vNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL2(uint index, long[] v)
      {
        fixed (long* v1 = v)
          GL.Delegates.glVertexAttribL2i64vNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL2(uint index, ref long v)
      {
        fixed (long* v1 = &v)
          GL.Delegates.glVertexAttribL2i64vNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL2(uint index, long* v)
      {
        GL.Delegates.glVertexAttribL2i64vNV(index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2ui64NV", Version = "4.1")]
      public static void VertexAttribL2(uint index, ulong x, ulong y)
      {
        GL.Delegates.glVertexAttribL2ui64NV(index, x, y);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL2(uint index, ulong[] v)
      {
        fixed (ulong* v1 = v)
          GL.Delegates.glVertexAttribL2ui64vNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2ui64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL2(uint index, ref ulong v)
      {
        fixed (ulong* v1 = &v)
          GL.Delegates.glVertexAttribL2ui64vNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL2ui64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL2(uint index, ulong* v)
      {
        GL.Delegates.glVertexAttribL2ui64vNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3i64NV", Version = "4.1")]
      public static void VertexAttribL3(int index, long x, long y, long z)
      {
        GL.Delegates.glVertexAttribL3i64NV((uint) index, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3i64NV", Version = "4.1")]
      public static void VertexAttribL3(uint index, long x, long y, long z)
      {
        GL.Delegates.glVertexAttribL3i64NV(index, x, y, z);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL3(int index, long[] v)
      {
        fixed (long* v1 = v)
          GL.Delegates.glVertexAttribL3i64vNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL3(int index, ref long v)
      {
        fixed (long* v1 = &v)
          GL.Delegates.glVertexAttribL3i64vNV((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL3(int index, long* v)
      {
        GL.Delegates.glVertexAttribL3i64vNV((uint) index, v);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL3(uint index, long[] v)
      {
        fixed (long* v1 = v)
          GL.Delegates.glVertexAttribL3i64vNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL3(uint index, ref long v)
      {
        fixed (long* v1 = &v)
          GL.Delegates.glVertexAttribL3i64vNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL3(uint index, long* v)
      {
        GL.Delegates.glVertexAttribL3i64vNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3ui64NV", Version = "4.1")]
      [CLSCompliant(false)]
      public static void VertexAttribL3(uint index, ulong x, ulong y, ulong z)
      {
        GL.Delegates.glVertexAttribL3ui64NV(index, x, y, z);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL3(uint index, ulong[] v)
      {
        fixed (ulong* v1 = v)
          GL.Delegates.glVertexAttribL3ui64vNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3ui64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL3(uint index, ref ulong v)
      {
        fixed (ulong* v1 = &v)
          GL.Delegates.glVertexAttribL3ui64vNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL3ui64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL3(uint index, ulong* v)
      {
        GL.Delegates.glVertexAttribL3ui64vNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4i64NV", Version = "4.1")]
      public static void VertexAttribL4(int index, long x, long y, long z, long w)
      {
        GL.Delegates.glVertexAttribL4i64NV((uint) index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4i64NV", Version = "4.1")]
      [CLSCompliant(false)]
      public static void VertexAttribL4(uint index, long x, long y, long z, long w)
      {
        GL.Delegates.glVertexAttribL4i64NV(index, x, y, z, w);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL4(int index, long[] v)
      {
        fixed (long* v1 = v)
          GL.Delegates.glVertexAttribL4i64vNV((uint) index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL4(int index, ref long v)
      {
        fixed (long* v1 = &v)
          GL.Delegates.glVertexAttribL4i64vNV((uint) index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL4(int index, long* v)
      {
        GL.Delegates.glVertexAttribL4i64vNV((uint) index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL4(uint index, long[] v)
      {
        fixed (long* v1 = v)
          GL.Delegates.glVertexAttribL4i64vNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4i64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL4(uint index, ref long v)
      {
        fixed (long* v1 = &v)
          GL.Delegates.glVertexAttribL4i64vNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4i64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL4(uint index, long* v)
      {
        GL.Delegates.glVertexAttribL4i64vNV(index, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4ui64NV", Version = "4.1")]
      public static void VertexAttribL4(uint index, ulong x, ulong y, ulong z, ulong w)
      {
        GL.Delegates.glVertexAttribL4ui64NV(index, x, y, z, w);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4ui64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL4(uint index, ulong[] v)
      {
        fixed (ulong* v1 = v)
          GL.Delegates.glVertexAttribL4ui64vNV(index, v1);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4ui64vNV", Version = "4.1")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribL4(uint index, ref ulong v)
      {
        fixed (ulong* v1 = &v)
          GL.Delegates.glVertexAttribL4ui64vNV(index, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribL4ui64vNV", Version = "4.1")]
      public static unsafe void VertexAttribL4(uint index, ulong* v)
      {
        GL.Delegates.glVertexAttribL4ui64vNV(index, v);
      }

      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribLFormatNV", Version = "4.1")]
      public static void VertexAttribLFormat(int index, int size, NvVertexAttribInteger64bit type, int stride)
      {
        GL.Delegates.glVertexAttribLFormatNV((uint) index, size, type, stride);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_attrib_integer_64bit", EntryPoint = "glVertexAttribLFormatNV", Version = "4.1")]
      public static void VertexAttribLFormat(uint index, int size, NvVertexAttribInteger64bit type, int stride)
      {
        GL.Delegates.glVertexAttribLFormatNV(index, size, type, stride);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      public static void VertexAttribPointer(int index, int fsize, VertexAttribParameterArb type, int stride, IntPtr pointer)
      {
        GL.Delegates.glVertexAttribPointerNV((uint) index, fsize, type, stride, pointer);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      public static void VertexAttribPointer<T4>(int index, int fsize, VertexAttribParameterArb type, int stride, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerNV((uint) index, fsize, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      public static void VertexAttribPointer<T4>(int index, int fsize, VertexAttribParameterArb type, int stride, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerNV((uint) index, fsize, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      public static void VertexAttribPointer<T4>(int index, int fsize, VertexAttribParameterArb type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerNV((uint) index, fsize, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      public static void VertexAttribPointer<T4>(int index, int fsize, VertexAttribParameterArb type, int stride, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerNV((uint) index, fsize, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttribPointer(uint index, int fsize, VertexAttribParameterArb type, int stride, IntPtr pointer)
      {
        GL.Delegates.glVertexAttribPointerNV(index, fsize, type, stride, pointer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      public static void VertexAttribPointer<T4>(uint index, int fsize, VertexAttribParameterArb type, int stride, [In, Out] T4[] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerNV(index, fsize, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      public static void VertexAttribPointer<T4>(uint index, int fsize, VertexAttribParameterArb type, int stride, [In, Out] T4[,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerNV(index, fsize, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttribPointer<T4>(uint index, int fsize, VertexAttribParameterArb type, int stride, [In, Out] T4[,,] pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerNV(index, fsize, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribPointerNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static void VertexAttribPointer<T4>(uint index, int fsize, VertexAttribParameterArb type, int stride, [In, Out] ref T4 pointer) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glVertexAttribPointerNV(index, fsize, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(int index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribs1dvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(int index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribs1dvNV((uint) index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(int index, int count, double* v)
      {
        GL.Delegates.glVertexAttribs1dvNV((uint) index, count, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(uint index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribs1dvNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs1(uint index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribs1dvNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(uint index, int count, double* v)
      {
        GL.Delegates.glVertexAttribs1dvNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(int index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttribs1fvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(int index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttribs1fvNV((uint) index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(int index, int count, float* v)
      {
        GL.Delegates.glVertexAttribs1fvNV((uint) index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs1(uint index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttribs1fvNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs1(uint index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttribs1fvNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs1(uint index, int count, float* v)
      {
        GL.Delegates.glVertexAttribs1fvNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs1hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1h(int index, int n, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttribs1hvNV((uint) index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs1hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1h(int index, int n, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttribs1hvNV((uint) index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs1hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs1h(int index, int n, Half* v)
      {
        GL.Delegates.glVertexAttribs1hvNV((uint) index, n, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs1hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1h(uint index, int n, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttribs1hvNV(index, n, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs1hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs1h(uint index, int n, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttribs1hvNV(index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs1hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs1h(uint index, int n, Half* v)
      {
        GL.Delegates.glVertexAttribs1hvNV(index, n, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1svNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(int index, int count, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribs1svNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1svNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(int index, int count, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribs1svNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs1(int index, int count, short* v)
      {
        GL.Delegates.glVertexAttribs1svNV((uint) index, count, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1svNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(uint index, int count, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribs1svNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs1(uint index, int count, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribs1svNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs1svNV", Version = "1.2")]
      public static unsafe void VertexAttribs1(uint index, int count, short* v)
      {
        GL.Delegates.glVertexAttribs1svNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(int index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribs2dvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(int index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribs2dvNV((uint) index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(int index, int count, double* v)
      {
        GL.Delegates.glVertexAttribs2dvNV((uint) index, count, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(uint index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribs2dvNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs2(uint index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribs2dvNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(uint index, int count, double* v)
      {
        GL.Delegates.glVertexAttribs2dvNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(int index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttribs2fvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(int index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttribs2fvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs2(int index, int count, float* v)
      {
        GL.Delegates.glVertexAttribs2fvNV((uint) index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs2(uint index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttribs2fvNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(uint index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttribs2fvNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs2(uint index, int count, float* v)
      {
        GL.Delegates.glVertexAttribs2fvNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs2hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2h(int index, int n, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttribs2hvNV((uint) index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs2hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2h(int index, int n, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttribs2hvNV((uint) index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs2hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs2h(int index, int n, Half* v)
      {
        GL.Delegates.glVertexAttribs2hvNV((uint) index, n, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs2hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2h(uint index, int n, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttribs2hvNV(index, n, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs2hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2h(uint index, int n, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttribs2hvNV(index, n, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs2hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs2h(uint index, int n, Half* v)
      {
        GL.Delegates.glVertexAttribs2hvNV(index, n, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2svNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(int index, int count, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribs2svNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2svNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(int index, int count, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribs2svNV((uint) index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2svNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(int index, int count, short* v)
      {
        GL.Delegates.glVertexAttribs2svNV((uint) index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs2(uint index, int count, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribs2svNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2svNV", Version = "1.2")]
      public static unsafe void VertexAttribs2(uint index, int count, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribs2svNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs2svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs2(uint index, int count, short* v)
      {
        GL.Delegates.glVertexAttribs2svNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(int index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribs3dvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(int index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribs3dvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs3(int index, int count, double* v)
      {
        GL.Delegates.glVertexAttribs3dvNV((uint) index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs3(uint index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribs3dvNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs3(uint index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribs3dvNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(uint index, int count, double* v)
      {
        GL.Delegates.glVertexAttribs3dvNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(int index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttribs3fvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(int index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttribs3fvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs3(int index, int count, float* v)
      {
        GL.Delegates.glVertexAttribs3fvNV((uint) index, count, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(uint index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttribs3fvNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(uint index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttribs3fvNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs3(uint index, int count, float* v)
      {
        GL.Delegates.glVertexAttribs3fvNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs3hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3h(int index, int n, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttribs3hvNV((uint) index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs3hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3h(int index, int n, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttribs3hvNV((uint) index, n, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs3hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3h(int index, int n, Half* v)
      {
        GL.Delegates.glVertexAttribs3hvNV((uint) index, n, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs3hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs3h(uint index, int n, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttribs3hvNV(index, n, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs3hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3h(uint index, int n, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttribs3hvNV(index, n, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs3hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs3h(uint index, int n, Half* v)
      {
        GL.Delegates.glVertexAttribs3hvNV(index, n, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3svNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(int index, int count, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribs3svNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3svNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(int index, int count, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribs3svNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs3(int index, int count, short* v)
      {
        GL.Delegates.glVertexAttribs3svNV((uint) index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs3(uint index, int count, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribs3svNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3svNV", Version = "1.2")]
      public static unsafe void VertexAttribs3(uint index, int count, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribs3svNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs3svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs3(uint index, int count, short* v)
      {
        GL.Delegates.glVertexAttribs3svNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribs4dvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribs4dvNV((uint) index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, double* v)
      {
        GL.Delegates.glVertexAttribs4dvNV((uint) index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4(uint index, int count, double[] v)
      {
        fixed (double* v1 = v)
          GL.Delegates.glVertexAttribs4dvNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4dvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(uint index, int count, ref double v)
      {
        fixed (double* v1 = &v)
          GL.Delegates.glVertexAttribs4dvNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4dvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4(uint index, int count, double* v)
      {
        GL.Delegates.glVertexAttribs4dvNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttribs4fvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttribs4fvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4(int index, int count, float* v)
      {
        GL.Delegates.glVertexAttribs4fvNV((uint) index, count, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(uint index, int count, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glVertexAttribs4fvNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4fvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4(uint index, int count, ref float v)
      {
        fixed (float* v1 = &v)
          GL.Delegates.glVertexAttribs4fvNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4fvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(uint index, int count, float* v)
      {
        GL.Delegates.glVertexAttribs4fvNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs4hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4h(int index, int n, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttribs4hvNV((uint) index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs4hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4h(int index, int n, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttribs4hvNV((uint) index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs4hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4h(int index, int n, Half* v)
      {
        GL.Delegates.glVertexAttribs4hvNV((uint) index, n, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs4hvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4h(uint index, int n, Half[] v)
      {
        fixed (Half* v1 = v)
          GL.Delegates.glVertexAttribs4hvNV(index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs4hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4h(uint index, int n, ref Half v)
      {
        fixed (Half* v1 = &v)
          GL.Delegates.glVertexAttribs4hvNV(index, n, v1);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexAttribs4hvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4h(uint index, int n, Half* v)
      {
        GL.Delegates.glVertexAttribs4hvNV(index, n, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4svNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribs4svNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4svNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribs4svNV((uint) index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4svNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, short* v)
      {
        GL.Delegates.glVertexAttribs4svNV((uint) index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4(uint index, int count, short[] v)
      {
        fixed (short* v1 = v)
          GL.Delegates.glVertexAttribs4svNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4(uint index, int count, ref short v)
      {
        fixed (short* v1 = &v)
          GL.Delegates.glVertexAttribs4svNV(index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4svNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4(uint index, int count, short* v)
      {
        GL.Delegates.glVertexAttribs4svNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4ubvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttribs4ubvNV((uint) index, count, v1);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4ubvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttribs4ubvNV((uint) index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4ubvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(int index, int count, byte* v)
      {
        GL.Delegates.glVertexAttribs4ubvNV((uint) index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4ubvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexAttribs4(uint index, int count, byte[] v)
      {
        fixed (byte* v1 = v)
          GL.Delegates.glVertexAttribs4ubvNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4ubvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(uint index, int count, ref byte v)
      {
        fixed (byte* v1 = &v)
          GL.Delegates.glVertexAttribs4ubvNV(index, count, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_vertex_program", EntryPoint = "glVertexAttribs4ubvNV", Version = "1.2")]
      public static unsafe void VertexAttribs4(uint index, int count, byte* v)
      {
        GL.Delegates.glVertexAttribs4ubvNV(index, count, v);
      }

      [AutoGenerated(Category = "NV_vertex_buffer_unified_memory", EntryPoint = "glVertexFormatNV", Version = "1.2")]
      public static void VertexFormat(int size, NvVertexBufferUnifiedMemory type, int stride)
      {
        GL.Delegates.glVertexFormatNV(size, type, stride);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexWeighthNV", Version = "1.2")]
      public static void VertexWeighth(Half weight)
      {
        GL.Delegates.glVertexWeighthNV(weight);
      }

      [AutoGenerated(Category = "NV_half_float", EntryPoint = "glVertexWeighthvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VertexWeighth(Half* weight)
      {
        GL.Delegates.glVertexWeighthvNV(weight);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureNV", Version = "1.2")]
      public static unsafe NvVideoCapture VideoCapture(int video_capture_slot, [Out] int[] sequence_num, [Out] long[] capture_time)
      {
        fixed (int* numPtr1 = sequence_num)
          fixed (long* numPtr2 = capture_time)
            return GL.Delegates.glVideoCaptureNV((uint) video_capture_slot, (uint*) numPtr1, (ulong*) numPtr2);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureNV", Version = "1.2")]
      public static unsafe NvVideoCapture VideoCapture(int video_capture_slot, out int sequence_num, out long capture_time)
      {
        fixed (int* numPtr1 = &sequence_num)
          fixed (long* numPtr2 = &capture_time)
          {
            NvVideoCapture nvVideoCapture = GL.Delegates.glVideoCaptureNV((uint) video_capture_slot, (uint*) numPtr1, (ulong*) numPtr2);
            sequence_num = *numPtr1;
            capture_time = *numPtr2;
            return nvVideoCapture;
          }
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe NvVideoCapture VideoCapture(int video_capture_slot, [Out] int* sequence_num, [Out] long* capture_time)
      {
        return GL.Delegates.glVideoCaptureNV((uint) video_capture_slot, (uint*) sequence_num, (ulong*) capture_time);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureNV", Version = "1.2")]
      public static unsafe NvVideoCapture VideoCapture(uint video_capture_slot, [Out] uint[] sequence_num, [Out] ulong[] capture_time)
      {
        fixed (uint* sequence_num1 = sequence_num)
          fixed (ulong* capture_time1 = capture_time)
            return GL.Delegates.glVideoCaptureNV(video_capture_slot, sequence_num1, capture_time1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe NvVideoCapture VideoCapture(uint video_capture_slot, out uint sequence_num, out ulong capture_time)
      {
        fixed (uint* sequence_num1 = &sequence_num)
          fixed (ulong* capture_time1 = &capture_time)
          {
            NvVideoCapture nvVideoCapture = GL.Delegates.glVideoCaptureNV(video_capture_slot, sequence_num1, capture_time1);
            sequence_num = *sequence_num1;
            capture_time = *capture_time1;
            return nvVideoCapture;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureNV", Version = "1.2")]
      public static unsafe NvVideoCapture VideoCapture(uint video_capture_slot, [Out] uint* sequence_num, [Out] ulong* capture_time)
      {
        return GL.Delegates.glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterdvNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glVideoCaptureStreamParameterdvNV((uint) video_capture_slot, (uint) stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterdvNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, ref double @params)
      {
        fixed (double* params1 = &@params)
          GL.Delegates.glVideoCaptureStreamParameterdvNV((uint) video_capture_slot, (uint) stream, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterdvNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, double* @params)
      {
        GL.Delegates.glVideoCaptureStreamParameterdvNV((uint) video_capture_slot, (uint) stream, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterdvNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, double[] @params)
      {
        fixed (double* params1 = @params)
          GL.Delegates.glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterdvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, ref double @params)
      {
        fixed (double* params1 = &@params)
          GL.Delegates.glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterdvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, double* @params)
      {
        GL.Delegates.glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, @params);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterfvNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glVideoCaptureStreamParameterfvNV((uint) video_capture_slot, (uint) stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterfvNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glVideoCaptureStreamParameterfvNV((uint) video_capture_slot, (uint) stream, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterfvNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, float* @params)
      {
        GL.Delegates.glVideoCaptureStreamParameterfvNV((uint) video_capture_slot, (uint) stream, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterfvNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterfvNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterfvNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, float* @params)
      {
        GL.Delegates.glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, @params);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterivNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glVideoCaptureStreamParameterivNV((uint) video_capture_slot, (uint) stream, pname, params1);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterivNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glVideoCaptureStreamParameterivNV((uint) video_capture_slot, (uint) stream, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterivNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(int video_capture_slot, int stream, NvVideoCapture pname, int* @params)
      {
        GL.Delegates.glVideoCaptureStreamParameterivNV((uint) video_capture_slot, (uint) stream, pname, @params);
      }

      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterivNV", Version = "1.2")]
      [CLSCompliant(false)]
      public static unsafe void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterivNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "NV_video_capture", EntryPoint = "glVideoCaptureStreamParameterivNV", Version = "1.2")]
      public static unsafe void VideoCaptureStreamParameter(uint video_capture_slot, uint stream, NvVideoCapture pname, int* @params)
      {
        GL.Delegates.glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, @params);
      }
    }

    public static class Pgi
    {
      [AutoGenerated(Category = "PGI_misc_hints", EntryPoint = "glHintPGI", Version = "1.1")]
      public static void Hint(PgiMiscHints target, int mode)
      {
        GL.Delegates.glHintPGI(target, mode);
      }
    }

    public static class Sgi
    {
      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableParameterfvSGI", Version = "1.0")]
      public static unsafe void ColorTableParameter(SgiColorTable target, SgiColorTable pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glColorTableParameterfvSGI(target, pname, params1);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableParameterfvSGI", Version = "1.0")]
      public static unsafe void ColorTableParameter(SgiColorTable target, SgiColorTable pname, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glColorTableParameterfvSGI(target, pname, params1);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableParameterfvSGI", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void ColorTableParameter(SgiColorTable target, SgiColorTable pname, float* @params)
      {
        GL.Delegates.glColorTableParameterfvSGI(target, pname, @params);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableParameterivSGI", Version = "1.0")]
      public static unsafe void ColorTableParameter(SgiColorTable target, SgiColorTable pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glColorTableParameterivSGI(target, pname, params1);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableParameterivSGI", Version = "1.0")]
      public static unsafe void ColorTableParameter(SgiColorTable target, SgiColorTable pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glColorTableParameterivSGI(target, pname, params1);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableParameterivSGI", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void ColorTableParameter(SgiColorTable target, SgiColorTable pname, int* @params)
      {
        GL.Delegates.glColorTableParameterivSGI(target, pname, @params);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableSGI", Version = "1.0")]
      public static void ColorTable(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
      {
        GL.Delegates.glColorTableSGI(target, internalformat, width, format, type, table);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableSGI", Version = "1.0")]
      public static void ColorTable<T5>(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[] table) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorTableSGI(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableSGI", Version = "1.0")]
      public static void ColorTable<T5>(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[,] table) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorTableSGI(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableSGI", Version = "1.0")]
      public static void ColorTable<T5>(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] T5[,,] table) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorTableSGI(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glColorTableSGI", Version = "1.0")]
      public static void ColorTable<T5>(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, [In, Out] ref T5 table) where T5 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glColorTableSGI(target, internalformat, width, format, type, gcHandle.AddrOfPinnedObject());
          table = (T5) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glCopyColorTableSGI", Version = "1.0")]
      public static void CopyColorTable(SgiColorTable target, PixelInternalFormat internalformat, int x, int y, int width)
      {
        GL.Delegates.glCopyColorTableSGI(target, internalformat, x, y, width);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableParameterfvSGI", Version = "1.0")]
      public static unsafe void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetColorTableParameterfvSGI(target, pname, params1);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableParameterfvSGI", Version = "1.0")]
      public static unsafe void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetColorTableParameterfvSGI(target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableParameterfvSGI", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, [Out] float* @params)
      {
        GL.Delegates.glGetColorTableParameterfvSGI(target, pname, @params);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableParameterivSGI", Version = "1.0")]
      public static unsafe void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetColorTableParameterivSGI(target, pname, params1);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableParameterivSGI", Version = "1.0")]
      public static unsafe void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetColorTableParameterivSGI(target, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableParameterivSGI", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetColorTableParameter(SgiColorTable target, SgiColorTable pname, [Out] int* @params)
      {
        GL.Delegates.glGetColorTableParameterivSGI(target, pname, @params);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableSGI", Version = "1.0")]
      public static void GetColorTable(SgiColorTable target, PixelFormat format, PixelType type, [Out] IntPtr table)
      {
        GL.Delegates.glGetColorTableSGI(target, format, type, table);
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableSGI", Version = "1.0")]
      public static void GetColorTable<T3>(SgiColorTable target, PixelFormat format, PixelType type, [In, Out] T3[] table) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetColorTableSGI(target, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableSGI", Version = "1.0")]
      public static void GetColorTable<T3>(SgiColorTable target, PixelFormat format, PixelType type, [In, Out] T3[,] table) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetColorTableSGI(target, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableSGI", Version = "1.0")]
      public static void GetColorTable<T3>(SgiColorTable target, PixelFormat format, PixelType type, [In, Out] T3[,,] table) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetColorTableSGI(target, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGI_color_table", EntryPoint = "glGetColorTableSGI", Version = "1.0")]
      public static void GetColorTable<T3>(SgiColorTable target, PixelFormat format, PixelType type, [In, Out] ref T3 table) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) table, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetColorTableSGI(target, format, type, gcHandle.AddrOfPinnedObject());
          table = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    public static class Sgis
    {
      [AutoGenerated(Category = "SGIS_detail_texture", EntryPoint = "glDetailTexFuncSGIS", Version = "1.0")]
      public static unsafe void DetailTexFunc(TextureTarget target, int n, float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glDetailTexFuncSGIS(target, n, points1);
      }

      [AutoGenerated(Category = "SGIS_detail_texture", EntryPoint = "glDetailTexFuncSGIS", Version = "1.0")]
      public static unsafe void DetailTexFunc(TextureTarget target, int n, ref float points)
      {
        fixed (float* points1 = &points)
          GL.Delegates.glDetailTexFuncSGIS(target, n, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIS_detail_texture", EntryPoint = "glDetailTexFuncSGIS", Version = "1.0")]
      public static unsafe void DetailTexFunc(TextureTarget target, int n, float* points)
      {
        GL.Delegates.glDetailTexFuncSGIS(target, n, points);
      }

      [AutoGenerated(Category = "SGIS_fog_function", EntryPoint = "glFogFuncSGIS", Version = "1.1")]
      public static unsafe void FogFunc(int n, float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glFogFuncSGIS(n, points1);
      }

      [AutoGenerated(Category = "SGIS_fog_function", EntryPoint = "glFogFuncSGIS", Version = "1.1")]
      public static unsafe void FogFunc(int n, ref float points)
      {
        fixed (float* points1 = &points)
          GL.Delegates.glFogFuncSGIS(n, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIS_fog_function", EntryPoint = "glFogFuncSGIS", Version = "1.1")]
      public static unsafe void FogFunc(int n, float* points)
      {
        GL.Delegates.glFogFuncSGIS(n, points);
      }

      [AutoGenerated(Category = "SGIS_detail_texture", EntryPoint = "glGetDetailTexFuncSGIS", Version = "1.0")]
      public static unsafe void GetDetailTexFunc(TextureTarget target, [Out] float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glGetDetailTexFuncSGIS(target, points1);
      }

      [AutoGenerated(Category = "SGIS_detail_texture", EntryPoint = "glGetDetailTexFuncSGIS", Version = "1.0")]
      public static unsafe void GetDetailTexFunc(TextureTarget target, out float points)
      {
        fixed (float* points1 = &points)
        {
          GL.Delegates.glGetDetailTexFuncSGIS(target, points1);
          points = *points1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIS_detail_texture", EntryPoint = "glGetDetailTexFuncSGIS", Version = "1.0")]
      public static unsafe void GetDetailTexFunc(TextureTarget target, [Out] float* points)
      {
        GL.Delegates.glGetDetailTexFuncSGIS(target, points);
      }

      [AutoGenerated(Category = "SGIS_fog_function", EntryPoint = "glGetFogFuncSGIS", Version = "1.1")]
      public static unsafe void GetFogFunc([Out] float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glGetFogFuncSGIS(points1);
      }

      [AutoGenerated(Category = "SGIS_fog_function", EntryPoint = "glGetFogFuncSGIS", Version = "1.1")]
      public static unsafe void GetFogFunc(out float points)
      {
        fixed (float* points1 = &points)
        {
          GL.Delegates.glGetFogFuncSGIS(points1);
          points = *points1;
        }
      }

      [AutoGenerated(Category = "SGIS_fog_function", EntryPoint = "glGetFogFuncSGIS", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetFogFunc([Out] float* points)
      {
        GL.Delegates.glGetFogFuncSGIS(points);
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glGetPixelTexGenParameterfvSGIS", Version = "1.0")]
      public static unsafe void GetPixelTexGenParameter(SgisPixelTexture pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetPixelTexGenParameterfvSGIS(pname, params1);
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glGetPixelTexGenParameterfvSGIS", Version = "1.0")]
      public static unsafe void GetPixelTexGenParameter(SgisPixelTexture pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetPixelTexGenParameterfvSGIS(pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glGetPixelTexGenParameterfvSGIS", Version = "1.0")]
      public static unsafe void GetPixelTexGenParameter(SgisPixelTexture pname, [Out] float* @params)
      {
        GL.Delegates.glGetPixelTexGenParameterfvSGIS(pname, @params);
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glGetPixelTexGenParameterivSGIS", Version = "1.0")]
      public static unsafe void GetPixelTexGenParameter(SgisPixelTexture pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetPixelTexGenParameterivSGIS(pname, params1);
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glGetPixelTexGenParameterivSGIS", Version = "1.0")]
      public static unsafe void GetPixelTexGenParameter(SgisPixelTexture pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetPixelTexGenParameterivSGIS(pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glGetPixelTexGenParameterivSGIS", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetPixelTexGenParameter(SgisPixelTexture pname, [Out] int* @params)
      {
        GL.Delegates.glGetPixelTexGenParameterivSGIS(pname, @params);
      }

      [AutoGenerated(Category = "SGIS_sharpen_texture", EntryPoint = "glGetSharpenTexFuncSGIS", Version = "1.0")]
      public static unsafe void GetSharpenTexFunc(TextureTarget target, [Out] float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glGetSharpenTexFuncSGIS(target, points1);
      }

      [AutoGenerated(Category = "SGIS_sharpen_texture", EntryPoint = "glGetSharpenTexFuncSGIS", Version = "1.0")]
      public static unsafe void GetSharpenTexFunc(TextureTarget target, out float points)
      {
        fixed (float* points1 = &points)
        {
          GL.Delegates.glGetSharpenTexFuncSGIS(target, points1);
          points = *points1;
        }
      }

      [AutoGenerated(Category = "SGIS_sharpen_texture", EntryPoint = "glGetSharpenTexFuncSGIS", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetSharpenTexFunc(TextureTarget target, [Out] float* points)
      {
        GL.Delegates.glGetSharpenTexFuncSGIS(target, points);
      }

      [AutoGenerated(Category = "SGIS_texture_filter4", EntryPoint = "glGetTexFilterFuncSGIS", Version = "1.0")]
      public static unsafe void GetTexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, [Out] float[] weights)
      {
        fixed (float* weights1 = weights)
          GL.Delegates.glGetTexFilterFuncSGIS(target, filter, weights1);
      }

      [AutoGenerated(Category = "SGIS_texture_filter4", EntryPoint = "glGetTexFilterFuncSGIS", Version = "1.0")]
      public static unsafe void GetTexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, out float weights)
      {
        fixed (float* weights1 = &weights)
        {
          GL.Delegates.glGetTexFilterFuncSGIS(target, filter, weights1);
          weights = *weights1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIS_texture_filter4", EntryPoint = "glGetTexFilterFuncSGIS", Version = "1.0")]
      public static unsafe void GetTexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, [Out] float* weights)
      {
        GL.Delegates.glGetTexFilterFuncSGIS(target, filter, weights);
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glPixelTexGenParameterfSGIS", Version = "1.0")]
      public static void PixelTexGenParameter(SgisPixelTexture pname, float param)
      {
        GL.Delegates.glPixelTexGenParameterfSGIS(pname, param);
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glPixelTexGenParameterfvSGIS", Version = "1.0")]
      public static unsafe void PixelTexGenParameter(SgisPixelTexture pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glPixelTexGenParameterfvSGIS(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glPixelTexGenParameterfvSGIS", Version = "1.0")]
      public static unsafe void PixelTexGenParameter(SgisPixelTexture pname, float* @params)
      {
        GL.Delegates.glPixelTexGenParameterfvSGIS(pname, @params);
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glPixelTexGenParameteriSGIS", Version = "1.0")]
      public static void PixelTexGenParameter(SgisPixelTexture pname, int param)
      {
        GL.Delegates.glPixelTexGenParameteriSGIS(pname, param);
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glPixelTexGenParameterivSGIS", Version = "1.0")]
      public static unsafe void PixelTexGenParameter(SgisPixelTexture pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glPixelTexGenParameterivSGIS(pname, params1);
      }

      [AutoGenerated(Category = "SGIS_pixel_texture", EntryPoint = "glPixelTexGenParameterivSGIS", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void PixelTexGenParameter(SgisPixelTexture pname, int* @params)
      {
        GL.Delegates.glPixelTexGenParameterivSGIS(pname, @params);
      }

      [AutoGenerated(Category = "SGIS_point_parameters", EntryPoint = "glPointParameterfSGIS", Version = "1.0")]
      public static void PointParameter(SgisPointParameters pname, float param)
      {
        GL.Delegates.glPointParameterfSGIS(pname, param);
      }

      [AutoGenerated(Category = "SGIS_point_parameters", EntryPoint = "glPointParameterfvSGIS", Version = "1.0")]
      public static unsafe void PointParameter(SgisPointParameters pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glPointParameterfvSGIS(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIS_point_parameters", EntryPoint = "glPointParameterfvSGIS", Version = "1.0")]
      public static unsafe void PointParameter(SgisPointParameters pname, float* @params)
      {
        GL.Delegates.glPointParameterfvSGIS(pname, @params);
      }

      [AutoGenerated(Category = "SGIS_multisample", EntryPoint = "glSampleMaskSGIS", Version = "1.1")]
      public static void SampleMask(float value, bool invert)
      {
        GL.Delegates.glSampleMaskSGIS(value, invert);
      }

      [AutoGenerated(Category = "SGIS_multisample", EntryPoint = "glSamplePatternSGIS", Version = "1.0")]
      public static void SamplePattern(SgisMultisample pattern)
      {
        GL.Delegates.glSamplePatternSGIS(pattern);
      }

      [AutoGenerated(Category = "SGIS_sharpen_texture", EntryPoint = "glSharpenTexFuncSGIS", Version = "1.0")]
      public static unsafe void SharpenTexFunc(TextureTarget target, int n, float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glSharpenTexFuncSGIS(target, n, points1);
      }

      [AutoGenerated(Category = "SGIS_sharpen_texture", EntryPoint = "glSharpenTexFuncSGIS", Version = "1.0")]
      public static unsafe void SharpenTexFunc(TextureTarget target, int n, ref float points)
      {
        fixed (float* points1 = &points)
          GL.Delegates.glSharpenTexFuncSGIS(target, n, points1);
      }

      [AutoGenerated(Category = "SGIS_sharpen_texture", EntryPoint = "glSharpenTexFuncSGIS", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void SharpenTexFunc(TextureTarget target, int n, float* points)
      {
        GL.Delegates.glSharpenTexFuncSGIS(target, n, points);
      }

      [AutoGenerated(Category = "SGIS_texture_filter4", EntryPoint = "glTexFilterFuncSGIS", Version = "1.0")]
      public static unsafe void TexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, int n, float[] weights)
      {
        fixed (float* weights1 = weights)
          GL.Delegates.glTexFilterFuncSGIS(target, filter, n, weights1);
      }

      [AutoGenerated(Category = "SGIS_texture_filter4", EntryPoint = "glTexFilterFuncSGIS", Version = "1.0")]
      public static unsafe void TexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, int n, ref float weights)
      {
        fixed (float* weights1 = &weights)
          GL.Delegates.glTexFilterFuncSGIS(target, filter, n, weights1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIS_texture_filter4", EntryPoint = "glTexFilterFuncSGIS", Version = "1.0")]
      public static unsafe void TexFilterFunc(TextureTarget target, SgisTextureFilter4 filter, int n, float* weights)
      {
        GL.Delegates.glTexFilterFuncSGIS(target, filter, n, weights);
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexImage4DSGIS", Version = "1.0")]
      public static void TexImage4D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexImage4DSGIS", Version = "1.0")]
      public static void TexImage4D<T10>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, [In, Out] T10[] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexImage4DSGIS", Version = "1.0")]
      public static void TexImage4D<T10>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, [In, Out] T10[,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexImage4DSGIS", Version = "1.0")]
      public static void TexImage4D<T10>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, [In, Out] T10[,,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexImage4DSGIS", Version = "1.0")]
      public static void TexImage4D<T10>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, [In, Out] ref T10 pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T10) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexSubImage4DSGIS", Version = "1.0")]
      public static void TexSubImage4D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, IntPtr pixels)
      {
        GL.Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexSubImage4DSGIS", Version = "1.0")]
      public static void TexSubImage4D<T12>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, [In, Out] T12[] pixels) where T12 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexSubImage4DSGIS", Version = "1.0")]
      public static void TexSubImage4D<T12>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, [In, Out] T12[,] pixels) where T12 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexSubImage4DSGIS", Version = "1.0")]
      public static void TexSubImage4D<T12>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, [In, Out] T12[,,] pixels) where T12 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIS_texture4D", EntryPoint = "glTexSubImage4DSGIS", Version = "1.0")]
      public static void TexSubImage4D<T12>(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, [In, Out] ref T12 pixels) where T12 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T12) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIS_texture_color_mask", EntryPoint = "glTextureColorMaskSGIS", Version = "1.1")]
      public static void TextureColorMask(bool red, bool green, bool blue, bool alpha)
      {
        GL.Delegates.glTextureColorMaskSGIS(red, green, blue, alpha);
      }
    }

    public static class Sgix
    {
      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glAsyncMarkerSGIX", Version = "1.0")]
      public static void AsyncMarker(int marker)
      {
        GL.Delegates.glAsyncMarkerSGIX((uint) marker);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glAsyncMarkerSGIX", Version = "1.0")]
      public static void AsyncMarker(uint marker)
      {
        GL.Delegates.glAsyncMarkerSGIX(marker);
      }

      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glDeformationMap3dSGIX", Version = "1.0")]
      public static unsafe void DeformationMap3(SgixPolynomialFfd target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points)
      {
        fixed (double* points1 = points)
          GL.Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points1);
      }

      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glDeformationMap3dSGIX", Version = "1.0")]
      public static unsafe void DeformationMap3(SgixPolynomialFfd target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ref double points)
      {
        fixed (double* points1 = &points)
          GL.Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glDeformationMap3dSGIX", Version = "1.0")]
      public static unsafe void DeformationMap3(SgixPolynomialFfd target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points)
      {
        GL.Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
      }

      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glDeformationMap3fSGIX", Version = "1.0")]
      public static unsafe void DeformationMap3(SgixPolynomialFfd target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points)
      {
        fixed (float* points1 = points)
          GL.Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points1);
      }

      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glDeformationMap3fSGIX", Version = "1.0")]
      public static unsafe void DeformationMap3(SgixPolynomialFfd target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ref float points)
      {
        fixed (float* points1 = &points)
          GL.Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glDeformationMap3fSGIX", Version = "1.0")]
      public static unsafe void DeformationMap3(SgixPolynomialFfd target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points)
      {
        GL.Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
      }

      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glDeformSGIX", Version = "1.0")]
      public static void Deform(int mask)
      {
        GL.Delegates.glDeformSGIX((uint) mask);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glDeformSGIX", Version = "1.0")]
      public static void Deform(uint mask)
      {
        GL.Delegates.glDeformSGIX(mask);
      }

      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glDeleteAsyncMarkersSGIX", Version = "1.0")]
      public static void DeleteAsyncMarkers(int marker, int range)
      {
        GL.Delegates.glDeleteAsyncMarkersSGIX((uint) marker, range);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glDeleteAsyncMarkersSGIX", Version = "1.0")]
      public static void DeleteAsyncMarkers(uint marker, int range)
      {
        GL.Delegates.glDeleteAsyncMarkersSGIX(marker, range);
      }

      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glFinishAsyncSGIX", Version = "1.0")]
      public static unsafe int FinishAsync(out int markerp)
      {
        fixed (int* numPtr = &markerp)
        {
          int num = GL.Delegates.glFinishAsyncSGIX((uint*) numPtr);
          markerp = *numPtr;
          return num;
        }
      }

      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glFinishAsyncSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe int FinishAsync([Out] int* markerp)
      {
        return GL.Delegates.glFinishAsyncSGIX((uint*) markerp);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glFinishAsyncSGIX", Version = "1.0")]
      public static unsafe int FinishAsync(out uint markerp)
      {
        fixed (uint* markerp1 = &markerp)
        {
          int num = GL.Delegates.glFinishAsyncSGIX(markerp1);
          markerp = *markerp1;
          return num;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glFinishAsyncSGIX", Version = "1.0")]
      public static unsafe int FinishAsync([Out] uint* markerp)
      {
        return GL.Delegates.glFinishAsyncSGIX(markerp);
      }

      [AutoGenerated(Category = "SGIX_flush_raster", EntryPoint = "glFlushRasterSGIX", Version = "1.0")]
      public static void FlushRaster()
      {
        GL.Delegates.glFlushRasterSGIX();
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentColorMaterialSGIX", Version = "1.0")]
      public static void FragmentColorMaterial(MaterialFace face, MaterialParameter mode)
      {
        GL.Delegates.glFragmentColorMaterialSGIX(face, mode);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightfSGIX", Version = "1.0")]
      public static void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, float param)
      {
        GL.Delegates.glFragmentLightfSGIX(light, pname, param);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightfvSGIX", Version = "1.0")]
      public static unsafe void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glFragmentLightfvSGIX(light, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightfvSGIX", Version = "1.0")]
      public static unsafe void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, float* @params)
      {
        GL.Delegates.glFragmentLightfvSGIX(light, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightiSGIX", Version = "1.0")]
      public static void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, int param)
      {
        GL.Delegates.glFragmentLightiSGIX(light, pname, param);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightivSGIX", Version = "1.0")]
      public static unsafe void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glFragmentLightivSGIX(light, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightivSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void FragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, int* @params)
      {
        GL.Delegates.glFragmentLightivSGIX(light, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightModelfSGIX", Version = "1.0")]
      public static void FragmentLightModel(SgixFragmentLighting pname, float param)
      {
        GL.Delegates.glFragmentLightModelfSGIX(pname, param);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightModelfvSGIX", Version = "1.0")]
      public static unsafe void FragmentLightModel(SgixFragmentLighting pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glFragmentLightModelfvSGIX(pname, params1);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightModelfvSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void FragmentLightModel(SgixFragmentLighting pname, float* @params)
      {
        GL.Delegates.glFragmentLightModelfvSGIX(pname, @params);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightModeliSGIX", Version = "1.0")]
      public static void FragmentLightModel(SgixFragmentLighting pname, int param)
      {
        GL.Delegates.glFragmentLightModeliSGIX(pname, param);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightModelivSGIX", Version = "1.0")]
      public static unsafe void FragmentLightModel(SgixFragmentLighting pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glFragmentLightModelivSGIX(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentLightModelivSGIX", Version = "1.0")]
      public static unsafe void FragmentLightModel(SgixFragmentLighting pname, int* @params)
      {
        GL.Delegates.glFragmentLightModelivSGIX(pname, @params);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentMaterialfSGIX", Version = "1.0")]
      public static void FragmentMaterial(MaterialFace face, MaterialParameter pname, float param)
      {
        GL.Delegates.glFragmentMaterialfSGIX(face, pname, param);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentMaterialfvSGIX", Version = "1.0")]
      public static unsafe void FragmentMaterial(MaterialFace face, MaterialParameter pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glFragmentMaterialfvSGIX(face, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentMaterialfvSGIX", Version = "1.0")]
      public static unsafe void FragmentMaterial(MaterialFace face, MaterialParameter pname, float* @params)
      {
        GL.Delegates.glFragmentMaterialfvSGIX(face, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentMaterialiSGIX", Version = "1.0")]
      public static void FragmentMaterial(MaterialFace face, MaterialParameter pname, int param)
      {
        GL.Delegates.glFragmentMaterialiSGIX(face, pname, param);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentMaterialivSGIX", Version = "1.0")]
      public static unsafe void FragmentMaterial(MaterialFace face, MaterialParameter pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glFragmentMaterialivSGIX(face, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glFragmentMaterialivSGIX", Version = "1.0")]
      public static unsafe void FragmentMaterial(MaterialFace face, MaterialParameter pname, int* @params)
      {
        GL.Delegates.glFragmentMaterialivSGIX(face, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_framezoom", EntryPoint = "glFrameZoomSGIX", Version = "1.0")]
      public static void FrameZoom(int factor)
      {
        GL.Delegates.glFrameZoomSGIX(factor);
      }

      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glGenAsyncMarkersSGIX", Version = "1.0")]
      public static int GenAsyncMarkers(int range)
      {
        return GL.Delegates.glGenAsyncMarkersSGIX(range);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentLightfvSGIX", Version = "1.0")]
      public static unsafe void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetFragmentLightfvSGIX(light, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentLightfvSGIX", Version = "1.0")]
      public static unsafe void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetFragmentLightfvSGIX(light, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentLightfvSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] float* @params)
      {
        GL.Delegates.glGetFragmentLightfvSGIX(light, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentLightivSGIX", Version = "1.0")]
      public static unsafe void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFragmentLightivSGIX(light, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentLightivSGIX", Version = "1.0")]
      public static unsafe void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFragmentLightivSGIX(light, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentLightivSGIX", Version = "1.0")]
      public static unsafe void GetFragmentLight(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] int* @params)
      {
        GL.Delegates.glGetFragmentLightivSGIX(light, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentMaterialfvSGIX", Version = "1.0")]
      public static unsafe void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetFragmentMaterialfvSGIX(face, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentMaterialfvSGIX", Version = "1.0")]
      public static unsafe void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetFragmentMaterialfvSGIX(face, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentMaterialfvSGIX", Version = "1.0")]
      public static unsafe void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, [Out] float* @params)
      {
        GL.Delegates.glGetFragmentMaterialfvSGIX(face, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentMaterialivSGIX", Version = "1.0")]
      public static unsafe void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFragmentMaterialivSGIX(face, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentMaterialivSGIX", Version = "1.0")]
      public static unsafe void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFragmentMaterialivSGIX(face, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glGetFragmentMaterialivSGIX", Version = "1.0")]
      public static unsafe void GetFragmentMaterial(MaterialFace face, MaterialParameter pname, [Out] int* @params)
      {
        GL.Delegates.glGetFragmentMaterialivSGIX(face, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_instruments", EntryPoint = "glGetInstrumentsSGIX", Version = "1.0")]
      public static int GetInstruments()
      {
        return GL.Delegates.glGetInstrumentsSGIX();
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterfvSGIX", Version = "1.0")]
      public static unsafe void GetListParameter(int list, ListParameterName pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetListParameterfvSGIX((uint) list, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterfvSGIX", Version = "1.0")]
      public static unsafe void GetListParameter(int list, ListParameterName pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetListParameterfvSGIX((uint) list, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterfvSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetListParameter(int list, ListParameterName pname, [Out] float* @params)
      {
        GL.Delegates.glGetListParameterfvSGIX((uint) list, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterfvSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetListParameter(uint list, ListParameterName pname, [Out] float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetListParameterfvSGIX(list, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterfvSGIX", Version = "1.0")]
      public static unsafe void GetListParameter(uint list, ListParameterName pname, out float @params)
      {
        fixed (float* params1 = &@params)
        {
          GL.Delegates.glGetListParameterfvSGIX(list, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterfvSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetListParameter(uint list, ListParameterName pname, [Out] float* @params)
      {
        GL.Delegates.glGetListParameterfvSGIX(list, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterivSGIX", Version = "1.0")]
      public static unsafe void GetListParameter(int list, ListParameterName pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetListParameterivSGIX((uint) list, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterivSGIX", Version = "1.0")]
      public static unsafe void GetListParameter(int list, ListParameterName pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetListParameterivSGIX((uint) list, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterivSGIX", Version = "1.0")]
      public static unsafe void GetListParameter(int list, ListParameterName pname, [Out] int* @params)
      {
        GL.Delegates.glGetListParameterivSGIX((uint) list, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterivSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetListParameter(uint list, ListParameterName pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetListParameterivSGIX(list, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterivSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void GetListParameter(uint list, ListParameterName pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetListParameterivSGIX(list, pname, params1);
          @params = *params1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glGetListParameterivSGIX", Version = "1.0")]
      public static unsafe void GetListParameter(uint list, ListParameterName pname, [Out] int* @params)
      {
        GL.Delegates.glGetListParameterivSGIX(list, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_igloo_interface", EntryPoint = "glIglooInterfaceSGIX", Version = "1.0")]
      public static void IglooInterface(All pname, IntPtr @params)
      {
        GL.Delegates.glIglooInterfaceSGIX(pname, @params);
      }

      [AutoGenerated(Category = "SGIX_igloo_interface", EntryPoint = "glIglooInterfaceSGIX", Version = "1.0")]
      public static void IglooInterface<T1>(All pname, [In, Out] T1[] @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIglooInterfaceSGIX(pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIX_igloo_interface", EntryPoint = "glIglooInterfaceSGIX", Version = "1.0")]
      public static void IglooInterface<T1>(All pname, [In, Out] T1[,] @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIglooInterfaceSGIX(pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIX_igloo_interface", EntryPoint = "glIglooInterfaceSGIX", Version = "1.0")]
      public static void IglooInterface<T1>(All pname, [In, Out] T1[,,] @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIglooInterfaceSGIX(pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIX_igloo_interface", EntryPoint = "glIglooInterfaceSGIX", Version = "1.0")]
      public static void IglooInterface<T1>(All pname, [In, Out] ref T1 @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glIglooInterfaceSGIX(pname, gcHandle.AddrOfPinnedObject());
          @params = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SGIX_instruments", EntryPoint = "glInstrumentsBufferSGIX", Version = "1.0")]
      public static unsafe void InstrumentsBuffer(int size, [Out] int[] buffer)
      {
        fixed (int* buffer1 = buffer)
          GL.Delegates.glInstrumentsBufferSGIX(size, buffer1);
      }

      [AutoGenerated(Category = "SGIX_instruments", EntryPoint = "glInstrumentsBufferSGIX", Version = "1.0")]
      public static unsafe void InstrumentsBuffer(int size, out int buffer)
      {
        fixed (int* buffer1 = &buffer)
        {
          GL.Delegates.glInstrumentsBufferSGIX(size, buffer1);
          buffer = *buffer1;
        }
      }

      [AutoGenerated(Category = "SGIX_instruments", EntryPoint = "glInstrumentsBufferSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void InstrumentsBuffer(int size, [Out] int* buffer)
      {
        GL.Delegates.glInstrumentsBufferSGIX(size, buffer);
      }

      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glIsAsyncMarkerSGIX", Version = "1.0")]
      public static bool IsAsyncMarker(int marker)
      {
        return GL.Delegates.glIsAsyncMarkerSGIX((uint) marker);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glIsAsyncMarkerSGIX", Version = "1.0")]
      public static bool IsAsyncMarker(uint marker)
      {
        return GL.Delegates.glIsAsyncMarkerSGIX(marker);
      }

      [AutoGenerated(Category = "SGIX_fragment_lighting", EntryPoint = "glLightEnviSGIX", Version = "1.0")]
      public static void LightEnv(SgixFragmentLighting pname, int param)
      {
        GL.Delegates.glLightEnviSGIX(pname, param);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterfSGIX", Version = "1.0")]
      public static void ListParameter(int list, ListParameterName pname, float param)
      {
        GL.Delegates.glListParameterfSGIX((uint) list, pname, param);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterfSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static void ListParameter(uint list, ListParameterName pname, float param)
      {
        GL.Delegates.glListParameterfSGIX(list, pname, param);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterfvSGIX", Version = "1.0")]
      public static unsafe void ListParameter(int list, ListParameterName pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glListParameterfvSGIX((uint) list, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterfvSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void ListParameter(int list, ListParameterName pname, float* @params)
      {
        GL.Delegates.glListParameterfvSGIX((uint) list, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterfvSGIX", Version = "1.0")]
      public static unsafe void ListParameter(uint list, ListParameterName pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glListParameterfvSGIX(list, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterfvSGIX", Version = "1.0")]
      public static unsafe void ListParameter(uint list, ListParameterName pname, float* @params)
      {
        GL.Delegates.glListParameterfvSGIX(list, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameteriSGIX", Version = "1.0")]
      public static void ListParameter(int list, ListParameterName pname, int param)
      {
        GL.Delegates.glListParameteriSGIX((uint) list, pname, param);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameteriSGIX", Version = "1.0")]
      public static void ListParameter(uint list, ListParameterName pname, int param)
      {
        GL.Delegates.glListParameteriSGIX(list, pname, param);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterivSGIX", Version = "1.0")]
      public static unsafe void ListParameter(int list, ListParameterName pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glListParameterivSGIX((uint) list, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterivSGIX", Version = "1.0")]
      public static unsafe void ListParameter(int list, ListParameterName pname, int* @params)
      {
        GL.Delegates.glListParameterivSGIX((uint) list, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterivSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void ListParameter(uint list, ListParameterName pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glListParameterivSGIX(list, pname, params1);
      }

      [AutoGenerated(Category = "SGIX_list_priority", EntryPoint = "glListParameterivSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void ListParameter(uint list, ListParameterName pname, int* @params)
      {
        GL.Delegates.glListParameterivSGIX(list, pname, @params);
      }

      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glLoadIdentityDeformationMapSGIX", Version = "1.0")]
      public static void LoadIdentityDeformationMap(int mask)
      {
        GL.Delegates.glLoadIdentityDeformationMapSGIX((uint) mask);
      }

      [AutoGenerated(Category = "SGIX_polynomial_ffd", EntryPoint = "glLoadIdentityDeformationMapSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static void LoadIdentityDeformationMap(uint mask)
      {
        GL.Delegates.glLoadIdentityDeformationMapSGIX(mask);
      }

      [AutoGenerated(Category = "SGIX_pixel_texture", EntryPoint = "glPixelTexGenSGIX", Version = "1.0")]
      public static void PixelTexGen(SgixPixelTexture mode)
      {
        GL.Delegates.glPixelTexGenSGIX(mode);
      }

      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glPollAsyncSGIX", Version = "1.0")]
      public static unsafe int PollAsync(out int markerp)
      {
        fixed (int* numPtr = &markerp)
        {
          int num = GL.Delegates.glPollAsyncSGIX((uint*) numPtr);
          markerp = *numPtr;
          return num;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glPollAsyncSGIX", Version = "1.0")]
      public static unsafe int PollAsync([Out] int* markerp)
      {
        return GL.Delegates.glPollAsyncSGIX((uint*) markerp);
      }

      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glPollAsyncSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe int PollAsync(out uint markerp)
      {
        fixed (uint* markerp1 = &markerp)
        {
          int num = GL.Delegates.glPollAsyncSGIX(markerp1);
          markerp = *markerp1;
          return num;
        }
      }

      [AutoGenerated(Category = "SGIX_async", EntryPoint = "glPollAsyncSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe int PollAsync([Out] uint* markerp)
      {
        return GL.Delegates.glPollAsyncSGIX(markerp);
      }

      [AutoGenerated(Category = "SGIX_instruments", EntryPoint = "glPollInstrumentsSGIX", Version = "1.0")]
      public static unsafe int PollInstruments(out int marker_p)
      {
        fixed (int* marker_p1 = &marker_p)
        {
          int num = GL.Delegates.glPollInstrumentsSGIX(marker_p1);
          marker_p = *marker_p1;
          return num;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_instruments", EntryPoint = "glPollInstrumentsSGIX", Version = "1.0")]
      public static unsafe int PollInstruments([Out] int* marker_p)
      {
        return GL.Delegates.glPollInstrumentsSGIX(marker_p);
      }

      [AutoGenerated(Category = "SGIX_instruments", EntryPoint = "glReadInstrumentsSGIX", Version = "1.0")]
      public static void ReadInstruments(int marker)
      {
        GL.Delegates.glReadInstrumentsSGIX(marker);
      }

      [AutoGenerated(Category = "SGIX_reference_plane", EntryPoint = "glReferencePlaneSGIX", Version = "1.0")]
      public static unsafe void ReferencePlane(double[] equation)
      {
        fixed (double* equation1 = equation)
          GL.Delegates.glReferencePlaneSGIX(equation1);
      }

      [AutoGenerated(Category = "SGIX_reference_plane", EntryPoint = "glReferencePlaneSGIX", Version = "1.0")]
      public static unsafe void ReferencePlane(ref double equation)
      {
        fixed (double* equation1 = &equation)
          GL.Delegates.glReferencePlaneSGIX(equation1);
      }

      [AutoGenerated(Category = "SGIX_reference_plane", EntryPoint = "glReferencePlaneSGIX", Version = "1.0")]
      [CLSCompliant(false)]
      public static unsafe void ReferencePlane(double* equation)
      {
        GL.Delegates.glReferencePlaneSGIX(equation);
      }

      [AutoGenerated(Category = "SGIX_sprite", EntryPoint = "glSpriteParameterfSGIX", Version = "1.0")]
      public static void SpriteParameter(SgixSprite pname, float param)
      {
        GL.Delegates.glSpriteParameterfSGIX(pname, param);
      }

      [AutoGenerated(Category = "SGIX_sprite", EntryPoint = "glSpriteParameterfvSGIX", Version = "1.0")]
      public static unsafe void SpriteParameter(SgixSprite pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glSpriteParameterfvSGIX(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_sprite", EntryPoint = "glSpriteParameterfvSGIX", Version = "1.0")]
      public static unsafe void SpriteParameter(SgixSprite pname, float* @params)
      {
        GL.Delegates.glSpriteParameterfvSGIX(pname, @params);
      }

      [AutoGenerated(Category = "SGIX_sprite", EntryPoint = "glSpriteParameteriSGIX", Version = "1.0")]
      public static void SpriteParameter(SgixSprite pname, int param)
      {
        GL.Delegates.glSpriteParameteriSGIX(pname, param);
      }

      [AutoGenerated(Category = "SGIX_sprite", EntryPoint = "glSpriteParameterivSGIX", Version = "1.0")]
      public static unsafe void SpriteParameter(SgixSprite pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glSpriteParameterivSGIX(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SGIX_sprite", EntryPoint = "glSpriteParameterivSGIX", Version = "1.0")]
      public static unsafe void SpriteParameter(SgixSprite pname, int* @params)
      {
        GL.Delegates.glSpriteParameterivSGIX(pname, @params);
      }

      [AutoGenerated(Category = "SGIX_instruments", EntryPoint = "glStartInstrumentsSGIX", Version = "1.0")]
      public static void StartInstruments()
      {
        GL.Delegates.glStartInstrumentsSGIX();
      }

      [AutoGenerated(Category = "SGIX_instruments", EntryPoint = "glStopInstrumentsSGIX", Version = "1.0")]
      public static void StopInstruments(int marker)
      {
        GL.Delegates.glStopInstrumentsSGIX(marker);
      }

      [AutoGenerated(Category = "SGIX_tag_sample_buffer", EntryPoint = "glTagSampleBufferSGIX", Version = "1.0")]
      public static void TagSampleBuffer()
      {
        GL.Delegates.glTagSampleBufferSGIX();
      }
    }

    public static class Sun
    {
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor3fVertex3fSUN", Version = "1.1")]
      public static void Color3fVertex3(float r, float g, float b, float x, float y, float z)
      {
        GL.Delegates.glColor3fVertex3fSUN(r, g, b, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void Color3fVertex3(float[] c, float[] v)
      {
        fixed (float* c1 = c)
          fixed (float* v1 = v)
            GL.Delegates.glColor3fVertex3fvSUN(c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void Color3fVertex3(ref float c, ref float v)
      {
        fixed (float* c1 = &c)
          fixed (float* v1 = &v)
            GL.Delegates.glColor3fVertex3fvSUN(c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Color3fVertex3(float* c, float* v)
      {
        GL.Delegates.glColor3fVertex3fvSUN(c, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4fNormal3fVertex3fSUN", Version = "1.1")]
      public static void Color4fNormal3fVertex3(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void Color4fNormal3fVertex3(float[] c, float[] n, float[] v)
      {
        fixed (float* c1 = c)
          fixed (float* n1 = n)
            fixed (float* v1 = v)
              GL.Delegates.glColor4fNormal3fVertex3fvSUN(c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void Color4fNormal3fVertex3(ref float c, ref float n, ref float v)
      {
        fixed (float* c1 = &c)
          fixed (float* n1 = &n)
            fixed (float* v1 = &v)
              GL.Delegates.glColor4fNormal3fVertex3fvSUN(c1, n1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void Color4fNormal3fVertex3(float* c, float* n, float* v)
      {
        GL.Delegates.glColor4fNormal3fVertex3fvSUN(c, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4ubVertex2fSUN", Version = "1.1")]
      public static void Color4ubVertex2(byte r, byte g, byte b, byte a, float x, float y)
      {
        GL.Delegates.glColor4ubVertex2fSUN(r, g, b, a, x, y);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4ubVertex2fvSUN", Version = "1.1")]
      public static unsafe void Color4ubVertex2(byte[] c, float[] v)
      {
        fixed (byte* c1 = c)
          fixed (float* v1 = v)
            GL.Delegates.glColor4ubVertex2fvSUN(c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4ubVertex2fvSUN", Version = "1.1")]
      public static unsafe void Color4ubVertex2(ref byte c, ref float v)
      {
        fixed (byte* c1 = &c)
          fixed (float* v1 = &v)
            GL.Delegates.glColor4ubVertex2fvSUN(c1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4ubVertex2fvSUN", Version = "1.1")]
      public static unsafe void Color4ubVertex2(byte* c, float* v)
      {
        GL.Delegates.glColor4ubVertex2fvSUN(c, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4ubVertex3fSUN", Version = "1.1")]
      public static void Color4ubVertex3(byte r, byte g, byte b, byte a, float x, float y, float z)
      {
        GL.Delegates.glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4ubVertex3fvSUN", Version = "1.1")]
      public static unsafe void Color4ubVertex3(byte[] c, float[] v)
      {
        fixed (byte* c1 = c)
          fixed (float* v1 = v)
            GL.Delegates.glColor4ubVertex3fvSUN(c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4ubVertex3fvSUN", Version = "1.1")]
      public static unsafe void Color4ubVertex3(ref byte c, ref float v)
      {
        fixed (byte* c1 = &c)
          fixed (float* v1 = &v)
            GL.Delegates.glColor4ubVertex3fvSUN(c1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glColor4ubVertex3fvSUN", Version = "1.1")]
      public static unsafe void Color4ubVertex3(byte* c, float* v)
      {
        GL.Delegates.glColor4ubVertex3fvSUN(c, v);
      }

      [AutoGenerated(Category = "SUN_mesh_array", EntryPoint = "glDrawMeshArraysSUN", Version = "1.1")]
      public static void DrawMeshArrays(BeginMode mode, int first, int count, int width)
      {
        GL.Delegates.glDrawMeshArraysSUN(mode, first, count, width);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_global_alpha", EntryPoint = "glGlobalAlphaFactorbSUN", Version = "1.1")]
      public static void GlobalAlphaFactor(sbyte factor)
      {
        GL.Delegates.glGlobalAlphaFactorbSUN(factor);
      }

      [AutoGenerated(Category = "SUN_global_alpha", EntryPoint = "glGlobalAlphaFactordSUN", Version = "1.1")]
      public static void GlobalAlphaFactor(double factor)
      {
        GL.Delegates.glGlobalAlphaFactordSUN(factor);
      }

      [AutoGenerated(Category = "SUN_global_alpha", EntryPoint = "glGlobalAlphaFactorfSUN", Version = "1.1")]
      public static void GlobalAlphaFactor(float factor)
      {
        GL.Delegates.glGlobalAlphaFactorfSUN(factor);
      }

      [AutoGenerated(Category = "SUN_global_alpha", EntryPoint = "glGlobalAlphaFactoriSUN", Version = "1.1")]
      public static void GlobalAlphaFactor(int factor)
      {
        GL.Delegates.glGlobalAlphaFactoriSUN(factor);
      }

      [AutoGenerated(Category = "SUN_global_alpha", EntryPoint = "glGlobalAlphaFactorsSUN", Version = "1.1")]
      public static void GlobalAlphaFactors(short factor)
      {
        GL.Delegates.glGlobalAlphaFactorsSUN(factor);
      }

      [AutoGenerated(Category = "SUN_global_alpha", EntryPoint = "glGlobalAlphaFactorubSUN", Version = "1.1")]
      public static void GlobalAlphaFactor(byte factor)
      {
        GL.Delegates.glGlobalAlphaFactorubSUN(factor);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_global_alpha", EntryPoint = "glGlobalAlphaFactoruiSUN", Version = "1.1")]
      public static void GlobalAlphaFactor(uint factor)
      {
        GL.Delegates.glGlobalAlphaFactoruiSUN(factor);
      }

      [AutoGenerated(Category = "SUN_global_alpha", EntryPoint = "glGlobalAlphaFactorusSUN", Version = "1.1")]
      public static void GlobalAlphaFactor(short factor)
      {
        GL.Delegates.glGlobalAlphaFactorusSUN((ushort) factor);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_global_alpha", EntryPoint = "glGlobalAlphaFactorusSUN", Version = "1.1")]
      public static void GlobalAlphaFactor(ushort factor)
      {
        GL.Delegates.glGlobalAlphaFactorusSUN(factor);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glNormal3fVertex3fSUN", Version = "1.1")]
      public static void Normal3fVertex3(float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void Normal3fVertex3(float[] n, float[] v)
      {
        fixed (float* n1 = n)
          fixed (float* v1 = v)
            GL.Delegates.glNormal3fVertex3fvSUN(n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void Normal3fVertex3(ref float n, ref float v)
      {
        fixed (float* n1 = &n)
          fixed (float* v1 = &v)
            GL.Delegates.glNormal3fVertex3fvSUN(n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void Normal3fVertex3(float* n, float* v)
      {
        GL.Delegates.glNormal3fVertex3fvSUN(n, v);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodePointerSUN", Version = "1.1")]
      public static void ReplacementCodePointer(SunTriangleList type, int stride, IntPtr pointer)
      {
        GL.Delegates.glReplacementCodePointerSUN(type, stride, pointer);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodePointerSUN", Version = "1.1")]
      public static void ReplacementCodePointer<T2>(SunTriangleList type, int stride, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glReplacementCodePointerSUN(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodePointerSUN", Version = "1.1")]
      public static void ReplacementCodePointer<T2>(SunTriangleList type, int stride, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glReplacementCodePointerSUN(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodePointerSUN", Version = "1.1")]
      public static void ReplacementCodePointer<T2>(SunTriangleList type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glReplacementCodePointerSUN(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodePointerSUN", Version = "1.1")]
      public static void ReplacementCodePointer<T2>(SunTriangleList type, int stride, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glReplacementCodePointerSUN(type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeubSUN", Version = "1.1")]
      public static void ReplacementCode(byte code)
      {
        GL.Delegates.glReplacementCodeubSUN(code);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeubvSUN", Version = "1.1")]
      public static unsafe void ReplacementCode(byte[] code)
      {
        fixed (byte* code1 = code)
          GL.Delegates.glReplacementCodeubvSUN(code1);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeubvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCode(byte* code)
      {
        GL.Delegates.glReplacementCodeubvSUN(code);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor3fVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiColor3fVertex3(int rc, float r, float g, float b, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiColor3fVertex3fSUN((uint) rc, r, g, b, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor3fVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiColor3fVertex3(uint rc, float r, float g, float b, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiColor3fVertex3(ref int rc, ref float c, ref float v)
      {
        fixed (int* numPtr = &rc)
          fixed (float* c1 = &c)
            fixed (float* v1 = &v)
              GL.Delegates.glReplacementCodeuiColor3fVertex3fvSUN((uint*) numPtr, c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor3fVertex3(int* rc, float[] c, float[] v)
      {
        fixed (float* c1 = c)
          fixed (float* v1 = v)
            GL.Delegates.glReplacementCodeuiColor3fVertex3fvSUN((uint*) rc, c1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiColor3fVertex3(int* rc, float* c, float* v)
      {
        GL.Delegates.glReplacementCodeuiColor3fVertex3fvSUN((uint*) rc, c, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiColor3fVertex3(ref uint rc, ref float c, ref float v)
      {
        fixed (uint* rc1 = &rc)
          fixed (float* c1 = &c)
            fixed (float* v1 = &v)
              GL.Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc1, c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor3fVertex3(uint* rc, float[] c, float[] v)
      {
        fixed (float* c1 = c)
          fixed (float* v1 = v)
            GL.Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiColor3fVertex3(uint* rc, float* c, float* v)
      {
        GL.Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiColor4fNormal3fVertex3(int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN((uint) rc, r, g, b, a, nx, ny, nz, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiColor4fNormal3fVertex3(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3(ref int rc, ref float c, ref float n, ref float v)
      {
        fixed (int* numPtr = &rc)
          fixed (float* c1 = &c)
            fixed (float* n1 = &n)
              fixed (float* v1 = &v)
                GL.Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((uint*) numPtr, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3(int* rc, float[] c, float[] n, float[] v)
      {
        fixed (float* c1 = c)
          fixed (float* n1 = n)
            fixed (float* v1 = v)
              GL.Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((uint*) rc, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3(int* rc, float* c, float* n, float* v)
      {
        GL.Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((uint*) rc, c, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3(ref uint rc, ref float c, ref float n, ref float v)
      {
        fixed (uint* rc1 = &rc)
          fixed (float* c1 = &c)
            fixed (float* n1 = &n)
              fixed (float* v1 = &v)
                GL.Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc1, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3(uint* rc, float[] c, float[] n, float[] v)
      {
        fixed (float* c1 = c)
          fixed (float* n1 = n)
            fixed (float* v1 = v)
              GL.Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor4fNormal3fVertex3(uint* rc, float* c, float* n, float* v)
      {
        GL.Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4ubVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiColor4ubVertex3(int rc, byte r, byte g, byte b, byte a, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiColor4ubVertex3fSUN((uint) rc, r, g, b, a, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4ubVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiColor4ubVertex3(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiColor4ubVertex3(ref int rc, ref byte c, ref float v)
      {
        fixed (int* numPtr = &rc)
          fixed (byte* c1 = &c)
            fixed (float* v1 = &v)
              GL.Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((uint*) numPtr, c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor4ubVertex3(int* rc, byte[] c, float[] v)
      {
        fixed (byte* c1 = c)
          fixed (float* v1 = v)
            GL.Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((uint*) rc, c1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiColor4ubVertex3(int* rc, byte* c, float* v)
      {
        GL.Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((uint*) rc, c, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor4ubVertex3(ref uint rc, ref byte c, ref float v)
      {
        fixed (uint* rc1 = &rc)
          fixed (byte* c1 = &c)
            fixed (float* v1 = &v)
              GL.Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc1, c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor4ubVertex3(uint* rc, byte[] c, float[] v)
      {
        fixed (byte* c1 = c)
          fixed (float* v1 = v)
            GL.Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiColor4ubVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiColor4ubVertex3(uint* rc, byte* c, float* v)
      {
        GL.Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiNormal3fVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiNormal3fVertex3(int rc, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiNormal3fVertex3fSUN((uint) rc, nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiNormal3fVertex3fSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static void ReplacementCodeuiNormal3fVertex3(uint rc, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiNormal3fVertex3(ref int rc, ref float n, ref float v)
      {
        fixed (int* numPtr = &rc)
          fixed (float* n1 = &n)
            fixed (float* v1 = &v)
              GL.Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((uint*) numPtr, n1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiNormal3fVertex3(int* rc, float[] n, float[] v)
      {
        fixed (float* n1 = n)
          fixed (float* v1 = v)
            GL.Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((uint*) rc, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiNormal3fVertex3(int* rc, float* n, float* v)
      {
        GL.Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((uint*) rc, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiNormal3fVertex3(ref uint rc, ref float n, ref float v)
      {
        fixed (uint* rc1 = &rc)
          fixed (float* n1 = &n)
            fixed (float* v1 = &v)
              GL.Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiNormal3fVertex3(uint* rc, float[] n, float[] v)
      {
        fixed (float* n1 = n)
          fixed (float* v1 = v)
            GL.Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiNormal3fVertex3(uint* rc, float* n, float* v)
      {
        GL.Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeuiSUN", Version = "1.1")]
      public static void ReplacementCode(int code)
      {
        GL.Delegates.glReplacementCodeuiSUN((uint) code);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeuiSUN", Version = "1.1")]
      public static void ReplacementCode(uint code)
      {
        GL.Delegates.glReplacementCodeuiSUN(code);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((uint) rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(ref int rc, ref float tc, ref float c, ref float n, ref float v)
      {
        fixed (int* numPtr = &rc)
          fixed (float* tc1 = &tc)
            fixed (float* c1 = &c)
              fixed (float* n1 = &n)
                fixed (float* v1 = &v)
                  GL.Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((uint*) numPtr, tc1, c1, n1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(int* rc, float[] tc, float[] c, float[] n, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* c1 = c)
            fixed (float* n1 = n)
              fixed (float* v1 = v)
                GL.Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((uint*) rc, tc1, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(int* rc, float* tc, float* c, float* n, float* v)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((uint*) rc, tc, c, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(ref uint rc, ref float tc, ref float c, ref float n, ref float v)
      {
        fixed (uint* rc1 = &rc)
          fixed (float* tc1 = &tc)
            fixed (float* c1 = &c)
              fixed (float* n1 = &n)
                fixed (float* v1 = &v)
                  GL.Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc1, tc1, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(uint* rc, float[] tc, float[] c, float[] n, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* c1 = c)
            fixed (float* n1 = n)
              fixed (float* v1 = v)
                GL.Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc1, c1, n1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(uint* rc, float* tc, float* c, float* n, float* v)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiTexCoord2fNormal3fVertex3(int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((uint) rc, s, t, nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static void ReplacementCodeuiTexCoord2fNormal3fVertex3(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(ref int rc, ref float tc, ref float n, ref float v)
      {
        fixed (int* numPtr = &rc)
          fixed (float* tc1 = &tc)
            fixed (float* n1 = &n)
              fixed (float* v1 = &v)
                GL.Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((uint*) numPtr, tc1, n1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(int* rc, float[] tc, float[] n, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* n1 = n)
            fixed (float* v1 = v)
              GL.Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((uint*) rc, tc1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(int* rc, float* tc, float* n, float* v)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((uint*) rc, tc, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(ref uint rc, ref float tc, ref float n, ref float v)
      {
        fixed (uint* rc1 = &rc)
          fixed (float* tc1 = &tc)
            fixed (float* n1 = &n)
              fixed (float* v1 = &v)
                GL.Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc1, tc1, n1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(uint* rc, float[] tc, float[] n, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* n1 = n)
            fixed (float* v1 = v)
              GL.Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc1, n1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(uint* rc, float* tc, float* n, float* v)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiTexCoord2fVertex3(int rc, float s, float t, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN((uint) rc, s, t, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static void ReplacementCodeuiTexCoord2fVertex3(uint rc, float s, float t, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fVertex3(ref int rc, ref float tc, ref float v)
      {
        fixed (int* numPtr = &rc)
          fixed (float* tc1 = &tc)
            fixed (float* v1 = &v)
              GL.Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((uint*) numPtr, tc1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fVertex3(int* rc, float[] tc, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* v1 = v)
            GL.Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((uint*) rc, tc1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fVertex3(int* rc, float* tc, float* v)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((uint*) rc, tc, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiTexCoord2fVertex3(ref uint rc, ref float tc, ref float v)
      {
        fixed (uint* rc1 = &rc)
          fixed (float* tc1 = &tc)
            fixed (float* v1 = &v)
              GL.Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc1, tc1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiTexCoord2fVertex3(uint* rc, float[] tc, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* v1 = v)
            GL.Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiTexCoord2fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiTexCoord2fVertex3(uint* rc, float* tc, float* v)
      {
        GL.Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiVertex3(int rc, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiVertex3fSUN((uint) rc, x, y, z);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiVertex3fSUN", Version = "1.1")]
      public static void ReplacementCodeuiVertex3(uint rc, float x, float y, float z)
      {
        GL.Delegates.glReplacementCodeuiVertex3fSUN(rc, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiVertex3(ref int rc, ref float v)
      {
        fixed (int* numPtr = &rc)
          fixed (float* v1 = &v)
            GL.Delegates.glReplacementCodeuiVertex3fvSUN((uint*) numPtr, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiVertex3(int* rc, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glReplacementCodeuiVertex3fvSUN((uint*) rc, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiVertex3(int* rc, float* v)
      {
        GL.Delegates.glReplacementCodeuiVertex3fvSUN((uint*) rc, v);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiVertex3(ref uint rc, ref float v)
      {
        fixed (uint* rc1 = &rc)
          fixed (float* v1 = &v)
            GL.Delegates.glReplacementCodeuiVertex3fvSUN(rc1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCodeuiVertex3(uint* rc, float[] v)
      {
        fixed (float* v1 = v)
          GL.Delegates.glReplacementCodeuiVertex3fvSUN(rc, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glReplacementCodeuiVertex3fvSUN", Version = "1.1")]
      public static unsafe void ReplacementCodeuiVertex3(uint* rc, float* v)
      {
        GL.Delegates.glReplacementCodeuiVertex3fvSUN(rc, v);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeuivSUN", Version = "1.1")]
      public static unsafe void ReplacementCode(int[] code)
      {
        fixed (int* numPtr = code)
          GL.Delegates.glReplacementCodeuivSUN((uint*) numPtr);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeuivSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCode(int* code)
      {
        GL.Delegates.glReplacementCodeuivSUN((uint*) code);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeuivSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCode(uint[] code)
      {
        fixed (uint* code1 = code)
          GL.Delegates.glReplacementCodeuivSUN(code1);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeuivSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ReplacementCode(uint* code)
      {
        GL.Delegates.glReplacementCodeuivSUN(code);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeusSUN", Version = "1.1")]
      public static void ReplacementCode(short code)
      {
        GL.Delegates.glReplacementCodeusSUN((ushort) code);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeusSUN", Version = "1.1")]
      public static void ReplacementCode(ushort code)
      {
        GL.Delegates.glReplacementCodeusSUN(code);
      }

      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeusvSUN", Version = "1.1")]
      public static unsafe void ReplacementCode(short[] code)
      {
        fixed (short* numPtr = code)
          GL.Delegates.glReplacementCodeusvSUN((ushort*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeusvSUN", Version = "1.1")]
      public static unsafe void ReplacementCode(short* code)
      {
        GL.Delegates.glReplacementCodeusvSUN((ushort*) code);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeusvSUN", Version = "1.1")]
      public static unsafe void ReplacementCode(ushort[] code)
      {
        fixed (ushort* code1 = code)
          GL.Delegates.glReplacementCodeusvSUN(code1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_triangle_list", EntryPoint = "glReplacementCodeusvSUN", Version = "1.1")]
      public static unsafe void ReplacementCode(ushort* code)
      {
        GL.Delegates.glReplacementCodeusvSUN(code);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor3fVertex3fSUN", Version = "1.1")]
      public static void TexCoord2fColor3fVertex3(float s, float t, float r, float g, float b, float x, float y, float z)
      {
        GL.Delegates.glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fColor3fVertex3(float[] tc, float[] c, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* c1 = c)
            fixed (float* v1 = v)
              GL.Delegates.glTexCoord2fColor3fVertex3fvSUN(tc1, c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fColor3fVertex3(ref float tc, ref float c, ref float v)
      {
        fixed (float* tc1 = &tc)
          fixed (float* c1 = &c)
            fixed (float* v1 = &v)
              GL.Delegates.glTexCoord2fColor3fVertex3fvSUN(tc1, c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexCoord2fColor3fVertex3(float* tc, float* c, float* v)
      {
        GL.Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fSUN", Version = "1.1")]
      public static void TexCoord2fColor4fNormal3fVertex3(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fColor4fNormal3fVertex3(float[] tc, float[] c, float[] n, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* c1 = c)
            fixed (float* n1 = n)
              fixed (float* v1 = v)
                GL.Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc1, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fColor4fNormal3fVertex3(ref float tc, ref float c, ref float n, ref float v)
      {
        fixed (float* tc1 = &tc)
          fixed (float* c1 = &c)
            fixed (float* n1 = &n)
              fixed (float* v1 = &v)
                GL.Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc1, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor4fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexCoord2fColor4fNormal3fVertex3(float* tc, float* c, float* n, float* v)
      {
        GL.Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor4ubVertex3fSUN", Version = "1.1")]
      public static void TexCoord2fColor4ubVertex3(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)
      {
        GL.Delegates.glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor4ubVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fColor4ubVertex3(float[] tc, byte[] c, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (byte* c1 = c)
            fixed (float* v1 = v)
              GL.Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc1, c1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor4ubVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fColor4ubVertex3(ref float tc, ref byte c, ref float v)
      {
        fixed (float* tc1 = &tc)
          fixed (byte* c1 = &c)
            fixed (float* v1 = &v)
              GL.Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc1, c1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fColor4ubVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fColor4ubVertex3(float* tc, byte* c, float* v)
      {
        GL.Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fNormal3fVertex3fSUN", Version = "1.1")]
      public static void TexCoord2fNormal3fVertex3(float s, float t, float nx, float ny, float nz, float x, float y, float z)
      {
        GL.Delegates.glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fNormal3fVertex3(float[] tc, float[] n, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* n1 = n)
            fixed (float* v1 = v)
              GL.Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fNormal3fVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fNormal3fVertex3(ref float tc, ref float n, ref float v)
      {
        fixed (float* tc1 = &tc)
          fixed (float* n1 = &n)
            fixed (float* v1 = &v)
              GL.Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fNormal3fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexCoord2fNormal3fVertex3(float* tc, float* n, float* v)
      {
        GL.Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fVertex3fSUN", Version = "1.1")]
      public static void TexCoord2fVertex3(float s, float t, float x, float y, float z)
      {
        GL.Delegates.glTexCoord2fVertex3fSUN(s, t, x, y, z);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fVertex3(float[] tc, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* v1 = v)
            GL.Delegates.glTexCoord2fVertex3fvSUN(tc1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fVertex3fvSUN", Version = "1.1")]
      public static unsafe void TexCoord2fVertex3(ref float tc, ref float v)
      {
        fixed (float* tc1 = &tc)
          fixed (float* v1 = &v)
            GL.Delegates.glTexCoord2fVertex3fvSUN(tc1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord2fVertex3fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexCoord2fVertex3(float* tc, float* v)
      {
        GL.Delegates.glTexCoord2fVertex3fvSUN(tc, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fSUN", Version = "1.1")]
      public static void TexCoord4fColor4fNormal3fVertex4(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)
      {
        GL.Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fvSUN", Version = "1.1")]
      public static unsafe void TexCoord4fColor4fNormal3fVertex4(float[] tc, float[] c, float[] n, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* c1 = c)
            fixed (float* n1 = n)
              fixed (float* v1 = v)
                GL.Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc1, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fvSUN", Version = "1.1")]
      public static unsafe void TexCoord4fColor4fNormal3fVertex4(ref float tc, ref float c, ref float n, ref float v)
      {
        fixed (float* tc1 = &tc)
          fixed (float* c1 = &c)
            fixed (float* n1 = &n)
              fixed (float* v1 = &v)
                GL.Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc1, c1, n1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord4fColor4fNormal3fVertex4fvSUN", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexCoord4fColor4fNormal3fVertex4(float* tc, float* c, float* n, float* v)
      {
        GL.Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord4fVertex4fSUN", Version = "1.1")]
      public static void TexCoord4fVertex4(float s, float t, float p, float q, float x, float y, float z, float w)
      {
        GL.Delegates.glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord4fVertex4fvSUN", Version = "1.1")]
      public static unsafe void TexCoord4fVertex4(float[] tc, float[] v)
      {
        fixed (float* tc1 = tc)
          fixed (float* v1 = v)
            GL.Delegates.glTexCoord4fVertex4fvSUN(tc1, v1);
      }

      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord4fVertex4fvSUN", Version = "1.1")]
      public static unsafe void TexCoord4fVertex4(ref float tc, ref float v)
      {
        fixed (float* tc1 = &tc)
          fixed (float* v1 = &v)
            GL.Delegates.glTexCoord4fVertex4fvSUN(tc1, v1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "SUN_vertex", EntryPoint = "glTexCoord4fVertex4fvSUN", Version = "1.1")]
      public static unsafe void TexCoord4fVertex4(float* tc, float* v)
      {
        GL.Delegates.glTexCoord4fVertex4fvSUN(tc, v);
      }
    }

    public static class Sunx
    {
      [AutoGenerated(Category = "SUNX_constant_data", EntryPoint = "glFinishTextureSUNX", Version = "1.1")]
      public static void FinishTexture()
      {
        GL.Delegates.glFinishTextureSUNX();
      }
    }

    internal static class Delegates
    {
      internal static GL.Delegates.Accum glAccum;
      internal static GL.Delegates.ActiveProgramEXT glActiveProgramEXT;
      internal static GL.Delegates.ActiveShaderProgram glActiveShaderProgram;
      internal static GL.Delegates.ActiveStencilFaceEXT glActiveStencilFaceEXT;
      internal static GL.Delegates.ActiveTexture glActiveTexture;
      internal static GL.Delegates.ActiveTextureARB glActiveTextureARB;
      internal static GL.Delegates.ActiveVaryingNV glActiveVaryingNV;
      internal static GL.Delegates.AlphaFragmentOp1ATI glAlphaFragmentOp1ATI;
      internal static GL.Delegates.AlphaFragmentOp2ATI glAlphaFragmentOp2ATI;
      internal static GL.Delegates.AlphaFragmentOp3ATI glAlphaFragmentOp3ATI;
      internal static GL.Delegates.AlphaFunc glAlphaFunc;
      internal static GL.Delegates.ApplyTextureEXT glApplyTextureEXT;
      internal static GL.Delegates.AreProgramsResidentNV glAreProgramsResidentNV;
      internal static GL.Delegates.AreTexturesResident glAreTexturesResident;
      internal static GL.Delegates.AreTexturesResidentEXT glAreTexturesResidentEXT;
      internal static GL.Delegates.ArrayElement glArrayElement;
      internal static GL.Delegates.ArrayElementEXT glArrayElementEXT;
      internal static GL.Delegates.ArrayObjectATI glArrayObjectATI;
      internal static GL.Delegates.AsyncMarkerSGIX glAsyncMarkerSGIX;
      internal static GL.Delegates.AttachObjectARB glAttachObjectARB;
      internal static GL.Delegates.AttachShader glAttachShader;
      internal static GL.Delegates.Begin glBegin;
      internal static GL.Delegates.BeginConditionalRender glBeginConditionalRender;
      internal static GL.Delegates.BeginConditionalRenderNV glBeginConditionalRenderNV;
      internal static GL.Delegates.BeginFragmentShaderATI glBeginFragmentShaderATI;
      internal static GL.Delegates.BeginOcclusionQueryNV glBeginOcclusionQueryNV;
      internal static GL.Delegates.BeginPerfMonitorAMD glBeginPerfMonitorAMD;
      internal static GL.Delegates.BeginQuery glBeginQuery;
      internal static GL.Delegates.BeginQueryARB glBeginQueryARB;
      internal static GL.Delegates.BeginQueryIndexed glBeginQueryIndexed;
      internal static GL.Delegates.BeginTransformFeedback glBeginTransformFeedback;
      internal static GL.Delegates.BeginTransformFeedbackEXT glBeginTransformFeedbackEXT;
      internal static GL.Delegates.BeginTransformFeedbackNV glBeginTransformFeedbackNV;
      internal static GL.Delegates.BeginVertexShaderEXT glBeginVertexShaderEXT;
      internal static GL.Delegates.BeginVideoCaptureNV glBeginVideoCaptureNV;
      internal static GL.Delegates.BindAttribLocation glBindAttribLocation;
      internal static GL.Delegates.BindAttribLocationARB glBindAttribLocationARB;
      internal static GL.Delegates.BindBuffer glBindBuffer;
      internal static GL.Delegates.BindBufferARB glBindBufferARB;
      internal static GL.Delegates.BindBufferBase glBindBufferBase;
      internal static GL.Delegates.BindBufferBaseEXT glBindBufferBaseEXT;
      internal static GL.Delegates.BindBufferBaseNV glBindBufferBaseNV;
      internal static GL.Delegates.BindBufferOffsetEXT glBindBufferOffsetEXT;
      internal static GL.Delegates.BindBufferOffsetNV glBindBufferOffsetNV;
      internal static GL.Delegates.BindBufferRange glBindBufferRange;
      internal static GL.Delegates.BindBufferRangeEXT glBindBufferRangeEXT;
      internal static GL.Delegates.BindBufferRangeNV glBindBufferRangeNV;
      internal static GL.Delegates.BindFragDataLocation glBindFragDataLocation;
      internal static GL.Delegates.BindFragDataLocationEXT glBindFragDataLocationEXT;
      internal static GL.Delegates.BindFragDataLocationIndexed glBindFragDataLocationIndexed;
      internal static GL.Delegates.BindFragmentShaderATI glBindFragmentShaderATI;
      internal static GL.Delegates.BindFramebuffer glBindFramebuffer;
      internal static GL.Delegates.BindFramebufferEXT glBindFramebufferEXT;
      internal static GL.Delegates.BindImageTextureEXT glBindImageTextureEXT;
      internal static GL.Delegates.BindLightParameterEXT glBindLightParameterEXT;
      internal static GL.Delegates.BindMaterialParameterEXT glBindMaterialParameterEXT;
      internal static GL.Delegates.BindMultiTextureEXT glBindMultiTextureEXT;
      internal static GL.Delegates.BindParameterEXT glBindParameterEXT;
      internal static GL.Delegates.BindProgramARB glBindProgramARB;
      internal static GL.Delegates.BindProgramNV glBindProgramNV;
      internal static GL.Delegates.BindProgramPipeline glBindProgramPipeline;
      internal static GL.Delegates.BindRenderbuffer glBindRenderbuffer;
      internal static GL.Delegates.BindRenderbufferEXT glBindRenderbufferEXT;
      internal static GL.Delegates.BindSampler glBindSampler;
      internal static GL.Delegates.BindTexGenParameterEXT glBindTexGenParameterEXT;
      internal static GL.Delegates.BindTexture glBindTexture;
      internal static GL.Delegates.BindTextureEXT glBindTextureEXT;
      internal static GL.Delegates.BindTextureUnitParameterEXT glBindTextureUnitParameterEXT;
      internal static GL.Delegates.BindTransformFeedback glBindTransformFeedback;
      internal static GL.Delegates.BindTransformFeedbackNV glBindTransformFeedbackNV;
      internal static GL.Delegates.BindVertexArray glBindVertexArray;
      internal static GL.Delegates.BindVertexArrayAPPLE glBindVertexArrayAPPLE;
      internal static GL.Delegates.BindVertexShaderEXT glBindVertexShaderEXT;
      internal static GL.Delegates.BindVideoCaptureStreamBufferNV glBindVideoCaptureStreamBufferNV;
      internal static GL.Delegates.BindVideoCaptureStreamTextureNV glBindVideoCaptureStreamTextureNV;
      internal static GL.Delegates.Binormal3bEXT glBinormal3bEXT;
      internal static GL.Delegates.Binormal3bvEXT glBinormal3bvEXT;
      internal static GL.Delegates.Binormal3dEXT glBinormal3dEXT;
      internal static GL.Delegates.Binormal3dvEXT glBinormal3dvEXT;
      internal static GL.Delegates.Binormal3fEXT glBinormal3fEXT;
      internal static GL.Delegates.Binormal3fvEXT glBinormal3fvEXT;
      internal static GL.Delegates.Binormal3iEXT glBinormal3iEXT;
      internal static GL.Delegates.Binormal3ivEXT glBinormal3ivEXT;
      internal static GL.Delegates.Binormal3sEXT glBinormal3sEXT;
      internal static GL.Delegates.Binormal3svEXT glBinormal3svEXT;
      internal static GL.Delegates.BinormalPointerEXT glBinormalPointerEXT;
      internal static GL.Delegates.Bitmap glBitmap;
      internal static GL.Delegates.BlendColor glBlendColor;
      internal static GL.Delegates.BlendColorEXT glBlendColorEXT;
      internal static GL.Delegates.BlendEquation glBlendEquation;
      internal static GL.Delegates.BlendEquationEXT glBlendEquationEXT;
      internal static GL.Delegates.BlendEquationi glBlendEquationi;
      internal static GL.Delegates.BlendEquationiARB glBlendEquationiARB;
      internal static GL.Delegates.BlendEquationIndexedAMD glBlendEquationIndexedAMD;
      internal static GL.Delegates.BlendEquationSeparate glBlendEquationSeparate;
      internal static GL.Delegates.BlendEquationSeparateEXT glBlendEquationSeparateEXT;
      internal static GL.Delegates.BlendEquationSeparatei glBlendEquationSeparatei;
      internal static GL.Delegates.BlendEquationSeparateiARB glBlendEquationSeparateiARB;
      internal static GL.Delegates.BlendEquationSeparateIndexedAMD glBlendEquationSeparateIndexedAMD;
      internal static GL.Delegates.BlendFunc glBlendFunc;
      internal static GL.Delegates.BlendFunci glBlendFunci;
      internal static GL.Delegates.BlendFunciARB glBlendFunciARB;
      internal static GL.Delegates.BlendFuncIndexedAMD glBlendFuncIndexedAMD;
      internal static GL.Delegates.BlendFuncSeparate glBlendFuncSeparate;
      internal static GL.Delegates.BlendFuncSeparateEXT glBlendFuncSeparateEXT;
      internal static GL.Delegates.BlendFuncSeparatei glBlendFuncSeparatei;
      internal static GL.Delegates.BlendFuncSeparateiARB glBlendFuncSeparateiARB;
      internal static GL.Delegates.BlendFuncSeparateIndexedAMD glBlendFuncSeparateIndexedAMD;
      internal static GL.Delegates.BlendFuncSeparateINGR glBlendFuncSeparateINGR;
      internal static GL.Delegates.BlitFramebuffer glBlitFramebuffer;
      internal static GL.Delegates.BlitFramebufferEXT glBlitFramebufferEXT;
      internal static GL.Delegates.BufferAddressRangeNV glBufferAddressRangeNV;
      internal static GL.Delegates.BufferData glBufferData;
      internal static GL.Delegates.BufferDataARB glBufferDataARB;
      internal static GL.Delegates.BufferParameteriAPPLE glBufferParameteriAPPLE;
      internal static GL.Delegates.BufferSubData glBufferSubData;
      internal static GL.Delegates.BufferSubDataARB glBufferSubDataARB;
      internal static GL.Delegates.CallList glCallList;
      internal static GL.Delegates.CallLists glCallLists;
      internal static GL.Delegates.CheckFramebufferStatus glCheckFramebufferStatus;
      internal static GL.Delegates.CheckFramebufferStatusEXT glCheckFramebufferStatusEXT;
      internal static GL.Delegates.CheckNamedFramebufferStatusEXT glCheckNamedFramebufferStatusEXT;
      internal static GL.Delegates.ClampColor glClampColor;
      internal static GL.Delegates.ClampColorARB glClampColorARB;
      internal static GL.Delegates.Clear glClear;
      internal static GL.Delegates.ClearAccum glClearAccum;
      internal static GL.Delegates.ClearBufferfi glClearBufferfi;
      internal static GL.Delegates.ClearBufferfv glClearBufferfv;
      internal static GL.Delegates.ClearBufferiv glClearBufferiv;
      internal static GL.Delegates.ClearBufferuiv glClearBufferuiv;
      internal static GL.Delegates.ClearColor glClearColor;
      internal static GL.Delegates.ClearColorIiEXT glClearColorIiEXT;
      internal static GL.Delegates.ClearColorIuiEXT glClearColorIuiEXT;
      internal static GL.Delegates.ClearDepth glClearDepth;
      internal static GL.Delegates.ClearDepthdNV glClearDepthdNV;
      internal static GL.Delegates.ClearDepthf glClearDepthf;
      internal static GL.Delegates.ClearIndex glClearIndex;
      internal static GL.Delegates.ClearStencil glClearStencil;
      internal static GL.Delegates.ClientActiveTexture glClientActiveTexture;
      internal static GL.Delegates.ClientActiveTextureARB glClientActiveTextureARB;
      internal static GL.Delegates.ClientActiveVertexStreamATI glClientActiveVertexStreamATI;
      internal static GL.Delegates.ClientAttribDefaultEXT glClientAttribDefaultEXT;
      internal static GL.Delegates.ClientWaitSync glClientWaitSync;
      internal static GL.Delegates.ClipPlane glClipPlane;
      internal static GL.Delegates.Color3b glColor3b;
      internal static GL.Delegates.Color3bv glColor3bv;
      internal static GL.Delegates.Color3d glColor3d;
      internal static GL.Delegates.Color3dv glColor3dv;
      internal static GL.Delegates.Color3f glColor3f;
      internal static GL.Delegates.Color3fv glColor3fv;
      internal static GL.Delegates.Color3fVertex3fSUN glColor3fVertex3fSUN;
      internal static GL.Delegates.Color3fVertex3fvSUN glColor3fVertex3fvSUN;
      internal static GL.Delegates.Color3hNV glColor3hNV;
      internal static GL.Delegates.Color3hvNV glColor3hvNV;
      internal static GL.Delegates.Color3i glColor3i;
      internal static GL.Delegates.Color3iv glColor3iv;
      internal static GL.Delegates.Color3s glColor3s;
      internal static GL.Delegates.Color3sv glColor3sv;
      internal static GL.Delegates.Color3ub glColor3ub;
      internal static GL.Delegates.Color3ubv glColor3ubv;
      internal static GL.Delegates.Color3ui glColor3ui;
      internal static GL.Delegates.Color3uiv glColor3uiv;
      internal static GL.Delegates.Color3us glColor3us;
      internal static GL.Delegates.Color3usv glColor3usv;
      internal static GL.Delegates.Color4b glColor4b;
      internal static GL.Delegates.Color4bv glColor4bv;
      internal static GL.Delegates.Color4d glColor4d;
      internal static GL.Delegates.Color4dv glColor4dv;
      internal static GL.Delegates.Color4f glColor4f;
      internal static GL.Delegates.Color4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN;
      internal static GL.Delegates.Color4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN;
      internal static GL.Delegates.Color4fv glColor4fv;
      internal static GL.Delegates.Color4hNV glColor4hNV;
      internal static GL.Delegates.Color4hvNV glColor4hvNV;
      internal static GL.Delegates.Color4i glColor4i;
      internal static GL.Delegates.Color4iv glColor4iv;
      internal static GL.Delegates.Color4s glColor4s;
      internal static GL.Delegates.Color4sv glColor4sv;
      internal static GL.Delegates.Color4ub glColor4ub;
      internal static GL.Delegates.Color4ubv glColor4ubv;
      internal static GL.Delegates.Color4ubVertex2fSUN glColor4ubVertex2fSUN;
      internal static GL.Delegates.Color4ubVertex2fvSUN glColor4ubVertex2fvSUN;
      internal static GL.Delegates.Color4ubVertex3fSUN glColor4ubVertex3fSUN;
      internal static GL.Delegates.Color4ubVertex3fvSUN glColor4ubVertex3fvSUN;
      internal static GL.Delegates.Color4ui glColor4ui;
      internal static GL.Delegates.Color4uiv glColor4uiv;
      internal static GL.Delegates.Color4us glColor4us;
      internal static GL.Delegates.Color4usv glColor4usv;
      internal static GL.Delegates.ColorFormatNV glColorFormatNV;
      internal static GL.Delegates.ColorFragmentOp1ATI glColorFragmentOp1ATI;
      internal static GL.Delegates.ColorFragmentOp2ATI glColorFragmentOp2ATI;
      internal static GL.Delegates.ColorFragmentOp3ATI glColorFragmentOp3ATI;
      internal static GL.Delegates.ColorMask glColorMask;
      internal static GL.Delegates.ColorMaski glColorMaski;
      internal static GL.Delegates.ColorMaskIndexedEXT glColorMaskIndexedEXT;
      internal static GL.Delegates.ColorMaterial glColorMaterial;
      internal static GL.Delegates.ColorP3ui glColorP3ui;
      internal static GL.Delegates.ColorP3uiv glColorP3uiv;
      internal static GL.Delegates.ColorP4ui glColorP4ui;
      internal static GL.Delegates.ColorP4uiv glColorP4uiv;
      internal static GL.Delegates.ColorPointer glColorPointer;
      internal static GL.Delegates.ColorPointerEXT glColorPointerEXT;
      internal static GL.Delegates.ColorPointerListIBM glColorPointerListIBM;
      internal static GL.Delegates.ColorPointervINTEL glColorPointervINTEL;
      internal static GL.Delegates.ColorSubTable glColorSubTable;
      internal static GL.Delegates.ColorSubTableEXT glColorSubTableEXT;
      internal static GL.Delegates.ColorTable glColorTable;
      internal static GL.Delegates.ColorTableEXT glColorTableEXT;
      internal static GL.Delegates.ColorTableParameterfv glColorTableParameterfv;
      internal static GL.Delegates.ColorTableParameterfvSGI glColorTableParameterfvSGI;
      internal static GL.Delegates.ColorTableParameteriv glColorTableParameteriv;
      internal static GL.Delegates.ColorTableParameterivSGI glColorTableParameterivSGI;
      internal static GL.Delegates.ColorTableSGI glColorTableSGI;
      internal static GL.Delegates.CombinerInputNV glCombinerInputNV;
      internal static GL.Delegates.CombinerOutputNV glCombinerOutputNV;
      internal static GL.Delegates.CombinerParameterfNV glCombinerParameterfNV;
      internal static GL.Delegates.CombinerParameterfvNV glCombinerParameterfvNV;
      internal static GL.Delegates.CombinerParameteriNV glCombinerParameteriNV;
      internal static GL.Delegates.CombinerParameterivNV glCombinerParameterivNV;
      internal static GL.Delegates.CombinerStageParameterfvNV glCombinerStageParameterfvNV;
      internal static GL.Delegates.CompileShader glCompileShader;
      internal static GL.Delegates.CompileShaderARB glCompileShaderARB;
      internal static GL.Delegates.CompileShaderIncludeARB glCompileShaderIncludeARB;
      internal static GL.Delegates.CompressedMultiTexImage1DEXT glCompressedMultiTexImage1DEXT;
      internal static GL.Delegates.CompressedMultiTexImage2DEXT glCompressedMultiTexImage2DEXT;
      internal static GL.Delegates.CompressedMultiTexImage3DEXT glCompressedMultiTexImage3DEXT;
      internal static GL.Delegates.CompressedMultiTexSubImage1DEXT glCompressedMultiTexSubImage1DEXT;
      internal static GL.Delegates.CompressedMultiTexSubImage2DEXT glCompressedMultiTexSubImage2DEXT;
      internal static GL.Delegates.CompressedMultiTexSubImage3DEXT glCompressedMultiTexSubImage3DEXT;
      internal static GL.Delegates.CompressedTexImage1D glCompressedTexImage1D;
      internal static GL.Delegates.CompressedTexImage1DARB glCompressedTexImage1DARB;
      internal static GL.Delegates.CompressedTexImage2D glCompressedTexImage2D;
      internal static GL.Delegates.CompressedTexImage2DARB glCompressedTexImage2DARB;
      internal static GL.Delegates.CompressedTexImage3D glCompressedTexImage3D;
      internal static GL.Delegates.CompressedTexImage3DARB glCompressedTexImage3DARB;
      internal static GL.Delegates.CompressedTexSubImage1D glCompressedTexSubImage1D;
      internal static GL.Delegates.CompressedTexSubImage1DARB glCompressedTexSubImage1DARB;
      internal static GL.Delegates.CompressedTexSubImage2D glCompressedTexSubImage2D;
      internal static GL.Delegates.CompressedTexSubImage2DARB glCompressedTexSubImage2DARB;
      internal static GL.Delegates.CompressedTexSubImage3D glCompressedTexSubImage3D;
      internal static GL.Delegates.CompressedTexSubImage3DARB glCompressedTexSubImage3DARB;
      internal static GL.Delegates.CompressedTextureImage1DEXT glCompressedTextureImage1DEXT;
      internal static GL.Delegates.CompressedTextureImage2DEXT glCompressedTextureImage2DEXT;
      internal static GL.Delegates.CompressedTextureImage3DEXT glCompressedTextureImage3DEXT;
      internal static GL.Delegates.CompressedTextureSubImage1DEXT glCompressedTextureSubImage1DEXT;
      internal static GL.Delegates.CompressedTextureSubImage2DEXT glCompressedTextureSubImage2DEXT;
      internal static GL.Delegates.CompressedTextureSubImage3DEXT glCompressedTextureSubImage3DEXT;
      internal static GL.Delegates.ConvolutionFilter1D glConvolutionFilter1D;
      internal static GL.Delegates.ConvolutionFilter1DEXT glConvolutionFilter1DEXT;
      internal static GL.Delegates.ConvolutionFilter2D glConvolutionFilter2D;
      internal static GL.Delegates.ConvolutionFilter2DEXT glConvolutionFilter2DEXT;
      internal static GL.Delegates.ConvolutionParameterf glConvolutionParameterf;
      internal static GL.Delegates.ConvolutionParameterfEXT glConvolutionParameterfEXT;
      internal static GL.Delegates.ConvolutionParameterfv glConvolutionParameterfv;
      internal static GL.Delegates.ConvolutionParameterfvEXT glConvolutionParameterfvEXT;
      internal static GL.Delegates.ConvolutionParameteri glConvolutionParameteri;
      internal static GL.Delegates.ConvolutionParameteriEXT glConvolutionParameteriEXT;
      internal static GL.Delegates.ConvolutionParameteriv glConvolutionParameteriv;
      internal static GL.Delegates.ConvolutionParameterivEXT glConvolutionParameterivEXT;
      internal static GL.Delegates.CopyBufferSubData glCopyBufferSubData;
      internal static GL.Delegates.CopyColorSubTable glCopyColorSubTable;
      internal static GL.Delegates.CopyColorSubTableEXT glCopyColorSubTableEXT;
      internal static GL.Delegates.CopyColorTable glCopyColorTable;
      internal static GL.Delegates.CopyColorTableSGI glCopyColorTableSGI;
      internal static GL.Delegates.CopyConvolutionFilter1D glCopyConvolutionFilter1D;
      internal static GL.Delegates.CopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT;
      internal static GL.Delegates.CopyConvolutionFilter2D glCopyConvolutionFilter2D;
      internal static GL.Delegates.CopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT;
      internal static GL.Delegates.CopyImageSubDataNV glCopyImageSubDataNV;
      internal static GL.Delegates.CopyMultiTexImage1DEXT glCopyMultiTexImage1DEXT;
      internal static GL.Delegates.CopyMultiTexImage2DEXT glCopyMultiTexImage2DEXT;
      internal static GL.Delegates.CopyMultiTexSubImage1DEXT glCopyMultiTexSubImage1DEXT;
      internal static GL.Delegates.CopyMultiTexSubImage2DEXT glCopyMultiTexSubImage2DEXT;
      internal static GL.Delegates.CopyMultiTexSubImage3DEXT glCopyMultiTexSubImage3DEXT;
      internal static GL.Delegates.CopyPixels glCopyPixels;
      internal static GL.Delegates.CopyTexImage1D glCopyTexImage1D;
      internal static GL.Delegates.CopyTexImage1DEXT glCopyTexImage1DEXT;
      internal static GL.Delegates.CopyTexImage2D glCopyTexImage2D;
      internal static GL.Delegates.CopyTexImage2DEXT glCopyTexImage2DEXT;
      internal static GL.Delegates.CopyTexSubImage1D glCopyTexSubImage1D;
      internal static GL.Delegates.CopyTexSubImage1DEXT glCopyTexSubImage1DEXT;
      internal static GL.Delegates.CopyTexSubImage2D glCopyTexSubImage2D;
      internal static GL.Delegates.CopyTexSubImage2DEXT glCopyTexSubImage2DEXT;
      internal static GL.Delegates.CopyTexSubImage3D glCopyTexSubImage3D;
      internal static GL.Delegates.CopyTexSubImage3DEXT glCopyTexSubImage3DEXT;
      internal static GL.Delegates.CopyTextureImage1DEXT glCopyTextureImage1DEXT;
      internal static GL.Delegates.CopyTextureImage2DEXT glCopyTextureImage2DEXT;
      internal static GL.Delegates.CopyTextureSubImage1DEXT glCopyTextureSubImage1DEXT;
      internal static GL.Delegates.CopyTextureSubImage2DEXT glCopyTextureSubImage2DEXT;
      internal static GL.Delegates.CopyTextureSubImage3DEXT glCopyTextureSubImage3DEXT;
      internal static GL.Delegates.CreateProgram glCreateProgram;
      internal static GL.Delegates.CreateProgramObjectARB glCreateProgramObjectARB;
      internal static GL.Delegates.CreateShader glCreateShader;
      internal static GL.Delegates.CreateShaderObjectARB glCreateShaderObjectARB;
      internal static GL.Delegates.CreateShaderProgramEXT glCreateShaderProgramEXT;
      internal static GL.Delegates.CreateShaderProgramv glCreateShaderProgramv;
      internal static GL.Delegates.CreateSyncFromCLeventARB glCreateSyncFromCLeventARB;
      internal static GL.Delegates.CullFace glCullFace;
      internal static GL.Delegates.CullParameterdvEXT glCullParameterdvEXT;
      internal static GL.Delegates.CullParameterfvEXT glCullParameterfvEXT;
      internal static GL.Delegates.CurrentPaletteMatrixARB glCurrentPaletteMatrixARB;
      internal static GL.Delegates.DebugMessageCallbackAMD glDebugMessageCallbackAMD;
      internal static GL.Delegates.DebugMessageCallbackARB glDebugMessageCallbackARB;
      internal static GL.Delegates.DebugMessageControlARB glDebugMessageControlARB;
      internal static GL.Delegates.DebugMessageEnableAMD glDebugMessageEnableAMD;
      internal static GL.Delegates.DebugMessageInsertAMD glDebugMessageInsertAMD;
      internal static GL.Delegates.DebugMessageInsertARB glDebugMessageInsertARB;
      internal static GL.Delegates.DeformationMap3dSGIX glDeformationMap3dSGIX;
      internal static GL.Delegates.DeformationMap3fSGIX glDeformationMap3fSGIX;
      internal static GL.Delegates.DeformSGIX glDeformSGIX;
      internal static GL.Delegates.DeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX;
      internal static GL.Delegates.DeleteBuffers glDeleteBuffers;
      internal static GL.Delegates.DeleteBuffersARB glDeleteBuffersARB;
      internal static GL.Delegates.DeleteFencesAPPLE glDeleteFencesAPPLE;
      internal static GL.Delegates.DeleteFencesNV glDeleteFencesNV;
      internal static GL.Delegates.DeleteFragmentShaderATI glDeleteFragmentShaderATI;
      internal static GL.Delegates.DeleteFramebuffers glDeleteFramebuffers;
      internal static GL.Delegates.DeleteFramebuffersEXT glDeleteFramebuffersEXT;
      internal static GL.Delegates.DeleteLists glDeleteLists;
      internal static GL.Delegates.DeleteNamedStringARB glDeleteNamedStringARB;
      internal static GL.Delegates.DeleteNamesAMD glDeleteNamesAMD;
      internal static GL.Delegates.DeleteObjectARB glDeleteObjectARB;
      internal static GL.Delegates.DeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV;
      internal static GL.Delegates.DeletePerfMonitorsAMD glDeletePerfMonitorsAMD;
      internal static GL.Delegates.DeleteProgram glDeleteProgram;
      internal static GL.Delegates.DeleteProgramPipelines glDeleteProgramPipelines;
      internal static GL.Delegates.DeleteProgramsARB glDeleteProgramsARB;
      internal static GL.Delegates.DeleteProgramsNV glDeleteProgramsNV;
      internal static GL.Delegates.DeleteQueries glDeleteQueries;
      internal static GL.Delegates.DeleteQueriesARB glDeleteQueriesARB;
      internal static GL.Delegates.DeleteRenderbuffers glDeleteRenderbuffers;
      internal static GL.Delegates.DeleteRenderbuffersEXT glDeleteRenderbuffersEXT;
      internal static GL.Delegates.DeleteSamplers glDeleteSamplers;
      internal static GL.Delegates.DeleteShader glDeleteShader;
      internal static GL.Delegates.DeleteSync glDeleteSync;
      internal static GL.Delegates.DeleteTextures glDeleteTextures;
      internal static GL.Delegates.DeleteTexturesEXT glDeleteTexturesEXT;
      internal static GL.Delegates.DeleteTransformFeedbacks glDeleteTransformFeedbacks;
      internal static GL.Delegates.DeleteTransformFeedbacksNV glDeleteTransformFeedbacksNV;
      internal static GL.Delegates.DeleteVertexArrays glDeleteVertexArrays;
      internal static GL.Delegates.DeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE;
      internal static GL.Delegates.DeleteVertexShaderEXT glDeleteVertexShaderEXT;
      internal static GL.Delegates.DepthBoundsdNV glDepthBoundsdNV;
      internal static GL.Delegates.DepthBoundsEXT glDepthBoundsEXT;
      internal static GL.Delegates.DepthFunc glDepthFunc;
      internal static GL.Delegates.DepthMask glDepthMask;
      internal static GL.Delegates.DepthRange glDepthRange;
      internal static GL.Delegates.DepthRangeArrayv glDepthRangeArrayv;
      internal static GL.Delegates.DepthRangedNV glDepthRangedNV;
      internal static GL.Delegates.DepthRangef glDepthRangef;
      internal static GL.Delegates.DepthRangeIndexed glDepthRangeIndexed;
      internal static GL.Delegates.DetachObjectARB glDetachObjectARB;
      internal static GL.Delegates.DetachShader glDetachShader;
      internal static GL.Delegates.DetailTexFuncSGIS glDetailTexFuncSGIS;
      internal static GL.Delegates.Disable glDisable;
      internal static GL.Delegates.DisableClientState glDisableClientState;
      internal static GL.Delegates.DisableClientStateIndexedEXT glDisableClientStateIndexedEXT;
      internal static GL.Delegates.Disablei glDisablei;
      internal static GL.Delegates.DisableIndexedEXT glDisableIndexedEXT;
      internal static GL.Delegates.DisableVariantClientStateEXT glDisableVariantClientStateEXT;
      internal static GL.Delegates.DisableVertexAttribAPPLE glDisableVertexAttribAPPLE;
      internal static GL.Delegates.DisableVertexAttribArray glDisableVertexAttribArray;
      internal static GL.Delegates.DisableVertexAttribArrayARB glDisableVertexAttribArrayARB;
      internal static GL.Delegates.DrawArrays glDrawArrays;
      internal static GL.Delegates.DrawArraysEXT glDrawArraysEXT;
      internal static GL.Delegates.DrawArraysIndirect glDrawArraysIndirect;
      internal static GL.Delegates.DrawArraysInstanced glDrawArraysInstanced;
      internal static GL.Delegates.DrawArraysInstancedARB glDrawArraysInstancedARB;
      internal static GL.Delegates.DrawArraysInstancedEXT glDrawArraysInstancedEXT;
      internal static GL.Delegates.DrawBuffer glDrawBuffer;
      internal static GL.Delegates.DrawBuffers glDrawBuffers;
      internal static GL.Delegates.DrawBuffersARB glDrawBuffersARB;
      internal static GL.Delegates.DrawBuffersATI glDrawBuffersATI;
      internal static GL.Delegates.DrawElementArrayAPPLE glDrawElementArrayAPPLE;
      internal static GL.Delegates.DrawElementArrayATI glDrawElementArrayATI;
      internal static GL.Delegates.DrawElements glDrawElements;
      internal static GL.Delegates.DrawElementsBaseVertex glDrawElementsBaseVertex;
      internal static GL.Delegates.DrawElementsIndirect glDrawElementsIndirect;
      internal static GL.Delegates.DrawElementsInstanced glDrawElementsInstanced;
      internal static GL.Delegates.DrawElementsInstancedARB glDrawElementsInstancedARB;
      internal static GL.Delegates.DrawElementsInstancedBaseVertex glDrawElementsInstancedBaseVertex;
      internal static GL.Delegates.DrawElementsInstancedEXT glDrawElementsInstancedEXT;
      internal static GL.Delegates.DrawMeshArraysSUN glDrawMeshArraysSUN;
      internal static GL.Delegates.DrawPixels glDrawPixels;
      internal static GL.Delegates.DrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE;
      internal static GL.Delegates.DrawRangeElementArrayATI glDrawRangeElementArrayATI;
      internal static GL.Delegates.DrawRangeElements glDrawRangeElements;
      internal static GL.Delegates.DrawRangeElementsBaseVertex glDrawRangeElementsBaseVertex;
      internal static GL.Delegates.DrawRangeElementsEXT glDrawRangeElementsEXT;
      internal static GL.Delegates.DrawTransformFeedback glDrawTransformFeedback;
      internal static GL.Delegates.DrawTransformFeedbackNV glDrawTransformFeedbackNV;
      internal static GL.Delegates.DrawTransformFeedbackStream glDrawTransformFeedbackStream;
      internal static GL.Delegates.EdgeFlag glEdgeFlag;
      internal static GL.Delegates.EdgeFlagFormatNV glEdgeFlagFormatNV;
      internal static GL.Delegates.EdgeFlagPointer glEdgeFlagPointer;
      internal static GL.Delegates.EdgeFlagPointerEXT glEdgeFlagPointerEXT;
      internal static GL.Delegates.EdgeFlagPointerListIBM glEdgeFlagPointerListIBM;
      internal static GL.Delegates.EdgeFlagv glEdgeFlagv;
      internal static GL.Delegates.ElementPointerAPPLE glElementPointerAPPLE;
      internal static GL.Delegates.ElementPointerATI glElementPointerATI;
      internal static GL.Delegates.Enable glEnable;
      internal static GL.Delegates.EnableClientState glEnableClientState;
      internal static GL.Delegates.EnableClientStateIndexedEXT glEnableClientStateIndexedEXT;
      internal static GL.Delegates.Enablei glEnablei;
      internal static GL.Delegates.EnableIndexedEXT glEnableIndexedEXT;
      internal static GL.Delegates.EnableVariantClientStateEXT glEnableVariantClientStateEXT;
      internal static GL.Delegates.EnableVertexAttribAPPLE glEnableVertexAttribAPPLE;
      internal static GL.Delegates.EnableVertexAttribArray glEnableVertexAttribArray;
      internal static GL.Delegates.EnableVertexAttribArrayARB glEnableVertexAttribArrayARB;
      internal static GL.Delegates.End glEnd;
      internal static GL.Delegates.EndConditionalRender glEndConditionalRender;
      internal static GL.Delegates.EndConditionalRenderNV glEndConditionalRenderNV;
      internal static GL.Delegates.EndFragmentShaderATI glEndFragmentShaderATI;
      internal static GL.Delegates.EndList glEndList;
      internal static GL.Delegates.EndOcclusionQueryNV glEndOcclusionQueryNV;
      internal static GL.Delegates.EndPerfMonitorAMD glEndPerfMonitorAMD;
      internal static GL.Delegates.EndQuery glEndQuery;
      internal static GL.Delegates.EndQueryARB glEndQueryARB;
      internal static GL.Delegates.EndQueryIndexed glEndQueryIndexed;
      internal static GL.Delegates.EndTransformFeedback glEndTransformFeedback;
      internal static GL.Delegates.EndTransformFeedbackEXT glEndTransformFeedbackEXT;
      internal static GL.Delegates.EndTransformFeedbackNV glEndTransformFeedbackNV;
      internal static GL.Delegates.EndVertexShaderEXT glEndVertexShaderEXT;
      internal static GL.Delegates.EndVideoCaptureNV glEndVideoCaptureNV;
      internal static GL.Delegates.EvalCoord1d glEvalCoord1d;
      internal static GL.Delegates.EvalCoord1dv glEvalCoord1dv;
      internal static GL.Delegates.EvalCoord1f glEvalCoord1f;
      internal static GL.Delegates.EvalCoord1fv glEvalCoord1fv;
      internal static GL.Delegates.EvalCoord2d glEvalCoord2d;
      internal static GL.Delegates.EvalCoord2dv glEvalCoord2dv;
      internal static GL.Delegates.EvalCoord2f glEvalCoord2f;
      internal static GL.Delegates.EvalCoord2fv glEvalCoord2fv;
      internal static GL.Delegates.EvalMapsNV glEvalMapsNV;
      internal static GL.Delegates.EvalMesh1 glEvalMesh1;
      internal static GL.Delegates.EvalMesh2 glEvalMesh2;
      internal static GL.Delegates.EvalPoint1 glEvalPoint1;
      internal static GL.Delegates.EvalPoint2 glEvalPoint2;
      internal static GL.Delegates.ExecuteProgramNV glExecuteProgramNV;
      internal static GL.Delegates.ExtractComponentEXT glExtractComponentEXT;
      internal static GL.Delegates.FeedbackBuffer glFeedbackBuffer;
      internal static GL.Delegates.FenceSync glFenceSync;
      internal static GL.Delegates.FinalCombinerInputNV glFinalCombinerInputNV;
      internal static GL.Delegates.Finish glFinish;
      internal static GL.Delegates.FinishAsyncSGIX glFinishAsyncSGIX;
      internal static GL.Delegates.FinishFenceAPPLE glFinishFenceAPPLE;
      internal static GL.Delegates.FinishFenceNV glFinishFenceNV;
      internal static GL.Delegates.FinishObjectAPPLE glFinishObjectAPPLE;
      internal static GL.Delegates.FinishTextureSUNX glFinishTextureSUNX;
      internal static GL.Delegates.Flush glFlush;
      internal static GL.Delegates.FlushMappedBufferRange glFlushMappedBufferRange;
      internal static GL.Delegates.FlushMappedBufferRangeAPPLE glFlushMappedBufferRangeAPPLE;
      internal static GL.Delegates.FlushMappedNamedBufferRangeEXT glFlushMappedNamedBufferRangeEXT;
      internal static GL.Delegates.FlushPixelDataRangeNV glFlushPixelDataRangeNV;
      internal static GL.Delegates.FlushRasterSGIX glFlushRasterSGIX;
      internal static GL.Delegates.FlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE;
      internal static GL.Delegates.FlushVertexArrayRangeNV glFlushVertexArrayRangeNV;
      internal static GL.Delegates.FogCoordd glFogCoordd;
      internal static GL.Delegates.FogCoorddEXT glFogCoorddEXT;
      internal static GL.Delegates.FogCoorddv glFogCoorddv;
      internal static GL.Delegates.FogCoorddvEXT glFogCoorddvEXT;
      internal static GL.Delegates.FogCoordf glFogCoordf;
      internal static GL.Delegates.FogCoordfEXT glFogCoordfEXT;
      internal static GL.Delegates.FogCoordFormatNV glFogCoordFormatNV;
      internal static GL.Delegates.FogCoordfv glFogCoordfv;
      internal static GL.Delegates.FogCoordfvEXT glFogCoordfvEXT;
      internal static GL.Delegates.FogCoordhNV glFogCoordhNV;
      internal static GL.Delegates.FogCoordhvNV glFogCoordhvNV;
      internal static GL.Delegates.FogCoordPointer glFogCoordPointer;
      internal static GL.Delegates.FogCoordPointerEXT glFogCoordPointerEXT;
      internal static GL.Delegates.FogCoordPointerListIBM glFogCoordPointerListIBM;
      internal static GL.Delegates.Fogf glFogf;
      internal static GL.Delegates.FogFuncSGIS glFogFuncSGIS;
      internal static GL.Delegates.Fogfv glFogfv;
      internal static GL.Delegates.Fogi glFogi;
      internal static GL.Delegates.Fogiv glFogiv;
      internal static GL.Delegates.FragmentColorMaterialSGIX glFragmentColorMaterialSGIX;
      internal static GL.Delegates.FragmentLightfSGIX glFragmentLightfSGIX;
      internal static GL.Delegates.FragmentLightfvSGIX glFragmentLightfvSGIX;
      internal static GL.Delegates.FragmentLightiSGIX glFragmentLightiSGIX;
      internal static GL.Delegates.FragmentLightivSGIX glFragmentLightivSGIX;
      internal static GL.Delegates.FragmentLightModelfSGIX glFragmentLightModelfSGIX;
      internal static GL.Delegates.FragmentLightModelfvSGIX glFragmentLightModelfvSGIX;
      internal static GL.Delegates.FragmentLightModeliSGIX glFragmentLightModeliSGIX;
      internal static GL.Delegates.FragmentLightModelivSGIX glFragmentLightModelivSGIX;
      internal static GL.Delegates.FragmentMaterialfSGIX glFragmentMaterialfSGIX;
      internal static GL.Delegates.FragmentMaterialfvSGIX glFragmentMaterialfvSGIX;
      internal static GL.Delegates.FragmentMaterialiSGIX glFragmentMaterialiSGIX;
      internal static GL.Delegates.FragmentMaterialivSGIX glFragmentMaterialivSGIX;
      internal static GL.Delegates.FramebufferDrawBufferEXT glFramebufferDrawBufferEXT;
      internal static GL.Delegates.FramebufferDrawBuffersEXT glFramebufferDrawBuffersEXT;
      internal static GL.Delegates.FramebufferReadBufferEXT glFramebufferReadBufferEXT;
      internal static GL.Delegates.FramebufferRenderbuffer glFramebufferRenderbuffer;
      internal static GL.Delegates.FramebufferRenderbufferEXT glFramebufferRenderbufferEXT;
      internal static GL.Delegates.FramebufferTexture glFramebufferTexture;
      internal static GL.Delegates.FramebufferTexture1D glFramebufferTexture1D;
      internal static GL.Delegates.FramebufferTexture1DEXT glFramebufferTexture1DEXT;
      internal static GL.Delegates.FramebufferTexture2D glFramebufferTexture2D;
      internal static GL.Delegates.FramebufferTexture2DEXT glFramebufferTexture2DEXT;
      internal static GL.Delegates.FramebufferTexture3D glFramebufferTexture3D;
      internal static GL.Delegates.FramebufferTexture3DEXT glFramebufferTexture3DEXT;
      internal static GL.Delegates.FramebufferTextureARB glFramebufferTextureARB;
      internal static GL.Delegates.FramebufferTextureEXT glFramebufferTextureEXT;
      internal static GL.Delegates.FramebufferTextureFaceARB glFramebufferTextureFaceARB;
      internal static GL.Delegates.FramebufferTextureFaceEXT glFramebufferTextureFaceEXT;
      internal static GL.Delegates.FramebufferTextureLayer glFramebufferTextureLayer;
      internal static GL.Delegates.FramebufferTextureLayerARB glFramebufferTextureLayerARB;
      internal static GL.Delegates.FramebufferTextureLayerEXT glFramebufferTextureLayerEXT;
      internal static GL.Delegates.FrameTerminatorGREMEDY glFrameTerminatorGREMEDY;
      internal static GL.Delegates.FrameZoomSGIX glFrameZoomSGIX;
      internal static GL.Delegates.FreeObjectBufferATI glFreeObjectBufferATI;
      internal static GL.Delegates.FrontFace glFrontFace;
      internal static GL.Delegates.Frustum glFrustum;
      internal static GL.Delegates.GenAsyncMarkersSGIX glGenAsyncMarkersSGIX;
      internal static GL.Delegates.GenBuffers glGenBuffers;
      internal static GL.Delegates.GenBuffersARB glGenBuffersARB;
      internal static GL.Delegates.GenerateMipmap glGenerateMipmap;
      internal static GL.Delegates.GenerateMipmapEXT glGenerateMipmapEXT;
      internal static GL.Delegates.GenerateMultiTexMipmapEXT glGenerateMultiTexMipmapEXT;
      internal static GL.Delegates.GenerateTextureMipmapEXT glGenerateTextureMipmapEXT;
      internal static GL.Delegates.GenFencesAPPLE glGenFencesAPPLE;
      internal static GL.Delegates.GenFencesNV glGenFencesNV;
      internal static GL.Delegates.GenFragmentShadersATI glGenFragmentShadersATI;
      internal static GL.Delegates.GenFramebuffers glGenFramebuffers;
      internal static GL.Delegates.GenFramebuffersEXT glGenFramebuffersEXT;
      internal static GL.Delegates.GenLists glGenLists;
      internal static GL.Delegates.GenNamesAMD glGenNamesAMD;
      internal static GL.Delegates.GenOcclusionQueriesNV glGenOcclusionQueriesNV;
      internal static GL.Delegates.GenPerfMonitorsAMD glGenPerfMonitorsAMD;
      internal static GL.Delegates.GenProgramPipelines glGenProgramPipelines;
      internal static GL.Delegates.GenProgramsARB glGenProgramsARB;
      internal static GL.Delegates.GenProgramsNV glGenProgramsNV;
      internal static GL.Delegates.GenQueries glGenQueries;
      internal static GL.Delegates.GenQueriesARB glGenQueriesARB;
      internal static GL.Delegates.GenRenderbuffers glGenRenderbuffers;
      internal static GL.Delegates.GenRenderbuffersEXT glGenRenderbuffersEXT;
      internal static GL.Delegates.GenSamplers glGenSamplers;
      internal static GL.Delegates.GenSymbolsEXT glGenSymbolsEXT;
      internal static GL.Delegates.GenTextures glGenTextures;
      internal static GL.Delegates.GenTexturesEXT glGenTexturesEXT;
      internal static GL.Delegates.GenTransformFeedbacks glGenTransformFeedbacks;
      internal static GL.Delegates.GenTransformFeedbacksNV glGenTransformFeedbacksNV;
      internal static GL.Delegates.GenVertexArrays glGenVertexArrays;
      internal static GL.Delegates.GenVertexArraysAPPLE glGenVertexArraysAPPLE;
      internal static GL.Delegates.GenVertexShadersEXT glGenVertexShadersEXT;
      internal static GL.Delegates.GetActiveAttrib glGetActiveAttrib;
      internal static GL.Delegates.GetActiveAttribARB glGetActiveAttribARB;
      internal static GL.Delegates.GetActiveSubroutineName glGetActiveSubroutineName;
      internal static GL.Delegates.GetActiveSubroutineUniformiv glGetActiveSubroutineUniformiv;
      internal static GL.Delegates.GetActiveSubroutineUniformName glGetActiveSubroutineUniformName;
      internal static GL.Delegates.GetActiveUniform glGetActiveUniform;
      internal static GL.Delegates.GetActiveUniformARB glGetActiveUniformARB;
      internal static GL.Delegates.GetActiveUniformBlockiv glGetActiveUniformBlockiv;
      internal static GL.Delegates.GetActiveUniformBlockName glGetActiveUniformBlockName;
      internal static GL.Delegates.GetActiveUniformName glGetActiveUniformName;
      internal static GL.Delegates.GetActiveUniformsiv glGetActiveUniformsiv;
      internal static GL.Delegates.GetActiveVaryingNV glGetActiveVaryingNV;
      internal static GL.Delegates.GetArrayObjectfvATI glGetArrayObjectfvATI;
      internal static GL.Delegates.GetArrayObjectivATI glGetArrayObjectivATI;
      internal static GL.Delegates.GetAttachedObjectsARB glGetAttachedObjectsARB;
      internal static GL.Delegates.GetAttachedShaders glGetAttachedShaders;
      internal static GL.Delegates.GetAttribLocation glGetAttribLocation;
      internal static GL.Delegates.GetAttribLocationARB glGetAttribLocationARB;
      internal static GL.Delegates.GetBooleani_v glGetBooleani_v;
      internal static GL.Delegates.GetBooleanIndexedvEXT glGetBooleanIndexedvEXT;
      internal static GL.Delegates.GetBooleanv glGetBooleanv;
      internal static GL.Delegates.GetBufferParameteri64v glGetBufferParameteri64v;
      internal static GL.Delegates.GetBufferParameteriv glGetBufferParameteriv;
      internal static GL.Delegates.GetBufferParameterivARB glGetBufferParameterivARB;
      internal static GL.Delegates.GetBufferParameterui64vNV glGetBufferParameterui64vNV;
      internal static GL.Delegates.GetBufferPointerv glGetBufferPointerv;
      internal static GL.Delegates.GetBufferPointervARB glGetBufferPointervARB;
      internal static GL.Delegates.GetBufferSubData glGetBufferSubData;
      internal static GL.Delegates.GetBufferSubDataARB glGetBufferSubDataARB;
      internal static GL.Delegates.GetClipPlane glGetClipPlane;
      internal static GL.Delegates.GetColorTable glGetColorTable;
      internal static GL.Delegates.GetColorTableEXT glGetColorTableEXT;
      internal static GL.Delegates.GetColorTableParameterfv glGetColorTableParameterfv;
      internal static GL.Delegates.GetColorTableParameterfvEXT glGetColorTableParameterfvEXT;
      internal static GL.Delegates.GetColorTableParameterfvSGI glGetColorTableParameterfvSGI;
      internal static GL.Delegates.GetColorTableParameteriv glGetColorTableParameteriv;
      internal static GL.Delegates.GetColorTableParameterivEXT glGetColorTableParameterivEXT;
      internal static GL.Delegates.GetColorTableParameterivSGI glGetColorTableParameterivSGI;
      internal static GL.Delegates.GetColorTableSGI glGetColorTableSGI;
      internal static GL.Delegates.GetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV;
      internal static GL.Delegates.GetCombinerInputParameterivNV glGetCombinerInputParameterivNV;
      internal static GL.Delegates.GetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV;
      internal static GL.Delegates.GetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV;
      internal static GL.Delegates.GetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV;
      internal static GL.Delegates.GetCompressedMultiTexImageEXT glGetCompressedMultiTexImageEXT;
      internal static GL.Delegates.GetCompressedTexImage glGetCompressedTexImage;
      internal static GL.Delegates.GetCompressedTexImageARB glGetCompressedTexImageARB;
      internal static GL.Delegates.GetCompressedTextureImageEXT glGetCompressedTextureImageEXT;
      internal static GL.Delegates.GetConvolutionFilter glGetConvolutionFilter;
      internal static GL.Delegates.GetConvolutionFilterEXT glGetConvolutionFilterEXT;
      internal static GL.Delegates.GetConvolutionParameterfv glGetConvolutionParameterfv;
      internal static GL.Delegates.GetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT;
      internal static GL.Delegates.GetConvolutionParameteriv glGetConvolutionParameteriv;
      internal static GL.Delegates.GetConvolutionParameterivEXT glGetConvolutionParameterivEXT;
      internal static GL.Delegates.GetDebugMessageLogAMD glGetDebugMessageLogAMD;
      internal static GL.Delegates.GetDebugMessageLogARB glGetDebugMessageLogARB;
      internal static GL.Delegates.GetDetailTexFuncSGIS glGetDetailTexFuncSGIS;
      internal static GL.Delegates.GetDoublei_v glGetDoublei_v;
      internal static GL.Delegates.GetDoubleIndexedvEXT glGetDoubleIndexedvEXT;
      internal static GL.Delegates.GetDoublev glGetDoublev;
      internal static GL.Delegates.GetError glGetError;
      internal static GL.Delegates.GetFenceivNV glGetFenceivNV;
      internal static GL.Delegates.GetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV;
      internal static GL.Delegates.GetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV;
      internal static GL.Delegates.GetFloati_v glGetFloati_v;
      internal static GL.Delegates.GetFloatIndexedvEXT glGetFloatIndexedvEXT;
      internal static GL.Delegates.GetFloatv glGetFloatv;
      internal static GL.Delegates.GetFogFuncSGIS glGetFogFuncSGIS;
      internal static GL.Delegates.GetFragDataIndex glGetFragDataIndex;
      internal static GL.Delegates.GetFragDataLocation glGetFragDataLocation;
      internal static GL.Delegates.GetFragDataLocationEXT glGetFragDataLocationEXT;
      internal static GL.Delegates.GetFragmentLightfvSGIX glGetFragmentLightfvSGIX;
      internal static GL.Delegates.GetFragmentLightivSGIX glGetFragmentLightivSGIX;
      internal static GL.Delegates.GetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX;
      internal static GL.Delegates.GetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX;
      internal static GL.Delegates.GetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv;
      internal static GL.Delegates.GetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT;
      internal static GL.Delegates.GetFramebufferParameterivEXT glGetFramebufferParameterivEXT;
      internal static GL.Delegates.GetGraphicsResetStatusARB glGetGraphicsResetStatusARB;
      internal static GL.Delegates.GetHandleARB glGetHandleARB;
      internal static GL.Delegates.GetHistogram glGetHistogram;
      internal static GL.Delegates.GetHistogramEXT glGetHistogramEXT;
      internal static GL.Delegates.GetHistogramParameterfv glGetHistogramParameterfv;
      internal static GL.Delegates.GetHistogramParameterfvEXT glGetHistogramParameterfvEXT;
      internal static GL.Delegates.GetHistogramParameteriv glGetHistogramParameteriv;
      internal static GL.Delegates.GetHistogramParameterivEXT glGetHistogramParameterivEXT;
      internal static GL.Delegates.GetImageTransformParameterfvHP glGetImageTransformParameterfvHP;
      internal static GL.Delegates.GetImageTransformParameterivHP glGetImageTransformParameterivHP;
      internal static GL.Delegates.GetInfoLogARB glGetInfoLogARB;
      internal static GL.Delegates.GetInstrumentsSGIX glGetInstrumentsSGIX;
      internal static GL.Delegates.GetInteger64i_v glGetInteger64i_v;
      internal static GL.Delegates.GetInteger64v glGetInteger64v;
      internal static GL.Delegates.GetIntegeri_v glGetIntegeri_v;
      internal static GL.Delegates.GetIntegerIndexedvEXT glGetIntegerIndexedvEXT;
      internal static GL.Delegates.GetIntegerui64i_vNV glGetIntegerui64i_vNV;
      internal static GL.Delegates.GetIntegerui64vNV glGetIntegerui64vNV;
      internal static GL.Delegates.GetIntegerv glGetIntegerv;
      internal static GL.Delegates.GetInvariantBooleanvEXT glGetInvariantBooleanvEXT;
      internal static GL.Delegates.GetInvariantFloatvEXT glGetInvariantFloatvEXT;
      internal static GL.Delegates.GetInvariantIntegervEXT glGetInvariantIntegervEXT;
      internal static GL.Delegates.GetLightfv glGetLightfv;
      internal static GL.Delegates.GetLightiv glGetLightiv;
      internal static GL.Delegates.GetListParameterfvSGIX glGetListParameterfvSGIX;
      internal static GL.Delegates.GetListParameterivSGIX glGetListParameterivSGIX;
      internal static GL.Delegates.GetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT;
      internal static GL.Delegates.GetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT;
      internal static GL.Delegates.GetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT;
      internal static GL.Delegates.GetMapAttribParameterfvNV glGetMapAttribParameterfvNV;
      internal static GL.Delegates.GetMapAttribParameterivNV glGetMapAttribParameterivNV;
      internal static GL.Delegates.GetMapControlPointsNV glGetMapControlPointsNV;
      internal static GL.Delegates.GetMapdv glGetMapdv;
      internal static GL.Delegates.GetMapfv glGetMapfv;
      internal static GL.Delegates.GetMapiv glGetMapiv;
      internal static GL.Delegates.GetMapParameterfvNV glGetMapParameterfvNV;
      internal static GL.Delegates.GetMapParameterivNV glGetMapParameterivNV;
      internal static GL.Delegates.GetMaterialfv glGetMaterialfv;
      internal static GL.Delegates.GetMaterialiv glGetMaterialiv;
      internal static GL.Delegates.GetMinmax glGetMinmax;
      internal static GL.Delegates.GetMinmaxEXT glGetMinmaxEXT;
      internal static GL.Delegates.GetMinmaxParameterfv glGetMinmaxParameterfv;
      internal static GL.Delegates.GetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT;
      internal static GL.Delegates.GetMinmaxParameteriv glGetMinmaxParameteriv;
      internal static GL.Delegates.GetMinmaxParameterivEXT glGetMinmaxParameterivEXT;
      internal static GL.Delegates.GetMultisamplefv glGetMultisamplefv;
      internal static GL.Delegates.GetMultisamplefvNV glGetMultisamplefvNV;
      internal static GL.Delegates.GetMultiTexEnvfvEXT glGetMultiTexEnvfvEXT;
      internal static GL.Delegates.GetMultiTexEnvivEXT glGetMultiTexEnvivEXT;
      internal static GL.Delegates.GetMultiTexGendvEXT glGetMultiTexGendvEXT;
      internal static GL.Delegates.GetMultiTexGenfvEXT glGetMultiTexGenfvEXT;
      internal static GL.Delegates.GetMultiTexGenivEXT glGetMultiTexGenivEXT;
      internal static GL.Delegates.GetMultiTexImageEXT glGetMultiTexImageEXT;
      internal static GL.Delegates.GetMultiTexLevelParameterfvEXT glGetMultiTexLevelParameterfvEXT;
      internal static GL.Delegates.GetMultiTexLevelParameterivEXT glGetMultiTexLevelParameterivEXT;
      internal static GL.Delegates.GetMultiTexParameterfvEXT glGetMultiTexParameterfvEXT;
      internal static GL.Delegates.GetMultiTexParameterIivEXT glGetMultiTexParameterIivEXT;
      internal static GL.Delegates.GetMultiTexParameterIuivEXT glGetMultiTexParameterIuivEXT;
      internal static GL.Delegates.GetMultiTexParameterivEXT glGetMultiTexParameterivEXT;
      internal static GL.Delegates.GetNamedBufferParameterivEXT glGetNamedBufferParameterivEXT;
      internal static GL.Delegates.GetNamedBufferParameterui64vNV glGetNamedBufferParameterui64vNV;
      internal static GL.Delegates.GetNamedBufferPointervEXT glGetNamedBufferPointervEXT;
      internal static GL.Delegates.GetNamedBufferSubDataEXT glGetNamedBufferSubDataEXT;
      internal static GL.Delegates.GetNamedFramebufferAttachmentParameterivEXT glGetNamedFramebufferAttachmentParameterivEXT;
      internal static GL.Delegates.GetNamedProgramivEXT glGetNamedProgramivEXT;
      internal static GL.Delegates.GetNamedProgramLocalParameterdvEXT glGetNamedProgramLocalParameterdvEXT;
      internal static GL.Delegates.GetNamedProgramLocalParameterfvEXT glGetNamedProgramLocalParameterfvEXT;
      internal static GL.Delegates.GetNamedProgramLocalParameterIivEXT glGetNamedProgramLocalParameterIivEXT;
      internal static GL.Delegates.GetNamedProgramLocalParameterIuivEXT glGetNamedProgramLocalParameterIuivEXT;
      internal static GL.Delegates.GetNamedProgramStringEXT glGetNamedProgramStringEXT;
      internal static GL.Delegates.GetNamedRenderbufferParameterivEXT glGetNamedRenderbufferParameterivEXT;
      internal static GL.Delegates.GetNamedStringARB glGetNamedStringARB;
      internal static GL.Delegates.GetNamedStringivARB glGetNamedStringivARB;
      internal static GL.Delegates.GetnColorTableARB glGetnColorTableARB;
      internal static GL.Delegates.GetnCompressedTexImageARB glGetnCompressedTexImageARB;
      internal static GL.Delegates.GetnConvolutionFilterARB glGetnConvolutionFilterARB;
      internal static GL.Delegates.GetnHistogramARB glGetnHistogramARB;
      internal static GL.Delegates.GetnMapdvARB glGetnMapdvARB;
      internal static GL.Delegates.GetnMapfvARB glGetnMapfvARB;
      internal static GL.Delegates.GetnMapivARB glGetnMapivARB;
      internal static GL.Delegates.GetnMinmaxARB glGetnMinmaxARB;
      internal static GL.Delegates.GetnPixelMapfvARB glGetnPixelMapfvARB;
      internal static GL.Delegates.GetnPixelMapuivARB glGetnPixelMapuivARB;
      internal static GL.Delegates.GetnPixelMapusvARB glGetnPixelMapusvARB;
      internal static GL.Delegates.GetnPolygonStippleARB glGetnPolygonStippleARB;
      internal static GL.Delegates.GetnSeparableFilterARB glGetnSeparableFilterARB;
      internal static GL.Delegates.GetnTexImageARB glGetnTexImageARB;
      internal static GL.Delegates.GetnUniformdvARB glGetnUniformdvARB;
      internal static GL.Delegates.GetnUniformfvARB glGetnUniformfvARB;
      internal static GL.Delegates.GetnUniformivARB glGetnUniformivARB;
      internal static GL.Delegates.GetnUniformuivARB glGetnUniformuivARB;
      internal static GL.Delegates.GetObjectBufferfvATI glGetObjectBufferfvATI;
      internal static GL.Delegates.GetObjectBufferivATI glGetObjectBufferivATI;
      internal static GL.Delegates.GetObjectParameterfvARB glGetObjectParameterfvARB;
      internal static GL.Delegates.GetObjectParameterivAPPLE glGetObjectParameterivAPPLE;
      internal static GL.Delegates.GetObjectParameterivARB glGetObjectParameterivARB;
      internal static GL.Delegates.GetOcclusionQueryivNV glGetOcclusionQueryivNV;
      internal static GL.Delegates.GetOcclusionQueryuivNV glGetOcclusionQueryuivNV;
      internal static GL.Delegates.GetPerfMonitorCounterDataAMD glGetPerfMonitorCounterDataAMD;
      internal static GL.Delegates.GetPerfMonitorCounterInfoAMD glGetPerfMonitorCounterInfoAMD;
      internal static GL.Delegates.GetPerfMonitorCountersAMD glGetPerfMonitorCountersAMD;
      internal static GL.Delegates.GetPerfMonitorCounterStringAMD glGetPerfMonitorCounterStringAMD;
      internal static GL.Delegates.GetPerfMonitorGroupsAMD glGetPerfMonitorGroupsAMD;
      internal static GL.Delegates.GetPerfMonitorGroupStringAMD glGetPerfMonitorGroupStringAMD;
      internal static GL.Delegates.GetPixelMapfv glGetPixelMapfv;
      internal static GL.Delegates.GetPixelMapuiv glGetPixelMapuiv;
      internal static GL.Delegates.GetPixelMapusv glGetPixelMapusv;
      internal static GL.Delegates.GetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS;
      internal static GL.Delegates.GetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS;
      internal static GL.Delegates.GetPointerIndexedvEXT glGetPointerIndexedvEXT;
      internal static GL.Delegates.GetPointerv glGetPointerv;
      internal static GL.Delegates.GetPointervEXT glGetPointervEXT;
      internal static GL.Delegates.GetPolygonStipple glGetPolygonStipple;
      internal static GL.Delegates.GetProgramBinary glGetProgramBinary;
      internal static GL.Delegates.GetProgramEnvParameterdvARB glGetProgramEnvParameterdvARB;
      internal static GL.Delegates.GetProgramEnvParameterfvARB glGetProgramEnvParameterfvARB;
      internal static GL.Delegates.GetProgramEnvParameterIivNV glGetProgramEnvParameterIivNV;
      internal static GL.Delegates.GetProgramEnvParameterIuivNV glGetProgramEnvParameterIuivNV;
      internal static GL.Delegates.GetProgramInfoLog glGetProgramInfoLog;
      internal static GL.Delegates.GetProgramiv glGetProgramiv;
      internal static GL.Delegates.GetProgramivARB glGetProgramivARB;
      internal static GL.Delegates.GetProgramivNV glGetProgramivNV;
      internal static GL.Delegates.GetProgramLocalParameterdvARB glGetProgramLocalParameterdvARB;
      internal static GL.Delegates.GetProgramLocalParameterfvARB glGetProgramLocalParameterfvARB;
      internal static GL.Delegates.GetProgramLocalParameterIivNV glGetProgramLocalParameterIivNV;
      internal static GL.Delegates.GetProgramLocalParameterIuivNV glGetProgramLocalParameterIuivNV;
      internal static GL.Delegates.GetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV;
      internal static GL.Delegates.GetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV;
      internal static GL.Delegates.GetProgramParameterdvNV glGetProgramParameterdvNV;
      internal static GL.Delegates.GetProgramParameterfvNV glGetProgramParameterfvNV;
      internal static GL.Delegates.GetProgramPipelineInfoLog glGetProgramPipelineInfoLog;
      internal static GL.Delegates.GetProgramPipelineiv glGetProgramPipelineiv;
      internal static GL.Delegates.GetProgramStageiv glGetProgramStageiv;
      internal static GL.Delegates.GetProgramStringARB glGetProgramStringARB;
      internal static GL.Delegates.GetProgramStringNV glGetProgramStringNV;
      internal static GL.Delegates.GetProgramSubroutineParameteruivNV glGetProgramSubroutineParameteruivNV;
      internal static GL.Delegates.GetQueryIndexediv glGetQueryIndexediv;
      internal static GL.Delegates.GetQueryiv glGetQueryiv;
      internal static GL.Delegates.GetQueryivARB glGetQueryivARB;
      internal static GL.Delegates.GetQueryObjecti64v glGetQueryObjecti64v;
      internal static GL.Delegates.GetQueryObjecti64vEXT glGetQueryObjecti64vEXT;
      internal static GL.Delegates.GetQueryObjectiv glGetQueryObjectiv;
      internal static GL.Delegates.GetQueryObjectivARB glGetQueryObjectivARB;
      internal static GL.Delegates.GetQueryObjectui64v glGetQueryObjectui64v;
      internal static GL.Delegates.GetQueryObjectui64vEXT glGetQueryObjectui64vEXT;
      internal static GL.Delegates.GetQueryObjectuiv glGetQueryObjectuiv;
      internal static GL.Delegates.GetQueryObjectuivARB glGetQueryObjectuivARB;
      internal static GL.Delegates.GetRenderbufferParameteriv glGetRenderbufferParameteriv;
      internal static GL.Delegates.GetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT;
      internal static GL.Delegates.GetSamplerParameterfv glGetSamplerParameterfv;
      internal static GL.Delegates.GetSamplerParameterIiv glGetSamplerParameterIiv;
      internal static GL.Delegates.GetSamplerParameterIuiv glGetSamplerParameterIuiv;
      internal static GL.Delegates.GetSamplerParameteriv glGetSamplerParameteriv;
      internal static GL.Delegates.GetSeparableFilter glGetSeparableFilter;
      internal static GL.Delegates.GetSeparableFilterEXT glGetSeparableFilterEXT;
      internal static GL.Delegates.GetShaderInfoLog glGetShaderInfoLog;
      internal static GL.Delegates.GetShaderiv glGetShaderiv;
      internal static GL.Delegates.GetShaderPrecisionFormat glGetShaderPrecisionFormat;
      internal static GL.Delegates.GetShaderSource glGetShaderSource;
      internal static GL.Delegates.GetShaderSourceARB glGetShaderSourceARB;
      internal static GL.Delegates.GetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS;
      internal static GL.Delegates.GetString glGetString;
      internal static GL.Delegates.GetStringi glGetStringi;
      internal static GL.Delegates.GetSubroutineIndex glGetSubroutineIndex;
      internal static GL.Delegates.GetSubroutineUniformLocation glGetSubroutineUniformLocation;
      internal static GL.Delegates.GetSynciv glGetSynciv;
      internal static GL.Delegates.GetTexBumpParameterfvATI glGetTexBumpParameterfvATI;
      internal static GL.Delegates.GetTexBumpParameterivATI glGetTexBumpParameterivATI;
      internal static GL.Delegates.GetTexEnvfv glGetTexEnvfv;
      internal static GL.Delegates.GetTexEnviv glGetTexEnviv;
      internal static GL.Delegates.GetTexFilterFuncSGIS glGetTexFilterFuncSGIS;
      internal static GL.Delegates.GetTexGendv glGetTexGendv;
      internal static GL.Delegates.GetTexGenfv glGetTexGenfv;
      internal static GL.Delegates.GetTexGeniv glGetTexGeniv;
      internal static GL.Delegates.GetTexImage glGetTexImage;
      internal static GL.Delegates.GetTexLevelParameterfv glGetTexLevelParameterfv;
      internal static GL.Delegates.GetTexLevelParameteriv glGetTexLevelParameteriv;
      internal static GL.Delegates.GetTexParameterfv glGetTexParameterfv;
      internal static GL.Delegates.GetTexParameterIiv glGetTexParameterIiv;
      internal static GL.Delegates.GetTexParameterIivEXT glGetTexParameterIivEXT;
      internal static GL.Delegates.GetTexParameterIuiv glGetTexParameterIuiv;
      internal static GL.Delegates.GetTexParameterIuivEXT glGetTexParameterIuivEXT;
      internal static GL.Delegates.GetTexParameteriv glGetTexParameteriv;
      internal static GL.Delegates.GetTexParameterPointervAPPLE glGetTexParameterPointervAPPLE;
      internal static GL.Delegates.GetTextureImageEXT glGetTextureImageEXT;
      internal static GL.Delegates.GetTextureLevelParameterfvEXT glGetTextureLevelParameterfvEXT;
      internal static GL.Delegates.GetTextureLevelParameterivEXT glGetTextureLevelParameterivEXT;
      internal static GL.Delegates.GetTextureParameterfvEXT glGetTextureParameterfvEXT;
      internal static GL.Delegates.GetTextureParameterIivEXT glGetTextureParameterIivEXT;
      internal static GL.Delegates.GetTextureParameterIuivEXT glGetTextureParameterIuivEXT;
      internal static GL.Delegates.GetTextureParameterivEXT glGetTextureParameterivEXT;
      internal static GL.Delegates.GetTrackMatrixivNV glGetTrackMatrixivNV;
      internal static GL.Delegates.GetTransformFeedbackVarying glGetTransformFeedbackVarying;
      internal static GL.Delegates.GetTransformFeedbackVaryingEXT glGetTransformFeedbackVaryingEXT;
      internal static GL.Delegates.GetTransformFeedbackVaryingNV glGetTransformFeedbackVaryingNV;
      internal static GL.Delegates.GetUniformBlockIndex glGetUniformBlockIndex;
      internal static GL.Delegates.GetUniformBufferSizeEXT glGetUniformBufferSizeEXT;
      internal static GL.Delegates.GetUniformdv glGetUniformdv;
      internal static GL.Delegates.GetUniformfv glGetUniformfv;
      internal static GL.Delegates.GetUniformfvARB glGetUniformfvARB;
      internal static GL.Delegates.GetUniformi64vNV glGetUniformi64vNV;
      internal static GL.Delegates.GetUniformIndices glGetUniformIndices;
      internal static GL.Delegates.GetUniformiv glGetUniformiv;
      internal static GL.Delegates.GetUniformivARB glGetUniformivARB;
      internal static GL.Delegates.GetUniformLocation glGetUniformLocation;
      internal static GL.Delegates.GetUniformLocationARB glGetUniformLocationARB;
      internal static GL.Delegates.GetUniformOffsetEXT glGetUniformOffsetEXT;
      internal static GL.Delegates.GetUniformSubroutineuiv glGetUniformSubroutineuiv;
      internal static GL.Delegates.GetUniformui64vNV glGetUniformui64vNV;
      internal static GL.Delegates.GetUniformuiv glGetUniformuiv;
      internal static GL.Delegates.GetUniformuivEXT glGetUniformuivEXT;
      internal static GL.Delegates.GetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI;
      internal static GL.Delegates.GetVariantArrayObjectivATI glGetVariantArrayObjectivATI;
      internal static GL.Delegates.GetVariantBooleanvEXT glGetVariantBooleanvEXT;
      internal static GL.Delegates.GetVariantFloatvEXT glGetVariantFloatvEXT;
      internal static GL.Delegates.GetVariantIntegervEXT glGetVariantIntegervEXT;
      internal static GL.Delegates.GetVariantPointervEXT glGetVariantPointervEXT;
      internal static GL.Delegates.GetVaryingLocationNV glGetVaryingLocationNV;
      internal static GL.Delegates.GetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI;
      internal static GL.Delegates.GetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI;
      internal static GL.Delegates.GetVertexAttribdv glGetVertexAttribdv;
      internal static GL.Delegates.GetVertexAttribdvARB glGetVertexAttribdvARB;
      internal static GL.Delegates.GetVertexAttribdvNV glGetVertexAttribdvNV;
      internal static GL.Delegates.GetVertexAttribfv glGetVertexAttribfv;
      internal static GL.Delegates.GetVertexAttribfvARB glGetVertexAttribfvARB;
      internal static GL.Delegates.GetVertexAttribfvNV glGetVertexAttribfvNV;
      internal static GL.Delegates.GetVertexAttribIiv glGetVertexAttribIiv;
      internal static GL.Delegates.GetVertexAttribIivEXT glGetVertexAttribIivEXT;
      internal static GL.Delegates.GetVertexAttribIuiv glGetVertexAttribIuiv;
      internal static GL.Delegates.GetVertexAttribIuivEXT glGetVertexAttribIuivEXT;
      internal static GL.Delegates.GetVertexAttribiv glGetVertexAttribiv;
      internal static GL.Delegates.GetVertexAttribivARB glGetVertexAttribivARB;
      internal static GL.Delegates.GetVertexAttribivNV glGetVertexAttribivNV;
      internal static GL.Delegates.GetVertexAttribLdv glGetVertexAttribLdv;
      internal static GL.Delegates.GetVertexAttribLdvEXT glGetVertexAttribLdvEXT;
      internal static GL.Delegates.GetVertexAttribLi64vNV glGetVertexAttribLi64vNV;
      internal static GL.Delegates.GetVertexAttribLui64vNV glGetVertexAttribLui64vNV;
      internal static GL.Delegates.GetVertexAttribPointerv glGetVertexAttribPointerv;
      internal static GL.Delegates.GetVertexAttribPointervARB glGetVertexAttribPointervARB;
      internal static GL.Delegates.GetVertexAttribPointervNV glGetVertexAttribPointervNV;
      internal static GL.Delegates.GetVideoCaptureivNV glGetVideoCaptureivNV;
      internal static GL.Delegates.GetVideoCaptureStreamdvNV glGetVideoCaptureStreamdvNV;
      internal static GL.Delegates.GetVideoCaptureStreamfvNV glGetVideoCaptureStreamfvNV;
      internal static GL.Delegates.GetVideoCaptureStreamivNV glGetVideoCaptureStreamivNV;
      internal static GL.Delegates.GetVideoi64vNV glGetVideoi64vNV;
      internal static GL.Delegates.GetVideoivNV glGetVideoivNV;
      internal static GL.Delegates.GetVideoui64vNV glGetVideoui64vNV;
      internal static GL.Delegates.GetVideouivNV glGetVideouivNV;
      internal static GL.Delegates.GlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN;
      internal static GL.Delegates.GlobalAlphaFactordSUN glGlobalAlphaFactordSUN;
      internal static GL.Delegates.GlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN;
      internal static GL.Delegates.GlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN;
      internal static GL.Delegates.GlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN;
      internal static GL.Delegates.GlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN;
      internal static GL.Delegates.GlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN;
      internal static GL.Delegates.GlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN;
      internal static GL.Delegates.Hint glHint;
      internal static GL.Delegates.HintPGI glHintPGI;
      internal static GL.Delegates.Histogram glHistogram;
      internal static GL.Delegates.HistogramEXT glHistogramEXT;
      internal static GL.Delegates.IglooInterfaceSGIX glIglooInterfaceSGIX;
      internal static GL.Delegates.ImageTransformParameterfHP glImageTransformParameterfHP;
      internal static GL.Delegates.ImageTransformParameterfvHP glImageTransformParameterfvHP;
      internal static GL.Delegates.ImageTransformParameteriHP glImageTransformParameteriHP;
      internal static GL.Delegates.ImageTransformParameterivHP glImageTransformParameterivHP;
      internal static GL.Delegates.ImportSyncEXT glImportSyncEXT;
      internal static GL.Delegates.Indexd glIndexd;
      internal static GL.Delegates.Indexdv glIndexdv;
      internal static GL.Delegates.Indexf glIndexf;
      internal static GL.Delegates.IndexFormatNV glIndexFormatNV;
      internal static GL.Delegates.IndexFuncEXT glIndexFuncEXT;
      internal static GL.Delegates.Indexfv glIndexfv;
      internal static GL.Delegates.Indexi glIndexi;
      internal static GL.Delegates.Indexiv glIndexiv;
      internal static GL.Delegates.IndexMask glIndexMask;
      internal static GL.Delegates.IndexMaterialEXT glIndexMaterialEXT;
      internal static GL.Delegates.IndexPointer glIndexPointer;
      internal static GL.Delegates.IndexPointerEXT glIndexPointerEXT;
      internal static GL.Delegates.IndexPointerListIBM glIndexPointerListIBM;
      internal static GL.Delegates.Indexs glIndexs;
      internal static GL.Delegates.Indexsv glIndexsv;
      internal static GL.Delegates.Indexub glIndexub;
      internal static GL.Delegates.Indexubv glIndexubv;
      internal static GL.Delegates.InitNames glInitNames;
      internal static GL.Delegates.InsertComponentEXT glInsertComponentEXT;
      internal static GL.Delegates.InstrumentsBufferSGIX glInstrumentsBufferSGIX;
      internal static GL.Delegates.InterleavedArrays glInterleavedArrays;
      internal static GL.Delegates.IsAsyncMarkerSGIX glIsAsyncMarkerSGIX;
      internal static GL.Delegates.IsBuffer glIsBuffer;
      internal static GL.Delegates.IsBufferARB glIsBufferARB;
      internal static GL.Delegates.IsBufferResidentNV glIsBufferResidentNV;
      internal static GL.Delegates.IsEnabled glIsEnabled;
      internal static GL.Delegates.IsEnabledi glIsEnabledi;
      internal static GL.Delegates.IsEnabledIndexedEXT glIsEnabledIndexedEXT;
      internal static GL.Delegates.IsFenceAPPLE glIsFenceAPPLE;
      internal static GL.Delegates.IsFenceNV glIsFenceNV;
      internal static GL.Delegates.IsFramebuffer glIsFramebuffer;
      internal static GL.Delegates.IsFramebufferEXT glIsFramebufferEXT;
      internal static GL.Delegates.IsList glIsList;
      internal static GL.Delegates.IsNameAMD glIsNameAMD;
      internal static GL.Delegates.IsNamedBufferResidentNV glIsNamedBufferResidentNV;
      internal static GL.Delegates.IsNamedStringARB glIsNamedStringARB;
      internal static GL.Delegates.IsObjectBufferATI glIsObjectBufferATI;
      internal static GL.Delegates.IsOcclusionQueryNV glIsOcclusionQueryNV;
      internal static GL.Delegates.IsProgram glIsProgram;
      internal static GL.Delegates.IsProgramARB glIsProgramARB;
      internal static GL.Delegates.IsProgramNV glIsProgramNV;
      internal static GL.Delegates.IsProgramPipeline glIsProgramPipeline;
      internal static GL.Delegates.IsQuery glIsQuery;
      internal static GL.Delegates.IsQueryARB glIsQueryARB;
      internal static GL.Delegates.IsRenderbuffer glIsRenderbuffer;
      internal static GL.Delegates.IsRenderbufferEXT glIsRenderbufferEXT;
      internal static GL.Delegates.IsSampler glIsSampler;
      internal static GL.Delegates.IsShader glIsShader;
      internal static GL.Delegates.IsSync glIsSync;
      internal static GL.Delegates.IsTexture glIsTexture;
      internal static GL.Delegates.IsTextureEXT glIsTextureEXT;
      internal static GL.Delegates.IsTransformFeedback glIsTransformFeedback;
      internal static GL.Delegates.IsTransformFeedbackNV glIsTransformFeedbackNV;
      internal static GL.Delegates.IsVariantEnabledEXT glIsVariantEnabledEXT;
      internal static GL.Delegates.IsVertexArray glIsVertexArray;
      internal static GL.Delegates.IsVertexArrayAPPLE glIsVertexArrayAPPLE;
      internal static GL.Delegates.IsVertexAttribEnabledAPPLE glIsVertexAttribEnabledAPPLE;
      internal static GL.Delegates.LightEnviSGIX glLightEnviSGIX;
      internal static GL.Delegates.Lightf glLightf;
      internal static GL.Delegates.Lightfv glLightfv;
      internal static GL.Delegates.Lighti glLighti;
      internal static GL.Delegates.Lightiv glLightiv;
      internal static GL.Delegates.LightModelf glLightModelf;
      internal static GL.Delegates.LightModelfv glLightModelfv;
      internal static GL.Delegates.LightModeli glLightModeli;
      internal static GL.Delegates.LightModeliv glLightModeliv;
      internal static GL.Delegates.LineStipple glLineStipple;
      internal static GL.Delegates.LineWidth glLineWidth;
      internal static GL.Delegates.LinkProgram glLinkProgram;
      internal static GL.Delegates.LinkProgramARB glLinkProgramARB;
      internal static GL.Delegates.ListBase glListBase;
      internal static GL.Delegates.ListParameterfSGIX glListParameterfSGIX;
      internal static GL.Delegates.ListParameterfvSGIX glListParameterfvSGIX;
      internal static GL.Delegates.ListParameteriSGIX glListParameteriSGIX;
      internal static GL.Delegates.ListParameterivSGIX glListParameterivSGIX;
      internal static GL.Delegates.LoadIdentity glLoadIdentity;
      internal static GL.Delegates.LoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX;
      internal static GL.Delegates.LoadMatrixd glLoadMatrixd;
      internal static GL.Delegates.LoadMatrixf glLoadMatrixf;
      internal static GL.Delegates.LoadName glLoadName;
      internal static GL.Delegates.LoadProgramNV glLoadProgramNV;
      internal static GL.Delegates.LoadTransposeMatrixd glLoadTransposeMatrixd;
      internal static GL.Delegates.LoadTransposeMatrixdARB glLoadTransposeMatrixdARB;
      internal static GL.Delegates.LoadTransposeMatrixf glLoadTransposeMatrixf;
      internal static GL.Delegates.LoadTransposeMatrixfARB glLoadTransposeMatrixfARB;
      internal static GL.Delegates.LockArraysEXT glLockArraysEXT;
      internal static GL.Delegates.LogicOp glLogicOp;
      internal static GL.Delegates.MakeBufferNonResidentNV glMakeBufferNonResidentNV;
      internal static GL.Delegates.MakeBufferResidentNV glMakeBufferResidentNV;
      internal static GL.Delegates.MakeNamedBufferNonResidentNV glMakeNamedBufferNonResidentNV;
      internal static GL.Delegates.MakeNamedBufferResidentNV glMakeNamedBufferResidentNV;
      internal static GL.Delegates.Map1d glMap1d;
      internal static GL.Delegates.Map1f glMap1f;
      internal static GL.Delegates.Map2d glMap2d;
      internal static GL.Delegates.Map2f glMap2f;
      internal static GL.Delegates.MapBuffer glMapBuffer;
      internal static GL.Delegates.MapBufferARB glMapBufferARB;
      internal static GL.Delegates.MapBufferRange glMapBufferRange;
      internal static GL.Delegates.MapControlPointsNV glMapControlPointsNV;
      internal static GL.Delegates.MapGrid1d glMapGrid1d;
      internal static GL.Delegates.MapGrid1f glMapGrid1f;
      internal static GL.Delegates.MapGrid2d glMapGrid2d;
      internal static GL.Delegates.MapGrid2f glMapGrid2f;
      internal static GL.Delegates.MapNamedBufferEXT glMapNamedBufferEXT;
      internal static GL.Delegates.MapNamedBufferRangeEXT glMapNamedBufferRangeEXT;
      internal static GL.Delegates.MapObjectBufferATI glMapObjectBufferATI;
      internal static GL.Delegates.MapParameterfvNV glMapParameterfvNV;
      internal static GL.Delegates.MapParameterivNV glMapParameterivNV;
      internal static GL.Delegates.MapVertexAttrib1dAPPLE glMapVertexAttrib1dAPPLE;
      internal static GL.Delegates.MapVertexAttrib1fAPPLE glMapVertexAttrib1fAPPLE;
      internal static GL.Delegates.MapVertexAttrib2dAPPLE glMapVertexAttrib2dAPPLE;
      internal static GL.Delegates.MapVertexAttrib2fAPPLE glMapVertexAttrib2fAPPLE;
      internal static GL.Delegates.Materialf glMaterialf;
      internal static GL.Delegates.Materialfv glMaterialfv;
      internal static GL.Delegates.Materiali glMateriali;
      internal static GL.Delegates.Materialiv glMaterialiv;
      internal static GL.Delegates.MatrixFrustumEXT glMatrixFrustumEXT;
      internal static GL.Delegates.MatrixIndexPointerARB glMatrixIndexPointerARB;
      internal static GL.Delegates.MatrixIndexubvARB glMatrixIndexubvARB;
      internal static GL.Delegates.MatrixIndexuivARB glMatrixIndexuivARB;
      internal static GL.Delegates.MatrixIndexusvARB glMatrixIndexusvARB;
      internal static GL.Delegates.MatrixLoaddEXT glMatrixLoaddEXT;
      internal static GL.Delegates.MatrixLoadfEXT glMatrixLoadfEXT;
      internal static GL.Delegates.MatrixLoadIdentityEXT glMatrixLoadIdentityEXT;
      internal static GL.Delegates.MatrixLoadTransposedEXT glMatrixLoadTransposedEXT;
      internal static GL.Delegates.MatrixLoadTransposefEXT glMatrixLoadTransposefEXT;
      internal static GL.Delegates.MatrixMode glMatrixMode;
      internal static GL.Delegates.MatrixMultdEXT glMatrixMultdEXT;
      internal static GL.Delegates.MatrixMultfEXT glMatrixMultfEXT;
      internal static GL.Delegates.MatrixMultTransposedEXT glMatrixMultTransposedEXT;
      internal static GL.Delegates.MatrixMultTransposefEXT glMatrixMultTransposefEXT;
      internal static GL.Delegates.MatrixOrthoEXT glMatrixOrthoEXT;
      internal static GL.Delegates.MatrixPopEXT glMatrixPopEXT;
      internal static GL.Delegates.MatrixPushEXT glMatrixPushEXT;
      internal static GL.Delegates.MatrixRotatedEXT glMatrixRotatedEXT;
      internal static GL.Delegates.MatrixRotatefEXT glMatrixRotatefEXT;
      internal static GL.Delegates.MatrixScaledEXT glMatrixScaledEXT;
      internal static GL.Delegates.MatrixScalefEXT glMatrixScalefEXT;
      internal static GL.Delegates.MatrixTranslatedEXT glMatrixTranslatedEXT;
      internal static GL.Delegates.MatrixTranslatefEXT glMatrixTranslatefEXT;
      internal static GL.Delegates.MemoryBarrierEXT glMemoryBarrierEXT;
      internal static GL.Delegates.Minmax glMinmax;
      internal static GL.Delegates.MinmaxEXT glMinmaxEXT;
      internal static GL.Delegates.MinSampleShading glMinSampleShading;
      internal static GL.Delegates.MinSampleShadingARB glMinSampleShadingARB;
      internal static GL.Delegates.MultiDrawArrays glMultiDrawArrays;
      internal static GL.Delegates.MultiDrawArraysEXT glMultiDrawArraysEXT;
      internal static GL.Delegates.MultiDrawArraysIndirectAMD glMultiDrawArraysIndirectAMD;
      internal static GL.Delegates.MultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE;
      internal static GL.Delegates.MultiDrawElements glMultiDrawElements;
      internal static GL.Delegates.MultiDrawElementsBaseVertex glMultiDrawElementsBaseVertex;
      internal static GL.Delegates.MultiDrawElementsEXT glMultiDrawElementsEXT;
      internal static GL.Delegates.MultiDrawElementsIndirectAMD glMultiDrawElementsIndirectAMD;
      internal static GL.Delegates.MultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE;
      internal static GL.Delegates.MultiModeDrawArraysIBM glMultiModeDrawArraysIBM;
      internal static GL.Delegates.MultiModeDrawElementsIBM glMultiModeDrawElementsIBM;
      internal static GL.Delegates.MultiTexBufferEXT glMultiTexBufferEXT;
      internal static GL.Delegates.MultiTexCoord1d glMultiTexCoord1d;
      internal static GL.Delegates.MultiTexCoord1dARB glMultiTexCoord1dARB;
      internal static GL.Delegates.MultiTexCoord1dv glMultiTexCoord1dv;
      internal static GL.Delegates.MultiTexCoord1dvARB glMultiTexCoord1dvARB;
      internal static GL.Delegates.MultiTexCoord1f glMultiTexCoord1f;
      internal static GL.Delegates.MultiTexCoord1fARB glMultiTexCoord1fARB;
      internal static GL.Delegates.MultiTexCoord1fv glMultiTexCoord1fv;
      internal static GL.Delegates.MultiTexCoord1fvARB glMultiTexCoord1fvARB;
      internal static GL.Delegates.MultiTexCoord1hNV glMultiTexCoord1hNV;
      internal static GL.Delegates.MultiTexCoord1hvNV glMultiTexCoord1hvNV;
      internal static GL.Delegates.MultiTexCoord1i glMultiTexCoord1i;
      internal static GL.Delegates.MultiTexCoord1iARB glMultiTexCoord1iARB;
      internal static GL.Delegates.MultiTexCoord1iv glMultiTexCoord1iv;
      internal static GL.Delegates.MultiTexCoord1ivARB glMultiTexCoord1ivARB;
      internal static GL.Delegates.MultiTexCoord1s glMultiTexCoord1s;
      internal static GL.Delegates.MultiTexCoord1sARB glMultiTexCoord1sARB;
      internal static GL.Delegates.MultiTexCoord1sv glMultiTexCoord1sv;
      internal static GL.Delegates.MultiTexCoord1svARB glMultiTexCoord1svARB;
      internal static GL.Delegates.MultiTexCoord2d glMultiTexCoord2d;
      internal static GL.Delegates.MultiTexCoord2dARB glMultiTexCoord2dARB;
      internal static GL.Delegates.MultiTexCoord2dv glMultiTexCoord2dv;
      internal static GL.Delegates.MultiTexCoord2dvARB glMultiTexCoord2dvARB;
      internal static GL.Delegates.MultiTexCoord2f glMultiTexCoord2f;
      internal static GL.Delegates.MultiTexCoord2fARB glMultiTexCoord2fARB;
      internal static GL.Delegates.MultiTexCoord2fv glMultiTexCoord2fv;
      internal static GL.Delegates.MultiTexCoord2fvARB glMultiTexCoord2fvARB;
      internal static GL.Delegates.MultiTexCoord2hNV glMultiTexCoord2hNV;
      internal static GL.Delegates.MultiTexCoord2hvNV glMultiTexCoord2hvNV;
      internal static GL.Delegates.MultiTexCoord2i glMultiTexCoord2i;
      internal static GL.Delegates.MultiTexCoord2iARB glMultiTexCoord2iARB;
      internal static GL.Delegates.MultiTexCoord2iv glMultiTexCoord2iv;
      internal static GL.Delegates.MultiTexCoord2ivARB glMultiTexCoord2ivARB;
      internal static GL.Delegates.MultiTexCoord2s glMultiTexCoord2s;
      internal static GL.Delegates.MultiTexCoord2sARB glMultiTexCoord2sARB;
      internal static GL.Delegates.MultiTexCoord2sv glMultiTexCoord2sv;
      internal static GL.Delegates.MultiTexCoord2svARB glMultiTexCoord2svARB;
      internal static GL.Delegates.MultiTexCoord3d glMultiTexCoord3d;
      internal static GL.Delegates.MultiTexCoord3dARB glMultiTexCoord3dARB;
      internal static GL.Delegates.MultiTexCoord3dv glMultiTexCoord3dv;
      internal static GL.Delegates.MultiTexCoord3dvARB glMultiTexCoord3dvARB;
      internal static GL.Delegates.MultiTexCoord3f glMultiTexCoord3f;
      internal static GL.Delegates.MultiTexCoord3fARB glMultiTexCoord3fARB;
      internal static GL.Delegates.MultiTexCoord3fv glMultiTexCoord3fv;
      internal static GL.Delegates.MultiTexCoord3fvARB glMultiTexCoord3fvARB;
      internal static GL.Delegates.MultiTexCoord3hNV glMultiTexCoord3hNV;
      internal static GL.Delegates.MultiTexCoord3hvNV glMultiTexCoord3hvNV;
      internal static GL.Delegates.MultiTexCoord3i glMultiTexCoord3i;
      internal static GL.Delegates.MultiTexCoord3iARB glMultiTexCoord3iARB;
      internal static GL.Delegates.MultiTexCoord3iv glMultiTexCoord3iv;
      internal static GL.Delegates.MultiTexCoord3ivARB glMultiTexCoord3ivARB;
      internal static GL.Delegates.MultiTexCoord3s glMultiTexCoord3s;
      internal static GL.Delegates.MultiTexCoord3sARB glMultiTexCoord3sARB;
      internal static GL.Delegates.MultiTexCoord3sv glMultiTexCoord3sv;
      internal static GL.Delegates.MultiTexCoord3svARB glMultiTexCoord3svARB;
      internal static GL.Delegates.MultiTexCoord4d glMultiTexCoord4d;
      internal static GL.Delegates.MultiTexCoord4dARB glMultiTexCoord4dARB;
      internal static GL.Delegates.MultiTexCoord4dv glMultiTexCoord4dv;
      internal static GL.Delegates.MultiTexCoord4dvARB glMultiTexCoord4dvARB;
      internal static GL.Delegates.MultiTexCoord4f glMultiTexCoord4f;
      internal static GL.Delegates.MultiTexCoord4fARB glMultiTexCoord4fARB;
      internal static GL.Delegates.MultiTexCoord4fv glMultiTexCoord4fv;
      internal static GL.Delegates.MultiTexCoord4fvARB glMultiTexCoord4fvARB;
      internal static GL.Delegates.MultiTexCoord4hNV glMultiTexCoord4hNV;
      internal static GL.Delegates.MultiTexCoord4hvNV glMultiTexCoord4hvNV;
      internal static GL.Delegates.MultiTexCoord4i glMultiTexCoord4i;
      internal static GL.Delegates.MultiTexCoord4iARB glMultiTexCoord4iARB;
      internal static GL.Delegates.MultiTexCoord4iv glMultiTexCoord4iv;
      internal static GL.Delegates.MultiTexCoord4ivARB glMultiTexCoord4ivARB;
      internal static GL.Delegates.MultiTexCoord4s glMultiTexCoord4s;
      internal static GL.Delegates.MultiTexCoord4sARB glMultiTexCoord4sARB;
      internal static GL.Delegates.MultiTexCoord4sv glMultiTexCoord4sv;
      internal static GL.Delegates.MultiTexCoord4svARB glMultiTexCoord4svARB;
      internal static GL.Delegates.MultiTexCoordP1ui glMultiTexCoordP1ui;
      internal static GL.Delegates.MultiTexCoordP1uiv glMultiTexCoordP1uiv;
      internal static GL.Delegates.MultiTexCoordP2ui glMultiTexCoordP2ui;
      internal static GL.Delegates.MultiTexCoordP2uiv glMultiTexCoordP2uiv;
      internal static GL.Delegates.MultiTexCoordP3ui glMultiTexCoordP3ui;
      internal static GL.Delegates.MultiTexCoordP3uiv glMultiTexCoordP3uiv;
      internal static GL.Delegates.MultiTexCoordP4ui glMultiTexCoordP4ui;
      internal static GL.Delegates.MultiTexCoordP4uiv glMultiTexCoordP4uiv;
      internal static GL.Delegates.MultiTexCoordPointerEXT glMultiTexCoordPointerEXT;
      internal static GL.Delegates.MultiTexEnvfEXT glMultiTexEnvfEXT;
      internal static GL.Delegates.MultiTexEnvfvEXT glMultiTexEnvfvEXT;
      internal static GL.Delegates.MultiTexEnviEXT glMultiTexEnviEXT;
      internal static GL.Delegates.MultiTexEnvivEXT glMultiTexEnvivEXT;
      internal static GL.Delegates.MultiTexGendEXT glMultiTexGendEXT;
      internal static GL.Delegates.MultiTexGendvEXT glMultiTexGendvEXT;
      internal static GL.Delegates.MultiTexGenfEXT glMultiTexGenfEXT;
      internal static GL.Delegates.MultiTexGenfvEXT glMultiTexGenfvEXT;
      internal static GL.Delegates.MultiTexGeniEXT glMultiTexGeniEXT;
      internal static GL.Delegates.MultiTexGenivEXT glMultiTexGenivEXT;
      internal static GL.Delegates.MultiTexImage1DEXT glMultiTexImage1DEXT;
      internal static GL.Delegates.MultiTexImage2DEXT glMultiTexImage2DEXT;
      internal static GL.Delegates.MultiTexImage3DEXT glMultiTexImage3DEXT;
      internal static GL.Delegates.MultiTexParameterfEXT glMultiTexParameterfEXT;
      internal static GL.Delegates.MultiTexParameterfvEXT glMultiTexParameterfvEXT;
      internal static GL.Delegates.MultiTexParameteriEXT glMultiTexParameteriEXT;
      internal static GL.Delegates.MultiTexParameterIivEXT glMultiTexParameterIivEXT;
      internal static GL.Delegates.MultiTexParameterIuivEXT glMultiTexParameterIuivEXT;
      internal static GL.Delegates.MultiTexParameterivEXT glMultiTexParameterivEXT;
      internal static GL.Delegates.MultiTexRenderbufferEXT glMultiTexRenderbufferEXT;
      internal static GL.Delegates.MultiTexSubImage1DEXT glMultiTexSubImage1DEXT;
      internal static GL.Delegates.MultiTexSubImage2DEXT glMultiTexSubImage2DEXT;
      internal static GL.Delegates.MultiTexSubImage3DEXT glMultiTexSubImage3DEXT;
      internal static GL.Delegates.MultMatrixd glMultMatrixd;
      internal static GL.Delegates.MultMatrixf glMultMatrixf;
      internal static GL.Delegates.MultTransposeMatrixd glMultTransposeMatrixd;
      internal static GL.Delegates.MultTransposeMatrixdARB glMultTransposeMatrixdARB;
      internal static GL.Delegates.MultTransposeMatrixf glMultTransposeMatrixf;
      internal static GL.Delegates.MultTransposeMatrixfARB glMultTransposeMatrixfARB;
      internal static GL.Delegates.NamedBufferDataEXT glNamedBufferDataEXT;
      internal static GL.Delegates.NamedBufferSubDataEXT glNamedBufferSubDataEXT;
      internal static GL.Delegates.NamedCopyBufferSubDataEXT glNamedCopyBufferSubDataEXT;
      internal static GL.Delegates.NamedFramebufferRenderbufferEXT glNamedFramebufferRenderbufferEXT;
      internal static GL.Delegates.NamedFramebufferTexture1DEXT glNamedFramebufferTexture1DEXT;
      internal static GL.Delegates.NamedFramebufferTexture2DEXT glNamedFramebufferTexture2DEXT;
      internal static GL.Delegates.NamedFramebufferTexture3DEXT glNamedFramebufferTexture3DEXT;
      internal static GL.Delegates.NamedFramebufferTextureEXT glNamedFramebufferTextureEXT;
      internal static GL.Delegates.NamedFramebufferTextureFaceEXT glNamedFramebufferTextureFaceEXT;
      internal static GL.Delegates.NamedFramebufferTextureLayerEXT glNamedFramebufferTextureLayerEXT;
      internal static GL.Delegates.NamedProgramLocalParameter4dEXT glNamedProgramLocalParameter4dEXT;
      internal static GL.Delegates.NamedProgramLocalParameter4dvEXT glNamedProgramLocalParameter4dvEXT;
      internal static GL.Delegates.NamedProgramLocalParameter4fEXT glNamedProgramLocalParameter4fEXT;
      internal static GL.Delegates.NamedProgramLocalParameter4fvEXT glNamedProgramLocalParameter4fvEXT;
      internal static GL.Delegates.NamedProgramLocalParameterI4iEXT glNamedProgramLocalParameterI4iEXT;
      internal static GL.Delegates.NamedProgramLocalParameterI4ivEXT glNamedProgramLocalParameterI4ivEXT;
      internal static GL.Delegates.NamedProgramLocalParameterI4uiEXT glNamedProgramLocalParameterI4uiEXT;
      internal static GL.Delegates.NamedProgramLocalParameterI4uivEXT glNamedProgramLocalParameterI4uivEXT;
      internal static GL.Delegates.NamedProgramLocalParameters4fvEXT glNamedProgramLocalParameters4fvEXT;
      internal static GL.Delegates.NamedProgramLocalParametersI4ivEXT glNamedProgramLocalParametersI4ivEXT;
      internal static GL.Delegates.NamedProgramLocalParametersI4uivEXT glNamedProgramLocalParametersI4uivEXT;
      internal static GL.Delegates.NamedProgramStringEXT glNamedProgramStringEXT;
      internal static GL.Delegates.NamedRenderbufferStorageEXT glNamedRenderbufferStorageEXT;
      internal static GL.Delegates.NamedRenderbufferStorageMultisampleCoverageEXT glNamedRenderbufferStorageMultisampleCoverageEXT;
      internal static GL.Delegates.NamedRenderbufferStorageMultisampleEXT glNamedRenderbufferStorageMultisampleEXT;
      internal static GL.Delegates.NamedStringARB glNamedStringARB;
      internal static GL.Delegates.NewList glNewList;
      internal static GL.Delegates.NewObjectBufferATI glNewObjectBufferATI;
      internal static GL.Delegates.Normal3b glNormal3b;
      internal static GL.Delegates.Normal3bv glNormal3bv;
      internal static GL.Delegates.Normal3d glNormal3d;
      internal static GL.Delegates.Normal3dv glNormal3dv;
      internal static GL.Delegates.Normal3f glNormal3f;
      internal static GL.Delegates.Normal3fv glNormal3fv;
      internal static GL.Delegates.Normal3fVertex3fSUN glNormal3fVertex3fSUN;
      internal static GL.Delegates.Normal3fVertex3fvSUN glNormal3fVertex3fvSUN;
      internal static GL.Delegates.Normal3hNV glNormal3hNV;
      internal static GL.Delegates.Normal3hvNV glNormal3hvNV;
      internal static GL.Delegates.Normal3i glNormal3i;
      internal static GL.Delegates.Normal3iv glNormal3iv;
      internal static GL.Delegates.Normal3s glNormal3s;
      internal static GL.Delegates.Normal3sv glNormal3sv;
      internal static GL.Delegates.NormalFormatNV glNormalFormatNV;
      internal static GL.Delegates.NormalP3ui glNormalP3ui;
      internal static GL.Delegates.NormalP3uiv glNormalP3uiv;
      internal static GL.Delegates.NormalPointer glNormalPointer;
      internal static GL.Delegates.NormalPointerEXT glNormalPointerEXT;
      internal static GL.Delegates.NormalPointerListIBM glNormalPointerListIBM;
      internal static GL.Delegates.NormalPointervINTEL glNormalPointervINTEL;
      internal static GL.Delegates.NormalStream3bATI glNormalStream3bATI;
      internal static GL.Delegates.NormalStream3bvATI glNormalStream3bvATI;
      internal static GL.Delegates.NormalStream3dATI glNormalStream3dATI;
      internal static GL.Delegates.NormalStream3dvATI glNormalStream3dvATI;
      internal static GL.Delegates.NormalStream3fATI glNormalStream3fATI;
      internal static GL.Delegates.NormalStream3fvATI glNormalStream3fvATI;
      internal static GL.Delegates.NormalStream3iATI glNormalStream3iATI;
      internal static GL.Delegates.NormalStream3ivATI glNormalStream3ivATI;
      internal static GL.Delegates.NormalStream3sATI glNormalStream3sATI;
      internal static GL.Delegates.NormalStream3svATI glNormalStream3svATI;
      internal static GL.Delegates.ObjectPurgeableAPPLE glObjectPurgeableAPPLE;
      internal static GL.Delegates.ObjectUnpurgeableAPPLE glObjectUnpurgeableAPPLE;
      internal static GL.Delegates.Ortho glOrtho;
      internal static GL.Delegates.PassTexCoordATI glPassTexCoordATI;
      internal static GL.Delegates.PassThrough glPassThrough;
      internal static GL.Delegates.PatchParameterfv glPatchParameterfv;
      internal static GL.Delegates.PatchParameteri glPatchParameteri;
      internal static GL.Delegates.PauseTransformFeedback glPauseTransformFeedback;
      internal static GL.Delegates.PauseTransformFeedbackNV glPauseTransformFeedbackNV;
      internal static GL.Delegates.PixelDataRangeNV glPixelDataRangeNV;
      internal static GL.Delegates.PixelMapfv glPixelMapfv;
      internal static GL.Delegates.PixelMapuiv glPixelMapuiv;
      internal static GL.Delegates.PixelMapusv glPixelMapusv;
      internal static GL.Delegates.PixelStoref glPixelStoref;
      internal static GL.Delegates.PixelStorei glPixelStorei;
      internal static GL.Delegates.PixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS;
      internal static GL.Delegates.PixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS;
      internal static GL.Delegates.PixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS;
      internal static GL.Delegates.PixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS;
      internal static GL.Delegates.PixelTexGenSGIX glPixelTexGenSGIX;
      internal static GL.Delegates.PixelTransferf glPixelTransferf;
      internal static GL.Delegates.PixelTransferi glPixelTransferi;
      internal static GL.Delegates.PixelTransformParameterfEXT glPixelTransformParameterfEXT;
      internal static GL.Delegates.PixelTransformParameterfvEXT glPixelTransformParameterfvEXT;
      internal static GL.Delegates.PixelTransformParameteriEXT glPixelTransformParameteriEXT;
      internal static GL.Delegates.PixelTransformParameterivEXT glPixelTransformParameterivEXT;
      internal static GL.Delegates.PixelZoom glPixelZoom;
      internal static GL.Delegates.PNTrianglesfATI glPNTrianglesfATI;
      internal static GL.Delegates.PNTrianglesiATI glPNTrianglesiATI;
      internal static GL.Delegates.PointParameterf glPointParameterf;
      internal static GL.Delegates.PointParameterfARB glPointParameterfARB;
      internal static GL.Delegates.PointParameterfEXT glPointParameterfEXT;
      internal static GL.Delegates.PointParameterfSGIS glPointParameterfSGIS;
      internal static GL.Delegates.PointParameterfv glPointParameterfv;
      internal static GL.Delegates.PointParameterfvARB glPointParameterfvARB;
      internal static GL.Delegates.PointParameterfvEXT glPointParameterfvEXT;
      internal static GL.Delegates.PointParameterfvSGIS glPointParameterfvSGIS;
      internal static GL.Delegates.PointParameteri glPointParameteri;
      internal static GL.Delegates.PointParameteriNV glPointParameteriNV;
      internal static GL.Delegates.PointParameteriv glPointParameteriv;
      internal static GL.Delegates.PointParameterivNV glPointParameterivNV;
      internal static GL.Delegates.PointSize glPointSize;
      internal static GL.Delegates.PollAsyncSGIX glPollAsyncSGIX;
      internal static GL.Delegates.PollInstrumentsSGIX glPollInstrumentsSGIX;
      internal static GL.Delegates.PolygonMode glPolygonMode;
      internal static GL.Delegates.PolygonOffset glPolygonOffset;
      internal static GL.Delegates.PolygonOffsetEXT glPolygonOffsetEXT;
      internal static GL.Delegates.PolygonStipple glPolygonStipple;
      internal static GL.Delegates.PopAttrib glPopAttrib;
      internal static GL.Delegates.PopClientAttrib glPopClientAttrib;
      internal static GL.Delegates.PopMatrix glPopMatrix;
      internal static GL.Delegates.PopName glPopName;
      internal static GL.Delegates.PresentFrameDualFillNV glPresentFrameDualFillNV;
      internal static GL.Delegates.PresentFrameKeyedNV glPresentFrameKeyedNV;
      internal static GL.Delegates.PrimitiveRestartIndex glPrimitiveRestartIndex;
      internal static GL.Delegates.PrimitiveRestartIndexNV glPrimitiveRestartIndexNV;
      internal static GL.Delegates.PrimitiveRestartNV glPrimitiveRestartNV;
      internal static GL.Delegates.PrioritizeTextures glPrioritizeTextures;
      internal static GL.Delegates.PrioritizeTexturesEXT glPrioritizeTexturesEXT;
      internal static GL.Delegates.ProgramBinary glProgramBinary;
      internal static GL.Delegates.ProgramBufferParametersfvNV glProgramBufferParametersfvNV;
      internal static GL.Delegates.ProgramBufferParametersIivNV glProgramBufferParametersIivNV;
      internal static GL.Delegates.ProgramBufferParametersIuivNV glProgramBufferParametersIuivNV;
      internal static GL.Delegates.ProgramEnvParameter4dARB glProgramEnvParameter4dARB;
      internal static GL.Delegates.ProgramEnvParameter4dvARB glProgramEnvParameter4dvARB;
      internal static GL.Delegates.ProgramEnvParameter4fARB glProgramEnvParameter4fARB;
      internal static GL.Delegates.ProgramEnvParameter4fvARB glProgramEnvParameter4fvARB;
      internal static GL.Delegates.ProgramEnvParameterI4iNV glProgramEnvParameterI4iNV;
      internal static GL.Delegates.ProgramEnvParameterI4ivNV glProgramEnvParameterI4ivNV;
      internal static GL.Delegates.ProgramEnvParameterI4uiNV glProgramEnvParameterI4uiNV;
      internal static GL.Delegates.ProgramEnvParameterI4uivNV glProgramEnvParameterI4uivNV;
      internal static GL.Delegates.ProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT;
      internal static GL.Delegates.ProgramEnvParametersI4ivNV glProgramEnvParametersI4ivNV;
      internal static GL.Delegates.ProgramEnvParametersI4uivNV glProgramEnvParametersI4uivNV;
      internal static GL.Delegates.ProgramLocalParameter4dARB glProgramLocalParameter4dARB;
      internal static GL.Delegates.ProgramLocalParameter4dvARB glProgramLocalParameter4dvARB;
      internal static GL.Delegates.ProgramLocalParameter4fARB glProgramLocalParameter4fARB;
      internal static GL.Delegates.ProgramLocalParameter4fvARB glProgramLocalParameter4fvARB;
      internal static GL.Delegates.ProgramLocalParameterI4iNV glProgramLocalParameterI4iNV;
      internal static GL.Delegates.ProgramLocalParameterI4ivNV glProgramLocalParameterI4ivNV;
      internal static GL.Delegates.ProgramLocalParameterI4uiNV glProgramLocalParameterI4uiNV;
      internal static GL.Delegates.ProgramLocalParameterI4uivNV glProgramLocalParameterI4uivNV;
      internal static GL.Delegates.ProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT;
      internal static GL.Delegates.ProgramLocalParametersI4ivNV glProgramLocalParametersI4ivNV;
      internal static GL.Delegates.ProgramLocalParametersI4uivNV glProgramLocalParametersI4uivNV;
      internal static GL.Delegates.ProgramNamedParameter4dNV glProgramNamedParameter4dNV;
      internal static GL.Delegates.ProgramNamedParameter4dvNV glProgramNamedParameter4dvNV;
      internal static GL.Delegates.ProgramNamedParameter4fNV glProgramNamedParameter4fNV;
      internal static GL.Delegates.ProgramNamedParameter4fvNV glProgramNamedParameter4fvNV;
      internal static GL.Delegates.ProgramParameter4dNV glProgramParameter4dNV;
      internal static GL.Delegates.ProgramParameter4dvNV glProgramParameter4dvNV;
      internal static GL.Delegates.ProgramParameter4fNV glProgramParameter4fNV;
      internal static GL.Delegates.ProgramParameter4fvNV glProgramParameter4fvNV;
      internal static GL.Delegates.ProgramParameteri glProgramParameteri;
      internal static GL.Delegates.ProgramParameteriARB glProgramParameteriARB;
      internal static GL.Delegates.ProgramParameteriEXT glProgramParameteriEXT;
      internal static GL.Delegates.ProgramParameters4dvNV glProgramParameters4dvNV;
      internal static GL.Delegates.ProgramParameters4fvNV glProgramParameters4fvNV;
      internal static GL.Delegates.ProgramStringARB glProgramStringARB;
      internal static GL.Delegates.ProgramSubroutineParametersuivNV glProgramSubroutineParametersuivNV;
      internal static GL.Delegates.ProgramUniform1d glProgramUniform1d;
      internal static GL.Delegates.ProgramUniform1dEXT glProgramUniform1dEXT;
      internal static GL.Delegates.ProgramUniform1dv glProgramUniform1dv;
      internal static GL.Delegates.ProgramUniform1dvEXT glProgramUniform1dvEXT;
      internal static GL.Delegates.ProgramUniform1f glProgramUniform1f;
      internal static GL.Delegates.ProgramUniform1fEXT glProgramUniform1fEXT;
      internal static GL.Delegates.ProgramUniform1fv glProgramUniform1fv;
      internal static GL.Delegates.ProgramUniform1fvEXT glProgramUniform1fvEXT;
      internal static GL.Delegates.ProgramUniform1i glProgramUniform1i;
      internal static GL.Delegates.ProgramUniform1i64NV glProgramUniform1i64NV;
      internal static GL.Delegates.ProgramUniform1i64vNV glProgramUniform1i64vNV;
      internal static GL.Delegates.ProgramUniform1iEXT glProgramUniform1iEXT;
      internal static GL.Delegates.ProgramUniform1iv glProgramUniform1iv;
      internal static GL.Delegates.ProgramUniform1ivEXT glProgramUniform1ivEXT;
      internal static GL.Delegates.ProgramUniform1ui glProgramUniform1ui;
      internal static GL.Delegates.ProgramUniform1ui64NV glProgramUniform1ui64NV;
      internal static GL.Delegates.ProgramUniform1ui64vNV glProgramUniform1ui64vNV;
      internal static GL.Delegates.ProgramUniform1uiEXT glProgramUniform1uiEXT;
      internal static GL.Delegates.ProgramUniform1uiv glProgramUniform1uiv;
      internal static GL.Delegates.ProgramUniform1uivEXT glProgramUniform1uivEXT;
      internal static GL.Delegates.ProgramUniform2d glProgramUniform2d;
      internal static GL.Delegates.ProgramUniform2dEXT glProgramUniform2dEXT;
      internal static GL.Delegates.ProgramUniform2dv glProgramUniform2dv;
      internal static GL.Delegates.ProgramUniform2dvEXT glProgramUniform2dvEXT;
      internal static GL.Delegates.ProgramUniform2f glProgramUniform2f;
      internal static GL.Delegates.ProgramUniform2fEXT glProgramUniform2fEXT;
      internal static GL.Delegates.ProgramUniform2fv glProgramUniform2fv;
      internal static GL.Delegates.ProgramUniform2fvEXT glProgramUniform2fvEXT;
      internal static GL.Delegates.ProgramUniform2i glProgramUniform2i;
      internal static GL.Delegates.ProgramUniform2i64NV glProgramUniform2i64NV;
      internal static GL.Delegates.ProgramUniform2i64vNV glProgramUniform2i64vNV;
      internal static GL.Delegates.ProgramUniform2iEXT glProgramUniform2iEXT;
      internal static GL.Delegates.ProgramUniform2iv glProgramUniform2iv;
      internal static GL.Delegates.ProgramUniform2ivEXT glProgramUniform2ivEXT;
      internal static GL.Delegates.ProgramUniform2ui glProgramUniform2ui;
      internal static GL.Delegates.ProgramUniform2ui64NV glProgramUniform2ui64NV;
      internal static GL.Delegates.ProgramUniform2ui64vNV glProgramUniform2ui64vNV;
      internal static GL.Delegates.ProgramUniform2uiEXT glProgramUniform2uiEXT;
      internal static GL.Delegates.ProgramUniform2uiv glProgramUniform2uiv;
      internal static GL.Delegates.ProgramUniform2uivEXT glProgramUniform2uivEXT;
      internal static GL.Delegates.ProgramUniform3d glProgramUniform3d;
      internal static GL.Delegates.ProgramUniform3dEXT glProgramUniform3dEXT;
      internal static GL.Delegates.ProgramUniform3dv glProgramUniform3dv;
      internal static GL.Delegates.ProgramUniform3dvEXT glProgramUniform3dvEXT;
      internal static GL.Delegates.ProgramUniform3f glProgramUniform3f;
      internal static GL.Delegates.ProgramUniform3fEXT glProgramUniform3fEXT;
      internal static GL.Delegates.ProgramUniform3fv glProgramUniform3fv;
      internal static GL.Delegates.ProgramUniform3fvEXT glProgramUniform3fvEXT;
      internal static GL.Delegates.ProgramUniform3i glProgramUniform3i;
      internal static GL.Delegates.ProgramUniform3i64NV glProgramUniform3i64NV;
      internal static GL.Delegates.ProgramUniform3i64vNV glProgramUniform3i64vNV;
      internal static GL.Delegates.ProgramUniform3iEXT glProgramUniform3iEXT;
      internal static GL.Delegates.ProgramUniform3iv glProgramUniform3iv;
      internal static GL.Delegates.ProgramUniform3ivEXT glProgramUniform3ivEXT;
      internal static GL.Delegates.ProgramUniform3ui glProgramUniform3ui;
      internal static GL.Delegates.ProgramUniform3ui64NV glProgramUniform3ui64NV;
      internal static GL.Delegates.ProgramUniform3ui64vNV glProgramUniform3ui64vNV;
      internal static GL.Delegates.ProgramUniform3uiEXT glProgramUniform3uiEXT;
      internal static GL.Delegates.ProgramUniform3uiv glProgramUniform3uiv;
      internal static GL.Delegates.ProgramUniform3uivEXT glProgramUniform3uivEXT;
      internal static GL.Delegates.ProgramUniform4d glProgramUniform4d;
      internal static GL.Delegates.ProgramUniform4dEXT glProgramUniform4dEXT;
      internal static GL.Delegates.ProgramUniform4dv glProgramUniform4dv;
      internal static GL.Delegates.ProgramUniform4dvEXT glProgramUniform4dvEXT;
      internal static GL.Delegates.ProgramUniform4f glProgramUniform4f;
      internal static GL.Delegates.ProgramUniform4fEXT glProgramUniform4fEXT;
      internal static GL.Delegates.ProgramUniform4fv glProgramUniform4fv;
      internal static GL.Delegates.ProgramUniform4fvEXT glProgramUniform4fvEXT;
      internal static GL.Delegates.ProgramUniform4i glProgramUniform4i;
      internal static GL.Delegates.ProgramUniform4i64NV glProgramUniform4i64NV;
      internal static GL.Delegates.ProgramUniform4i64vNV glProgramUniform4i64vNV;
      internal static GL.Delegates.ProgramUniform4iEXT glProgramUniform4iEXT;
      internal static GL.Delegates.ProgramUniform4iv glProgramUniform4iv;
      internal static GL.Delegates.ProgramUniform4ivEXT glProgramUniform4ivEXT;
      internal static GL.Delegates.ProgramUniform4ui glProgramUniform4ui;
      internal static GL.Delegates.ProgramUniform4ui64NV glProgramUniform4ui64NV;
      internal static GL.Delegates.ProgramUniform4ui64vNV glProgramUniform4ui64vNV;
      internal static GL.Delegates.ProgramUniform4uiEXT glProgramUniform4uiEXT;
      internal static GL.Delegates.ProgramUniform4uiv glProgramUniform4uiv;
      internal static GL.Delegates.ProgramUniform4uivEXT glProgramUniform4uivEXT;
      internal static GL.Delegates.ProgramUniformMatrix2dv glProgramUniformMatrix2dv;
      internal static GL.Delegates.ProgramUniformMatrix2dvEXT glProgramUniformMatrix2dvEXT;
      internal static GL.Delegates.ProgramUniformMatrix2fv glProgramUniformMatrix2fv;
      internal static GL.Delegates.ProgramUniformMatrix2fvEXT glProgramUniformMatrix2fvEXT;
      internal static GL.Delegates.ProgramUniformMatrix2x3dv glProgramUniformMatrix2x3dv;
      internal static GL.Delegates.ProgramUniformMatrix2x3dvEXT glProgramUniformMatrix2x3dvEXT;
      internal static GL.Delegates.ProgramUniformMatrix2x3fv glProgramUniformMatrix2x3fv;
      internal static GL.Delegates.ProgramUniformMatrix2x3fvEXT glProgramUniformMatrix2x3fvEXT;
      internal static GL.Delegates.ProgramUniformMatrix2x4dv glProgramUniformMatrix2x4dv;
      internal static GL.Delegates.ProgramUniformMatrix2x4dvEXT glProgramUniformMatrix2x4dvEXT;
      internal static GL.Delegates.ProgramUniformMatrix2x4fv glProgramUniformMatrix2x4fv;
      internal static GL.Delegates.ProgramUniformMatrix2x4fvEXT glProgramUniformMatrix2x4fvEXT;
      internal static GL.Delegates.ProgramUniformMatrix3dv glProgramUniformMatrix3dv;
      internal static GL.Delegates.ProgramUniformMatrix3dvEXT glProgramUniformMatrix3dvEXT;
      internal static GL.Delegates.ProgramUniformMatrix3fv glProgramUniformMatrix3fv;
      internal static GL.Delegates.ProgramUniformMatrix3fvEXT glProgramUniformMatrix3fvEXT;
      internal static GL.Delegates.ProgramUniformMatrix3x2dv glProgramUniformMatrix3x2dv;
      internal static GL.Delegates.ProgramUniformMatrix3x2dvEXT glProgramUniformMatrix3x2dvEXT;
      internal static GL.Delegates.ProgramUniformMatrix3x2fv glProgramUniformMatrix3x2fv;
      internal static GL.Delegates.ProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x2fvEXT;
      internal static GL.Delegates.ProgramUniformMatrix3x4dv glProgramUniformMatrix3x4dv;
      internal static GL.Delegates.ProgramUniformMatrix3x4dvEXT glProgramUniformMatrix3x4dvEXT;
      internal static GL.Delegates.ProgramUniformMatrix3x4fv glProgramUniformMatrix3x4fv;
      internal static GL.Delegates.ProgramUniformMatrix3x4fvEXT glProgramUniformMatrix3x4fvEXT;
      internal static GL.Delegates.ProgramUniformMatrix4dv glProgramUniformMatrix4dv;
      internal static GL.Delegates.ProgramUniformMatrix4dvEXT glProgramUniformMatrix4dvEXT;
      internal static GL.Delegates.ProgramUniformMatrix4fv glProgramUniformMatrix4fv;
      internal static GL.Delegates.ProgramUniformMatrix4fvEXT glProgramUniformMatrix4fvEXT;
      internal static GL.Delegates.ProgramUniformMatrix4x2dv glProgramUniformMatrix4x2dv;
      internal static GL.Delegates.ProgramUniformMatrix4x2dvEXT glProgramUniformMatrix4x2dvEXT;
      internal static GL.Delegates.ProgramUniformMatrix4x2fv glProgramUniformMatrix4x2fv;
      internal static GL.Delegates.ProgramUniformMatrix4x2fvEXT glProgramUniformMatrix4x2fvEXT;
      internal static GL.Delegates.ProgramUniformMatrix4x3dv glProgramUniformMatrix4x3dv;
      internal static GL.Delegates.ProgramUniformMatrix4x3dvEXT glProgramUniformMatrix4x3dvEXT;
      internal static GL.Delegates.ProgramUniformMatrix4x3fv glProgramUniformMatrix4x3fv;
      internal static GL.Delegates.ProgramUniformMatrix4x3fvEXT glProgramUniformMatrix4x3fvEXT;
      internal static GL.Delegates.ProgramUniformui64NV glProgramUniformui64NV;
      internal static GL.Delegates.ProgramUniformui64vNV glProgramUniformui64vNV;
      internal static GL.Delegates.ProgramVertexLimitNV glProgramVertexLimitNV;
      internal static GL.Delegates.ProvokingVertex glProvokingVertex;
      internal static GL.Delegates.ProvokingVertexEXT glProvokingVertexEXT;
      internal static GL.Delegates.PushAttrib glPushAttrib;
      internal static GL.Delegates.PushClientAttrib glPushClientAttrib;
      internal static GL.Delegates.PushClientAttribDefaultEXT glPushClientAttribDefaultEXT;
      internal static GL.Delegates.PushMatrix glPushMatrix;
      internal static GL.Delegates.PushName glPushName;
      internal static GL.Delegates.QueryCounter glQueryCounter;
      internal static GL.Delegates.RasterPos2d glRasterPos2d;
      internal static GL.Delegates.RasterPos2dv glRasterPos2dv;
      internal static GL.Delegates.RasterPos2f glRasterPos2f;
      internal static GL.Delegates.RasterPos2fv glRasterPos2fv;
      internal static GL.Delegates.RasterPos2i glRasterPos2i;
      internal static GL.Delegates.RasterPos2iv glRasterPos2iv;
      internal static GL.Delegates.RasterPos2s glRasterPos2s;
      internal static GL.Delegates.RasterPos2sv glRasterPos2sv;
      internal static GL.Delegates.RasterPos3d glRasterPos3d;
      internal static GL.Delegates.RasterPos3dv glRasterPos3dv;
      internal static GL.Delegates.RasterPos3f glRasterPos3f;
      internal static GL.Delegates.RasterPos3fv glRasterPos3fv;
      internal static GL.Delegates.RasterPos3i glRasterPos3i;
      internal static GL.Delegates.RasterPos3iv glRasterPos3iv;
      internal static GL.Delegates.RasterPos3s glRasterPos3s;
      internal static GL.Delegates.RasterPos3sv glRasterPos3sv;
      internal static GL.Delegates.RasterPos4d glRasterPos4d;
      internal static GL.Delegates.RasterPos4dv glRasterPos4dv;
      internal static GL.Delegates.RasterPos4f glRasterPos4f;
      internal static GL.Delegates.RasterPos4fv glRasterPos4fv;
      internal static GL.Delegates.RasterPos4i glRasterPos4i;
      internal static GL.Delegates.RasterPos4iv glRasterPos4iv;
      internal static GL.Delegates.RasterPos4s glRasterPos4s;
      internal static GL.Delegates.RasterPos4sv glRasterPos4sv;
      internal static GL.Delegates.ReadBuffer glReadBuffer;
      internal static GL.Delegates.ReadInstrumentsSGIX glReadInstrumentsSGIX;
      internal static GL.Delegates.ReadnPixelsARB glReadnPixelsARB;
      internal static GL.Delegates.ReadPixels glReadPixels;
      internal static GL.Delegates.Rectd glRectd;
      internal static GL.Delegates.Rectdv glRectdv;
      internal static GL.Delegates.Rectf glRectf;
      internal static GL.Delegates.Rectfv glRectfv;
      internal static GL.Delegates.Recti glRecti;
      internal static GL.Delegates.Rectiv glRectiv;
      internal static GL.Delegates.Rects glRects;
      internal static GL.Delegates.Rectsv glRectsv;
      internal static GL.Delegates.ReferencePlaneSGIX glReferencePlaneSGIX;
      internal static GL.Delegates.ReleaseShaderCompiler glReleaseShaderCompiler;
      internal static GL.Delegates.RenderbufferStorage glRenderbufferStorage;
      internal static GL.Delegates.RenderbufferStorageEXT glRenderbufferStorageEXT;
      internal static GL.Delegates.RenderbufferStorageMultisample glRenderbufferStorageMultisample;
      internal static GL.Delegates.RenderbufferStorageMultisampleCoverageNV glRenderbufferStorageMultisampleCoverageNV;
      internal static GL.Delegates.RenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT;
      internal static GL.Delegates.RenderMode glRenderMode;
      internal static GL.Delegates.ReplacementCodePointerSUN glReplacementCodePointerSUN;
      internal static GL.Delegates.ReplacementCodeubSUN glReplacementCodeubSUN;
      internal static GL.Delegates.ReplacementCodeubvSUN glReplacementCodeubvSUN;
      internal static GL.Delegates.ReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN;
      internal static GL.Delegates.ReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN;
      internal static GL.Delegates.ReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN;
      internal static GL.Delegates.ReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
      internal static GL.Delegates.ReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN;
      internal static GL.Delegates.ReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN;
      internal static GL.Delegates.ReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN;
      internal static GL.Delegates.ReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN;
      internal static GL.Delegates.ReplacementCodeuiSUN glReplacementCodeuiSUN;
      internal static GL.Delegates.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
      internal static GL.Delegates.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
      internal static GL.Delegates.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
      internal static GL.Delegates.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
      internal static GL.Delegates.ReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN;
      internal static GL.Delegates.ReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN;
      internal static GL.Delegates.ReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN;
      internal static GL.Delegates.ReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN;
      internal static GL.Delegates.ReplacementCodeuivSUN glReplacementCodeuivSUN;
      internal static GL.Delegates.ReplacementCodeusSUN glReplacementCodeusSUN;
      internal static GL.Delegates.ReplacementCodeusvSUN glReplacementCodeusvSUN;
      internal static GL.Delegates.RequestResidentProgramsNV glRequestResidentProgramsNV;
      internal static GL.Delegates.ResetHistogram glResetHistogram;
      internal static GL.Delegates.ResetHistogramEXT glResetHistogramEXT;
      internal static GL.Delegates.ResetMinmax glResetMinmax;
      internal static GL.Delegates.ResetMinmaxEXT glResetMinmaxEXT;
      internal static GL.Delegates.ResizeBuffersMESA glResizeBuffersMESA;
      internal static GL.Delegates.ResumeTransformFeedback glResumeTransformFeedback;
      internal static GL.Delegates.ResumeTransformFeedbackNV glResumeTransformFeedbackNV;
      internal static GL.Delegates.Rotated glRotated;
      internal static GL.Delegates.Rotatef glRotatef;
      internal static GL.Delegates.SampleCoverage glSampleCoverage;
      internal static GL.Delegates.SampleCoverageARB glSampleCoverageARB;
      internal static GL.Delegates.SampleMapATI glSampleMapATI;
      internal static GL.Delegates.SampleMaskEXT glSampleMaskEXT;
      internal static GL.Delegates.SampleMaski glSampleMaski;
      internal static GL.Delegates.SampleMaskIndexedNV glSampleMaskIndexedNV;
      internal static GL.Delegates.SampleMaskSGIS glSampleMaskSGIS;
      internal static GL.Delegates.SamplePatternEXT glSamplePatternEXT;
      internal static GL.Delegates.SamplePatternSGIS glSamplePatternSGIS;
      internal static GL.Delegates.SamplerParameterf glSamplerParameterf;
      internal static GL.Delegates.SamplerParameterfv glSamplerParameterfv;
      internal static GL.Delegates.SamplerParameteri glSamplerParameteri;
      internal static GL.Delegates.SamplerParameterIiv glSamplerParameterIiv;
      internal static GL.Delegates.SamplerParameterIuiv glSamplerParameterIuiv;
      internal static GL.Delegates.SamplerParameteriv glSamplerParameteriv;
      internal static GL.Delegates.Scaled glScaled;
      internal static GL.Delegates.Scalef glScalef;
      internal static GL.Delegates.Scissor glScissor;
      internal static GL.Delegates.ScissorArrayv glScissorArrayv;
      internal static GL.Delegates.ScissorIndexed glScissorIndexed;
      internal static GL.Delegates.ScissorIndexedv glScissorIndexedv;
      internal static GL.Delegates.SecondaryColor3b glSecondaryColor3b;
      internal static GL.Delegates.SecondaryColor3bEXT glSecondaryColor3bEXT;
      internal static GL.Delegates.SecondaryColor3bv glSecondaryColor3bv;
      internal static GL.Delegates.SecondaryColor3bvEXT glSecondaryColor3bvEXT;
      internal static GL.Delegates.SecondaryColor3d glSecondaryColor3d;
      internal static GL.Delegates.SecondaryColor3dEXT glSecondaryColor3dEXT;
      internal static GL.Delegates.SecondaryColor3dv glSecondaryColor3dv;
      internal static GL.Delegates.SecondaryColor3dvEXT glSecondaryColor3dvEXT;
      internal static GL.Delegates.SecondaryColor3f glSecondaryColor3f;
      internal static GL.Delegates.SecondaryColor3fEXT glSecondaryColor3fEXT;
      internal static GL.Delegates.SecondaryColor3fv glSecondaryColor3fv;
      internal static GL.Delegates.SecondaryColor3fvEXT glSecondaryColor3fvEXT;
      internal static GL.Delegates.SecondaryColor3hNV glSecondaryColor3hNV;
      internal static GL.Delegates.SecondaryColor3hvNV glSecondaryColor3hvNV;
      internal static GL.Delegates.SecondaryColor3i glSecondaryColor3i;
      internal static GL.Delegates.SecondaryColor3iEXT glSecondaryColor3iEXT;
      internal static GL.Delegates.SecondaryColor3iv glSecondaryColor3iv;
      internal static GL.Delegates.SecondaryColor3ivEXT glSecondaryColor3ivEXT;
      internal static GL.Delegates.SecondaryColor3s glSecondaryColor3s;
      internal static GL.Delegates.SecondaryColor3sEXT glSecondaryColor3sEXT;
      internal static GL.Delegates.SecondaryColor3sv glSecondaryColor3sv;
      internal static GL.Delegates.SecondaryColor3svEXT glSecondaryColor3svEXT;
      internal static GL.Delegates.SecondaryColor3ub glSecondaryColor3ub;
      internal static GL.Delegates.SecondaryColor3ubEXT glSecondaryColor3ubEXT;
      internal static GL.Delegates.SecondaryColor3ubv glSecondaryColor3ubv;
      internal static GL.Delegates.SecondaryColor3ubvEXT glSecondaryColor3ubvEXT;
      internal static GL.Delegates.SecondaryColor3ui glSecondaryColor3ui;
      internal static GL.Delegates.SecondaryColor3uiEXT glSecondaryColor3uiEXT;
      internal static GL.Delegates.SecondaryColor3uiv glSecondaryColor3uiv;
      internal static GL.Delegates.SecondaryColor3uivEXT glSecondaryColor3uivEXT;
      internal static GL.Delegates.SecondaryColor3us glSecondaryColor3us;
      internal static GL.Delegates.SecondaryColor3usEXT glSecondaryColor3usEXT;
      internal static GL.Delegates.SecondaryColor3usv glSecondaryColor3usv;
      internal static GL.Delegates.SecondaryColor3usvEXT glSecondaryColor3usvEXT;
      internal static GL.Delegates.SecondaryColorFormatNV glSecondaryColorFormatNV;
      internal static GL.Delegates.SecondaryColorP3ui glSecondaryColorP3ui;
      internal static GL.Delegates.SecondaryColorP3uiv glSecondaryColorP3uiv;
      internal static GL.Delegates.SecondaryColorPointer glSecondaryColorPointer;
      internal static GL.Delegates.SecondaryColorPointerEXT glSecondaryColorPointerEXT;
      internal static GL.Delegates.SecondaryColorPointerListIBM glSecondaryColorPointerListIBM;
      internal static GL.Delegates.SelectBuffer glSelectBuffer;
      internal static GL.Delegates.SelectPerfMonitorCountersAMD glSelectPerfMonitorCountersAMD;
      internal static GL.Delegates.SeparableFilter2D glSeparableFilter2D;
      internal static GL.Delegates.SeparableFilter2DEXT glSeparableFilter2DEXT;
      internal static GL.Delegates.SetFenceAPPLE glSetFenceAPPLE;
      internal static GL.Delegates.SetFenceNV glSetFenceNV;
      internal static GL.Delegates.SetFragmentShaderConstantATI glSetFragmentShaderConstantATI;
      internal static GL.Delegates.SetInvariantEXT glSetInvariantEXT;
      internal static GL.Delegates.SetLocalConstantEXT glSetLocalConstantEXT;
      internal static GL.Delegates.SetMultisamplefvAMD glSetMultisamplefvAMD;
      internal static GL.Delegates.ShadeModel glShadeModel;
      internal static GL.Delegates.ShaderBinary glShaderBinary;
      internal static GL.Delegates.ShaderOp1EXT glShaderOp1EXT;
      internal static GL.Delegates.ShaderOp2EXT glShaderOp2EXT;
      internal static GL.Delegates.ShaderOp3EXT glShaderOp3EXT;
      internal static GL.Delegates.ShaderSource glShaderSource;
      internal static GL.Delegates.ShaderSourceARB glShaderSourceARB;
      internal static GL.Delegates.SharpenTexFuncSGIS glSharpenTexFuncSGIS;
      internal static GL.Delegates.SpriteParameterfSGIX glSpriteParameterfSGIX;
      internal static GL.Delegates.SpriteParameterfvSGIX glSpriteParameterfvSGIX;
      internal static GL.Delegates.SpriteParameteriSGIX glSpriteParameteriSGIX;
      internal static GL.Delegates.SpriteParameterivSGIX glSpriteParameterivSGIX;
      internal static GL.Delegates.StartInstrumentsSGIX glStartInstrumentsSGIX;
      internal static GL.Delegates.StencilClearTagEXT glStencilClearTagEXT;
      internal static GL.Delegates.StencilFunc glStencilFunc;
      internal static GL.Delegates.StencilFuncSeparate glStencilFuncSeparate;
      internal static GL.Delegates.StencilFuncSeparateATI glStencilFuncSeparateATI;
      internal static GL.Delegates.StencilMask glStencilMask;
      internal static GL.Delegates.StencilMaskSeparate glStencilMaskSeparate;
      internal static GL.Delegates.StencilOp glStencilOp;
      internal static GL.Delegates.StencilOpSeparate glStencilOpSeparate;
      internal static GL.Delegates.StencilOpSeparateATI glStencilOpSeparateATI;
      internal static GL.Delegates.StopInstrumentsSGIX glStopInstrumentsSGIX;
      internal static GL.Delegates.StringMarkerGREMEDY glStringMarkerGREMEDY;
      internal static GL.Delegates.SwizzleEXT glSwizzleEXT;
      internal static GL.Delegates.TagSampleBufferSGIX glTagSampleBufferSGIX;
      internal static GL.Delegates.Tangent3bEXT glTangent3bEXT;
      internal static GL.Delegates.Tangent3bvEXT glTangent3bvEXT;
      internal static GL.Delegates.Tangent3dEXT glTangent3dEXT;
      internal static GL.Delegates.Tangent3dvEXT glTangent3dvEXT;
      internal static GL.Delegates.Tangent3fEXT glTangent3fEXT;
      internal static GL.Delegates.Tangent3fvEXT glTangent3fvEXT;
      internal static GL.Delegates.Tangent3iEXT glTangent3iEXT;
      internal static GL.Delegates.Tangent3ivEXT glTangent3ivEXT;
      internal static GL.Delegates.Tangent3sEXT glTangent3sEXT;
      internal static GL.Delegates.Tangent3svEXT glTangent3svEXT;
      internal static GL.Delegates.TangentPointerEXT glTangentPointerEXT;
      internal static GL.Delegates.TbufferMask3DFX glTbufferMask3DFX;
      internal static GL.Delegates.TessellationFactorAMD glTessellationFactorAMD;
      internal static GL.Delegates.TessellationModeAMD glTessellationModeAMD;
      internal static GL.Delegates.TestFenceAPPLE glTestFenceAPPLE;
      internal static GL.Delegates.TestFenceNV glTestFenceNV;
      internal static GL.Delegates.TestObjectAPPLE glTestObjectAPPLE;
      internal static GL.Delegates.TexBuffer glTexBuffer;
      internal static GL.Delegates.TexBufferARB glTexBufferARB;
      internal static GL.Delegates.TexBufferEXT glTexBufferEXT;
      internal static GL.Delegates.TexBumpParameterfvATI glTexBumpParameterfvATI;
      internal static GL.Delegates.TexBumpParameterivATI glTexBumpParameterivATI;
      internal static GL.Delegates.TexCoord1d glTexCoord1d;
      internal static GL.Delegates.TexCoord1dv glTexCoord1dv;
      internal static GL.Delegates.TexCoord1f glTexCoord1f;
      internal static GL.Delegates.TexCoord1fv glTexCoord1fv;
      internal static GL.Delegates.TexCoord1hNV glTexCoord1hNV;
      internal static GL.Delegates.TexCoord1hvNV glTexCoord1hvNV;
      internal static GL.Delegates.TexCoord1i glTexCoord1i;
      internal static GL.Delegates.TexCoord1iv glTexCoord1iv;
      internal static GL.Delegates.TexCoord1s glTexCoord1s;
      internal static GL.Delegates.TexCoord1sv glTexCoord1sv;
      internal static GL.Delegates.TexCoord2d glTexCoord2d;
      internal static GL.Delegates.TexCoord2dv glTexCoord2dv;
      internal static GL.Delegates.TexCoord2f glTexCoord2f;
      internal static GL.Delegates.TexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN;
      internal static GL.Delegates.TexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN;
      internal static GL.Delegates.TexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN;
      internal static GL.Delegates.TexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN;
      internal static GL.Delegates.TexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN;
      internal static GL.Delegates.TexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN;
      internal static GL.Delegates.TexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN;
      internal static GL.Delegates.TexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN;
      internal static GL.Delegates.TexCoord2fv glTexCoord2fv;
      internal static GL.Delegates.TexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN;
      internal static GL.Delegates.TexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN;
      internal static GL.Delegates.TexCoord2hNV glTexCoord2hNV;
      internal static GL.Delegates.TexCoord2hvNV glTexCoord2hvNV;
      internal static GL.Delegates.TexCoord2i glTexCoord2i;
      internal static GL.Delegates.TexCoord2iv glTexCoord2iv;
      internal static GL.Delegates.TexCoord2s glTexCoord2s;
      internal static GL.Delegates.TexCoord2sv glTexCoord2sv;
      internal static GL.Delegates.TexCoord3d glTexCoord3d;
      internal static GL.Delegates.TexCoord3dv glTexCoord3dv;
      internal static GL.Delegates.TexCoord3f glTexCoord3f;
      internal static GL.Delegates.TexCoord3fv glTexCoord3fv;
      internal static GL.Delegates.TexCoord3hNV glTexCoord3hNV;
      internal static GL.Delegates.TexCoord3hvNV glTexCoord3hvNV;
      internal static GL.Delegates.TexCoord3i glTexCoord3i;
      internal static GL.Delegates.TexCoord3iv glTexCoord3iv;
      internal static GL.Delegates.TexCoord3s glTexCoord3s;
      internal static GL.Delegates.TexCoord3sv glTexCoord3sv;
      internal static GL.Delegates.TexCoord4d glTexCoord4d;
      internal static GL.Delegates.TexCoord4dv glTexCoord4dv;
      internal static GL.Delegates.TexCoord4f glTexCoord4f;
      internal static GL.Delegates.TexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN;
      internal static GL.Delegates.TexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN;
      internal static GL.Delegates.TexCoord4fv glTexCoord4fv;
      internal static GL.Delegates.TexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN;
      internal static GL.Delegates.TexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN;
      internal static GL.Delegates.TexCoord4hNV glTexCoord4hNV;
      internal static GL.Delegates.TexCoord4hvNV glTexCoord4hvNV;
      internal static GL.Delegates.TexCoord4i glTexCoord4i;
      internal static GL.Delegates.TexCoord4iv glTexCoord4iv;
      internal static GL.Delegates.TexCoord4s glTexCoord4s;
      internal static GL.Delegates.TexCoord4sv glTexCoord4sv;
      internal static GL.Delegates.TexCoordFormatNV glTexCoordFormatNV;
      internal static GL.Delegates.TexCoordP1ui glTexCoordP1ui;
      internal static GL.Delegates.TexCoordP1uiv glTexCoordP1uiv;
      internal static GL.Delegates.TexCoordP2ui glTexCoordP2ui;
      internal static GL.Delegates.TexCoordP2uiv glTexCoordP2uiv;
      internal static GL.Delegates.TexCoordP3ui glTexCoordP3ui;
      internal static GL.Delegates.TexCoordP3uiv glTexCoordP3uiv;
      internal static GL.Delegates.TexCoordP4ui glTexCoordP4ui;
      internal static GL.Delegates.TexCoordP4uiv glTexCoordP4uiv;
      internal static GL.Delegates.TexCoordPointer glTexCoordPointer;
      internal static GL.Delegates.TexCoordPointerEXT glTexCoordPointerEXT;
      internal static GL.Delegates.TexCoordPointerListIBM glTexCoordPointerListIBM;
      internal static GL.Delegates.TexCoordPointervINTEL glTexCoordPointervINTEL;
      internal static GL.Delegates.TexEnvf glTexEnvf;
      internal static GL.Delegates.TexEnvfv glTexEnvfv;
      internal static GL.Delegates.TexEnvi glTexEnvi;
      internal static GL.Delegates.TexEnviv glTexEnviv;
      internal static GL.Delegates.TexFilterFuncSGIS glTexFilterFuncSGIS;
      internal static GL.Delegates.TexGend glTexGend;
      internal static GL.Delegates.TexGendv glTexGendv;
      internal static GL.Delegates.TexGenf glTexGenf;
      internal static GL.Delegates.TexGenfv glTexGenfv;
      internal static GL.Delegates.TexGeni glTexGeni;
      internal static GL.Delegates.TexGeniv glTexGeniv;
      internal static GL.Delegates.TexImage1D glTexImage1D;
      internal static GL.Delegates.TexImage2D glTexImage2D;
      internal static GL.Delegates.TexImage2DMultisample glTexImage2DMultisample;
      internal static GL.Delegates.TexImage2DMultisampleCoverageNV glTexImage2DMultisampleCoverageNV;
      internal static GL.Delegates.TexImage3D glTexImage3D;
      internal static GL.Delegates.TexImage3DEXT glTexImage3DEXT;
      internal static GL.Delegates.TexImage3DMultisample glTexImage3DMultisample;
      internal static GL.Delegates.TexImage3DMultisampleCoverageNV glTexImage3DMultisampleCoverageNV;
      internal static GL.Delegates.TexImage4DSGIS glTexImage4DSGIS;
      internal static GL.Delegates.TexParameterf glTexParameterf;
      internal static GL.Delegates.TexParameterfv glTexParameterfv;
      internal static GL.Delegates.TexParameteri glTexParameteri;
      internal static GL.Delegates.TexParameterIiv glTexParameterIiv;
      internal static GL.Delegates.TexParameterIivEXT glTexParameterIivEXT;
      internal static GL.Delegates.TexParameterIuiv glTexParameterIuiv;
      internal static GL.Delegates.TexParameterIuivEXT glTexParameterIuivEXT;
      internal static GL.Delegates.TexParameteriv glTexParameteriv;
      internal static GL.Delegates.TexRenderbufferNV glTexRenderbufferNV;
      internal static GL.Delegates.TexSubImage1D glTexSubImage1D;
      internal static GL.Delegates.TexSubImage1DEXT glTexSubImage1DEXT;
      internal static GL.Delegates.TexSubImage2D glTexSubImage2D;
      internal static GL.Delegates.TexSubImage2DEXT glTexSubImage2DEXT;
      internal static GL.Delegates.TexSubImage3D glTexSubImage3D;
      internal static GL.Delegates.TexSubImage3DEXT glTexSubImage3DEXT;
      internal static GL.Delegates.TexSubImage4DSGIS glTexSubImage4DSGIS;
      internal static GL.Delegates.TextureBarrierNV glTextureBarrierNV;
      internal static GL.Delegates.TextureBufferEXT glTextureBufferEXT;
      internal static GL.Delegates.TextureColorMaskSGIS glTextureColorMaskSGIS;
      internal static GL.Delegates.TextureImage1DEXT glTextureImage1DEXT;
      internal static GL.Delegates.TextureImage2DEXT glTextureImage2DEXT;
      internal static GL.Delegates.TextureImage2DMultisampleCoverageNV glTextureImage2DMultisampleCoverageNV;
      internal static GL.Delegates.TextureImage2DMultisampleNV glTextureImage2DMultisampleNV;
      internal static GL.Delegates.TextureImage3DEXT glTextureImage3DEXT;
      internal static GL.Delegates.TextureImage3DMultisampleCoverageNV glTextureImage3DMultisampleCoverageNV;
      internal static GL.Delegates.TextureImage3DMultisampleNV glTextureImage3DMultisampleNV;
      internal static GL.Delegates.TextureLightEXT glTextureLightEXT;
      internal static GL.Delegates.TextureMaterialEXT glTextureMaterialEXT;
      internal static GL.Delegates.TextureNormalEXT glTextureNormalEXT;
      internal static GL.Delegates.TextureParameterfEXT glTextureParameterfEXT;
      internal static GL.Delegates.TextureParameterfvEXT glTextureParameterfvEXT;
      internal static GL.Delegates.TextureParameteriEXT glTextureParameteriEXT;
      internal static GL.Delegates.TextureParameterIivEXT glTextureParameterIivEXT;
      internal static GL.Delegates.TextureParameterIuivEXT glTextureParameterIuivEXT;
      internal static GL.Delegates.TextureParameterivEXT glTextureParameterivEXT;
      internal static GL.Delegates.TextureRangeAPPLE glTextureRangeAPPLE;
      internal static GL.Delegates.TextureRenderbufferEXT glTextureRenderbufferEXT;
      internal static GL.Delegates.TextureSubImage1DEXT glTextureSubImage1DEXT;
      internal static GL.Delegates.TextureSubImage2DEXT glTextureSubImage2DEXT;
      internal static GL.Delegates.TextureSubImage3DEXT glTextureSubImage3DEXT;
      internal static GL.Delegates.TrackMatrixNV glTrackMatrixNV;
      internal static GL.Delegates.TransformFeedbackAttribsNV glTransformFeedbackAttribsNV;
      internal static GL.Delegates.TransformFeedbackStreamAttribsNV glTransformFeedbackStreamAttribsNV;
      internal static GL.Delegates.TransformFeedbackVaryings glTransformFeedbackVaryings;
      internal static GL.Delegates.TransformFeedbackVaryingsEXT glTransformFeedbackVaryingsEXT;
      internal static GL.Delegates.TransformFeedbackVaryingsNV glTransformFeedbackVaryingsNV;
      internal static GL.Delegates.Translated glTranslated;
      internal static GL.Delegates.Translatef glTranslatef;
      internal static GL.Delegates.Uniform1d glUniform1d;
      internal static GL.Delegates.Uniform1dv glUniform1dv;
      internal static GL.Delegates.Uniform1f glUniform1f;
      internal static GL.Delegates.Uniform1fARB glUniform1fARB;
      internal static GL.Delegates.Uniform1fv glUniform1fv;
      internal static GL.Delegates.Uniform1fvARB glUniform1fvARB;
      internal static GL.Delegates.Uniform1i glUniform1i;
      internal static GL.Delegates.Uniform1i64NV glUniform1i64NV;
      internal static GL.Delegates.Uniform1i64vNV glUniform1i64vNV;
      internal static GL.Delegates.Uniform1iARB glUniform1iARB;
      internal static GL.Delegates.Uniform1iv glUniform1iv;
      internal static GL.Delegates.Uniform1ivARB glUniform1ivARB;
      internal static GL.Delegates.Uniform1ui glUniform1ui;
      internal static GL.Delegates.Uniform1ui64NV glUniform1ui64NV;
      internal static GL.Delegates.Uniform1ui64vNV glUniform1ui64vNV;
      internal static GL.Delegates.Uniform1uiEXT glUniform1uiEXT;
      internal static GL.Delegates.Uniform1uiv glUniform1uiv;
      internal static GL.Delegates.Uniform1uivEXT glUniform1uivEXT;
      internal static GL.Delegates.Uniform2d glUniform2d;
      internal static GL.Delegates.Uniform2dv glUniform2dv;
      internal static GL.Delegates.Uniform2f glUniform2f;
      internal static GL.Delegates.Uniform2fARB glUniform2fARB;
      internal static GL.Delegates.Uniform2fv glUniform2fv;
      internal static GL.Delegates.Uniform2fvARB glUniform2fvARB;
      internal static GL.Delegates.Uniform2i glUniform2i;
      internal static GL.Delegates.Uniform2i64NV glUniform2i64NV;
      internal static GL.Delegates.Uniform2i64vNV glUniform2i64vNV;
      internal static GL.Delegates.Uniform2iARB glUniform2iARB;
      internal static GL.Delegates.Uniform2iv glUniform2iv;
      internal static GL.Delegates.Uniform2ivARB glUniform2ivARB;
      internal static GL.Delegates.Uniform2ui glUniform2ui;
      internal static GL.Delegates.Uniform2ui64NV glUniform2ui64NV;
      internal static GL.Delegates.Uniform2ui64vNV glUniform2ui64vNV;
      internal static GL.Delegates.Uniform2uiEXT glUniform2uiEXT;
      internal static GL.Delegates.Uniform2uiv glUniform2uiv;
      internal static GL.Delegates.Uniform2uivEXT glUniform2uivEXT;
      internal static GL.Delegates.Uniform3d glUniform3d;
      internal static GL.Delegates.Uniform3dv glUniform3dv;
      internal static GL.Delegates.Uniform3f glUniform3f;
      internal static GL.Delegates.Uniform3fARB glUniform3fARB;
      internal static GL.Delegates.Uniform3fv glUniform3fv;
      internal static GL.Delegates.Uniform3fvARB glUniform3fvARB;
      internal static GL.Delegates.Uniform3i glUniform3i;
      internal static GL.Delegates.Uniform3i64NV glUniform3i64NV;
      internal static GL.Delegates.Uniform3i64vNV glUniform3i64vNV;
      internal static GL.Delegates.Uniform3iARB glUniform3iARB;
      internal static GL.Delegates.Uniform3iv glUniform3iv;
      internal static GL.Delegates.Uniform3ivARB glUniform3ivARB;
      internal static GL.Delegates.Uniform3ui glUniform3ui;
      internal static GL.Delegates.Uniform3ui64NV glUniform3ui64NV;
      internal static GL.Delegates.Uniform3ui64vNV glUniform3ui64vNV;
      internal static GL.Delegates.Uniform3uiEXT glUniform3uiEXT;
      internal static GL.Delegates.Uniform3uiv glUniform3uiv;
      internal static GL.Delegates.Uniform3uivEXT glUniform3uivEXT;
      internal static GL.Delegates.Uniform4d glUniform4d;
      internal static GL.Delegates.Uniform4dv glUniform4dv;
      internal static GL.Delegates.Uniform4f glUniform4f;
      internal static GL.Delegates.Uniform4fARB glUniform4fARB;
      internal static GL.Delegates.Uniform4fv glUniform4fv;
      internal static GL.Delegates.Uniform4fvARB glUniform4fvARB;
      internal static GL.Delegates.Uniform4i glUniform4i;
      internal static GL.Delegates.Uniform4i64NV glUniform4i64NV;
      internal static GL.Delegates.Uniform4i64vNV glUniform4i64vNV;
      internal static GL.Delegates.Uniform4iARB glUniform4iARB;
      internal static GL.Delegates.Uniform4iv glUniform4iv;
      internal static GL.Delegates.Uniform4ivARB glUniform4ivARB;
      internal static GL.Delegates.Uniform4ui glUniform4ui;
      internal static GL.Delegates.Uniform4ui64NV glUniform4ui64NV;
      internal static GL.Delegates.Uniform4ui64vNV glUniform4ui64vNV;
      internal static GL.Delegates.Uniform4uiEXT glUniform4uiEXT;
      internal static GL.Delegates.Uniform4uiv glUniform4uiv;
      internal static GL.Delegates.Uniform4uivEXT glUniform4uivEXT;
      internal static GL.Delegates.UniformBlockBinding glUniformBlockBinding;
      internal static GL.Delegates.UniformBufferEXT glUniformBufferEXT;
      internal static GL.Delegates.UniformMatrix2dv glUniformMatrix2dv;
      internal static GL.Delegates.UniformMatrix2fv glUniformMatrix2fv;
      internal static GL.Delegates.UniformMatrix2fvARB glUniformMatrix2fvARB;
      internal static GL.Delegates.UniformMatrix2x3dv glUniformMatrix2x3dv;
      internal static GL.Delegates.UniformMatrix2x3fv glUniformMatrix2x3fv;
      internal static GL.Delegates.UniformMatrix2x4dv glUniformMatrix2x4dv;
      internal static GL.Delegates.UniformMatrix2x4fv glUniformMatrix2x4fv;
      internal static GL.Delegates.UniformMatrix3dv glUniformMatrix3dv;
      internal static GL.Delegates.UniformMatrix3fv glUniformMatrix3fv;
      internal static GL.Delegates.UniformMatrix3fvARB glUniformMatrix3fvARB;
      internal static GL.Delegates.UniformMatrix3x2dv glUniformMatrix3x2dv;
      internal static GL.Delegates.UniformMatrix3x2fv glUniformMatrix3x2fv;
      internal static GL.Delegates.UniformMatrix3x4dv glUniformMatrix3x4dv;
      internal static GL.Delegates.UniformMatrix3x4fv glUniformMatrix3x4fv;
      internal static GL.Delegates.UniformMatrix4dv glUniformMatrix4dv;
      internal static GL.Delegates.UniformMatrix4fv glUniformMatrix4fv;
      internal static GL.Delegates.UniformMatrix4fvARB glUniformMatrix4fvARB;
      internal static GL.Delegates.UniformMatrix4x2dv glUniformMatrix4x2dv;
      internal static GL.Delegates.UniformMatrix4x2fv glUniformMatrix4x2fv;
      internal static GL.Delegates.UniformMatrix4x3dv glUniformMatrix4x3dv;
      internal static GL.Delegates.UniformMatrix4x3fv glUniformMatrix4x3fv;
      internal static GL.Delegates.UniformSubroutinesuiv glUniformSubroutinesuiv;
      internal static GL.Delegates.Uniformui64NV glUniformui64NV;
      internal static GL.Delegates.Uniformui64vNV glUniformui64vNV;
      internal static GL.Delegates.UnlockArraysEXT glUnlockArraysEXT;
      internal static GL.Delegates.UnmapBuffer glUnmapBuffer;
      internal static GL.Delegates.UnmapBufferARB glUnmapBufferARB;
      internal static GL.Delegates.UnmapNamedBufferEXT glUnmapNamedBufferEXT;
      internal static GL.Delegates.UnmapObjectBufferATI glUnmapObjectBufferATI;
      internal static GL.Delegates.UpdateObjectBufferATI glUpdateObjectBufferATI;
      internal static GL.Delegates.UseProgram glUseProgram;
      internal static GL.Delegates.UseProgramObjectARB glUseProgramObjectARB;
      internal static GL.Delegates.UseProgramStages glUseProgramStages;
      internal static GL.Delegates.UseShaderProgramEXT glUseShaderProgramEXT;
      internal static GL.Delegates.ValidateProgram glValidateProgram;
      internal static GL.Delegates.ValidateProgramARB glValidateProgramARB;
      internal static GL.Delegates.ValidateProgramPipeline glValidateProgramPipeline;
      internal static GL.Delegates.VariantArrayObjectATI glVariantArrayObjectATI;
      internal static GL.Delegates.VariantbvEXT glVariantbvEXT;
      internal static GL.Delegates.VariantdvEXT glVariantdvEXT;
      internal static GL.Delegates.VariantfvEXT glVariantfvEXT;
      internal static GL.Delegates.VariantivEXT glVariantivEXT;
      internal static GL.Delegates.VariantPointerEXT glVariantPointerEXT;
      internal static GL.Delegates.VariantsvEXT glVariantsvEXT;
      internal static GL.Delegates.VariantubvEXT glVariantubvEXT;
      internal static GL.Delegates.VariantuivEXT glVariantuivEXT;
      internal static GL.Delegates.VariantusvEXT glVariantusvEXT;
      internal static GL.Delegates.VDPAUFiniNV glVDPAUFiniNV;
      internal static GL.Delegates.VDPAUGetSurfaceivNV glVDPAUGetSurfaceivNV;
      internal static GL.Delegates.VDPAUInitNV glVDPAUInitNV;
      internal static GL.Delegates.VDPAUIsSurfaceNV glVDPAUIsSurfaceNV;
      internal static GL.Delegates.VDPAUMapSurfacesNV glVDPAUMapSurfacesNV;
      internal static GL.Delegates.VDPAURegisterOutputSurfaceNV glVDPAURegisterOutputSurfaceNV;
      internal static GL.Delegates.VDPAURegisterVideoSurfaceNV glVDPAURegisterVideoSurfaceNV;
      internal static GL.Delegates.VDPAUSurfaceAccessNV glVDPAUSurfaceAccessNV;
      internal static GL.Delegates.VDPAUUnmapSurfacesNV glVDPAUUnmapSurfacesNV;
      internal static GL.Delegates.VDPAUUnregisterSurfaceNV glVDPAUUnregisterSurfaceNV;
      internal static GL.Delegates.Vertex2d glVertex2d;
      internal static GL.Delegates.Vertex2dv glVertex2dv;
      internal static GL.Delegates.Vertex2f glVertex2f;
      internal static GL.Delegates.Vertex2fv glVertex2fv;
      internal static GL.Delegates.Vertex2hNV glVertex2hNV;
      internal static GL.Delegates.Vertex2hvNV glVertex2hvNV;
      internal static GL.Delegates.Vertex2i glVertex2i;
      internal static GL.Delegates.Vertex2iv glVertex2iv;
      internal static GL.Delegates.Vertex2s glVertex2s;
      internal static GL.Delegates.Vertex2sv glVertex2sv;
      internal static GL.Delegates.Vertex3d glVertex3d;
      internal static GL.Delegates.Vertex3dv glVertex3dv;
      internal static GL.Delegates.Vertex3f glVertex3f;
      internal static GL.Delegates.Vertex3fv glVertex3fv;
      internal static GL.Delegates.Vertex3hNV glVertex3hNV;
      internal static GL.Delegates.Vertex3hvNV glVertex3hvNV;
      internal static GL.Delegates.Vertex3i glVertex3i;
      internal static GL.Delegates.Vertex3iv glVertex3iv;
      internal static GL.Delegates.Vertex3s glVertex3s;
      internal static GL.Delegates.Vertex3sv glVertex3sv;
      internal static GL.Delegates.Vertex4d glVertex4d;
      internal static GL.Delegates.Vertex4dv glVertex4dv;
      internal static GL.Delegates.Vertex4f glVertex4f;
      internal static GL.Delegates.Vertex4fv glVertex4fv;
      internal static GL.Delegates.Vertex4hNV glVertex4hNV;
      internal static GL.Delegates.Vertex4hvNV glVertex4hvNV;
      internal static GL.Delegates.Vertex4i glVertex4i;
      internal static GL.Delegates.Vertex4iv glVertex4iv;
      internal static GL.Delegates.Vertex4s glVertex4s;
      internal static GL.Delegates.Vertex4sv glVertex4sv;
      internal static GL.Delegates.VertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE;
      internal static GL.Delegates.VertexArrayRangeAPPLE glVertexArrayRangeAPPLE;
      internal static GL.Delegates.VertexArrayRangeNV glVertexArrayRangeNV;
      internal static GL.Delegates.VertexArrayVertexAttribLOffsetEXT glVertexArrayVertexAttribLOffsetEXT;
      internal static GL.Delegates.VertexAttrib1d glVertexAttrib1d;
      internal static GL.Delegates.VertexAttrib1dARB glVertexAttrib1dARB;
      internal static GL.Delegates.VertexAttrib1dNV glVertexAttrib1dNV;
      internal static GL.Delegates.VertexAttrib1dv glVertexAttrib1dv;
      internal static GL.Delegates.VertexAttrib1dvARB glVertexAttrib1dvARB;
      internal static GL.Delegates.VertexAttrib1dvNV glVertexAttrib1dvNV;
      internal static GL.Delegates.VertexAttrib1f glVertexAttrib1f;
      internal static GL.Delegates.VertexAttrib1fARB glVertexAttrib1fARB;
      internal static GL.Delegates.VertexAttrib1fNV glVertexAttrib1fNV;
      internal static GL.Delegates.VertexAttrib1fv glVertexAttrib1fv;
      internal static GL.Delegates.VertexAttrib1fvARB glVertexAttrib1fvARB;
      internal static GL.Delegates.VertexAttrib1fvNV glVertexAttrib1fvNV;
      internal static GL.Delegates.VertexAttrib1hNV glVertexAttrib1hNV;
      internal static GL.Delegates.VertexAttrib1hvNV glVertexAttrib1hvNV;
      internal static GL.Delegates.VertexAttrib1s glVertexAttrib1s;
      internal static GL.Delegates.VertexAttrib1sARB glVertexAttrib1sARB;
      internal static GL.Delegates.VertexAttrib1sNV glVertexAttrib1sNV;
      internal static GL.Delegates.VertexAttrib1sv glVertexAttrib1sv;
      internal static GL.Delegates.VertexAttrib1svARB glVertexAttrib1svARB;
      internal static GL.Delegates.VertexAttrib1svNV glVertexAttrib1svNV;
      internal static GL.Delegates.VertexAttrib2d glVertexAttrib2d;
      internal static GL.Delegates.VertexAttrib2dARB glVertexAttrib2dARB;
      internal static GL.Delegates.VertexAttrib2dNV glVertexAttrib2dNV;
      internal static GL.Delegates.VertexAttrib2dv glVertexAttrib2dv;
      internal static GL.Delegates.VertexAttrib2dvARB glVertexAttrib2dvARB;
      internal static GL.Delegates.VertexAttrib2dvNV glVertexAttrib2dvNV;
      internal static GL.Delegates.VertexAttrib2f glVertexAttrib2f;
      internal static GL.Delegates.VertexAttrib2fARB glVertexAttrib2fARB;
      internal static GL.Delegates.VertexAttrib2fNV glVertexAttrib2fNV;
      internal static GL.Delegates.VertexAttrib2fv glVertexAttrib2fv;
      internal static GL.Delegates.VertexAttrib2fvARB glVertexAttrib2fvARB;
      internal static GL.Delegates.VertexAttrib2fvNV glVertexAttrib2fvNV;
      internal static GL.Delegates.VertexAttrib2hNV glVertexAttrib2hNV;
      internal static GL.Delegates.VertexAttrib2hvNV glVertexAttrib2hvNV;
      internal static GL.Delegates.VertexAttrib2s glVertexAttrib2s;
      internal static GL.Delegates.VertexAttrib2sARB glVertexAttrib2sARB;
      internal static GL.Delegates.VertexAttrib2sNV glVertexAttrib2sNV;
      internal static GL.Delegates.VertexAttrib2sv glVertexAttrib2sv;
      internal static GL.Delegates.VertexAttrib2svARB glVertexAttrib2svARB;
      internal static GL.Delegates.VertexAttrib2svNV glVertexAttrib2svNV;
      internal static GL.Delegates.VertexAttrib3d glVertexAttrib3d;
      internal static GL.Delegates.VertexAttrib3dARB glVertexAttrib3dARB;
      internal static GL.Delegates.VertexAttrib3dNV glVertexAttrib3dNV;
      internal static GL.Delegates.VertexAttrib3dv glVertexAttrib3dv;
      internal static GL.Delegates.VertexAttrib3dvARB glVertexAttrib3dvARB;
      internal static GL.Delegates.VertexAttrib3dvNV glVertexAttrib3dvNV;
      internal static GL.Delegates.VertexAttrib3f glVertexAttrib3f;
      internal static GL.Delegates.VertexAttrib3fARB glVertexAttrib3fARB;
      internal static GL.Delegates.VertexAttrib3fNV glVertexAttrib3fNV;
      internal static GL.Delegates.VertexAttrib3fv glVertexAttrib3fv;
      internal static GL.Delegates.VertexAttrib3fvARB glVertexAttrib3fvARB;
      internal static GL.Delegates.VertexAttrib3fvNV glVertexAttrib3fvNV;
      internal static GL.Delegates.VertexAttrib3hNV glVertexAttrib3hNV;
      internal static GL.Delegates.VertexAttrib3hvNV glVertexAttrib3hvNV;
      internal static GL.Delegates.VertexAttrib3s glVertexAttrib3s;
      internal static GL.Delegates.VertexAttrib3sARB glVertexAttrib3sARB;
      internal static GL.Delegates.VertexAttrib3sNV glVertexAttrib3sNV;
      internal static GL.Delegates.VertexAttrib3sv glVertexAttrib3sv;
      internal static GL.Delegates.VertexAttrib3svARB glVertexAttrib3svARB;
      internal static GL.Delegates.VertexAttrib3svNV glVertexAttrib3svNV;
      internal static GL.Delegates.VertexAttrib4bv glVertexAttrib4bv;
      internal static GL.Delegates.VertexAttrib4bvARB glVertexAttrib4bvARB;
      internal static GL.Delegates.VertexAttrib4d glVertexAttrib4d;
      internal static GL.Delegates.VertexAttrib4dARB glVertexAttrib4dARB;
      internal static GL.Delegates.VertexAttrib4dNV glVertexAttrib4dNV;
      internal static GL.Delegates.VertexAttrib4dv glVertexAttrib4dv;
      internal static GL.Delegates.VertexAttrib4dvARB glVertexAttrib4dvARB;
      internal static GL.Delegates.VertexAttrib4dvNV glVertexAttrib4dvNV;
      internal static GL.Delegates.VertexAttrib4f glVertexAttrib4f;
      internal static GL.Delegates.VertexAttrib4fARB glVertexAttrib4fARB;
      internal static GL.Delegates.VertexAttrib4fNV glVertexAttrib4fNV;
      internal static GL.Delegates.VertexAttrib4fv glVertexAttrib4fv;
      internal static GL.Delegates.VertexAttrib4fvARB glVertexAttrib4fvARB;
      internal static GL.Delegates.VertexAttrib4fvNV glVertexAttrib4fvNV;
      internal static GL.Delegates.VertexAttrib4hNV glVertexAttrib4hNV;
      internal static GL.Delegates.VertexAttrib4hvNV glVertexAttrib4hvNV;
      internal static GL.Delegates.VertexAttrib4iv glVertexAttrib4iv;
      internal static GL.Delegates.VertexAttrib4ivARB glVertexAttrib4ivARB;
      internal static GL.Delegates.VertexAttrib4Nbv glVertexAttrib4Nbv;
      internal static GL.Delegates.VertexAttrib4NbvARB glVertexAttrib4NbvARB;
      internal static GL.Delegates.VertexAttrib4Niv glVertexAttrib4Niv;
      internal static GL.Delegates.VertexAttrib4NivARB glVertexAttrib4NivARB;
      internal static GL.Delegates.VertexAttrib4Nsv glVertexAttrib4Nsv;
      internal static GL.Delegates.VertexAttrib4NsvARB glVertexAttrib4NsvARB;
      internal static GL.Delegates.VertexAttrib4Nub glVertexAttrib4Nub;
      internal static GL.Delegates.VertexAttrib4NubARB glVertexAttrib4NubARB;
      internal static GL.Delegates.VertexAttrib4Nubv glVertexAttrib4Nubv;
      internal static GL.Delegates.VertexAttrib4NubvARB glVertexAttrib4NubvARB;
      internal static GL.Delegates.VertexAttrib4Nuiv glVertexAttrib4Nuiv;
      internal static GL.Delegates.VertexAttrib4NuivARB glVertexAttrib4NuivARB;
      internal static GL.Delegates.VertexAttrib4Nusv glVertexAttrib4Nusv;
      internal static GL.Delegates.VertexAttrib4NusvARB glVertexAttrib4NusvARB;
      internal static GL.Delegates.VertexAttrib4s glVertexAttrib4s;
      internal static GL.Delegates.VertexAttrib4sARB glVertexAttrib4sARB;
      internal static GL.Delegates.VertexAttrib4sNV glVertexAttrib4sNV;
      internal static GL.Delegates.VertexAttrib4sv glVertexAttrib4sv;
      internal static GL.Delegates.VertexAttrib4svARB glVertexAttrib4svARB;
      internal static GL.Delegates.VertexAttrib4svNV glVertexAttrib4svNV;
      internal static GL.Delegates.VertexAttrib4ubNV glVertexAttrib4ubNV;
      internal static GL.Delegates.VertexAttrib4ubv glVertexAttrib4ubv;
      internal static GL.Delegates.VertexAttrib4ubvARB glVertexAttrib4ubvARB;
      internal static GL.Delegates.VertexAttrib4ubvNV glVertexAttrib4ubvNV;
      internal static GL.Delegates.VertexAttrib4uiv glVertexAttrib4uiv;
      internal static GL.Delegates.VertexAttrib4uivARB glVertexAttrib4uivARB;
      internal static GL.Delegates.VertexAttrib4usv glVertexAttrib4usv;
      internal static GL.Delegates.VertexAttrib4usvARB glVertexAttrib4usvARB;
      internal static GL.Delegates.VertexAttribArrayObjectATI glVertexAttribArrayObjectATI;
      internal static GL.Delegates.VertexAttribDivisor glVertexAttribDivisor;
      internal static GL.Delegates.VertexAttribDivisorARB glVertexAttribDivisorARB;
      internal static GL.Delegates.VertexAttribFormatNV glVertexAttribFormatNV;
      internal static GL.Delegates.VertexAttribI1i glVertexAttribI1i;
      internal static GL.Delegates.VertexAttribI1iEXT glVertexAttribI1iEXT;
      internal static GL.Delegates.VertexAttribI1iv glVertexAttribI1iv;
      internal static GL.Delegates.VertexAttribI1ivEXT glVertexAttribI1ivEXT;
      internal static GL.Delegates.VertexAttribI1ui glVertexAttribI1ui;
      internal static GL.Delegates.VertexAttribI1uiEXT glVertexAttribI1uiEXT;
      internal static GL.Delegates.VertexAttribI1uiv glVertexAttribI1uiv;
      internal static GL.Delegates.VertexAttribI1uivEXT glVertexAttribI1uivEXT;
      internal static GL.Delegates.VertexAttribI2i glVertexAttribI2i;
      internal static GL.Delegates.VertexAttribI2iEXT glVertexAttribI2iEXT;
      internal static GL.Delegates.VertexAttribI2iv glVertexAttribI2iv;
      internal static GL.Delegates.VertexAttribI2ivEXT glVertexAttribI2ivEXT;
      internal static GL.Delegates.VertexAttribI2ui glVertexAttribI2ui;
      internal static GL.Delegates.VertexAttribI2uiEXT glVertexAttribI2uiEXT;
      internal static GL.Delegates.VertexAttribI2uiv glVertexAttribI2uiv;
      internal static GL.Delegates.VertexAttribI2uivEXT glVertexAttribI2uivEXT;
      internal static GL.Delegates.VertexAttribI3i glVertexAttribI3i;
      internal static GL.Delegates.VertexAttribI3iEXT glVertexAttribI3iEXT;
      internal static GL.Delegates.VertexAttribI3iv glVertexAttribI3iv;
      internal static GL.Delegates.VertexAttribI3ivEXT glVertexAttribI3ivEXT;
      internal static GL.Delegates.VertexAttribI3ui glVertexAttribI3ui;
      internal static GL.Delegates.VertexAttribI3uiEXT glVertexAttribI3uiEXT;
      internal static GL.Delegates.VertexAttribI3uiv glVertexAttribI3uiv;
      internal static GL.Delegates.VertexAttribI3uivEXT glVertexAttribI3uivEXT;
      internal static GL.Delegates.VertexAttribI4bv glVertexAttribI4bv;
      internal static GL.Delegates.VertexAttribI4bvEXT glVertexAttribI4bvEXT;
      internal static GL.Delegates.VertexAttribI4i glVertexAttribI4i;
      internal static GL.Delegates.VertexAttribI4iEXT glVertexAttribI4iEXT;
      internal static GL.Delegates.VertexAttribI4iv glVertexAttribI4iv;
      internal static GL.Delegates.VertexAttribI4ivEXT glVertexAttribI4ivEXT;
      internal static GL.Delegates.VertexAttribI4sv glVertexAttribI4sv;
      internal static GL.Delegates.VertexAttribI4svEXT glVertexAttribI4svEXT;
      internal static GL.Delegates.VertexAttribI4ubv glVertexAttribI4ubv;
      internal static GL.Delegates.VertexAttribI4ubvEXT glVertexAttribI4ubvEXT;
      internal static GL.Delegates.VertexAttribI4ui glVertexAttribI4ui;
      internal static GL.Delegates.VertexAttribI4uiEXT glVertexAttribI4uiEXT;
      internal static GL.Delegates.VertexAttribI4uiv glVertexAttribI4uiv;
      internal static GL.Delegates.VertexAttribI4uivEXT glVertexAttribI4uivEXT;
      internal static GL.Delegates.VertexAttribI4usv glVertexAttribI4usv;
      internal static GL.Delegates.VertexAttribI4usvEXT glVertexAttribI4usvEXT;
      internal static GL.Delegates.VertexAttribIFormatNV glVertexAttribIFormatNV;
      internal static GL.Delegates.VertexAttribIPointer glVertexAttribIPointer;
      internal static GL.Delegates.VertexAttribIPointerEXT glVertexAttribIPointerEXT;
      internal static GL.Delegates.VertexAttribL1d glVertexAttribL1d;
      internal static GL.Delegates.VertexAttribL1dEXT glVertexAttribL1dEXT;
      internal static GL.Delegates.VertexAttribL1dv glVertexAttribL1dv;
      internal static GL.Delegates.VertexAttribL1dvEXT glVertexAttribL1dvEXT;
      internal static GL.Delegates.VertexAttribL1i64NV glVertexAttribL1i64NV;
      internal static GL.Delegates.VertexAttribL1i64vNV glVertexAttribL1i64vNV;
      internal static GL.Delegates.VertexAttribL1ui64NV glVertexAttribL1ui64NV;
      internal static GL.Delegates.VertexAttribL1ui64vNV glVertexAttribL1ui64vNV;
      internal static GL.Delegates.VertexAttribL2d glVertexAttribL2d;
      internal static GL.Delegates.VertexAttribL2dEXT glVertexAttribL2dEXT;
      internal static GL.Delegates.VertexAttribL2dv glVertexAttribL2dv;
      internal static GL.Delegates.VertexAttribL2dvEXT glVertexAttribL2dvEXT;
      internal static GL.Delegates.VertexAttribL2i64NV glVertexAttribL2i64NV;
      internal static GL.Delegates.VertexAttribL2i64vNV glVertexAttribL2i64vNV;
      internal static GL.Delegates.VertexAttribL2ui64NV glVertexAttribL2ui64NV;
      internal static GL.Delegates.VertexAttribL2ui64vNV glVertexAttribL2ui64vNV;
      internal static GL.Delegates.VertexAttribL3d glVertexAttribL3d;
      internal static GL.Delegates.VertexAttribL3dEXT glVertexAttribL3dEXT;
      internal static GL.Delegates.VertexAttribL3dv glVertexAttribL3dv;
      internal static GL.Delegates.VertexAttribL3dvEXT glVertexAttribL3dvEXT;
      internal static GL.Delegates.VertexAttribL3i64NV glVertexAttribL3i64NV;
      internal static GL.Delegates.VertexAttribL3i64vNV glVertexAttribL3i64vNV;
      internal static GL.Delegates.VertexAttribL3ui64NV glVertexAttribL3ui64NV;
      internal static GL.Delegates.VertexAttribL3ui64vNV glVertexAttribL3ui64vNV;
      internal static GL.Delegates.VertexAttribL4d glVertexAttribL4d;
      internal static GL.Delegates.VertexAttribL4dEXT glVertexAttribL4dEXT;
      internal static GL.Delegates.VertexAttribL4dv glVertexAttribL4dv;
      internal static GL.Delegates.VertexAttribL4dvEXT glVertexAttribL4dvEXT;
      internal static GL.Delegates.VertexAttribL4i64NV glVertexAttribL4i64NV;
      internal static GL.Delegates.VertexAttribL4i64vNV glVertexAttribL4i64vNV;
      internal static GL.Delegates.VertexAttribL4ui64NV glVertexAttribL4ui64NV;
      internal static GL.Delegates.VertexAttribL4ui64vNV glVertexAttribL4ui64vNV;
      internal static GL.Delegates.VertexAttribLFormatNV glVertexAttribLFormatNV;
      internal static GL.Delegates.VertexAttribLPointer glVertexAttribLPointer;
      internal static GL.Delegates.VertexAttribLPointerEXT glVertexAttribLPointerEXT;
      internal static GL.Delegates.VertexAttribP1ui glVertexAttribP1ui;
      internal static GL.Delegates.VertexAttribP1uiv glVertexAttribP1uiv;
      internal static GL.Delegates.VertexAttribP2ui glVertexAttribP2ui;
      internal static GL.Delegates.VertexAttribP2uiv glVertexAttribP2uiv;
      internal static GL.Delegates.VertexAttribP3ui glVertexAttribP3ui;
      internal static GL.Delegates.VertexAttribP3uiv glVertexAttribP3uiv;
      internal static GL.Delegates.VertexAttribP4ui glVertexAttribP4ui;
      internal static GL.Delegates.VertexAttribP4uiv glVertexAttribP4uiv;
      internal static GL.Delegates.VertexAttribPointer glVertexAttribPointer;
      internal static GL.Delegates.VertexAttribPointerARB glVertexAttribPointerARB;
      internal static GL.Delegates.VertexAttribPointerNV glVertexAttribPointerNV;
      internal static GL.Delegates.VertexAttribs1dvNV glVertexAttribs1dvNV;
      internal static GL.Delegates.VertexAttribs1fvNV glVertexAttribs1fvNV;
      internal static GL.Delegates.VertexAttribs1hvNV glVertexAttribs1hvNV;
      internal static GL.Delegates.VertexAttribs1svNV glVertexAttribs1svNV;
      internal static GL.Delegates.VertexAttribs2dvNV glVertexAttribs2dvNV;
      internal static GL.Delegates.VertexAttribs2fvNV glVertexAttribs2fvNV;
      internal static GL.Delegates.VertexAttribs2hvNV glVertexAttribs2hvNV;
      internal static GL.Delegates.VertexAttribs2svNV glVertexAttribs2svNV;
      internal static GL.Delegates.VertexAttribs3dvNV glVertexAttribs3dvNV;
      internal static GL.Delegates.VertexAttribs3fvNV glVertexAttribs3fvNV;
      internal static GL.Delegates.VertexAttribs3hvNV glVertexAttribs3hvNV;
      internal static GL.Delegates.VertexAttribs3svNV glVertexAttribs3svNV;
      internal static GL.Delegates.VertexAttribs4dvNV glVertexAttribs4dvNV;
      internal static GL.Delegates.VertexAttribs4fvNV glVertexAttribs4fvNV;
      internal static GL.Delegates.VertexAttribs4hvNV glVertexAttribs4hvNV;
      internal static GL.Delegates.VertexAttribs4svNV glVertexAttribs4svNV;
      internal static GL.Delegates.VertexAttribs4ubvNV glVertexAttribs4ubvNV;
      internal static GL.Delegates.VertexBlendARB glVertexBlendARB;
      internal static GL.Delegates.VertexBlendEnvfATI glVertexBlendEnvfATI;
      internal static GL.Delegates.VertexBlendEnviATI glVertexBlendEnviATI;
      internal static GL.Delegates.VertexFormatNV glVertexFormatNV;
      internal static GL.Delegates.VertexP2ui glVertexP2ui;
      internal static GL.Delegates.VertexP2uiv glVertexP2uiv;
      internal static GL.Delegates.VertexP3ui glVertexP3ui;
      internal static GL.Delegates.VertexP3uiv glVertexP3uiv;
      internal static GL.Delegates.VertexP4ui glVertexP4ui;
      internal static GL.Delegates.VertexP4uiv glVertexP4uiv;
      internal static GL.Delegates.VertexPointer glVertexPointer;
      internal static GL.Delegates.VertexPointerEXT glVertexPointerEXT;
      internal static GL.Delegates.VertexPointerListIBM glVertexPointerListIBM;
      internal static GL.Delegates.VertexPointervINTEL glVertexPointervINTEL;
      internal static GL.Delegates.VertexStream1dATI glVertexStream1dATI;
      internal static GL.Delegates.VertexStream1dvATI glVertexStream1dvATI;
      internal static GL.Delegates.VertexStream1fATI glVertexStream1fATI;
      internal static GL.Delegates.VertexStream1fvATI glVertexStream1fvATI;
      internal static GL.Delegates.VertexStream1iATI glVertexStream1iATI;
      internal static GL.Delegates.VertexStream1ivATI glVertexStream1ivATI;
      internal static GL.Delegates.VertexStream1sATI glVertexStream1sATI;
      internal static GL.Delegates.VertexStream1svATI glVertexStream1svATI;
      internal static GL.Delegates.VertexStream2dATI glVertexStream2dATI;
      internal static GL.Delegates.VertexStream2dvATI glVertexStream2dvATI;
      internal static GL.Delegates.VertexStream2fATI glVertexStream2fATI;
      internal static GL.Delegates.VertexStream2fvATI glVertexStream2fvATI;
      internal static GL.Delegates.VertexStream2iATI glVertexStream2iATI;
      internal static GL.Delegates.VertexStream2ivATI glVertexStream2ivATI;
      internal static GL.Delegates.VertexStream2sATI glVertexStream2sATI;
      internal static GL.Delegates.VertexStream2svATI glVertexStream2svATI;
      internal static GL.Delegates.VertexStream3dATI glVertexStream3dATI;
      internal static GL.Delegates.VertexStream3dvATI glVertexStream3dvATI;
      internal static GL.Delegates.VertexStream3fATI glVertexStream3fATI;
      internal static GL.Delegates.VertexStream3fvATI glVertexStream3fvATI;
      internal static GL.Delegates.VertexStream3iATI glVertexStream3iATI;
      internal static GL.Delegates.VertexStream3ivATI glVertexStream3ivATI;
      internal static GL.Delegates.VertexStream3sATI glVertexStream3sATI;
      internal static GL.Delegates.VertexStream3svATI glVertexStream3svATI;
      internal static GL.Delegates.VertexStream4dATI glVertexStream4dATI;
      internal static GL.Delegates.VertexStream4dvATI glVertexStream4dvATI;
      internal static GL.Delegates.VertexStream4fATI glVertexStream4fATI;
      internal static GL.Delegates.VertexStream4fvATI glVertexStream4fvATI;
      internal static GL.Delegates.VertexStream4iATI glVertexStream4iATI;
      internal static GL.Delegates.VertexStream4ivATI glVertexStream4ivATI;
      internal static GL.Delegates.VertexStream4sATI glVertexStream4sATI;
      internal static GL.Delegates.VertexStream4svATI glVertexStream4svATI;
      internal static GL.Delegates.VertexWeightfEXT glVertexWeightfEXT;
      internal static GL.Delegates.VertexWeightfvEXT glVertexWeightfvEXT;
      internal static GL.Delegates.VertexWeighthNV glVertexWeighthNV;
      internal static GL.Delegates.VertexWeighthvNV glVertexWeighthvNV;
      internal static GL.Delegates.VertexWeightPointerEXT glVertexWeightPointerEXT;
      internal static GL.Delegates.VideoCaptureNV glVideoCaptureNV;
      internal static GL.Delegates.VideoCaptureStreamParameterdvNV glVideoCaptureStreamParameterdvNV;
      internal static GL.Delegates.VideoCaptureStreamParameterfvNV glVideoCaptureStreamParameterfvNV;
      internal static GL.Delegates.VideoCaptureStreamParameterivNV glVideoCaptureStreamParameterivNV;
      internal static GL.Delegates.Viewport glViewport;
      internal static GL.Delegates.ViewportArrayv glViewportArrayv;
      internal static GL.Delegates.ViewportIndexedf glViewportIndexedf;
      internal static GL.Delegates.ViewportIndexedfv glViewportIndexedfv;
      internal static GL.Delegates.WaitSync glWaitSync;
      internal static GL.Delegates.WeightbvARB glWeightbvARB;
      internal static GL.Delegates.WeightdvARB glWeightdvARB;
      internal static GL.Delegates.WeightfvARB glWeightfvARB;
      internal static GL.Delegates.WeightivARB glWeightivARB;
      internal static GL.Delegates.WeightPointerARB glWeightPointerARB;
      internal static GL.Delegates.WeightsvARB glWeightsvARB;
      internal static GL.Delegates.WeightubvARB glWeightubvARB;
      internal static GL.Delegates.WeightuivARB glWeightuivARB;
      internal static GL.Delegates.WeightusvARB glWeightusvARB;
      internal static GL.Delegates.WindowPos2d glWindowPos2d;
      internal static GL.Delegates.WindowPos2dARB glWindowPos2dARB;
      internal static GL.Delegates.WindowPos2dMESA glWindowPos2dMESA;
      internal static GL.Delegates.WindowPos2dv glWindowPos2dv;
      internal static GL.Delegates.WindowPos2dvARB glWindowPos2dvARB;
      internal static GL.Delegates.WindowPos2dvMESA glWindowPos2dvMESA;
      internal static GL.Delegates.WindowPos2f glWindowPos2f;
      internal static GL.Delegates.WindowPos2fARB glWindowPos2fARB;
      internal static GL.Delegates.WindowPos2fMESA glWindowPos2fMESA;
      internal static GL.Delegates.WindowPos2fv glWindowPos2fv;
      internal static GL.Delegates.WindowPos2fvARB glWindowPos2fvARB;
      internal static GL.Delegates.WindowPos2fvMESA glWindowPos2fvMESA;
      internal static GL.Delegates.WindowPos2i glWindowPos2i;
      internal static GL.Delegates.WindowPos2iARB glWindowPos2iARB;
      internal static GL.Delegates.WindowPos2iMESA glWindowPos2iMESA;
      internal static GL.Delegates.WindowPos2iv glWindowPos2iv;
      internal static GL.Delegates.WindowPos2ivARB glWindowPos2ivARB;
      internal static GL.Delegates.WindowPos2ivMESA glWindowPos2ivMESA;
      internal static GL.Delegates.WindowPos2s glWindowPos2s;
      internal static GL.Delegates.WindowPos2sARB glWindowPos2sARB;
      internal static GL.Delegates.WindowPos2sMESA glWindowPos2sMESA;
      internal static GL.Delegates.WindowPos2sv glWindowPos2sv;
      internal static GL.Delegates.WindowPos2svARB glWindowPos2svARB;
      internal static GL.Delegates.WindowPos2svMESA glWindowPos2svMESA;
      internal static GL.Delegates.WindowPos3d glWindowPos3d;
      internal static GL.Delegates.WindowPos3dARB glWindowPos3dARB;
      internal static GL.Delegates.WindowPos3dMESA glWindowPos3dMESA;
      internal static GL.Delegates.WindowPos3dv glWindowPos3dv;
      internal static GL.Delegates.WindowPos3dvARB glWindowPos3dvARB;
      internal static GL.Delegates.WindowPos3dvMESA glWindowPos3dvMESA;
      internal static GL.Delegates.WindowPos3f glWindowPos3f;
      internal static GL.Delegates.WindowPos3fARB glWindowPos3fARB;
      internal static GL.Delegates.WindowPos3fMESA glWindowPos3fMESA;
      internal static GL.Delegates.WindowPos3fv glWindowPos3fv;
      internal static GL.Delegates.WindowPos3fvARB glWindowPos3fvARB;
      internal static GL.Delegates.WindowPos3fvMESA glWindowPos3fvMESA;
      internal static GL.Delegates.WindowPos3i glWindowPos3i;
      internal static GL.Delegates.WindowPos3iARB glWindowPos3iARB;
      internal static GL.Delegates.WindowPos3iMESA glWindowPos3iMESA;
      internal static GL.Delegates.WindowPos3iv glWindowPos3iv;
      internal static GL.Delegates.WindowPos3ivARB glWindowPos3ivARB;
      internal static GL.Delegates.WindowPos3ivMESA glWindowPos3ivMESA;
      internal static GL.Delegates.WindowPos3s glWindowPos3s;
      internal static GL.Delegates.WindowPos3sARB glWindowPos3sARB;
      internal static GL.Delegates.WindowPos3sMESA glWindowPos3sMESA;
      internal static GL.Delegates.WindowPos3sv glWindowPos3sv;
      internal static GL.Delegates.WindowPos3svARB glWindowPos3svARB;
      internal static GL.Delegates.WindowPos3svMESA glWindowPos3svMESA;
      internal static GL.Delegates.WindowPos4dMESA glWindowPos4dMESA;
      internal static GL.Delegates.WindowPos4dvMESA glWindowPos4dvMESA;
      internal static GL.Delegates.WindowPos4fMESA glWindowPos4fMESA;
      internal static GL.Delegates.WindowPos4fvMESA glWindowPos4fvMESA;
      internal static GL.Delegates.WindowPos4iMESA glWindowPos4iMESA;
      internal static GL.Delegates.WindowPos4ivMESA glWindowPos4ivMESA;
      internal static GL.Delegates.WindowPos4sMESA glWindowPos4sMESA;
      internal static GL.Delegates.WindowPos4svMESA glWindowPos4svMESA;
      internal static GL.Delegates.WriteMaskEXT glWriteMaskEXT;

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Accum(AccumOp op, float value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ActiveProgramEXT(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ActiveShaderProgram(uint pipeline, uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ActiveStencilFaceEXT(ExtStencilTwoSide face);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ActiveTexture(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ActiveTextureARB(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ActiveVaryingNV(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AlphaFragmentOp1ATI(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AlphaFragmentOp2ATI(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AlphaFragmentOp3ATI(AtiFragmentShader op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AlphaFunc(AlphaFunction func, float @ref);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ApplyTextureEXT(ExtLightTexture mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool AreProgramsResidentNV(int n, uint* programs, [Out] bool* residences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool AreTexturesResident(int n, uint* textures, [Out] bool* residences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool AreTexturesResidentEXT(int n, uint* textures, [Out] bool* residences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ArrayElement(int i);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ArrayElementEXT(int i);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ArrayObjectATI(EnableCap array, int size, AtiVertexArrayObject type, int stride, uint buffer, uint offset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AsyncMarkerSGIX(uint marker);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AttachObjectARB(uint containerObj, uint obj);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AttachShader(uint program, uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Begin(BeginMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginConditionalRender(uint id, ConditionalRenderType mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginConditionalRenderNV(uint id, NvConditionalRender mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginFragmentShaderATI();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginOcclusionQueryNV(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginPerfMonitorAMD(uint monitor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginQuery(QueryTarget target, uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginQueryARB(ArbOcclusionQuery target, uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginQueryIndexed(QueryTarget target, uint index, uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginTransformFeedback(BeginFeedbackMode primitiveMode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginTransformFeedbackEXT(ExtTransformFeedback primitiveMode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginTransformFeedbackNV(NvTransformFeedback primitiveMode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginVertexShaderEXT();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginVideoCaptureNV(uint video_capture_slot);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindAttribLocation(uint program, uint index, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindAttribLocationARB(uint programObj, uint index, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBuffer(BufferTarget target, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBufferARB(BufferTargetArb target, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBufferBase(BufferTarget target, uint index, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBufferBaseEXT(ExtTransformFeedback target, uint index, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBufferBaseNV(NvTransformFeedback target, uint index, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBufferOffsetEXT(ExtTransformFeedback target, uint index, uint buffer, IntPtr offset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBufferOffsetNV(NvTransformFeedback target, uint index, uint buffer, IntPtr offset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBufferRange(BufferTarget target, uint index, uint buffer, IntPtr offset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBufferRangeEXT(ExtTransformFeedback target, uint index, uint buffer, IntPtr offset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBufferRangeNV(NvTransformFeedback target, uint index, uint buffer, IntPtr offset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindFragDataLocation(uint program, uint color, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindFragDataLocationEXT(uint program, uint color, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindFragmentShaderATI(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindFramebuffer(FramebufferTarget target, uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindFramebufferEXT(FramebufferTarget target, uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, ExtShaderImageLoadStore access, int format);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int BindLightParameterEXT(LightName light, LightParameter value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int BindMaterialParameterEXT(MaterialFace face, MaterialParameter value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindMultiTextureEXT(TextureUnit texunit, TextureTarget target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int BindParameterEXT(ExtVertexShader value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindProgramARB(AssemblyProgramTargetArb target, uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindProgramNV(AssemblyProgramTargetArb target, uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindProgramPipeline(uint pipeline);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindRenderbufferEXT(RenderbufferTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindSampler(uint unit, uint sampler);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int BindTexGenParameterEXT(TextureUnit unit, TextureCoordName coord, TextureGenParameter value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindTexture(TextureTarget target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindTextureEXT(TextureTarget target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int BindTextureUnitParameterEXT(TextureUnit unit, ExtVertexShader value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindTransformFeedback(TransformFeedbackTarget target, uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindTransformFeedbackNV(NvTransformFeedback2 target, uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindVertexArray(uint array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindVertexArrayAPPLE(uint array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindVertexShaderEXT(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, NvVideoCapture frame_region, IntPtr offset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, NvVideoCapture frame_region, NvVideoCapture target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3bEXT(sbyte bx, sbyte by, sbyte bz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3bvEXT(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3dEXT(double bx, double by, double bz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3dvEXT(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3fEXT(float bx, float by, float bz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3fvEXT(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3iEXT(int bx, int by, int bz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3ivEXT(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3sEXT(short bx, short by, short bz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Binormal3svEXT(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BinormalPointerEXT(NormalPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendColorEXT(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquation(BlendEquationMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationEXT(ExtBlendMinmax mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationi(uint buf, Version40 mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationiARB(uint buf, ArbDrawBuffersBlend mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationIndexedAMD(uint buf, AmdDrawBuffersBlend mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationSeparateEXT(ExtBlendEquationSeparate modeRGB, ExtBlendEquationSeparate modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationSeparatei(uint buf, BlendEquationMode modeRGB, BlendEquationMode modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationSeparateiARB(uint buf, ArbDrawBuffersBlend modeRGB, ArbDrawBuffersBlend modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationSeparateIndexedAMD(uint buf, AmdDrawBuffersBlend modeRGB, AmdDrawBuffersBlend modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFunci(uint buf, Version40 src, Version40 dst);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFunciARB(uint buf, ArbDrawBuffersBlend src, ArbDrawBuffersBlend dst);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFuncIndexedAMD(uint buf, AmdDrawBuffersBlend src, AmdDrawBuffersBlend dst);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFuncSeparate(BlendingFactorSrc sfactorRGB, BlendingFactorDest dfactorRGB, BlendingFactorSrc sfactorAlpha, BlendingFactorDest dfactorAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFuncSeparateEXT(ExtBlendFuncSeparate sfactorRGB, ExtBlendFuncSeparate dfactorRGB, ExtBlendFuncSeparate sfactorAlpha, ExtBlendFuncSeparate dfactorAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFuncSeparatei(uint buf, Version40 srcRGB, Version40 dstRGB, Version40 srcAlpha, Version40 dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFuncSeparateiARB(uint buf, ArbDrawBuffersBlend srcRGB, ArbDrawBuffersBlend dstRGB, ArbDrawBuffersBlend srcAlpha, ArbDrawBuffersBlend dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFuncSeparateIndexedAMD(uint buf, AmdDrawBuffersBlend srcRGB, AmdDrawBuffersBlend dstRGB, AmdDrawBuffersBlend srcAlpha, AmdDrawBuffersBlend dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFuncSeparateINGR(All sfactorRGB, All dfactorRGB, All sfactorAlpha, All dfactorAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, ExtFramebufferBlit filter);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferAddressRangeNV(NvVertexBufferUnifiedMemory pname, uint index, ulong address, IntPtr length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsageHint usage);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferDataARB(BufferTargetArb target, IntPtr size, IntPtr data, BufferUsageArb usage);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferParameteriAPPLE(BufferTarget target, BufferParameterApple pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferSubDataARB(BufferTargetArb target, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CallList(uint list);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CallLists(int n, ListNameType type, IntPtr lists);

      [SuppressUnmanagedCodeSecurity]
      internal delegate FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate FramebufferErrorCode CheckFramebufferStatusEXT(FramebufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate ExtDirectStateAccess CheckNamedFramebufferStatusEXT(uint framebuffer, FramebufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClampColor(ClampColorTarget target, ClampColorMode clamp);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClampColorARB(ArbColorBufferFloat target, ArbColorBufferFloat clamp);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Clear(ClearBufferMask mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearAccum(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearBufferfi(ClearBuffer buffer, int drawbuffer, float depth, int stencil);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearBufferfv(ClearBuffer buffer, int drawbuffer, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearBufferiv(ClearBuffer buffer, int drawbuffer, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearBufferuiv(ClearBuffer buffer, int drawbuffer, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearColorIiEXT(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearColorIuiEXT(uint red, uint green, uint blue, uint alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepth(double depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepthdNV(double depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepthf(float d);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearIndex(float c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearStencil(int s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClientActiveTexture(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClientActiveTextureARB(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClientActiveVertexStreamATI(AtiVertexStreams stream);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClientAttribDefaultEXT(ClientAttribMask mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate ArbSync ClientWaitSync(IntPtr sync, uint flags, ulong timeout);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClipPlane(ClipPlaneName plane, double* equation);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3b(sbyte red, sbyte green, sbyte blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3bv(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3d(double red, double green, double blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3f(float red, float green, float blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3fVertex3fSUN(float r, float g, float b, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3fVertex3fvSUN(float* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3hNV(Half red, Half green, Half blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3i(int red, int green, int blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3s(short red, short green, short blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3ub(byte red, byte green, byte blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3ubv(byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3ui(uint red, uint green, uint blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3uiv(uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3us(ushort red, ushort green, ushort blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color3usv(ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4b(sbyte red, sbyte green, sbyte blue, sbyte alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4bv(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4d(double red, double green, double blue, double alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4f(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4fNormal3fVertex3fvSUN(float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4hNV(Half red, Half green, Half blue, Half alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4i(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4s(short red, short green, short blue, short alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4ub(byte red, byte green, byte blue, byte alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4ubv(byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4ubVertex2fvSUN(byte* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4ubVertex3fvSUN(byte* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4ui(uint red, uint green, uint blue, uint alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4uiv(uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4us(ushort red, ushort green, ushort blue, ushort alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4usv(ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorFormatNV(int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorFragmentOp1ATI(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorFragmentOp2ATI(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorFragmentOp3ATI(AtiFragmentShader op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorMask(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorMaski(uint index, bool r, bool g, bool b, bool a);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorMaskIndexedEXT(uint index, bool r, bool g, bool b, bool a);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorMaterial(MaterialFace face, ColorMaterialParameter mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorP3ui(PackedPointerType type, uint color);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorP3uiv(PackedPointerType type, uint* color);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorP4ui(PackedPointerType type, uint color);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorP4uiv(PackedPointerType type, uint* color);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorPointerEXT(int size, ColorPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorPointerListIBM(int size, ColorPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorPointervINTEL(int size, VertexPointerType type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorSubTableEXT(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorTableEXT(ColorTableTarget target, PixelInternalFormat internalFormat, int width, PixelFormat format, PixelType type, IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorTableParameterfvSGI(SgiColorTable target, SgiColorTable pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorTableParameterivSGI(SgiColorTable target, SgiColorTable pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorTableSGI(SgiColorTable target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CombinerInputNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners input, NvRegisterCombiners mapping, NvRegisterCombiners componentUsage);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CombinerOutputNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners abOutput, NvRegisterCombiners cdOutput, NvRegisterCombiners sumOutput, NvRegisterCombiners scale, NvRegisterCombiners bias, bool abDotProduct, bool cdDotProduct, bool muxSum);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CombinerParameterfNV(NvRegisterCombiners pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CombinerParameterfvNV(NvRegisterCombiners pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CombinerParameteriNV(NvRegisterCombiners pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CombinerParameterivNV(NvRegisterCombiners pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CombinerStageParameterfvNV(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompileShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompileShaderARB(uint shaderObj);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompileShaderIncludeARB(uint shader, int count, string[] path, int* length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage1DARB(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage2DARB(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage3DARB(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage1DARB(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage2DARB(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage3DARB(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTextureImage1DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTextureImage2DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTextureImage3DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr bits);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionFilter1DEXT(ExtConvolution target, PixelInternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionFilter2DEXT(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionParameterfEXT(ExtConvolution target, ExtConvolution pname, float @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionParameterfvEXT(ExtConvolution target, ExtConvolution pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionParameteriEXT(ExtConvolution target, ExtConvolution pname, int @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ConvolutionParameterivEXT(ExtConvolution target, ExtConvolution pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyBufferSubData(BufferTarget readTarget, BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyColorSubTableEXT(ColorTableTarget target, int start, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyColorTable(ColorTableTarget target, PixelInternalFormat internalformat, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyColorTableSGI(SgiColorTable target, PixelInternalFormat internalformat, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyConvolutionFilter1DEXT(ExtConvolution target, PixelInternalFormat internalformat, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyConvolutionFilter2DEXT(ExtConvolution target, PixelInternalFormat internalformat, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyImageSubDataNV(uint srcName, NvCopyImage srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, NvCopyImage dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyPixels(int x, int y, int width, int height, PixelCopyType type);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexImage1DEXT(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexImage2DEXT(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage1DEXT(TextureTarget target, int level, int xoffset, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTextureImage1DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTextureImage2DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int x, int y, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int CreateProgram();

      [SuppressUnmanagedCodeSecurity]
      internal delegate int CreateProgramObjectARB();

      [SuppressUnmanagedCodeSecurity]
      internal delegate int CreateShader(ShaderType type);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int CreateShaderObjectARB(ArbShaderObjects shaderType);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int CreateShaderProgramEXT(ExtSeparateShaderObjects type, string @string);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int CreateShaderProgramv(ShaderType type, int count, string[] strings);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr CreateSyncFromCLeventARB(IntPtr context, IntPtr @event, uint flags);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CullFace(CullFaceMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CullParameterdvEXT(ExtCullVertex pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CullParameterfvEXT(ExtCullVertex pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CurrentPaletteMatrixARB(int index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DebugMessageCallbackAMD(DebugProcAmd callback, [Out] IntPtr userParam);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DebugMessageCallbackARB(DebugProcArb callback, IntPtr userParam);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DebugMessageControlARB(ArbDebugOutput source, ArbDebugOutput type, ArbDebugOutput severity, int count, uint* ids, bool enabled);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DebugMessageEnableAMD(AmdDebugOutput category, AmdDebugOutput severity, int count, uint* ids, bool enabled);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DebugMessageInsertAMD(AmdDebugOutput category, AmdDebugOutput severity, uint id, int length, string buf);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DebugMessageInsertARB(ArbDebugOutput source, ArbDebugOutput type, uint id, ArbDebugOutput severity, int length, string buf);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeformationMap3dSGIX(SgixPolynomialFfd target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeformationMap3fSGIX(SgixPolynomialFfd target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeformSGIX(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteAsyncMarkersSGIX(uint marker, int range);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteBuffers(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteBuffersARB(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteFencesAPPLE(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteFencesNV(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteFragmentShaderATI(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteFramebuffers(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteFramebuffersEXT(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteLists(uint list, int range);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteNamedStringARB(int namelen, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteNamesAMD(AmdNameGenDelete identifier, uint num, uint* names);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteObjectARB(uint obj);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteOcclusionQueriesNV(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeletePerfMonitorsAMD(int n, [Out] uint* monitors);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteProgramPipelines(int n, uint* pipelines);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteProgramsARB(int n, uint* programs);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteProgramsNV(int n, uint* programs);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteQueries(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteQueriesARB(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteRenderbuffers(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteRenderbuffersEXT(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteSamplers(int count, uint* samplers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteSync(IntPtr sync);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteTexturesEXT(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteTransformFeedbacks(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteTransformFeedbacksNV(int n, uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteVertexArrays(int n, uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteVertexArraysAPPLE(int n, uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteVertexShaderEXT(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthBoundsdNV(double zmin, double zmax);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthBoundsEXT(double zmin, double zmax);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthFunc(DepthFunction func);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthMask(bool flag);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRange(double near, double far);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangeArrayv(uint first, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangedNV(double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangef(float n, float f);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangeIndexed(uint index, double n, double f);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DetachObjectARB(uint containerObj, uint attachedObj);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DetachShader(uint program, uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DetailTexFuncSGIS(TextureTarget target, int n, float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Disable(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableClientState(ArrayCap array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableClientStateIndexedEXT(EnableCap array, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Disablei(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableIndexedEXT(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableVariantClientStateEXT(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableVertexAttribAPPLE(uint index, AppleVertexProgramEvaluators pname);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableVertexAttribArray(uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableVertexAttribArrayARB(uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawArrays(BeginMode mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawArraysEXT(BeginMode mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawArraysIndirect(ArbDrawIndirect mode, IntPtr indirect);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawArraysInstanced(BeginMode mode, int first, int count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawArraysInstancedARB(BeginMode mode, int first, int count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawArraysInstancedEXT(BeginMode mode, int start, int count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawBuffer(DrawBufferMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawBuffers(int n, DrawBuffersEnum* bufs);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawBuffersARB(int n, ArbDrawBuffers* bufs);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawBuffersATI(int n, AtiDrawBuffers* bufs);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElementArrayAPPLE(BeginMode mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElementArrayATI(BeginMode mode, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElements(BeginMode mode, int count, DrawElementsType type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElementsBaseVertex(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int basevertex);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElementsIndirect(ArbDrawIndirect mode, ArbDrawIndirect type, IntPtr indirect);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElementsInstanced(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElementsInstancedARB(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElementsInstancedBaseVertex(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount, int basevertex);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElementsInstancedEXT(BeginMode mode, int count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawMeshArraysSUN(BeginMode mode, int first, int count, int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawRangeElementArrayAPPLE(BeginMode mode, uint start, uint end, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawRangeElementArrayATI(BeginMode mode, uint start, uint end, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawRangeElements(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawRangeElementsBaseVertex(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawRangeElementsEXT(BeginMode mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTransformFeedback(BeginMode mode, uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTransformFeedbackNV(NvTransformFeedback2 mode, uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTransformFeedbackStream(BeginMode mode, uint id, uint stream);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EdgeFlag(bool flag);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EdgeFlagFormatNV(int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EdgeFlagPointer(int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EdgeFlagPointerEXT(int stride, int count, bool* pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EdgeFlagPointerListIBM(int stride, bool* pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EdgeFlagv(bool* flag);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ElementPointerAPPLE(AppleElementArray type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ElementPointerATI(AtiElementArray type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Enable(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableClientState(ArrayCap array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableClientStateIndexedEXT(EnableCap array, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Enablei(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableIndexedEXT(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableVariantClientStateEXT(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableVertexAttribAPPLE(uint index, AppleVertexProgramEvaluators pname);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableVertexAttribArray(uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableVertexAttribArrayARB(uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void End();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndConditionalRender();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndConditionalRenderNV();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndFragmentShaderATI();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndList();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndOcclusionQueryNV();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndPerfMonitorAMD(uint monitor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndQuery(QueryTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndQueryARB(ArbOcclusionQuery target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndQueryIndexed(QueryTarget target, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndTransformFeedback();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndTransformFeedbackEXT();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndTransformFeedbackNV();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndVertexShaderEXT();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndVideoCaptureNV(uint video_capture_slot);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalCoord1d(double u);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalCoord1dv(double* u);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalCoord1f(float u);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalCoord1fv(float* u);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalCoord2d(double u, double v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalCoord2dv(double* u);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalCoord2f(float u, float v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalCoord2fv(float* u);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalMapsNV(NvEvaluators target, NvEvaluators mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalMesh1(MeshMode1 mode, int i1, int i2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalPoint1(int i);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EvalPoint2(int i, int j);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExecuteProgramNV(AssemblyProgramTargetArb target, uint id, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtractComponentEXT(uint res, uint src, uint num);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FeedbackBuffer(int size, FeedbackType type, [Out] float* buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr FenceSync(ArbSync condition, uint flags);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FinalCombinerInputNV(NvRegisterCombiners variable, NvRegisterCombiners input, NvRegisterCombiners mapping, NvRegisterCombiners componentUsage);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Finish();

      [SuppressUnmanagedCodeSecurity]
      internal delegate int FinishAsyncSGIX([Out] uint* markerp);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FinishFenceAPPLE(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FinishFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FinishObjectAPPLE(AppleFence @object, int name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FinishTextureSUNX();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Flush();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FlushMappedBufferRange(BufferTarget target, IntPtr offset, IntPtr length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FlushMappedBufferRangeAPPLE(BufferTarget target, IntPtr offset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FlushMappedNamedBufferRangeEXT(uint buffer, IntPtr offset, IntPtr length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FlushPixelDataRangeNV(NvPixelDataRange target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FlushRasterSGIX();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FlushVertexArrayRangeAPPLE(int length, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FlushVertexArrayRangeNV();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordd(double coord);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoorddEXT(double coord);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoorddv(double* coord);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoorddvEXT(double* coord);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordf(float coord);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordfEXT(float coord);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordFormatNV(NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordfv(float* coord);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordfvEXT(float* coord);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordhNV(Half fog);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordhvNV(Half* fog);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordPointer(FogPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordPointerEXT(ExtFogCoord type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogCoordPointerListIBM(IbmVertexArrayLists type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogf(FogParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogFuncSGIS(int n, float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogfv(FogParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogi(FogParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogiv(FogParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentColorMaterialSGIX(MaterialFace face, MaterialParameter mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentLightfSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentLightfvSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentLightiSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentLightivSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentLightModelfSGIX(SgixFragmentLighting pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentLightModelfvSGIX(SgixFragmentLighting pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentLightModeliSGIX(SgixFragmentLighting pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentLightModelivSGIX(SgixFragmentLighting pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentMaterialfSGIX(MaterialFace face, MaterialParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentMaterialfvSGIX(MaterialFace face, MaterialParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentMaterialiSGIX(MaterialFace face, MaterialParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FragmentMaterialivSGIX(MaterialFace face, MaterialParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferDrawBufferEXT(uint framebuffer, DrawBufferMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferDrawBuffersEXT(uint framebuffer, int n, DrawBufferMode* bufs);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferReadBufferEXT(uint framebuffer, ReadBufferMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferRenderbufferEXT(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture1DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture2DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture3DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTextureARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTextureEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTextureFaceARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTextureFaceEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTextureLayerARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTextureLayerEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FrameTerminatorGREMEDY();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FrameZoomSGIX(int factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FreeObjectBufferATI(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FrontFace(FrontFaceDirection mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Frustum(double left, double right, double bottom, double top, double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GenAsyncMarkersSGIX(int range);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenBuffers(int n, [Out] uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenBuffersARB(int n, [Out] uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenerateMipmap(GenerateMipmapTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenerateMipmapEXT(GenerateMipmapTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenerateMultiTexMipmapEXT(TextureUnit texunit, TextureTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenerateTextureMipmapEXT(uint texture, TextureTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenFencesAPPLE(int n, [Out] uint* fences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenFencesNV(int n, [Out] uint* fences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GenFragmentShadersATI(uint range);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenFramebuffers(int n, [Out] uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenFramebuffersEXT(int n, [Out] uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GenLists(int range);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenNamesAMD(AmdNameGenDelete identifier, uint num, [Out] uint* names);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenOcclusionQueriesNV(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenPerfMonitorsAMD(int n, [Out] uint* monitors);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenProgramPipelines(int n, [Out] uint* pipelines);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenProgramsARB(int n, [Out] uint* programs);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenProgramsNV(int n, [Out] uint* programs);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenQueries(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenQueriesARB(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenRenderbuffers(int n, [Out] uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenRenderbuffersEXT(int n, [Out] uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenSamplers(int count, [Out] uint* samplers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GenSymbolsEXT(ExtVertexShader datatype, ExtVertexShader storagetype, ExtVertexShader range, uint components);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenTextures(int n, [Out] uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenTexturesEXT(int n, [Out] uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenTransformFeedbacks(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenTransformFeedbacksNV(int n, [Out] uint* ids);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenVertexArrays(int n, [Out] uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenVertexArraysAPPLE(int n, [Out] uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GenVertexShadersEXT(uint range);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveAttrib(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveAttribARB(uint programObj, uint index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbVertexShader* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveSubroutineUniformiv(uint program, ShaderType shadertype, uint index, ActiveSubroutineUniformParameter pname, [Out] int* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufsize, [Out] int* length, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveUniform(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveUniformARB(uint programObj, uint index, int maxLength, [Out] int* length, [Out] int* size, [Out] ArbShaderObjects* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, ActiveUniformBlockParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformBlockName);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, [Out] int* length, [Out] StringBuilder uniformName);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, ActiveUniformParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveVaryingNV(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] NvTransformFeedback* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetArrayObjectfvATI(EnableCap array, AtiVertexArrayObject pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetArrayObjectivATI(EnableCap array, AtiVertexArrayObject pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetAttachedObjectsARB(uint containerObj, int maxCount, [Out] int* count, [Out] uint* obj);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetAttachedShaders(uint program, int maxCount, [Out] int* count, [Out] uint* obj);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetAttribLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetAttribLocationARB(uint programObj, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBooleani_v(GetIndexedPName target, uint index, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBooleanIndexedvEXT(ExtDrawBuffers2 target, uint index, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBooleanv(GetPName pname, [Out] bool* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferParameteri64v(BufferTarget target, BufferParameterName pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferParameteriv(BufferTarget target, BufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferParameterivARB(ArbVertexBufferObject target, BufferParameterNameArb pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferParameterui64vNV(NvShaderBufferLoad target, NvShaderBufferLoad pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferPointerv(BufferTarget target, BufferPointer pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferPointervARB(ArbVertexBufferObject target, BufferPointerNameArb pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferSubData(BufferTarget target, IntPtr offset, IntPtr size, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferSubDataARB(BufferTargetArb target, IntPtr offset, IntPtr size, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetClipPlane(ClipPlaneName plane, [Out] double* equation);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, [Out] IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetColorTableEXT(ColorTableTarget target, PixelFormat format, PixelType type, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetColorTableParameterfv(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetColorTableParameterfvEXT(ColorTableTarget target, GetColorTableParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetColorTableParameterfvSGI(SgiColorTable target, SgiColorTable pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetColorTableParameteriv(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetColorTableParameterivEXT(ColorTableTarget target, GetColorTableParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetColorTableParameterivSGI(SgiColorTable target, SgiColorTable pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetColorTableSGI(SgiColorTable target, PixelFormat format, PixelType type, [Out] IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetCombinerInputParameterfvNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetCombinerInputParameterivNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetCombinerOutputParameterfvNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetCombinerOutputParameterivNV(NvRegisterCombiners stage, NvRegisterCombiners portion, NvRegisterCombiners pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetCombinerStageParameterfvNV(NvRegisterCombiners2 stage, NvRegisterCombiners2 pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int lod, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetCompressedTexImage(TextureTarget target, int level, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetCompressedTexImageARB(TextureTarget target, int level, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetCompressedTextureImageEXT(uint texture, TextureTarget target, int lod, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, [Out] IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetConvolutionFilterEXT(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetConvolutionParameterfv(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetConvolutionParameterfvEXT(ExtConvolution target, ExtConvolution pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetConvolutionParameteriv(ConvolutionTarget target, GetConvolutionParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetConvolutionParameterivEXT(ExtConvolution target, ExtConvolution pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetDebugMessageLogAMD(uint count, int bufsize, [Out] AmdDebugOutput* categories, [Out] uint* severities, [Out] uint* ids, [Out] int* lengths, [Out] StringBuilder message);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetDebugMessageLogARB(uint count, int bufsize, [Out] ArbDebugOutput* sources, [Out] ArbDebugOutput* types, [Out] uint* ids, [Out] ArbDebugOutput* severities, [Out] int* lengths, [Out] StringBuilder messageLog);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetDetailTexFuncSGIS(TextureTarget target, [Out] float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetDoublei_v(GetIndexedPName target, uint index, [Out] double* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetDoubleIndexedvEXT(ExtDirectStateAccess target, uint index, [Out] double* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetDoublev(GetPName pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate ErrorCode GetError();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFenceivNV(uint fence, NvFence pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFinalCombinerInputParameterfvNV(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFinalCombinerInputParameterivNV(NvRegisterCombiners variable, NvRegisterCombiners pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFloati_v(GetIndexedPName target, uint index, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFloatIndexedvEXT(ExtDirectStateAccess target, uint index, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFloatv(GetPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFogFuncSGIS([Out] float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetFragDataIndex(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetFragDataLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetFragDataLocationEXT(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFragmentLightfvSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFragmentLightivSGIX(SgixFragmentLighting light, SgixFragmentLighting pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFragmentMaterialfvSGIX(MaterialFace face, MaterialParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFragmentMaterialivSGIX(MaterialFace face, MaterialParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFramebufferParameterivEXT(uint framebuffer, ExtDirectStateAccess pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate ArbRobustness GetGraphicsResetStatusARB();

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetHandleARB(ArbShaderObjects pname);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetHistogram(HistogramTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetHistogramEXT(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetHistogramParameterfv(HistogramTarget target, GetHistogramParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetHistogramParameterfvEXT(ExtHistogram target, ExtHistogram pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetHistogramParameteriv(HistogramTarget target, GetHistogramParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetHistogramParameterivEXT(ExtHistogram target, ExtHistogram pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetImageTransformParameterfvHP(HpImageTransform target, HpImageTransform pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetImageTransformParameterivHP(HpImageTransform target, HpImageTransform pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetInfoLogARB(uint obj, int maxLength, [Out] int* length, [Out] StringBuilder infoLog);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetInstrumentsSGIX();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetInteger64i_v(GetIndexedPName target, uint index, [Out] long* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetInteger64v(ArbSync pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetIntegeri_v(GetIndexedPName target, uint index, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetIntegerIndexedvEXT(GetIndexedPName target, uint index, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetIntegerui64i_vNV(NvVertexBufferUnifiedMemory value, uint index, [Out] ulong* result);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetIntegerui64vNV(NvShaderBufferLoad value, [Out] ulong* result);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetIntegerv(GetPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetInvariantBooleanvEXT(uint id, ExtVertexShader value, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetInvariantFloatvEXT(uint id, ExtVertexShader value, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetInvariantIntegervEXT(uint id, ExtVertexShader value, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetLightfv(LightName light, LightParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetLightiv(LightName light, LightParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetListParameterfvSGIX(uint list, ListParameterName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetListParameterivSGIX(uint list, ListParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetLocalConstantBooleanvEXT(uint id, ExtVertexShader value, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetLocalConstantFloatvEXT(uint id, ExtVertexShader value, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetLocalConstantIntegervEXT(uint id, ExtVertexShader value, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMapAttribParameterfvNV(NvEvaluators target, uint index, NvEvaluators pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMapAttribParameterivNV(NvEvaluators target, uint index, NvEvaluators pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMapControlPointsNV(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, bool packed, [Out] IntPtr points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMapdv(MapTarget target, GetMapQuery query, [Out] double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMapfv(MapTarget target, GetMapQuery query, [Out] float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMapiv(MapTarget target, GetMapQuery query, [Out] int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMapParameterfvNV(NvEvaluators target, NvEvaluators pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMapParameterivNV(NvEvaluators target, NvEvaluators pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMaterialfv(MaterialFace face, MaterialParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMaterialiv(MaterialFace face, MaterialParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMinmax(MinmaxTarget target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMinmaxEXT(ExtHistogram target, bool reset, PixelFormat format, PixelType type, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMinmaxParameterfv(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMinmaxParameterfvEXT(ExtHistogram target, ExtHistogram pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMinmaxParameteriv(MinmaxTarget target, GetMinmaxParameterPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMinmaxParameterivEXT(ExtHistogram target, ExtHistogram pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultisamplefv(GetMultisamplePName pname, uint index, [Out] float* val);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultisamplefvNV(NvExplicitMultisample pname, uint index, [Out] float* val);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedBufferParameterivEXT(uint buffer, ExtDirectStateAccess pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedBufferParameterui64vNV(uint buffer, NvShaderBufferLoad pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedBufferPointervEXT(uint buffer, ExtDirectStateAccess pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedBufferSubDataEXT(uint buffer, IntPtr offset, IntPtr size, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, FramebufferAttachment attachment, ExtDirectStateAccess pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedProgramivEXT(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedProgramLocalParameterdvEXT(uint program, ExtDirectStateAccess target, uint index, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedProgramLocalParameterfvEXT(uint program, ExtDirectStateAccess target, uint index, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedProgramLocalParameterIivEXT(uint program, ExtDirectStateAccess target, uint index, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedProgramLocalParameterIuivEXT(uint program, ExtDirectStateAccess target, uint index, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedProgramStringEXT(uint program, ExtDirectStateAccess target, ExtDirectStateAccess pname, [Out] IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedRenderbufferParameterivEXT(uint renderbuffer, RenderbufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedStringARB(int namelen, string name, int bufSize, [Out] int* stringlen, [Out] StringBuilder @string);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetNamedStringivARB(int namelen, string name, ArbShadingLanguageInclude pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnColorTableARB(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr table);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnCompressedTexImageARB(ArbRobustness target, int lod, int bufSize, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnConvolutionFilterARB(ArbRobustness target, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnHistogramARB(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnMapdvARB(ArbRobustness target, ArbRobustness query, int bufSize, [Out] double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnMapfvARB(ArbRobustness target, ArbRobustness query, int bufSize, [Out] float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnMapivARB(ArbRobustness target, ArbRobustness query, int bufSize, [Out] int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnMinmaxARB(ArbRobustness target, bool reset, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnPixelMapfvARB(ArbRobustness map, int bufSize, [Out] float* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnPixelMapuivARB(ArbRobustness map, int bufSize, [Out] uint* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnPixelMapusvARB(ArbRobustness map, int bufSize, [Out] ushort* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnPolygonStippleARB(int bufSize, [Out] byte* pattern);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnSeparableFilterARB(ArbRobustness target, ArbRobustness format, ArbRobustness type, int rowBufSize, [Out] IntPtr row, int columnBufSize, [Out] IntPtr column, [Out] IntPtr span);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnTexImageARB(ArbRobustness target, int level, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr img);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnUniformdvARB(uint program, int location, int bufSize, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnUniformfvARB(uint program, int location, int bufSize, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnUniformivARB(uint program, int location, int bufSize, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetnUniformuivARB(uint program, int location, int bufSize, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetObjectBufferfvATI(uint buffer, AtiVertexArrayObject pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetObjectBufferivATI(uint buffer, AtiVertexArrayObject pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetObjectParameterfvARB(uint obj, ArbShaderObjects pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetObjectParameterivAPPLE(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetObjectParameterivARB(uint obj, ArbShaderObjects pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetOcclusionQueryivNV(uint id, NvOcclusionQuery pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetOcclusionQueryuivNV(uint id, NvOcclusionQuery pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorCounterDataAMD(uint monitor, AmdPerformanceMonitor pname, int dataSize, [Out] uint* data, [Out] int* bytesWritten);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorCounterInfoAMD(uint group, uint counter, AmdPerformanceMonitor pname, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorCountersAMD(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint* counters);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorGroupsAMD([Out] int* numGroups, int groupsSize, [Out] uint* groups);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorGroupStringAMD(uint group, int bufSize, [Out] int* length, [Out] StringBuilder groupString);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPixelMapfv(PixelMap map, [Out] float* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPixelMapuiv(PixelMap map, [Out] uint* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPixelMapusv(PixelMap map, [Out] ushort* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPixelTexGenParameterfvSGIS(SgisPixelTexture pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPixelTexGenParameterivSGIS(SgisPixelTexture pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPointerIndexedvEXT(ExtDirectStateAccess target, uint index, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPointerv(GetPointervPName pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPointervEXT(GetPointervPName pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPolygonStipple([Out] byte* mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramBinary(uint program, int bufSize, [Out] int* length, [Out] BinaryFormat* binaryFormat, [Out] IntPtr binary);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramEnvParameterdvARB(ArbVertexProgram target, uint index, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramEnvParameterfvARB(ArbVertexProgram target, uint index, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramEnvParameterIivNV(NvGpuProgram4 target, uint index, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramEnvParameterIuivNV(NvGpuProgram4 target, uint index, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramInfoLog(uint program, int bufSize, [Out] int* length, [Out] StringBuilder infoLog);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramiv(uint program, ProgramParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramivARB(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramivNV(uint id, NvVertexProgram pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramLocalParameterdvARB(ArbVertexProgram target, uint index, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramLocalParameterfvARB(ArbVertexProgram target, uint index, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramLocalParameterIivNV(NvGpuProgram4 target, uint index, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramLocalParameterIuivNV(NvGpuProgram4 target, uint index, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramNamedParameterdvNV(uint id, int len, byte* name, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramNamedParameterfvNV(uint id, int len, byte* name, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramParameterdvNV(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramParameterfvNV(AssemblyProgramTargetArb target, uint index, AssemblyProgramParameterArb pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramPipelineInfoLog(uint pipeline, int bufSize, [Out] int* length, [Out] StringBuilder infoLog);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramPipelineiv(uint pipeline, ProgramPipelineParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramStageiv(uint program, ShaderType shadertype, ProgramStageParameter pname, [Out] int* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramStringARB(AssemblyProgramTargetArb target, AssemblyProgramParameterArb pname, [Out] IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramStringNV(uint id, NvVertexProgram pname, [Out] byte* program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramSubroutineParameteruivNV(NvGpuProgram5 target, uint index, [Out] uint* param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryIndexediv(QueryTarget target, uint index, GetQueryParam pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryiv(QueryTarget target, GetQueryParam pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryivARB(ArbOcclusionQuery target, ArbOcclusionQuery pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryObjecti64v(uint id, GetQueryObjectParam pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryObjecti64vEXT(uint id, ExtTimerQuery pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryObjectiv(uint id, GetQueryObjectParam pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryObjectivARB(uint id, ArbOcclusionQuery pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryObjectui64v(uint id, GetQueryObjectParam pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryObjectui64vEXT(uint id, ExtTimerQuery pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryObjectuiv(uint id, GetQueryObjectParam pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetQueryObjectuivARB(uint id, ArbOcclusionQuery pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetSamplerParameterfv(uint sampler, SamplerParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetSamplerParameterIiv(uint sampler, ArbSamplerObjects pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetSamplerParameterIuiv(uint sampler, ArbSamplerObjects pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetSamplerParameteriv(uint sampler, SamplerParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetSeparableFilterEXT(ExtConvolution target, PixelFormat format, PixelType type, [Out] IntPtr row, [Out] IntPtr column, [Out] IntPtr span);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetShaderInfoLog(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder infoLog);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetShaderiv(uint shader, ShaderParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecisionType precisiontype, [Out] int* range, [Out] int* precision);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetShaderSource(uint shader, int bufSize, [Out] int* length, [Out] StringBuilder source);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetShaderSourceARB(uint obj, int maxLength, [Out] int* length, [Out] StringBuilder source);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetSharpenTexFuncSGIS(TextureTarget target, [Out] float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr GetString(StringName name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr GetStringi(StringName name, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetSubroutineIndex(uint program, ShaderType shadertype, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetSubroutineUniformLocation(uint program, ShaderType shadertype, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetSynciv(IntPtr sync, ArbSync pname, int bufSize, [Out] int* length, [Out] int* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexBumpParameterfvATI(AtiEnvmapBumpmap pname, [Out] float* param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexBumpParameterivATI(AtiEnvmapBumpmap pname, [Out] int* param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexFilterFuncSGIS(TextureTarget target, SgisTextureFilter4 filter, [Out] float* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexGendv(TextureCoordName coord, TextureGenParameter pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexGenfv(TextureCoordName coord, TextureGenParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexGeniv(TextureCoordName coord, TextureGenParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterIiv(TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterPointervAPPLE(AppleTextureRange target, AppleTextureRange pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTextureImageEXT(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, [Out] IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTextureLevelParameterfvEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTextureLevelParameterivEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTextureParameterfvEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTextureParameterIivEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTextureParameterIuivEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTextureParameterivEXT(uint texture, TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTrackMatrixivNV(AssemblyProgramTargetArb target, uint address, AssemblyProgramParameterArb pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTransformFeedbackVarying(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, [Out] int* length, [Out] int* size, [Out] ExtTransformFeedback* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTransformFeedbackVaryingNV(uint program, uint index, [Out] int* location);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetUniformBlockIndex(uint program, string uniformBlockName);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetUniformBufferSizeEXT(uint program, int location);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformdv(uint program, int location, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformfv(uint program, int location, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformfvARB(uint programObj, int location, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformi64vNV(uint program, int location, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, [Out] uint* uniformIndices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformiv(uint program, int location, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformivARB(uint programObj, int location, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetUniformLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetUniformLocationARB(uint programObj, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr GetUniformOffsetEXT(uint program, int location);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformSubroutineuiv(ShaderType shadertype, int location, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformui64vNV(uint program, int location, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformuiv(uint program, int location, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformuivEXT(uint program, int location, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVariantArrayObjectfvATI(uint id, AtiVertexArrayObject pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVariantArrayObjectivATI(uint id, AtiVertexArrayObject pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVariantBooleanvEXT(uint id, ExtVertexShader value, [Out] bool* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVariantFloatvEXT(uint id, ExtVertexShader value, [Out] float* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVariantIntegervEXT(uint id, ExtVertexShader value, [Out] int* data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVariantPointervEXT(uint id, ExtVertexShader value, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetVaryingLocationNV(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribArrayObjectfvATI(uint index, AtiVertexAttribArrayObject pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribArrayObjectivATI(uint index, AtiVertexAttribArrayObject pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribdv(uint index, VertexAttribParameter pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribdvARB(uint index, VertexAttribParameterArb pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribdvNV(uint index, NvVertexProgram pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribfv(uint index, VertexAttribParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribfvARB(uint index, VertexAttribParameterArb pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribfvNV(uint index, NvVertexProgram pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribIiv(uint index, VertexAttribParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribIivEXT(uint index, NvVertexProgram4 pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribIuiv(uint index, VertexAttribParameter pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribIuivEXT(uint index, NvVertexProgram4 pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribiv(uint index, VertexAttribParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribivARB(uint index, VertexAttribParameterArb pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribivNV(uint index, NvVertexProgram pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribLdv(uint index, VertexAttribParameter pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribLdvEXT(uint index, ExtVertexAttrib64bit pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribLi64vNV(uint index, NvVertexAttribInteger64bit pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribLui64vNV(uint index, NvVertexAttribInteger64bit pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribPointerv(uint index, VertexAttribPointerParameter pname, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribPointervARB(uint index, VertexAttribPointerParameterArb pname, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribPointervNV(uint index, NvVertexProgram pname, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVideoCaptureivNV(uint video_capture_slot, NvVideoCapture pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, NvVideoCapture pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVideoi64vNV(uint video_slot, NvPresentVideo pname, [Out] long* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVideoivNV(uint video_slot, NvPresentVideo pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVideoui64vNV(uint video_slot, NvPresentVideo pname, [Out] ulong* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVideouivNV(uint video_slot, NvPresentVideo pname, [Out] uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GlobalAlphaFactorbSUN(sbyte factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GlobalAlphaFactordSUN(double factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GlobalAlphaFactorfSUN(float factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GlobalAlphaFactoriSUN(int factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GlobalAlphaFactorsSUN(short factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GlobalAlphaFactorubSUN(byte factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GlobalAlphaFactoruiSUN(uint factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GlobalAlphaFactorusSUN(ushort factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Hint(HintTarget target, HintMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void HintPGI(PgiMiscHints target, int mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Histogram(HistogramTarget target, int width, PixelInternalFormat internalformat, bool sink);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void HistogramEXT(ExtHistogram target, int width, PixelInternalFormat internalformat, bool sink);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void IglooInterfaceSGIX(All pname, IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ImageTransformParameterfHP(HpImageTransform target, HpImageTransform pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ImageTransformParameterfvHP(HpImageTransform target, HpImageTransform pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ImageTransformParameteriHP(HpImageTransform target, HpImageTransform pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ImageTransformParameterivHP(HpImageTransform target, HpImageTransform pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr ImportSyncEXT(ExtX11SyncObject external_sync_type, IntPtr external_sync, uint flags);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexd(double c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexdv(double* c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexf(float c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void IndexFormatNV(NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void IndexFuncEXT(ExtIndexFunc func, float @ref);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexfv(float* c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexi(int c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexiv(int* c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void IndexMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void IndexMaterialEXT(MaterialFace face, ExtIndexMaterial mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void IndexPointer(IndexPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void IndexPointerEXT(IndexPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void IndexPointerListIBM(IndexPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexs(short c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexsv(short* c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexub(byte c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Indexubv(byte* c);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void InitNames();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void InsertComponentEXT(uint res, uint src, uint num);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void InstrumentsBufferSGIX(int size, [Out] int* buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void InterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsAsyncMarkerSGIX(uint marker);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsBuffer(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsBufferARB(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsBufferResidentNV(NvShaderBufferLoad target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsEnabled(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsEnabledi(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsEnabledIndexedEXT(IndexedEnableCap target, uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsFenceAPPLE(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsFramebuffer(uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsFramebufferEXT(uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsList(uint list);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsNameAMD(AmdNameGenDelete identifier, uint name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsNamedBufferResidentNV(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsNamedStringARB(int namelen, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsObjectBufferATI(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsOcclusionQueryNV(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsProgramARB(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsProgramNV(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsProgramPipeline(uint pipeline);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsQuery(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsQueryARB(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsRenderbuffer(uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsRenderbufferEXT(uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsSampler(uint sampler);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsSync(IntPtr sync);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsTexture(uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsTextureEXT(uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsTransformFeedback(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsTransformFeedbackNV(uint id);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsVariantEnabledEXT(uint id, ExtVertexShader cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsVertexArray(uint array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsVertexArrayAPPLE(uint array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsVertexAttribEnabledAPPLE(uint index, AppleVertexProgramEvaluators pname);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightEnviSGIX(SgixFragmentLighting pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightf(LightName light, LightParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightfv(LightName light, LightParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lighti(LightName light, LightParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightiv(LightName light, LightParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelf(LightModelParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelfv(LightModelParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModeli(LightModelParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModeliv(LightModelParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LineStipple(int factor, ushort pattern);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LineWidth(float width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LinkProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LinkProgramARB(uint programObj);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ListBase(uint @base);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ListParameterfSGIX(uint list, ListParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ListParameterfvSGIX(uint list, ListParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ListParameteriSGIX(uint list, ListParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ListParameterivSGIX(uint list, ListParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadIdentity();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadIdentityDeformationMapSGIX(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadMatrixd(double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadName(uint name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadProgramNV(AssemblyProgramTargetArb target, uint id, int len, byte* program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadTransposeMatrixd(double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadTransposeMatrixdARB(double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadTransposeMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadTransposeMatrixfARB(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LockArraysEXT(int first, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LogicOp(LogicOp opcode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MakeBufferNonResidentNV(NvShaderBufferLoad target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MakeBufferResidentNV(NvShaderBufferLoad target, NvShaderBufferLoad access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MakeNamedBufferNonResidentNV(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MakeNamedBufferResidentNV(uint buffer, NvShaderBufferLoad access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Map1d(MapTarget target, double u1, double u2, int stride, int order, double* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Map1f(MapTarget target, float u1, float u2, int stride, int order, float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr MapBuffer(BufferTarget target, BufferAccess access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr MapBufferARB(BufferTargetArb target, ArbVertexBufferObject access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr MapBufferRange(BufferTarget target, IntPtr offset, IntPtr length, BufferAccessMask access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapControlPointsNV(NvEvaluators target, uint index, NvEvaluators type, int ustride, int vstride, int uorder, int vorder, bool packed, IntPtr points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapGrid1d(int un, double u1, double u2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapGrid1f(int un, float u1, float u2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr MapNamedBufferEXT(uint buffer, ExtDirectStateAccess access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr MapNamedBufferRangeEXT(uint buffer, IntPtr offset, IntPtr length, BufferAccessMask access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr MapObjectBufferATI(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapParameterfvNV(NvEvaluators target, NvEvaluators pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapParameterivNV(NvEvaluators target, NvEvaluators pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialf(MaterialFace face, MaterialParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialfv(MaterialFace face, MaterialParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materiali(MaterialFace face, MaterialParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialiv(MaterialFace face, MaterialParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixFrustumEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixIndexPointerARB(int size, ArbMatrixPalette type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixIndexubvARB(int size, byte* indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixIndexuivARB(int size, uint* indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixIndexusvARB(int size, ushort* indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixLoaddEXT(MatrixMode mode, double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixLoadfEXT(MatrixMode mode, float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixLoadIdentityEXT(MatrixMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixLoadTransposedEXT(MatrixMode mode, double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixLoadTransposefEXT(MatrixMode mode, float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixMode(MatrixMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixMultdEXT(MatrixMode mode, double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixMultfEXT(MatrixMode mode, float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixMultTransposedEXT(MatrixMode mode, double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixMultTransposefEXT(MatrixMode mode, float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixOrthoEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixPopEXT(MatrixMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixPushEXT(MatrixMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixRotatedEXT(MatrixMode mode, double angle, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixRotatefEXT(MatrixMode mode, float angle, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixScaledEXT(MatrixMode mode, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixScalefEXT(MatrixMode mode, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixTranslatedEXT(MatrixMode mode, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixTranslatefEXT(MatrixMode mode, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MemoryBarrierEXT(uint barriers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Minmax(MinmaxTarget target, PixelInternalFormat internalformat, bool sink);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MinmaxEXT(ExtHistogram target, PixelInternalFormat internalformat, bool sink);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MinSampleShading(float value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MinSampleShadingARB(float value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawArrays(BeginMode mode, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawArraysEXT(BeginMode mode, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawArraysIndirectAMD(AmdMultiDrawIndirect mode, IntPtr indirect, int primcount, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawElementArrayAPPLE(BeginMode mode, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawElements(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawElementsBaseVertex(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount, int* basevertex);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawElementsEXT(BeginMode mode, int* count, DrawElementsType type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawElementsIndirectAMD(AmdMultiDrawIndirect mode, AmdMultiDrawIndirect type, IntPtr indirect, int primcount, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawRangeElementArrayAPPLE(BeginMode mode, uint start, uint end, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiModeDrawArraysIBM(BeginMode* mode, int* first, int* count, int primcount, int modestride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiModeDrawElementsIBM(BeginMode* mode, int* count, DrawElementsType type, IntPtr indices, int primcount, int modestride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexBufferEXT(TextureUnit texunit, TextureTarget target, ExtDirectStateAccess internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1d(TextureUnit target, double s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1dARB(TextureUnit target, double s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1dv(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1dvARB(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1f(TextureUnit target, float s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1fARB(TextureUnit target, float s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1fv(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1fvARB(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1hNV(TextureUnit target, Half s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1hvNV(TextureUnit target, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1i(TextureUnit target, int s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1iARB(TextureUnit target, int s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1iv(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1ivARB(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1s(TextureUnit target, short s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1sARB(TextureUnit target, short s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1sv(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord1svARB(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2d(TextureUnit target, double s, double t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2dARB(TextureUnit target, double s, double t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2dv(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2dvARB(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2f(TextureUnit target, float s, float t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2fARB(TextureUnit target, float s, float t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2fv(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2fvARB(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2hNV(TextureUnit target, Half s, Half t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2hvNV(TextureUnit target, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2i(TextureUnit target, int s, int t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2iARB(TextureUnit target, int s, int t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2iv(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2ivARB(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2s(TextureUnit target, short s, short t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2sARB(TextureUnit target, short s, short t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2sv(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord2svARB(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3d(TextureUnit target, double s, double t, double r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3dARB(TextureUnit target, double s, double t, double r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3dv(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3dvARB(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3f(TextureUnit target, float s, float t, float r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3fARB(TextureUnit target, float s, float t, float r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3fv(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3fvARB(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3hNV(TextureUnit target, Half s, Half t, Half r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3hvNV(TextureUnit target, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3i(TextureUnit target, int s, int t, int r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3iARB(TextureUnit target, int s, int t, int r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3iv(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3ivARB(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3s(TextureUnit target, short s, short t, short r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3sARB(TextureUnit target, short s, short t, short r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3sv(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord3svARB(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4d(TextureUnit target, double s, double t, double r, double q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4dARB(TextureUnit target, double s, double t, double r, double q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4dv(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4dvARB(TextureUnit target, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4f(TextureUnit target, float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4fARB(TextureUnit target, float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4fv(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4fvARB(TextureUnit target, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4hNV(TextureUnit target, Half s, Half t, Half r, Half q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4hvNV(TextureUnit target, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4i(TextureUnit target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4iARB(TextureUnit target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4iv(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4ivARB(TextureUnit target, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4s(TextureUnit target, short s, short t, short r, short q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4sARB(TextureUnit target, short s, short t, short r, short q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4sv(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4svARB(TextureUnit target, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoordP1ui(TextureUnit texture, PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoordP1uiv(TextureUnit texture, PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoordP2ui(TextureUnit texture, PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoordP2uiv(TextureUnit texture, PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoordP3ui(TextureUnit texture, PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoordP3uiv(TextureUnit texture, PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoordP4ui(TextureUnit texture, PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoordP4uiv(TextureUnit texture, PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoordPointerEXT(TextureUnit texunit, int size, TexCoordPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexEnvfEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexEnviEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexGendEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexGenfEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexGeniEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexParameterfEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexParameteriEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexRenderbufferEXT(TextureUnit texunit, TextureTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultMatrixd(double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultTransposeMatrixd(double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultTransposeMatrixdARB(double* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultTransposeMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultTransposeMatrixfARB(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedBufferDataEXT(uint buffer, IntPtr size, IntPtr data, ExtDirectStateAccess usage);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedBufferSubDataEXT(uint buffer, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, IntPtr readOffset, IntPtr writeOffset, IntPtr size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedFramebufferRenderbufferEXT(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedFramebufferTexture1DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedFramebufferTexture2DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedFramebufferTexture3DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedFramebufferTextureEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedFramebufferTextureFaceEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, TextureTarget face);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedFramebufferTextureLayerEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParameter4dEXT(uint program, ExtDirectStateAccess target, uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParameter4dvEXT(uint program, ExtDirectStateAccess target, uint index, double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParameter4fEXT(uint program, ExtDirectStateAccess target, uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParameter4fvEXT(uint program, ExtDirectStateAccess target, uint index, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParameterI4iEXT(uint program, ExtDirectStateAccess target, uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParameterI4ivEXT(uint program, ExtDirectStateAccess target, uint index, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParameterI4uiEXT(uint program, ExtDirectStateAccess target, uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParameterI4uivEXT(uint program, ExtDirectStateAccess target, uint index, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParameters4fvEXT(uint program, ExtDirectStateAccess target, uint index, int count, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParametersI4ivEXT(uint program, ExtDirectStateAccess target, uint index, int count, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramLocalParametersI4uivEXT(uint program, ExtDirectStateAccess target, uint index, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedProgramStringEXT(uint program, ExtDirectStateAccess target, ExtDirectStateAccess format, int len, IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedRenderbufferStorageEXT(uint renderbuffer, PixelInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, PixelInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NamedStringARB(ArbShadingLanguageInclude type, int namelen, string name, int stringlen, string @string);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NewList(uint list, ListMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int NewObjectBufferATI(int size, IntPtr pointer, AtiVertexArrayObject usage);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3b(sbyte nx, sbyte ny, sbyte nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3bv(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3d(double nx, double ny, double nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3f(float nx, float ny, float nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3fVertex3fvSUN(float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3hNV(Half nx, Half ny, Half nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3i(int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3s(short nx, short ny, short nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalFormatNV(NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalP3ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalP3uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalPointer(NormalPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalPointerEXT(NormalPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalPointerListIBM(NormalPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalPointervINTEL(NormalPointerType type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3bATI(AtiVertexStreams stream, sbyte nx, sbyte ny, sbyte nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3bvATI(AtiVertexStreams stream, sbyte* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3dATI(AtiVertexStreams stream, double nx, double ny, double nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3fATI(AtiVertexStreams stream, float nx, float ny, float nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3iATI(AtiVertexStreams stream, int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3sATI(AtiVertexStreams stream, short nx, short ny, short nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalStream3svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate AppleObjectPurgeable ObjectPurgeableAPPLE(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable option);

      [SuppressUnmanagedCodeSecurity]
      internal delegate AppleObjectPurgeable ObjectUnpurgeableAPPLE(AppleObjectPurgeable objectType, uint name, AppleObjectPurgeable option);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Ortho(double left, double right, double bottom, double top, double zNear, double zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PassTexCoordATI(uint dst, uint coord, AtiFragmentShader swizzle);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PassThrough(float token);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PatchParameterfv(PatchParameterFloat pname, float* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PatchParameteri(PatchParameterInt pname, int value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PauseTransformFeedback();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PauseTransformFeedbackNV();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelDataRangeNV(NvPixelDataRange target, int length, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelMapfv(PixelMap map, int mapsize, float* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelMapuiv(PixelMap map, int mapsize, uint* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelMapusv(PixelMap map, int mapsize, ushort* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelStoref(PixelStoreParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelStorei(PixelStoreParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTexGenParameterfSGIS(SgisPixelTexture pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTexGenParameterfvSGIS(SgisPixelTexture pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTexGenParameteriSGIS(SgisPixelTexture pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTexGenParameterivSGIS(SgisPixelTexture pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTexGenSGIX(SgixPixelTexture mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTransferf(PixelTransferParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTransferi(PixelTransferParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTransformParameterfEXT(ExtPixelTransform target, ExtPixelTransform pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTransformParameterfvEXT(ExtPixelTransform target, ExtPixelTransform pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTransformParameteriEXT(ExtPixelTransform target, ExtPixelTransform pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelTransformParameterivEXT(ExtPixelTransform target, ExtPixelTransform pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelZoom(float xfactor, float yfactor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PNTrianglesfATI(AtiPnTriangles pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PNTrianglesiATI(AtiPnTriangles pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterf(PointParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterfARB(ArbPointParameters pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterfEXT(ExtPointParameters pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterfSGIS(SgisPointParameters pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterfv(PointParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterfvARB(ArbPointParameters pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterfvEXT(ExtPointParameters pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterfvSGIS(SgisPointParameters pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameteri(PointParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameteriNV(NvPointSprite pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameteriv(PointParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterivNV(NvPointSprite pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointSize(float size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int PollAsyncSGIX([Out] uint* markerp);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int PollInstrumentsSGIX([Out] int* marker_p);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonMode(MaterialFace face, PolygonMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonOffset(float factor, float units);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonOffsetEXT(float factor, float bias);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonStipple(byte* mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PopAttrib();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PopClientAttrib();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PopMatrix();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PopName();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, NvPresentVideo type, NvPresentVideo target0, uint fill0, NvPresentVideo target1, uint fill1, NvPresentVideo target2, uint fill2, NvPresentVideo target3, uint fill3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, NvPresentVideo type, NvPresentVideo target0, uint fill0, uint key0, NvPresentVideo target1, uint fill1, uint key1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PrimitiveRestartIndex(uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PrimitiveRestartIndexNV(uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PrimitiveRestartNV();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PrioritizeTextures(int n, uint* textures, float* priorities);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PrioritizeTexturesEXT(int n, uint* textures, float* priorities);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramBinary(uint program, BinaryFormat binaryFormat, IntPtr binary, int length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramBufferParametersfvNV(NvParameterBufferObject target, uint buffer, uint index, int count, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramBufferParametersIivNV(NvParameterBufferObject target, uint buffer, uint index, int count, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramBufferParametersIuivNV(NvParameterBufferObject target, uint buffer, uint index, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParameter4dARB(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParameter4dvARB(AssemblyProgramTargetArb target, uint index, double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParameter4fARB(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParameter4fvARB(AssemblyProgramTargetArb target, uint index, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParameterI4iNV(NvGpuProgram4 target, uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParameterI4ivNV(NvGpuProgram4 target, uint index, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParameterI4uiNV(NvGpuProgram4 target, uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParameterI4uivNV(NvGpuProgram4 target, uint index, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParameters4fvEXT(ExtGpuProgramParameters target, uint index, int count, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParametersI4ivNV(NvGpuProgram4 target, uint index, int count, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramEnvParametersI4uivNV(NvGpuProgram4 target, uint index, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParameter4dARB(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParameter4dvARB(AssemblyProgramTargetArb target, uint index, double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParameter4fARB(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParameter4fvARB(AssemblyProgramTargetArb target, uint index, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParameterI4iNV(NvGpuProgram4 target, uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParameterI4ivNV(NvGpuProgram4 target, uint index, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParameterI4uiNV(NvGpuProgram4 target, uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParameterI4uivNV(NvGpuProgram4 target, uint index, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParameters4fvEXT(ExtGpuProgramParameters target, uint index, int count, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParametersI4ivNV(NvGpuProgram4 target, uint index, int count, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramLocalParametersI4uivNV(NvGpuProgram4 target, uint index, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramNamedParameter4dNV(uint id, int len, byte* name, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramNamedParameter4dvNV(uint id, int len, byte* name, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramNamedParameter4fNV(uint id, int len, byte* name, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramNamedParameter4fvNV(uint id, int len, byte* name, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramParameter4dNV(AssemblyProgramTargetArb target, uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramParameter4dvNV(AssemblyProgramTargetArb target, uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramParameter4fNV(AssemblyProgramTargetArb target, uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramParameter4fvNV(AssemblyProgramTargetArb target, uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramParameteri(uint program, AssemblyProgramParameterArb pname, int value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramParameteriARB(uint program, AssemblyProgramParameterArb pname, int value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramParameteriEXT(uint program, AssemblyProgramParameterArb pname, int value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramParameters4dvNV(AssemblyProgramTargetArb target, uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramParameters4fvNV(AssemblyProgramTargetArb target, uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramStringARB(AssemblyProgramTargetArb target, ArbVertexProgram format, int len, IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramSubroutineParametersuivNV(NvGpuProgram5 target, int count, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1d(uint program, int location, double v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1dEXT(uint program, int location, double x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1dv(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1dvEXT(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1f(uint program, int location, float v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1fEXT(uint program, int location, float v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1fv(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1fvEXT(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1i(uint program, int location, int v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1i64NV(uint program, int location, long x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1i64vNV(uint program, int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1iEXT(uint program, int location, int v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1iv(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1ivEXT(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1ui(uint program, int location, uint v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1ui64NV(uint program, int location, ulong x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1ui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1uiEXT(uint program, int location, uint v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1uiv(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform1uivEXT(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2d(uint program, int location, double v0, double v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2dEXT(uint program, int location, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2dv(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2dvEXT(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2f(uint program, int location, float v0, float v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2fEXT(uint program, int location, float v0, float v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2fv(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2fvEXT(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2i(uint program, int location, int v0, int v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2i64NV(uint program, int location, long x, long y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2i64vNV(uint program, int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2iEXT(uint program, int location, int v0, int v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2iv(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2ivEXT(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2ui(uint program, int location, uint v0, uint v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2ui64NV(uint program, int location, ulong x, ulong y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2ui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2uiEXT(uint program, int location, uint v0, uint v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2uiv(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform2uivEXT(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3d(uint program, int location, double v0, double v1, double v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3dEXT(uint program, int location, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3dv(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3dvEXT(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3f(uint program, int location, float v0, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3fv(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3fvEXT(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3i(uint program, int location, int v0, int v1, int v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3i64NV(uint program, int location, long x, long y, long z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3i64vNV(uint program, int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3iv(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3ivEXT(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3ui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3uiv(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform3uivEXT(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4dv(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4dvEXT(uint program, int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4fv(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4fvEXT(uint program, int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4i64vNV(uint program, int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4iv(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4ivEXT(uint program, int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4ui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4uiv(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniform4uivEXT(uint program, int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2x3fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix2x4fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3x2fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix3x4fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4x2fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformMatrix4x3fvEXT(uint program, int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformui64NV(uint program, int location, ulong value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramUniformui64vNV(uint program, int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramVertexLimitNV(NvGeometryProgram4 target, int limit);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProvokingVertex(ProvokingVertexMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProvokingVertexEXT(ExtProvokingVertex mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PushAttrib(AttribMask mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PushClientAttrib(ClientAttribMask mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PushClientAttribDefaultEXT(ClientAttribMask mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PushMatrix();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PushName(uint name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void QueryCounter(uint id, QueryCounterTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos2d(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos2dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos2f(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos2fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos2i(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos2iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos2s(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos2sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos3d(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos3f(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos3i(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos3s(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos4d(double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos4dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos4f(float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos4fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos4i(int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos4iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos4s(short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RasterPos4sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReadBuffer(ReadBufferMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReadInstrumentsSGIX(int marker);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReadnPixelsARB(int x, int y, int width, int height, ArbRobustness format, ArbRobustness type, int bufSize, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, [Out] IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rectd(double x1, double y1, double x2, double y2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rectdv(double* v1, double* v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rectf(float x1, float y1, float x2, float y2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rectfv(float* v1, float* v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Recti(int x1, int y1, int x2, int y2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rectiv(int* v1, int* v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rects(short x1, short y1, short x2, short y2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rectsv(short* v1, short* v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReferencePlaneSGIX(double* equation);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReleaseShaderCompiler();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorage(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorageEXT(RenderbufferTarget target, RenderbufferStorage internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, RenderbufferStorage internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorageMultisampleCoverageNV(RenderbufferTarget target, int coverageSamples, int colorSamples, PixelInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorageMultisampleEXT(ExtFramebufferMultisample target, int samples, ExtFramebufferMultisample internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int RenderMode(RenderingMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodePointerSUN(SunTriangleList type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeubSUN(byte code);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeubvSUN(byte* code);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiColor3fVertex3fvSUN(uint* rc, float* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint* rc, float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiColor4ubVertex3fvSUN(uint* rc, byte* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiNormal3fVertex3fvSUN(uint* rc, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiSUN(uint code);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint* rc, float* tc, float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint* rc, float* tc, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiTexCoord2fVertex3fvSUN(uint* rc, float* tc, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuiVertex3fvSUN(uint* rc, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeuivSUN(uint* code);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeusSUN(ushort code);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReplacementCodeusvSUN(ushort* code);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RequestResidentProgramsNV(int n, uint* programs);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ResetHistogram(HistogramTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ResetHistogramEXT(ExtHistogram target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ResetMinmax(MinmaxTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ResetMinmaxEXT(ExtHistogram target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ResizeBuffersMESA();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ResumeTransformFeedback();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ResumeTransformFeedbackNV();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rotated(double angle, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rotatef(float angle, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleCoverage(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleCoverageARB(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleMapATI(uint dst, uint interp, AtiFragmentShader swizzle);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleMaskEXT(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleMaski(uint index, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleMaskIndexedNV(uint index, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleMaskSGIS(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SamplePatternEXT(ExtMultisample pattern);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SamplePatternSGIS(SgisMultisample pattern);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SamplerParameterf(uint sampler, SamplerParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SamplerParameterfv(uint sampler, SamplerParameter pname, float* param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SamplerParameteri(uint sampler, SamplerParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SamplerParameterIiv(uint sampler, ArbSamplerObjects pname, int* param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SamplerParameterIuiv(uint sampler, ArbSamplerObjects pname, uint* param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SamplerParameteriv(uint sampler, SamplerParameter pname, int* param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scaled(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scalef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scissor(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ScissorArrayv(uint first, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ScissorIndexed(uint index, int left, int bottom, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ScissorIndexedv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3b(sbyte red, sbyte green, sbyte blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3bv(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3bvEXT(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3d(double red, double green, double blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3dEXT(double red, double green, double blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3dvEXT(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3f(float red, float green, float blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3fEXT(float red, float green, float blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3fvEXT(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3hNV(Half red, Half green, Half blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3i(int red, int green, int blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3iEXT(int red, int green, int blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3ivEXT(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3s(short red, short green, short blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3sEXT(short red, short green, short blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3svEXT(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3ub(byte red, byte green, byte blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3ubEXT(byte red, byte green, byte blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3ubv(byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3ubvEXT(byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3ui(uint red, uint green, uint blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3uiEXT(uint red, uint green, uint blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3uiv(uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3uivEXT(uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3us(ushort red, ushort green, ushort blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3usEXT(ushort red, ushort green, ushort blue);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3usv(ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColor3usvEXT(ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColorFormatNV(int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColorP3ui(PackedPointerType type, uint color);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColorP3uiv(PackedPointerType type, uint* color);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColorPointerEXT(int size, ColorPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SecondaryColorPointerListIBM(int size, IbmVertexArrayLists type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SelectBuffer(int size, [Out] uint* buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, [Out] uint* counterList);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SeparableFilter2D(SeparableTarget target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SeparableFilter2DEXT(ExtConvolution target, PixelInternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SetFenceAPPLE(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SetFenceNV(uint fence, NvFence condition);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SetFragmentShaderConstantATI(uint dst, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SetInvariantEXT(uint id, ExtVertexShader type, IntPtr addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SetLocalConstantEXT(uint id, ExtVertexShader type, IntPtr addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SetMultisamplefvAMD(AmdSamplePositions pname, uint index, float* val);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShadeModel(ShadingModel mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShaderBinary(int count, uint* shaders, BinaryFormat binaryformat, IntPtr binary, int length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShaderOp1EXT(ExtVertexShader op, uint res, uint arg1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShaderOp2EXT(ExtVertexShader op, uint res, uint arg1, uint arg2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShaderOp3EXT(ExtVertexShader op, uint res, uint arg1, uint arg2, uint arg3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShaderSource(uint shader, int count, string[] @string, int* length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShaderSourceARB(uint shaderObj, int count, string[] @string, int* length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SharpenTexFuncSGIS(TextureTarget target, int n, float* points);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SpriteParameterfSGIX(SgixSprite pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SpriteParameterfvSGIX(SgixSprite pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SpriteParameteriSGIX(SgixSprite pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SpriteParameterivSGIX(SgixSprite pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StartInstrumentsSGIX();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilClearTagEXT(int stencilTagBits, uint stencilClearTag);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilFunc(StencilFunction func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilFuncSeparate(Version20 face, StencilFunction func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilFuncSeparateATI(StencilFunction frontfunc, StencilFunction backfunc, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilMaskSeparate(StencilFace face, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilOpSeparate(StencilFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilOpSeparateATI(AtiSeparateStencil face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StopInstrumentsSGIX(int marker);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StringMarkerGREMEDY(int len, IntPtr @string);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SwizzleEXT(uint res, uint @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TagSampleBufferSGIX();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3bEXT(sbyte tx, sbyte ty, sbyte tz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3bvEXT(sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3dEXT(double tx, double ty, double tz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3dvEXT(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3fEXT(float tx, float ty, float tz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3fvEXT(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3iEXT(int tx, int ty, int tz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3ivEXT(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3sEXT(short tx, short ty, short tz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Tangent3svEXT(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TangentPointerEXT(NormalPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TbufferMask3DFX(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TessellationFactorAMD(float factor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TessellationModeAMD(AmdVertexShaderTesselator mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool TestFenceAPPLE(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool TestFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool TestObjectAPPLE(AppleFence @object, uint name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexBuffer(TextureBufferTarget target, SizedInternalFormat internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexBufferARB(TextureTarget target, ArbTextureBufferObject internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexBufferEXT(TextureTarget target, ExtTextureBufferObject internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexBumpParameterfvATI(AtiEnvmapBumpmap pname, float* param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexBumpParameterivATI(AtiEnvmapBumpmap pname, int* param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1d(double s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1f(float s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1hNV(Half s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1i(int s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1s(short s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord1sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2d(double s, double t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2f(float s, float t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fColor3fVertex3fvSUN(float* tc, float* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fColor4fNormal3fVertex3fvSUN(float* tc, float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fColor4ubVertex3fvSUN(float* tc, byte* c, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fNormal3fVertex3fvSUN(float* tc, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fVertex3fSUN(float s, float t, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2fVertex3fvSUN(float* tc, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2hNV(Half s, Half t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2i(int s, int t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2s(short s, short t);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord2sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3d(double s, double t, double r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3f(float s, float t, float r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3hNV(Half s, Half t, Half r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3i(int s, int t, int r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3s(short s, short t, short r);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4d(double s, double t, double r, double q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4f(float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4fColor4fNormal3fVertex4fvSUN(float* tc, float* c, float* n, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4fVertex4fvSUN(float* tc, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4hNV(Half s, Half t, Half r, Half q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4i(int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4s(short s, short t, short r, short q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoord4sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordFormatNV(int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordP1ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordP1uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordP2ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordP2uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordP3ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordP3uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordP4ui(PackedPointerType type, uint coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordP4uiv(PackedPointerType type, uint* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordPointerEXT(int size, TexCoordPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordPointerListIBM(int size, TexCoordPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordPointervINTEL(int size, VertexPointerType type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnviv(TextureEnvTarget target, TextureEnvParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexFilterFuncSGIS(TextureTarget target, SgisTextureFilter4 filter, int n, float* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGend(TextureCoordName coord, TextureGenParameter pname, double param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGendv(TextureCoordName coord, TextureGenParameter pname, double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGenf(TextureCoordName coord, TextureGenParameter pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGenfv(TextureCoordName coord, TextureGenParameter pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGeni(TextureCoordName coord, TextureGenParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGeniv(TextureCoordName coord, TextureGenParameter pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage2DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, bool fixedsamplelocations);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage2DMultisampleCoverageNV(NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage3DEXT(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage3DMultisample(TextureTargetMultisample target, int samples, PixelInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage3DMultisampleCoverageNV(NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage4DSGIS(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterf(TextureTarget target, TextureParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterfv(TextureTarget target, TextureParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameteri(TextureTarget target, TextureParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterIiv(TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterIuiv(TextureTarget target, TextureParameterName pname, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameteriv(TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexRenderbufferNV(TextureTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage1DEXT(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage4DSGIS(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureBarrierNV();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureBufferEXT(uint texture, TextureTarget target, ExtDirectStateAccess internalformat, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureImage1DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureImage2DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureImage2DMultisampleCoverageNV(uint texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureImage2DMultisampleNV(uint texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureImage3DEXT(uint texture, TextureTarget target, int level, ExtDirectStateAccess internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureImage3DMultisampleCoverageNV(uint texture, NvTextureMultisample target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureImage3DMultisampleNV(uint texture, NvTextureMultisample target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureLightEXT(ExtLightTexture pname);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureMaterialEXT(MaterialFace face, MaterialParameter mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureNormalEXT(ExtTexturePerturbNormal mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureParameterfEXT(uint texture, TextureTarget target, TextureParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureParameterfvEXT(uint texture, TextureTarget target, TextureParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureParameteriEXT(uint texture, TextureTarget target, TextureParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureParameterIivEXT(uint texture, TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureParameterIuivEXT(uint texture, TextureTarget target, TextureParameterName pname, uint* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureParameterivEXT(uint texture, TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureRangeAPPLE(AppleTextureRange target, int length, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureRenderbufferEXT(uint texture, TextureTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TrackMatrixNV(AssemblyProgramTargetArb target, uint address, NvVertexProgram matrix, NvVertexProgram transform);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TransformFeedbackAttribsNV(uint count, int* attribs, NvTransformFeedback bufferMode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TransformFeedbackStreamAttribsNV(int count, int* attribs, int nbuffers, int* bufstreams, NvTransformFeedback bufferMode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TransformFeedbackVaryings(uint program, int count, string[] varyings, TransformFeedbackMode bufferMode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TransformFeedbackVaryingsEXT(uint program, int count, string[] varyings, ExtTransformFeedback bufferMode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TransformFeedbackVaryingsNV(uint program, int count, int* locations, NvTransformFeedback bufferMode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Translated(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Translatef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1d(int location, double x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1dv(int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1f(int location, float v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1fARB(int location, float v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1fv(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1fvARB(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1i(int location, int v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1i64NV(int location, long x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1i64vNV(int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1iARB(int location, int v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1iv(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1ivARB(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1ui(int location, uint v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1ui64NV(int location, ulong x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1ui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1uiEXT(int location, uint v0);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1uiv(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1uivEXT(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2d(int location, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2dv(int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2f(int location, float v0, float v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2fARB(int location, float v0, float v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2fv(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2fvARB(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2i(int location, int v0, int v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2i64NV(int location, long x, long y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2i64vNV(int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2iARB(int location, int v0, int v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2iv(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2ivARB(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2ui(int location, uint v0, uint v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2ui64NV(int location, ulong x, ulong y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2ui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2uiEXT(int location, uint v0, uint v1);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2uiv(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2uivEXT(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3d(int location, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3dv(int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3f(int location, float v0, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3fARB(int location, float v0, float v1, float v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3fv(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3fvARB(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3i(int location, int v0, int v1, int v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3i64NV(int location, long x, long y, long z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3i64vNV(int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3iARB(int location, int v0, int v1, int v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3iv(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3ivARB(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3ui(int location, uint v0, uint v1, uint v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3ui64NV(int location, ulong x, ulong y, ulong z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3ui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3uiEXT(int location, uint v0, uint v1, uint v2);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3uiv(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3uivEXT(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4d(int location, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4dv(int location, int count, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4f(int location, float v0, float v1, float v2, float v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4fARB(int location, float v0, float v1, float v2, float v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4fv(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4fvARB(int location, int count, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4i(int location, int v0, int v1, int v2, int v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4i64NV(int location, long x, long y, long z, long w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4i64vNV(int location, int count, long* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4iARB(int location, int v0, int v1, int v2, int v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4iv(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4ivARB(int location, int count, int* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4ui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4uiv(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4uivEXT(int location, int count, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformBufferEXT(uint program, int location, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix2dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix2fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix2fvARB(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix2x3dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix2x3fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix2x4dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix2x4fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix3dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix3fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix3fvARB(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix3x2dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix3x2fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix3x4dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix3x4fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix4dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix4fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix4fvARB(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix4x2dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix4x2fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix4x3dv(int location, int count, bool transpose, double* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix4x3fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformSubroutinesuiv(ShaderType shadertype, int count, uint* indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniformui64NV(int location, ulong value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniformui64vNV(int location, int count, ulong* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UnlockArraysEXT();

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool UnmapBuffer(BufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool UnmapBufferARB(BufferTargetArb target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool UnmapNamedBufferEXT(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UnmapObjectBufferATI(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UpdateObjectBufferATI(uint buffer, uint offset, int size, IntPtr pointer, AtiVertexArrayObject preserve);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UseProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UseProgramObjectARB(uint programObj);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UseProgramStages(uint pipeline, ProgramStageMask stages, uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UseShaderProgramEXT(ExtSeparateShaderObjects type, uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ValidateProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ValidateProgramARB(uint programObj);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ValidateProgramPipeline(uint pipeline);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantArrayObjectATI(uint id, AtiVertexArrayObject type, int stride, uint buffer, uint offset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantbvEXT(uint id, sbyte* addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantdvEXT(uint id, double* addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantfvEXT(uint id, float* addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantivEXT(uint id, int* addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantPointerEXT(uint id, ExtVertexShader type, uint stride, IntPtr addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantsvEXT(uint id, short* addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantubvEXT(uint id, byte* addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantuivEXT(uint id, uint* addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VariantusvEXT(uint id, ushort* addr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VDPAUFiniNV();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VDPAUGetSurfaceivNV(IntPtr surface, NvVdpauInterop pname, int bufSize, [Out] int* length, [Out] int* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VDPAUInitNV(IntPtr vdpDevice, IntPtr getProcAddress);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VDPAUIsSurfaceNV(IntPtr surface);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VDPAUMapSurfacesNV(int numSurfaces, IntPtr* surfaces);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr VDPAURegisterOutputSurfaceNV([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr VDPAURegisterVideoSurfaceNV([Out] IntPtr vdpSurface, NvVdpauInterop target, int numTextureNames, uint* textureNames);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VDPAUSurfaceAccessNV(IntPtr surface, NvVdpauInterop access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VDPAUUnmapSurfacesNV(int numSurface, IntPtr* surfaces);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VDPAUUnregisterSurfaceNV(IntPtr surface);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2d(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2f(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2hNV(Half x, Half y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2i(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2s(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex2sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3d(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3f(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3hNV(Half x, Half y, Half z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3i(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3s(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4d(double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4f(float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4hNV(Half x, Half y, Half z, Half w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4hvNV(Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4i(int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4s(short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Vertex4sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexArrayParameteriAPPLE(AppleVertexArrayRange pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexArrayRangeAPPLE(int length, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexArrayRangeNV(int length, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, ExtVertexAttrib64bit type, int stride, IntPtr offset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1d(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1dARB(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1dNV(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1dvARB(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1dvNV(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1f(uint index, float x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1fARB(uint index, float x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1fNV(uint index, float x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1fv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1fvARB(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1fvNV(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1hNV(uint index, Half x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1hvNV(uint index, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1s(uint index, short x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1sARB(uint index, short x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1sNV(uint index, short x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1svARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1svNV(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2d(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2dARB(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2dNV(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2dvARB(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2dvNV(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2f(uint index, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2fARB(uint index, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2fNV(uint index, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2fv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2fvARB(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2fvNV(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2hNV(uint index, Half x, Half y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2hvNV(uint index, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2s(uint index, short x, short y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2sARB(uint index, short x, short y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2sNV(uint index, short x, short y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2svARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2svNV(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3d(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3dARB(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3dNV(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3dvARB(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3dvNV(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3f(uint index, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3fARB(uint index, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3fNV(uint index, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3fv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3fvARB(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3fvNV(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3hNV(uint index, Half x, Half y, Half z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3hvNV(uint index, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3s(uint index, short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3sARB(uint index, short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3sNV(uint index, short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3svARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3svNV(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4bv(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4bvARB(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4d(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4dARB(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4dNV(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4dvARB(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4dvNV(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4f(uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4fARB(uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4fNV(uint index, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4fv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4fvARB(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4fvNV(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4hNV(uint index, Half x, Half y, Half z, Half w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4hvNV(uint index, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4ivARB(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4Nbv(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4NbvARB(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4Niv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4NivARB(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4Nsv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4NsvARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4Nubv(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4NubvARB(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4Nuiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4NuivARB(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4Nusv(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4NusvARB(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4s(uint index, short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4sARB(uint index, short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4sNV(uint index, short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4svARB(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4svNV(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4ubv(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4ubvARB(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4ubvNV(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4uivARB(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4usv(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4usvARB(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribArrayObjectATI(uint index, int size, AtiVertexAttribArrayObject type, bool normalized, int stride, uint buffer, uint offset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribDivisor(uint index, uint divisor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribDivisorARB(uint index, uint divisor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribFormatNV(uint index, int size, NvVertexBufferUnifiedMemory type, bool normalized, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI1i(uint index, int x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI1iEXT(uint index, int x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI1iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI1ivEXT(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI1ui(uint index, uint x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI1uiEXT(uint index, uint x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI1uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI1uivEXT(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI2i(uint index, int x, int y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI2iEXT(uint index, int x, int y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI2iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI2ivEXT(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI2ui(uint index, uint x, uint y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI2uiEXT(uint index, uint x, uint y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI2uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI2uivEXT(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI3i(uint index, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI3iEXT(uint index, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI3iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI3ivEXT(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI3ui(uint index, uint x, uint y, uint z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI3uiEXT(uint index, uint x, uint y, uint z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI3uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI3uivEXT(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4bv(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4bvEXT(uint index, sbyte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4i(uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4iEXT(uint index, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4iv(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4ivEXT(uint index, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4sv(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4svEXT(uint index, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4ubv(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4ubvEXT(uint index, byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4uiv(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4uivEXT(uint index, uint* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4usv(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribI4usvEXT(uint index, ushort* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribIFormatNV(uint index, int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribIPointer(uint index, int size, VertexAttribIPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribIPointerEXT(uint index, int size, NvVertexProgram4 type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL1d(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL1dEXT(uint index, double x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL1dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL1dvEXT(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL1i64NV(uint index, long x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL1i64vNV(uint index, long* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL1ui64NV(uint index, ulong x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL1ui64vNV(uint index, ulong* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL2d(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL2dEXT(uint index, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL2dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL2dvEXT(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL2i64NV(uint index, long x, long y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL2i64vNV(uint index, long* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL2ui64NV(uint index, ulong x, ulong y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL2ui64vNV(uint index, ulong* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL3d(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL3dEXT(uint index, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL3dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL3dvEXT(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL3i64NV(uint index, long x, long y, long z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL3i64vNV(uint index, long* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL3ui64vNV(uint index, ulong* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL4d(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL4dEXT(uint index, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL4dv(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL4dvEXT(uint index, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL4i64NV(uint index, long x, long y, long z, long w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL4i64vNV(uint index, long* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribL4ui64vNV(uint index, ulong* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribLFormatNV(uint index, int size, NvVertexAttribInteger64bit type, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribLPointer(uint index, int size, VertexAttribDPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribLPointerEXT(uint index, int size, ExtVertexAttrib64bit type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribP1ui(uint index, PackedPointerType type, bool normalized, uint value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribP1uiv(uint index, PackedPointerType type, bool normalized, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribP2ui(uint index, PackedPointerType type, bool normalized, uint value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribP2uiv(uint index, PackedPointerType type, bool normalized, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribP3ui(uint index, PackedPointerType type, bool normalized, uint value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribP3uiv(uint index, PackedPointerType type, bool normalized, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribP4ui(uint index, PackedPointerType type, bool normalized, uint value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribP4uiv(uint index, PackedPointerType type, bool normalized, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribPointerARB(uint index, int size, VertexAttribPointerTypeArb type, bool normalized, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribPointerNV(uint index, int fsize, VertexAttribParameterArb type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs1dvNV(uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs1fvNV(uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs1hvNV(uint index, int n, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs1svNV(uint index, int count, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs2dvNV(uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs2fvNV(uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs2hvNV(uint index, int n, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs2svNV(uint index, int count, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs3dvNV(uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs3fvNV(uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs3hvNV(uint index, int n, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs3svNV(uint index, int count, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs4dvNV(uint index, int count, double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs4fvNV(uint index, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs4hvNV(uint index, int n, Half* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs4svNV(uint index, int count, short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribs4ubvNV(uint index, int count, byte* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexBlendARB(int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexBlendEnvfATI(AtiVertexStreams pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexBlendEnviATI(AtiVertexStreams pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexFormatNV(int size, NvVertexBufferUnifiedMemory type, int stride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexP2ui(PackedPointerType type, uint value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexP2uiv(PackedPointerType type, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexP3ui(PackedPointerType type, uint value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexP3uiv(PackedPointerType type, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexP4ui(PackedPointerType type, uint value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexP4uiv(PackedPointerType type, uint* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexPointerEXT(int size, VertexPointerType type, int stride, int count, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexPointerListIBM(int size, VertexPointerType type, int stride, IntPtr pointer, int ptrstride);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexPointervINTEL(int size, VertexPointerType type, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream1dATI(AtiVertexStreams stream, double x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream1dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream1fATI(AtiVertexStreams stream, float x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream1fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream1iATI(AtiVertexStreams stream, int x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream1ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream1sATI(AtiVertexStreams stream, short x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream1svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream2dATI(AtiVertexStreams stream, double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream2dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream2fATI(AtiVertexStreams stream, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream2fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream2iATI(AtiVertexStreams stream, int x, int y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream2ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream2sATI(AtiVertexStreams stream, short x, short y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream2svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream3dATI(AtiVertexStreams stream, double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream3dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream3fATI(AtiVertexStreams stream, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream3fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream3iATI(AtiVertexStreams stream, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream3ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream3sATI(AtiVertexStreams stream, short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream3svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream4dATI(AtiVertexStreams stream, double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream4dvATI(AtiVertexStreams stream, double* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream4fATI(AtiVertexStreams stream, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream4fvATI(AtiVertexStreams stream, float* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream4iATI(AtiVertexStreams stream, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream4ivATI(AtiVertexStreams stream, int* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream4sATI(AtiVertexStreams stream, short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexStream4svATI(AtiVertexStreams stream, short* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexWeightfEXT(float weight);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexWeightfvEXT(float* weight);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexWeighthNV(Half weight);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexWeighthvNV(Half* weight);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexWeightPointerEXT(int size, ExtVertexWeighting type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate NvVideoCapture VideoCaptureNV(uint video_capture_slot, [Out] uint* sequence_num, [Out] ulong* capture_time);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, NvVideoCapture pname, double* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, NvVideoCapture pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, NvVideoCapture pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Viewport(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ViewportArrayv(uint first, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ViewportIndexedf(uint index, float x, float y, float w, float h);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ViewportIndexedfv(uint index, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WaitSync(IntPtr sync, uint flags, ulong timeout);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightbvARB(int size, sbyte* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightdvARB(int size, double* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightfvARB(int size, float* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightivARB(int size, int* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightPointerARB(int size, ArbVertexBlend type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightsvARB(int size, short* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightubvARB(int size, byte* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightuivARB(int size, uint* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightusvARB(int size, ushort* weights);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2d(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2dARB(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2dMESA(double x, double y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2dvARB(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2dvMESA(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2f(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2fARB(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2fMESA(float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2fvARB(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2fvMESA(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2i(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2iARB(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2iMESA(int x, int y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2ivARB(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2ivMESA(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2s(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2sARB(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2sMESA(short x, short y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2svARB(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos2svMESA(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3d(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3dARB(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3dMESA(double x, double y, double z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3dv(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3dvARB(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3dvMESA(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3f(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3fARB(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3fMESA(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3fv(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3fvARB(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3fvMESA(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3i(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3iARB(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3iMESA(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3iv(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3ivARB(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3ivMESA(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3s(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3sARB(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3sMESA(short x, short y, short z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3sv(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3svARB(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos3svMESA(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos4dMESA(double x, double y, double z, double w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos4dvMESA(double* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos4fMESA(float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos4fvMESA(float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos4iMESA(int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos4ivMESA(int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos4sMESA(short x, short y, short z, short w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WindowPos4svMESA(short* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WriteMaskEXT(uint res, uint @in, ExtVertexShader outX, ExtVertexShader outY, ExtVertexShader outZ, ExtVertexShader outW);
    }
  }
}
