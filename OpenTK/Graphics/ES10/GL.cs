// Type: OpenTK.Graphics.ES10.GL
// Assembly: OpenTK, Version=1.1.0.0, Culture=neutral, PublicKeyToken=bad199fe84eb3df4
// MVID: FE2CFFE8-B942-430E-8C15-E783DB6F0AD6
// Assembly location: F:\Program Files (x86)\FEZ\OpenTK.dll

using OpenTK;
using OpenTK.Graphics;
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace OpenTK.Graphics.ES10
{
  public sealed class GL : GraphicsBindingsBase
  {
    private static readonly object sync_root = new object();
    private const string Library = "libGLES.dll";

    protected override object SyncRoot
    {
      get
      {
        return GL.sync_root;
      }
    }

    static GL()
    {
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glActiveTexture", Version = "1.0")]
    public static void ActiveTexture(All texture)
    {
      GL.Delegates.glActiveTexture(texture);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glAlphaFunc", Version = "1.0")]
    public static void AlphaFunc(All func, float @ref)
    {
      GL.Delegates.glAlphaFunc(func, @ref);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glAlphaFuncx", Version = "1.0")]
    public static void AlphaFuncx(All func, int @ref)
    {
      GL.Delegates.glAlphaFuncx(func, @ref);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glBindTexture", Version = "1.0")]
    public static void BindTexture(All target, int texture)
    {
      GL.Delegates.glBindTexture(target, (uint) texture);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glBindTexture", Version = "1.0")]
    [CLSCompliant(false)]
    public static void BindTexture(All target, uint texture)
    {
      GL.Delegates.glBindTexture(target, texture);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glBlendFunc", Version = "1.0")]
    public static void BlendFunc(All sfactor, All dfactor)
    {
      GL.Delegates.glBlendFunc(sfactor, dfactor);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glClear", Version = "1.0")]
    public static void Clear(int mask)
    {
      GL.Delegates.glClear((uint) mask);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glClear", Version = "1.0")]
    [CLSCompliant(false)]
    public static void Clear(uint mask)
    {
      GL.Delegates.glClear(mask);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glClearColor", Version = "1.0")]
    public static void ClearColor(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glClearColor(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glClearColorx", Version = "1.0")]
    public static void ClearColorx(int red, int green, int blue, int alpha)
    {
      GL.Delegates.glClearColorx(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glClearDepthf", Version = "1.0")]
    public static void ClearDepth(float depth)
    {
      GL.Delegates.glClearDepthf(depth);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glClearDepthx", Version = "1.0")]
    public static void ClearDepthx(int depth)
    {
      GL.Delegates.glClearDepthx(depth);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glClearStencil", Version = "1.0")]
    public static void ClearStencil(int s)
    {
      GL.Delegates.glClearStencil(s);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glClientActiveTexture", Version = "1.0")]
    public static void ClientActiveTexture(All texture)
    {
      GL.Delegates.glClientActiveTexture(texture);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glColor4f", Version = "1.0")]
    public static void Color4(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glColor4f(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glColor4x", Version = "1.0")]
    public static void Color4x(int red, int green, int blue, int alpha)
    {
      GL.Delegates.glColor4x(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glColorMask", Version = "1.0")]
    public static void ColorMask(bool red, bool green, bool blue, bool alpha)
    {
      GL.Delegates.glColorMask(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glColorPointer", Version = "1.0")]
    public static void ColorPointer(int size, All type, int stride, IntPtr pointer)
    {
      GL.Delegates.glColorPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glColorPointer", Version = "1.0")]
    public static void ColorPointer<T3>(int size, All type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glColorPointer", Version = "1.0")]
    public static void ColorPointer<T3>(int size, All type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glColorPointer", Version = "1.0")]
    public static void ColorPointer<T3>(int size, All type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glColorPointer", Version = "1.0")]
    public static void ColorPointer<T3>(int size, All type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexImage2D", Version = "1.0")]
    public static void CompressedTexImage2D(All target, int level, All internalformat, int width, int height, int border, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexImage2D", Version = "1.0")]
    public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In, Out] T7[] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexImage2D", Version = "1.0")]
    public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexImage2D", Version = "1.0")]
    public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,,] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexImage2D", Version = "1.0")]
    public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In, Out] ref T7 data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T7) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexSubImage2D", Version = "1.0")]
    public static void CompressedTexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexSubImage2D", Version = "1.0")]
    public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In, Out] T8[] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexSubImage2D", Version = "1.0")]
    public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In, Out] T8[,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexSubImage2D", Version = "1.0")]
    public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In, Out] T8[,,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCompressedTexSubImage2D", Version = "1.0")]
    public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In, Out] ref T8 data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCopyTexImage2D", Version = "1.0")]
    public static void CopyTexImage2D(All target, int level, All internalformat, int x, int y, int width, int height, int border)
    {
      GL.Delegates.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCopyTexSubImage2D", Version = "1.0")]
    public static void CopyTexSubImage2D(All target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
    {
      GL.Delegates.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glCullFace", Version = "1.0")]
    public static void CullFace(All mode)
    {
      GL.Delegates.glCullFace(mode);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDeleteTextures", Version = "1.0")]
    public static unsafe void DeleteTextures(int n, int[] textures)
    {
      fixed (int* numPtr = textures)
        GL.Delegates.glDeleteTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDeleteTextures", Version = "1.0")]
    public static unsafe void DeleteTextures(int n, ref int textures)
    {
      fixed (int* numPtr = &textures)
        GL.Delegates.glDeleteTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDeleteTextures", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteTextures(int n, int* textures)
    {
      GL.Delegates.glDeleteTextures(n, (uint*) textures);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glDeleteTextures", Version = "1.0")]
    public static unsafe void DeleteTextures(int n, uint[] textures)
    {
      fixed (uint* textures1 = textures)
        GL.Delegates.glDeleteTextures(n, textures1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glDeleteTextures", Version = "1.0")]
    public static unsafe void DeleteTextures(int n, ref uint textures)
    {
      fixed (uint* textures1 = &textures)
        GL.Delegates.glDeleteTextures(n, textures1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glDeleteTextures", Version = "1.0")]
    public static unsafe void DeleteTextures(int n, uint* textures)
    {
      GL.Delegates.glDeleteTextures(n, textures);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDepthFunc", Version = "1.0")]
    public static void DepthFunc(All func)
    {
      GL.Delegates.glDepthFunc(func);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDepthMask", Version = "1.0")]
    public static void DepthMask(bool flag)
    {
      GL.Delegates.glDepthMask(flag);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDepthRangef", Version = "1.0")]
    public static void DepthRange(float zNear, float zFar)
    {
      GL.Delegates.glDepthRangef(zNear, zFar);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDepthRangex", Version = "1.0")]
    public static void DepthRangex(int zNear, int zFar)
    {
      GL.Delegates.glDepthRangex(zNear, zFar);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDisable", Version = "1.0")]
    public static void Disable(All cap)
    {
      GL.Delegates.glDisable(cap);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDisableClientState", Version = "1.0")]
    public static void DisableClientState(All array)
    {
      GL.Delegates.glDisableClientState(array);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDrawArrays", Version = "1.0")]
    public static void DrawArrays(All mode, int first, int count)
    {
      GL.Delegates.glDrawArrays(mode, first, count);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDrawElements", Version = "1.0")]
    public static void DrawElements(All mode, int count, All type, IntPtr indices)
    {
      GL.Delegates.glDrawElements(mode, count, type, indices);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDrawElements", Version = "1.0")]
    public static void DrawElements<T3>(All mode, int count, All type, [In, Out] T3[] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDrawElements", Version = "1.0")]
    public static void DrawElements<T3>(All mode, int count, All type, [In, Out] T3[,] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDrawElements", Version = "1.0")]
    public static void DrawElements<T3>(All mode, int count, All type, [In, Out] T3[,,] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glDrawElements", Version = "1.0")]
    public static void DrawElements<T3>(All mode, int count, All type, [In, Out] ref T3 indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
        indices = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glEnable", Version = "1.0")]
    public static void Enable(All cap)
    {
      GL.Delegates.glEnable(cap);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glEnableClientState", Version = "1.0")]
    public static void EnableClientState(All array)
    {
      GL.Delegates.glEnableClientState(array);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glFinish", Version = "1.0")]
    public static void Finish()
    {
      GL.Delegates.glFinish();
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glFlush", Version = "1.0")]
    public static void Flush()
    {
      GL.Delegates.glFlush();
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glFogf", Version = "1.0")]
    public static void Fog(All pname, float param)
    {
      GL.Delegates.glFogf(pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glFogfv", Version = "1.0")]
    public static unsafe void Fog(All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glFogfv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glFogfv", Version = "1.0")]
    public static unsafe void Fog(All pname, float* @params)
    {
      GL.Delegates.glFogfv(pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glFogx", Version = "1.0")]
    public static void Fogx(All pname, int param)
    {
      GL.Delegates.glFogx(pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glFogxv", Version = "1.0")]
    public static unsafe void Fogx(All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glFogxv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glFogxv", Version = "1.0")]
    public static unsafe void Fogx(All pname, int* @params)
    {
      GL.Delegates.glFogxv(pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glFrontFace", Version = "1.0")]
    public static void FrontFace(All mode)
    {
      GL.Delegates.glFrontFace(mode);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glFrustumf", Version = "1.0")]
    public static void Frustum(float left, float right, float bottom, float top, float zNear, float zFar)
    {
      GL.Delegates.glFrustumf(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glFrustumx", Version = "1.0")]
    public static void Frustumx(int left, int right, int bottom, int top, int zNear, int zFar)
    {
      GL.Delegates.glFrustumx(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glGenTextures", Version = "1.0")]
    public static unsafe void GenTextures(int n, int[] textures)
    {
      fixed (int* numPtr = textures)
        GL.Delegates.glGenTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glGenTextures", Version = "1.0")]
    public static unsafe void GenTextures(int n, ref int textures)
    {
      fixed (int* numPtr = &textures)
        GL.Delegates.glGenTextures(n, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glGenTextures", Version = "1.0")]
    public static unsafe void GenTextures(int n, int* textures)
    {
      GL.Delegates.glGenTextures(n, (uint*) textures);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glGenTextures", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, uint[] textures)
    {
      fixed (uint* textures1 = textures)
        GL.Delegates.glGenTextures(n, textures1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glGenTextures", Version = "1.0")]
    public static unsafe void GenTextures(int n, ref uint textures)
    {
      fixed (uint* textures1 = &textures)
        GL.Delegates.glGenTextures(n, textures1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glGenTextures", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, uint* textures)
    {
      GL.Delegates.glGenTextures(n, textures);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glGetError", Version = "1.0")]
    public static All GetError()
    {
      return GL.Delegates.glGetError();
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glGetIntegerv", Version = "1.0")]
    public static unsafe void GetInteger(All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetIntegerv(pname, params1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glGetIntegerv", Version = "1.0")]
    public static unsafe void GetInteger(All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetIntegerv(pname, params1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glGetIntegerv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void GetInteger(All pname, int* @params)
    {
      GL.Delegates.glGetIntegerv(pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glGetString", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe string GetString(All name)
    {
      return new string((sbyte*) (void*) GL.Delegates.glGetString(name));
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glHint", Version = "1.0")]
    public static void Hint(All target, All mode)
    {
      GL.Delegates.glHint(target, mode);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLightf", Version = "1.0")]
    public static void Light(All light, All pname, float param)
    {
      GL.Delegates.glLightf(light, pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLightfv", Version = "1.0")]
    public static unsafe void Light(All light, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glLightfv(light, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glLightfv", Version = "1.0")]
    public static unsafe void Light(All light, All pname, float* @params)
    {
      GL.Delegates.glLightfv(light, pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLightModelf", Version = "1.0")]
    public static void LightModel(All pname, float param)
    {
      GL.Delegates.glLightModelf(pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLightModelfv", Version = "1.0")]
    public static unsafe void LightModel(All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glLightModelfv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glLightModelfv", Version = "1.0")]
    public static unsafe void LightModel(All pname, float* @params)
    {
      GL.Delegates.glLightModelfv(pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLightModelx", Version = "1.0")]
    public static void LightModelx(All pname, int param)
    {
      GL.Delegates.glLightModelx(pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLightModelxv", Version = "1.0")]
    public static unsafe void LightModelx(All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glLightModelxv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glLightModelxv", Version = "1.0")]
    public static unsafe void LightModelx(All pname, int* @params)
    {
      GL.Delegates.glLightModelxv(pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLightx", Version = "1.0")]
    public static void Lightx(All light, All pname, int param)
    {
      GL.Delegates.glLightx(light, pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLightxv", Version = "1.0")]
    public static unsafe void Lightx(All light, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glLightxv(light, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glLightxv", Version = "1.0")]
    public static unsafe void Lightx(All light, All pname, int* @params)
    {
      GL.Delegates.glLightxv(light, pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLineWidth", Version = "1.0")]
    public static void LineWidth(float width)
    {
      GL.Delegates.glLineWidth(width);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLineWidthx", Version = "1.0")]
    public static void LineWidthx(int width)
    {
      GL.Delegates.glLineWidthx(width);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLoadIdentity", Version = "1.0")]
    public static void LoadIdentity()
    {
      GL.Delegates.glLoadIdentity();
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLoadMatrixf", Version = "1.0")]
    public static unsafe void LoadMatrix(float[] m)
    {
      fixed (float* m1 = m)
        GL.Delegates.glLoadMatrixf(m1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLoadMatrixf", Version = "1.0")]
    public static unsafe void LoadMatrix(ref float m)
    {
      fixed (float* m1 = &m)
        GL.Delegates.glLoadMatrixf(m1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glLoadMatrixf", Version = "1.0")]
    public static unsafe void LoadMatrix(float* m)
    {
      GL.Delegates.glLoadMatrixf(m);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLoadMatrixx", Version = "1.0")]
    public static unsafe void LoadMatrixx(int[] m)
    {
      fixed (int* m1 = m)
        GL.Delegates.glLoadMatrixx(m1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLoadMatrixx", Version = "1.0")]
    public static unsafe void LoadMatrixx(ref int m)
    {
      fixed (int* m1 = &m)
        GL.Delegates.glLoadMatrixx(m1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glLoadMatrixx", Version = "1.0")]
    public static unsafe void LoadMatrixx(int* m)
    {
      GL.Delegates.glLoadMatrixx(m);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glLogicOp", Version = "1.0")]
    public static void LogicOp(All opcode)
    {
      GL.Delegates.glLogicOp(opcode);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMaterialf", Version = "1.0")]
    public static void Material(All face, All pname, float param)
    {
      GL.Delegates.glMaterialf(face, pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMaterialfv", Version = "1.0")]
    public static unsafe void Material(All face, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glMaterialfv(face, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glMaterialfv", Version = "1.0")]
    public static unsafe void Material(All face, All pname, float* @params)
    {
      GL.Delegates.glMaterialfv(face, pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMaterialx", Version = "1.0")]
    public static void Materialx(All face, All pname, int param)
    {
      GL.Delegates.glMaterialx(face, pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMaterialxv", Version = "1.0")]
    public static unsafe void Materialx(All face, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glMaterialxv(face, pname, params1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMaterialxv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void Materialx(All face, All pname, int* @params)
    {
      GL.Delegates.glMaterialxv(face, pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMatrixMode", Version = "1.0")]
    public static void MatrixMode(All mode)
    {
      GL.Delegates.glMatrixMode(mode);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMultiTexCoord4f", Version = "1.0")]
    public static void MultiTexCoord4(All target, float s, float t, float r, float q)
    {
      GL.Delegates.glMultiTexCoord4f(target, s, t, r, q);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMultiTexCoord4x", Version = "1.0")]
    public static void MultiTexCoord4x(All target, int s, int t, int r, int q)
    {
      GL.Delegates.glMultiTexCoord4x(target, s, t, r, q);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMultMatrixf", Version = "1.0")]
    public static unsafe void MultMatrix(float[] m)
    {
      fixed (float* m1 = m)
        GL.Delegates.glMultMatrixf(m1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMultMatrixf", Version = "1.0")]
    public static unsafe void MultMatrix(ref float m)
    {
      fixed (float* m1 = &m)
        GL.Delegates.glMultMatrixf(m1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glMultMatrixf", Version = "1.0")]
    public static unsafe void MultMatrix(float* m)
    {
      GL.Delegates.glMultMatrixf(m);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMultMatrixx", Version = "1.0")]
    public static unsafe void MultMatrixx(int[] m)
    {
      fixed (int* m1 = m)
        GL.Delegates.glMultMatrixx(m1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glMultMatrixx", Version = "1.0")]
    public static unsafe void MultMatrixx(ref int m)
    {
      fixed (int* m1 = &m)
        GL.Delegates.glMultMatrixx(m1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glMultMatrixx", Version = "1.0")]
    public static unsafe void MultMatrixx(int* m)
    {
      GL.Delegates.glMultMatrixx(m);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glNormal3f", Version = "1.0")]
    public static void Normal3(float nx, float ny, float nz)
    {
      GL.Delegates.glNormal3f(nx, ny, nz);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glNormal3x", Version = "1.0")]
    public static void Normal3x(int nx, int ny, int nz)
    {
      GL.Delegates.glNormal3x(nx, ny, nz);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glNormalPointer", Version = "1.0")]
    public static void NormalPointer(All type, int stride, IntPtr pointer)
    {
      GL.Delegates.glNormalPointer(type, stride, pointer);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glNormalPointer", Version = "1.0")]
    public static void NormalPointer<T2>(All type, int stride, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glNormalPointer", Version = "1.0")]
    public static void NormalPointer<T2>(All type, int stride, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glNormalPointer", Version = "1.0")]
    public static void NormalPointer<T2>(All type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glNormalPointer", Version = "1.0")]
    public static void NormalPointer<T2>(All type, int stride, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glOrthof", Version = "1.0")]
    public static void Ortho(float left, float right, float bottom, float top, float zNear, float zFar)
    {
      GL.Delegates.glOrthof(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glOrthox", Version = "1.0")]
    public static void Orthox(int left, int right, int bottom, int top, int zNear, int zFar)
    {
      GL.Delegates.glOrthox(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glPixelStorei", Version = "1.0")]
    public static void PixelStore(All pname, int param)
    {
      GL.Delegates.glPixelStorei(pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glPointSize", Version = "1.0")]
    public static void PointSize(float size)
    {
      GL.Delegates.glPointSize(size);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glPointSizex", Version = "1.0")]
    public static void PointSizex(int size)
    {
      GL.Delegates.glPointSizex(size);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glPolygonOffset", Version = "1.0")]
    public static void PolygonOffset(float factor, float units)
    {
      GL.Delegates.glPolygonOffset(factor, units);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glPolygonOffsetx", Version = "1.0")]
    public static void PolygonOffsetx(int factor, int units)
    {
      GL.Delegates.glPolygonOffsetx(factor, units);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glPopMatrix", Version = "1.0")]
    public static void PopMatrix()
    {
      GL.Delegates.glPopMatrix();
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glPushMatrix", Version = "1.0")]
    public static void PushMatrix()
    {
      GL.Delegates.glPushMatrix();
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels(int x, int y, int width, int height, All format, All type, IntPtr pixels)
    {
      GL.Delegates.glReadPixels(x, y, width, height, format, type, pixels);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In, Out] T6[] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In, Out] T6[,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In, Out] T6[,,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glReadPixels", Version = "1.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In, Out] ref T6 pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T6) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glRotatef", Version = "1.0")]
    public static void Rotate(float angle, float x, float y, float z)
    {
      GL.Delegates.glRotatef(angle, x, y, z);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glRotatex", Version = "1.0")]
    public static void Rotatex(int angle, int x, int y, int z)
    {
      GL.Delegates.glRotatex(angle, x, y, z);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glSampleCoverage", Version = "1.0")]
    public static void SampleCoverage(float value, bool invert)
    {
      GL.Delegates.glSampleCoverage(value, invert);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glSampleCoveragex", Version = "1.0")]
    public static void SampleCoveragex(int value, bool invert)
    {
      GL.Delegates.glSampleCoveragex(value, invert);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glScalef", Version = "1.0")]
    public static void Scale(float x, float y, float z)
    {
      GL.Delegates.glScalef(x, y, z);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glScalex", Version = "1.0")]
    public static void Scalex(int x, int y, int z)
    {
      GL.Delegates.glScalex(x, y, z);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glScissor", Version = "1.0")]
    public static void Scissor(int x, int y, int width, int height)
    {
      GL.Delegates.glScissor(x, y, width, height);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glShadeModel", Version = "1.0")]
    public static void ShadeModel(All mode)
    {
      GL.Delegates.glShadeModel(mode);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glStencilFunc", Version = "1.0")]
    public static void StencilFunc(All func, int @ref, int mask)
    {
      GL.Delegates.glStencilFunc(func, @ref, (uint) mask);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.0", EntryPoint = "glStencilFunc", Version = "1.0")]
    public static void StencilFunc(All func, int @ref, uint mask)
    {
      GL.Delegates.glStencilFunc(func, @ref, mask);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glStencilMask", Version = "1.0")]
    public static void StencilMask(int mask)
    {
      GL.Delegates.glStencilMask((uint) mask);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glStencilMask", Version = "1.0")]
    [CLSCompliant(false)]
    public static void StencilMask(uint mask)
    {
      GL.Delegates.glStencilMask(mask);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glStencilOp", Version = "1.0")]
    public static void StencilOp(All fail, All zfail, All zpass)
    {
      GL.Delegates.glStencilOp(fail, zfail, zpass);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexCoordPointer", Version = "1.0")]
    public static void TexCoordPointer(int size, All type, int stride, IntPtr pointer)
    {
      GL.Delegates.glTexCoordPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexCoordPointer", Version = "1.0")]
    public static void TexCoordPointer<T3>(int size, All type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexCoordPointer", Version = "1.0")]
    public static void TexCoordPointer<T3>(int size, All type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexCoordPointer", Version = "1.0")]
    public static void TexCoordPointer<T3>(int size, All type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexCoordPointer", Version = "1.0")]
    public static void TexCoordPointer<T3>(int size, All type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexEnvf", Version = "1.0")]
    public static void TexEnv(All target, All pname, float param)
    {
      GL.Delegates.glTexEnvf(target, pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexEnvfv", Version = "1.0")]
    public static unsafe void TexEnv(All target, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glTexEnvfv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexEnvfv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexEnv(All target, All pname, float* @params)
    {
      GL.Delegates.glTexEnvfv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexEnvx", Version = "1.0")]
    public static void TexEnvx(All target, All pname, int param)
    {
      GL.Delegates.glTexEnvx(target, pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexEnvxv", Version = "1.0")]
    public static unsafe void TexEnvx(All target, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexEnvxv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexEnvxv", Version = "1.0")]
    [CLSCompliant(false)]
    public static unsafe void TexEnvx(All target, All pname, int* @params)
    {
      GL.Delegates.glTexEnvxv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D(All target, int level, int internalformat, int width, int height, int border, All format, All type, IntPtr pixels)
    {
      GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In, Out] T8[] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In, Out] T8[,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In, Out] T8[,,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexImage2D", Version = "1.0")]
    public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In, Out] ref T8 pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexParameterf", Version = "1.0")]
    public static void TexParameter(All target, All pname, float param)
    {
      GL.Delegates.glTexParameterf(target, pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexParameterx", Version = "1.0")]
    public static void TexParameterx(All target, All pname, int param)
    {
      GL.Delegates.glTexParameterx(target, pname, param);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexSubImage2D", Version = "1.0")]
    public static void TexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, IntPtr pixels)
    {
      GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexSubImage2D", Version = "1.0")]
    public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In, Out] T8[] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexSubImage2D", Version = "1.0")]
    public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In, Out] T8[,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexSubImage2D", Version = "1.0")]
    public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In, Out] T8[,,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTexSubImage2D", Version = "1.0")]
    public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In, Out] ref T8 pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTranslatef", Version = "1.0")]
    public static void Translate(float x, float y, float z)
    {
      GL.Delegates.glTranslatef(x, y, z);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glTranslatex", Version = "1.0")]
    public static void Translatex(int x, int y, int z)
    {
      GL.Delegates.glTranslatex(x, y, z);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glVertexPointer", Version = "1.0")]
    public static void VertexPointer(int size, All type, int stride, IntPtr pointer)
    {
      GL.Delegates.glVertexPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glVertexPointer", Version = "1.0")]
    public static void VertexPointer<T3>(int size, All type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glVertexPointer", Version = "1.0")]
    public static void VertexPointer<T3>(int size, All type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glVertexPointer", Version = "1.0")]
    public static void VertexPointer<T3>(int size, All type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glVertexPointer", Version = "1.0")]
    public static void VertexPointer<T3>(int size, All type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.0", EntryPoint = "glViewport", Version = "1.0")]
    public static void Viewport(int x, int y, int width, int height)
    {
      GL.Delegates.glViewport(x, y, width, height);
    }

    internal static class Delegates
    {
      internal static GL.Delegates.ActiveTexture glActiveTexture;
      internal static GL.Delegates.AlphaFunc glAlphaFunc;
      internal static GL.Delegates.AlphaFuncx glAlphaFuncx;
      internal static GL.Delegates.BindTexture glBindTexture;
      internal static GL.Delegates.BlendFunc glBlendFunc;
      internal static GL.Delegates.Clear glClear;
      internal static GL.Delegates.ClearColor glClearColor;
      internal static GL.Delegates.ClearColorx glClearColorx;
      internal static GL.Delegates.ClearDepthf glClearDepthf;
      internal static GL.Delegates.ClearDepthx glClearDepthx;
      internal static GL.Delegates.ClearStencil glClearStencil;
      internal static GL.Delegates.ClientActiveTexture glClientActiveTexture;
      internal static GL.Delegates.Color4f glColor4f;
      internal static GL.Delegates.Color4x glColor4x;
      internal static GL.Delegates.ColorMask glColorMask;
      internal static GL.Delegates.ColorPointer glColorPointer;
      internal static GL.Delegates.CompressedTexImage2D glCompressedTexImage2D;
      internal static GL.Delegates.CompressedTexSubImage2D glCompressedTexSubImage2D;
      internal static GL.Delegates.CopyTexImage2D glCopyTexImage2D;
      internal static GL.Delegates.CopyTexSubImage2D glCopyTexSubImage2D;
      internal static GL.Delegates.CullFace glCullFace;
      internal static GL.Delegates.DeleteTextures glDeleteTextures;
      internal static GL.Delegates.DepthFunc glDepthFunc;
      internal static GL.Delegates.DepthMask glDepthMask;
      internal static GL.Delegates.DepthRangef glDepthRangef;
      internal static GL.Delegates.DepthRangex glDepthRangex;
      internal static GL.Delegates.Disable glDisable;
      internal static GL.Delegates.DisableClientState glDisableClientState;
      internal static GL.Delegates.DrawArrays glDrawArrays;
      internal static GL.Delegates.DrawElements glDrawElements;
      internal static GL.Delegates.Enable glEnable;
      internal static GL.Delegates.EnableClientState glEnableClientState;
      internal static GL.Delegates.Finish glFinish;
      internal static GL.Delegates.Flush glFlush;
      internal static GL.Delegates.Fogf glFogf;
      internal static GL.Delegates.Fogfv glFogfv;
      internal static GL.Delegates.Fogx glFogx;
      internal static GL.Delegates.Fogxv glFogxv;
      internal static GL.Delegates.FrontFace glFrontFace;
      internal static GL.Delegates.Frustumf glFrustumf;
      internal static GL.Delegates.Frustumx glFrustumx;
      internal static GL.Delegates.GenTextures glGenTextures;
      internal static GL.Delegates.GetError glGetError;
      internal static GL.Delegates.GetIntegerv glGetIntegerv;
      internal static GL.Delegates.GetString glGetString;
      internal static GL.Delegates.Hint glHint;
      internal static GL.Delegates.Lightf glLightf;
      internal static GL.Delegates.Lightfv glLightfv;
      internal static GL.Delegates.LightModelf glLightModelf;
      internal static GL.Delegates.LightModelfv glLightModelfv;
      internal static GL.Delegates.LightModelx glLightModelx;
      internal static GL.Delegates.LightModelxv glLightModelxv;
      internal static GL.Delegates.Lightx glLightx;
      internal static GL.Delegates.Lightxv glLightxv;
      internal static GL.Delegates.LineWidth glLineWidth;
      internal static GL.Delegates.LineWidthx glLineWidthx;
      internal static GL.Delegates.LoadIdentity glLoadIdentity;
      internal static GL.Delegates.LoadMatrixf glLoadMatrixf;
      internal static GL.Delegates.LoadMatrixx glLoadMatrixx;
      internal static GL.Delegates.LogicOp glLogicOp;
      internal static GL.Delegates.Materialf glMaterialf;
      internal static GL.Delegates.Materialfv glMaterialfv;
      internal static GL.Delegates.Materialx glMaterialx;
      internal static GL.Delegates.Materialxv glMaterialxv;
      internal static GL.Delegates.MatrixMode glMatrixMode;
      internal static GL.Delegates.MultiTexCoord4f glMultiTexCoord4f;
      internal static GL.Delegates.MultiTexCoord4x glMultiTexCoord4x;
      internal static GL.Delegates.MultMatrixf glMultMatrixf;
      internal static GL.Delegates.MultMatrixx glMultMatrixx;
      internal static GL.Delegates.Normal3f glNormal3f;
      internal static GL.Delegates.Normal3x glNormal3x;
      internal static GL.Delegates.NormalPointer glNormalPointer;
      internal static GL.Delegates.Orthof glOrthof;
      internal static GL.Delegates.Orthox glOrthox;
      internal static GL.Delegates.PixelStorei glPixelStorei;
      internal static GL.Delegates.PointSize glPointSize;
      internal static GL.Delegates.PointSizex glPointSizex;
      internal static GL.Delegates.PolygonOffset glPolygonOffset;
      internal static GL.Delegates.PolygonOffsetx glPolygonOffsetx;
      internal static GL.Delegates.PopMatrix glPopMatrix;
      internal static GL.Delegates.PushMatrix glPushMatrix;
      internal static GL.Delegates.ReadPixels glReadPixels;
      internal static GL.Delegates.Rotatef glRotatef;
      internal static GL.Delegates.Rotatex glRotatex;
      internal static GL.Delegates.SampleCoverage glSampleCoverage;
      internal static GL.Delegates.SampleCoveragex glSampleCoveragex;
      internal static GL.Delegates.Scalef glScalef;
      internal static GL.Delegates.Scalex glScalex;
      internal static GL.Delegates.Scissor glScissor;
      internal static GL.Delegates.ShadeModel glShadeModel;
      internal static GL.Delegates.StencilFunc glStencilFunc;
      internal static GL.Delegates.StencilMask glStencilMask;
      internal static GL.Delegates.StencilOp glStencilOp;
      internal static GL.Delegates.TexCoordPointer glTexCoordPointer;
      internal static GL.Delegates.TexEnvf glTexEnvf;
      internal static GL.Delegates.TexEnvfv glTexEnvfv;
      internal static GL.Delegates.TexEnvx glTexEnvx;
      internal static GL.Delegates.TexEnvxv glTexEnvxv;
      internal static GL.Delegates.TexImage2D glTexImage2D;
      internal static GL.Delegates.TexParameterf glTexParameterf;
      internal static GL.Delegates.TexParameterx glTexParameterx;
      internal static GL.Delegates.TexSubImage2D glTexSubImage2D;
      internal static GL.Delegates.Translatef glTranslatef;
      internal static GL.Delegates.Translatex glTranslatex;
      internal static GL.Delegates.VertexPointer glVertexPointer;
      internal static GL.Delegates.Viewport glViewport;

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ActiveTexture(All texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AlphaFunc(All func, float @ref);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AlphaFuncx(All func, int @ref);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindTexture(All target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFunc(All sfactor, All dfactor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Clear(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearColorx(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepthf(float depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepthx(int depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearStencil(int s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClientActiveTexture(All texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4f(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4x(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorMask(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage2D(All target, int level, All internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexImage2D(All target, int level, All internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage2D(All target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CullFace(All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthFunc(All func);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthMask(bool flag);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangef(float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangex(int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Disable(All cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableClientState(All array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawArrays(All mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElements(All mode, int count, All type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Enable(All cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableClientState(All array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Finish();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Flush();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FrontFace(All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Frustumf(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Frustumx(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate All GetError();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetIntegerv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr GetString(All name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Hint(All target, All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightf(All light, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightfv(All light, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightx(All light, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightxv(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LineWidth(float width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LineWidthx(int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadIdentity();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadMatrixx(int* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LogicOp(All opcode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialf(All face, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialfv(All face, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialx(All face, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialxv(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixMode(All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4f(All target, float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4x(All target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultMatrixx(int* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3f(float nx, float ny, float nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3x(int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalPointer(All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Orthof(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Orthox(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelStorei(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointSize(float size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointSizex(int size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonOffset(float factor, float units);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonOffsetx(int factor, int units);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PopMatrix();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PushMatrix();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReadPixels(int x, int y, int width, int height, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rotatef(float angle, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rotatex(int angle, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleCoverage(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleCoveragex(int value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scalef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scalex(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scissor(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShadeModel(All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilFunc(All func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilOp(All fail, All zfail, All zpass);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvf(All target, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvfv(All target, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvx(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvxv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage2D(All target, int level, int internalformat, int width, int height, int border, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterf(All target, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterx(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Translatef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Translatex(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Viewport(int x, int y, int width, int height);
    }

    internal static class Core
    {
      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glActiveTexture")]
      internal static void ActiveTexture(All texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glAlphaFunc")]
      internal static void AlphaFunc(All func, float @ref);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glAlphaFuncx")]
      internal static void AlphaFuncx(All func, int @ref);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBindTexture")]
      internal static void BindTexture(All target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBlendFunc")]
      internal static void BlendFunc(All sfactor, All dfactor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClear")]
      internal static void Clear(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearColor")]
      internal static void ClearColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearColorx")]
      internal static void ClearColorx(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearDepthf")]
      internal static void ClearDepthf(float depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearDepthx")]
      internal static void ClearDepthx(int depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearStencil")]
      internal static void ClearStencil(int s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClientActiveTexture")]
      internal static void ClientActiveTexture(All texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColor4f")]
      internal static void Color4f(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColor4x")]
      internal static void Color4x(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColorMask")]
      internal static void ColorMask(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColorPointer")]
      internal static void ColorPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCompressedTexImage2D")]
      internal static void CompressedTexImage2D(All target, int level, All internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCompressedTexSubImage2D")]
      internal static void CompressedTexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCopyTexImage2D")]
      internal static void CopyTexImage2D(All target, int level, All internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCopyTexSubImage2D")]
      internal static void CopyTexSubImage2D(All target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCullFace")]
      internal static void CullFace(All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDeleteTextures")]
      internal static void DeleteTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthFunc")]
      internal static void DepthFunc(All func);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthMask")]
      internal static void DepthMask(bool flag);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthRangef")]
      internal static void DepthRangef(float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthRangex")]
      internal static void DepthRangex(int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDisable")]
      internal static void Disable(All cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDisableClientState")]
      internal static void DisableClientState(All array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawArrays")]
      internal static void DrawArrays(All mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawElements")]
      internal static void DrawElements(All mode, int count, All type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glEnable")]
      internal static void Enable(All cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glEnableClientState")]
      internal static void EnableClientState(All array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFinish")]
      internal static void Finish();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFlush")]
      internal static void Flush();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogf")]
      internal static void Fogf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogfv")]
      internal static void Fogfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogx")]
      internal static void Fogx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogxv")]
      internal static void Fogxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFrontFace")]
      internal static void FrontFace(All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFrustumf")]
      internal static void Frustumf(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFrustumx")]
      internal static void Frustumx(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGenTextures")]
      internal static void GenTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetError")]
      internal static All GetError();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetIntegerv")]
      internal static void GetIntegerv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetString")]
      internal static IntPtr GetString(All name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glHint")]
      internal static void Hint(All target, All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightf")]
      internal static void Lightf(All light, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightfv")]
      internal static void Lightfv(All light, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelf")]
      internal static void LightModelf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelfv")]
      internal static void LightModelfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelx")]
      internal static void LightModelx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelxv")]
      internal static void LightModelxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightx")]
      internal static void Lightx(All light, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightxv")]
      internal static void Lightxv(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLineWidth")]
      internal static void LineWidth(float width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLineWidthx")]
      internal static void LineWidthx(int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLoadIdentity")]
      internal static void LoadIdentity();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLoadMatrixf")]
      internal static void LoadMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLoadMatrixx")]
      internal static void LoadMatrixx(int* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLogicOp")]
      internal static void LogicOp(All opcode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialf")]
      internal static void Materialf(All face, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialfv")]
      internal static void Materialfv(All face, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialx")]
      internal static void Materialx(All face, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialxv")]
      internal static void Materialxv(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMatrixMode")]
      internal static void MatrixMode(All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultiTexCoord4f")]
      internal static void MultiTexCoord4f(All target, float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultiTexCoord4x")]
      internal static void MultiTexCoord4x(All target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultMatrixf")]
      internal static void MultMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultMatrixx")]
      internal static void MultMatrixx(int* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glNormal3f")]
      internal static void Normal3f(float nx, float ny, float nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glNormal3x")]
      internal static void Normal3x(int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glNormalPointer")]
      internal static void NormalPointer(All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glOrthof")]
      internal static void Orthof(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glOrthox")]
      internal static void Orthox(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPixelStorei")]
      internal static void PixelStorei(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointSize")]
      internal static void PointSize(float size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointSizex")]
      internal static void PointSizex(int size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPolygonOffset")]
      internal static void PolygonOffset(float factor, float units);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPolygonOffsetx")]
      internal static void PolygonOffsetx(int factor, int units);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPopMatrix")]
      internal static void PopMatrix();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPushMatrix")]
      internal static void PushMatrix();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glReadPixels")]
      internal static void ReadPixels(int x, int y, int width, int height, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glRotatef")]
      internal static void Rotatef(float angle, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glRotatex")]
      internal static void Rotatex(int angle, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glSampleCoverage")]
      internal static void SampleCoverage(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glSampleCoveragex")]
      internal static void SampleCoveragex(int value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glScalef")]
      internal static void Scalef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glScalex")]
      internal static void Scalex(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glScissor")]
      internal static void Scissor(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glShadeModel")]
      internal static void ShadeModel(All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glStencilFunc")]
      internal static void StencilFunc(All func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glStencilMask")]
      internal static void StencilMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glStencilOp")]
      internal static void StencilOp(All fail, All zfail, All zpass);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexCoordPointer")]
      internal static void TexCoordPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvf")]
      internal static void TexEnvf(All target, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvfv")]
      internal static void TexEnvfv(All target, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvx")]
      internal static void TexEnvx(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvxv")]
      internal static void TexEnvxv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexImage2D")]
      internal static void TexImage2D(All target, int level, int internalformat, int width, int height, int border, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameterf")]
      internal static void TexParameterf(All target, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameterx")]
      internal static void TexParameterx(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexSubImage2D")]
      internal static void TexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTranslatef")]
      internal static void Translatef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTranslatex")]
      internal static void Translatex(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glVertexPointer")]
      internal static void VertexPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glViewport")]
      internal static void Viewport(int x, int y, int width, int height);
    }
  }
}
