// Type: OpenTK.Graphics.ES11.GL
// Assembly: OpenTK, Version=1.1.0.0, Culture=neutral, PublicKeyToken=bad199fe84eb3df4
// MVID: FE2CFFE8-B942-430E-8C15-E783DB6F0AD6
// Assembly location: F:\Program Files (x86)\FEZ\OpenTK.dll

using OpenTK;
using OpenTK.Graphics;
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace OpenTK.Graphics.ES11
{
  public sealed class GL : GraphicsBindingsBase
  {
    private static readonly object sync_root = new object();
    private const string Library = "libGLES.dll";

    protected override object SyncRoot
    {
      get
      {
        return GL.sync_root;
      }
    }

    static GL()
    {
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glActiveTexture", Version = "1.1")]
    public static void ActiveTexture(All texture)
    {
      GL.Delegates.glActiveTexture(texture);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glAlphaFunc", Version = "1.1")]
    public static void AlphaFunc(All func, float @ref)
    {
      GL.Delegates.glAlphaFunc(func, @ref);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glAlphaFuncx", Version = "1.1")]
    public static void AlphaFuncx(All func, int @ref)
    {
      GL.Delegates.glAlphaFuncx(func, @ref);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBindBuffer", Version = "1.1")]
    public static void BindBuffer(All target, int buffer)
    {
      GL.Delegates.glBindBuffer(target, (uint) buffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glBindBuffer", Version = "1.1")]
    public static void BindBuffer(All target, uint buffer)
    {
      GL.Delegates.glBindBuffer(target, buffer);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBindTexture", Version = "1.1")]
    public static void BindTexture(All target, int texture)
    {
      GL.Delegates.glBindTexture(target, (uint) texture);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glBindTexture", Version = "1.1")]
    public static void BindTexture(All target, uint texture)
    {
      GL.Delegates.glBindTexture(target, texture);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBlendFunc", Version = "1.1")]
    public static void BlendFunc(All sfactor, All dfactor)
    {
      GL.Delegates.glBlendFunc(sfactor, dfactor);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferData", Version = "1.1")]
    public static void BufferData(All target, IntPtr size, IntPtr data, All usage)
    {
      GL.Delegates.glBufferData(target, size, data, usage);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferData", Version = "1.1")]
    public static void BufferData<T2>(All target, IntPtr size, [In, Out] T2[] data, All usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferData", Version = "1.1")]
    public static void BufferData<T2>(All target, IntPtr size, [In, Out] T2[,] data, All usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferData", Version = "1.1")]
    public static void BufferData<T2>(All target, IntPtr size, [In, Out] T2[,,] data, All usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferData", Version = "1.1")]
    public static void BufferData<T2>(All target, IntPtr size, [In, Out] ref T2 data, All usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
        data = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferSubData", Version = "1.1")]
    public static void BufferSubData(All target, IntPtr offset, IntPtr size, IntPtr data)
    {
      GL.Delegates.glBufferSubData(target, offset, size, data);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferSubData", Version = "1.1")]
    public static void BufferSubData<T3>(All target, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferSubData", Version = "1.1")]
    public static void BufferSubData<T3>(All target, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferSubData", Version = "1.1")]
    public static void BufferSubData<T3>(All target, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glBufferSubData", Version = "1.1")]
    public static void BufferSubData<T3>(All target, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
        data = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClear", Version = "1.1")]
    public static void Clear(int mask)
    {
      GL.Delegates.glClear((uint) mask);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClear", Version = "1.1")]
    [CLSCompliant(false)]
    public static void Clear(uint mask)
    {
      GL.Delegates.glClear(mask);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClearColor", Version = "1.1")]
    public static void ClearColor(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glClearColor(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClearColorx", Version = "1.1")]
    public static void ClearColorx(int red, int green, int blue, int alpha)
    {
      GL.Delegates.glClearColorx(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClearDepthf", Version = "1.1")]
    public static void ClearDepth(float depth)
    {
      GL.Delegates.glClearDepthf(depth);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClearDepthx", Version = "1.1")]
    public static void ClearDepthx(int depth)
    {
      GL.Delegates.glClearDepthx(depth);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClearStencil", Version = "1.1")]
    public static void ClearStencil(int s)
    {
      GL.Delegates.glClearStencil(s);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClientActiveTexture", Version = "1.1")]
    public static void ClientActiveTexture(All texture)
    {
      GL.Delegates.glClientActiveTexture(texture);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanef", Version = "1.1")]
    public static unsafe void ClipPlane(All plane, float[] equation)
    {
      fixed (float* equation1 = equation)
        GL.Delegates.glClipPlanef(plane, equation1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanef", Version = "1.1")]
    public static unsafe void ClipPlane(All plane, ref float equation)
    {
      fixed (float* equation1 = &equation)
        GL.Delegates.glClipPlanef(plane, equation1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanef", Version = "1.1")]
    public static unsafe void ClipPlane(All plane, float* equation)
    {
      GL.Delegates.glClipPlanef(plane, equation);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanefIMG", Version = "1.1")]
    public static unsafe void ClipPlanefIMG(All p, float[] eqn)
    {
      fixed (float* eqn1 = eqn)
        GL.Delegates.glClipPlanefIMG(p, eqn1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanefIMG", Version = "1.1")]
    public static unsafe void ClipPlanefIMG(All p, ref float eqn)
    {
      fixed (float* eqn1 = &eqn)
        GL.Delegates.glClipPlanefIMG(p, eqn1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanefIMG", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void ClipPlanefIMG(All p, float* eqn)
    {
      GL.Delegates.glClipPlanefIMG(p, eqn);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanex", Version = "1.1")]
    public static unsafe void ClipPlanex(All plane, int[] equation)
    {
      fixed (int* equation1 = equation)
        GL.Delegates.glClipPlanex(plane, equation1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanex", Version = "1.1")]
    public static unsafe void ClipPlanex(All plane, ref int equation)
    {
      fixed (int* equation1 = &equation)
        GL.Delegates.glClipPlanex(plane, equation1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanex", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void ClipPlanex(All plane, int* equation)
    {
      GL.Delegates.glClipPlanex(plane, equation);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanexIMG", Version = "1.1")]
    public static unsafe void ClipPlanexIMG(All p, int[] eqn)
    {
      fixed (int* eqn1 = eqn)
        GL.Delegates.glClipPlanexIMG(p, eqn1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanexIMG", Version = "1.1")]
    public static unsafe void ClipPlanexIMG(All p, ref int eqn)
    {
      fixed (int* eqn1 = &eqn)
        GL.Delegates.glClipPlanexIMG(p, eqn1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanexIMG", Version = "1.1")]
    public static unsafe void ClipPlanexIMG(All p, int* eqn)
    {
      GL.Delegates.glClipPlanexIMG(p, eqn);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glColor4f", Version = "1.1")]
    public static void Color4(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glColor4f(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glColor4ub", Version = "1.1")]
    public static void Color4(byte red, byte green, byte blue, byte alpha)
    {
      GL.Delegates.glColor4ub(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glColor4x", Version = "1.1")]
    public static void Color4x(int red, int green, int blue, int alpha)
    {
      GL.Delegates.glColor4x(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glColorMask", Version = "1.1")]
    public static void ColorMask(bool red, bool green, bool blue, bool alpha)
    {
      GL.Delegates.glColorMask(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer(int size, All type, int stride, IntPtr pointer)
    {
      GL.Delegates.glColorPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer<T3>(int size, All type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer<T3>(int size, All type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer<T3>(int size, All type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glColorPointer", Version = "1.1")]
    public static void ColorPointer<T3>(int size, All type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glColorPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexImage2D", Version = "1.1")]
    public static void CompressedTexImage2D(All target, int level, All internalformat, int width, int height, int border, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexImage2D", Version = "1.1")]
    public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In, Out] T7[] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexImage2D", Version = "1.1")]
    public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexImage2D", Version = "1.1")]
    public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,,] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexImage2D", Version = "1.1")]
    public static void CompressedTexImage2D<T7>(All target, int level, All internalformat, int width, int height, int border, int imageSize, [In, Out] ref T7 data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T7) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexSubImage2D", Version = "1.1")]
    public static void CompressedTexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexSubImage2D", Version = "1.1")]
    public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In, Out] T8[] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexSubImage2D", Version = "1.1")]
    public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In, Out] T8[,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexSubImage2D", Version = "1.1")]
    public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In, Out] T8[,,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCompressedTexSubImage2D", Version = "1.1")]
    public static void CompressedTexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, [In, Out] ref T8 data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCopyTexImage2D", Version = "1.1")]
    public static void CopyTexImage2D(All target, int level, All internalformat, int x, int y, int width, int height, int border)
    {
      GL.Delegates.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCopyTexSubImage2D", Version = "1.1")]
    public static void CopyTexSubImage2D(All target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
    {
      GL.Delegates.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glCullFace", Version = "1.1")]
    public static void CullFace(All mode)
    {
      GL.Delegates.glCullFace(mode);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteBuffers", Version = "1.1")]
    public static unsafe void DeleteBuffers(int n, int[] buffers)
    {
      fixed (int* numPtr = buffers)
        GL.Delegates.glDeleteBuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteBuffers", Version = "1.1")]
    public static unsafe void DeleteBuffers(int n, ref int buffers)
    {
      fixed (int* numPtr = &buffers)
        GL.Delegates.glDeleteBuffers(n, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteBuffers", Version = "1.1")]
    public static unsafe void DeleteBuffers(int n, int* buffers)
    {
      GL.Delegates.glDeleteBuffers(n, (uint*) buffers);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteBuffers", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void DeleteBuffers(int n, uint[] buffers)
    {
      fixed (uint* buffers1 = buffers)
        GL.Delegates.glDeleteBuffers(n, buffers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteBuffers", Version = "1.1")]
    public static unsafe void DeleteBuffers(int n, ref uint buffers)
    {
      fixed (uint* buffers1 = &buffers)
        GL.Delegates.glDeleteBuffers(n, buffers1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteBuffers", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void DeleteBuffers(int n, uint* buffers)
    {
      GL.Delegates.glDeleteBuffers(n, buffers);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    public static unsafe void DeleteTextures(int n, int[] textures)
    {
      fixed (int* numPtr = textures)
        GL.Delegates.glDeleteTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    public static unsafe void DeleteTextures(int n, ref int textures)
    {
      fixed (int* numPtr = &textures)
        GL.Delegates.glDeleteTextures(n, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    public static unsafe void DeleteTextures(int n, int* textures)
    {
      GL.Delegates.glDeleteTextures(n, (uint*) textures);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void DeleteTextures(int n, uint[] textures)
    {
      fixed (uint* textures1 = textures)
        GL.Delegates.glDeleteTextures(n, textures1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void DeleteTextures(int n, ref uint textures)
    {
      fixed (uint* textures1 = &textures)
        GL.Delegates.glDeleteTextures(n, textures1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteTextures", Version = "1.1")]
    public static unsafe void DeleteTextures(int n, uint* textures)
    {
      GL.Delegates.glDeleteTextures(n, textures);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDepthFunc", Version = "1.1")]
    public static void DepthFunc(All func)
    {
      GL.Delegates.glDepthFunc(func);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDepthMask", Version = "1.1")]
    public static void DepthMask(bool flag)
    {
      GL.Delegates.glDepthMask(flag);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDepthRangef", Version = "1.1")]
    public static void DepthRange(float zNear, float zFar)
    {
      GL.Delegates.glDepthRangef(zNear, zFar);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDepthRangex", Version = "1.1")]
    public static void DepthRangex(int zNear, int zFar)
    {
      GL.Delegates.glDepthRangex(zNear, zFar);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDisable", Version = "1.1")]
    public static void Disable(All cap)
    {
      GL.Delegates.glDisable(cap);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDisableClientState", Version = "1.1")]
    public static void DisableClientState(All array)
    {
      GL.Delegates.glDisableClientState(array);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDrawArrays", Version = "1.1")]
    public static void DrawArrays(All mode, int first, int count)
    {
      GL.Delegates.glDrawArrays(mode, first, count);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements(All mode, int count, All type, IntPtr indices)
    {
      GL.Delegates.glDrawElements(mode, count, type, indices);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements<T3>(All mode, int count, All type, [In, Out] T3[] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements<T3>(All mode, int count, All type, [In, Out] T3[,] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements<T3>(All mode, int count, All type, [In, Out] T3[,,] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glDrawElements", Version = "1.1")]
    public static void DrawElements<T3>(All mode, int count, All type, [In, Out] ref T3 indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
        indices = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glEnable", Version = "1.1")]
    public static void Enable(All cap)
    {
      GL.Delegates.glEnable(cap);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glEnableClientState", Version = "1.1")]
    public static void EnableClientState(All array)
    {
      GL.Delegates.glEnableClientState(array);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFinish", Version = "1.1")]
    public static void Finish()
    {
      GL.Delegates.glFinish();
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFlush", Version = "1.1")]
    public static void Flush()
    {
      GL.Delegates.glFlush();
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFogf", Version = "1.1")]
    public static void Fog(All pname, float param)
    {
      GL.Delegates.glFogf(pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFogfv", Version = "1.1")]
    public static unsafe void Fog(All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glFogfv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glFogfv", Version = "1.1")]
    public static unsafe void Fog(All pname, float* @params)
    {
      GL.Delegates.glFogfv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFogx", Version = "1.1")]
    public static void Fogx(All pname, int param)
    {
      GL.Delegates.glFogx(pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFogxv", Version = "1.1")]
    public static unsafe void Fogx(All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glFogxv(pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFogxv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void Fogx(All pname, int* @params)
    {
      GL.Delegates.glFogxv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFrontFace", Version = "1.1")]
    public static void FrontFace(All mode)
    {
      GL.Delegates.glFrontFace(mode);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFrustumf", Version = "1.1")]
    public static void Frustum(float left, float right, float bottom, float top, float zNear, float zFar)
    {
      GL.Delegates.glFrustumf(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glFrustumx", Version = "1.1")]
    public static void Frustumx(int left, int right, int bottom, int top, int zNear, int zFar)
    {
      GL.Delegates.glFrustumx(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenBuffers", Version = "1.1")]
    public static unsafe void GenBuffers(int n, int[] buffers)
    {
      fixed (int* numPtr = buffers)
        GL.Delegates.glGenBuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenBuffers", Version = "1.1")]
    public static unsafe void GenBuffers(int n, ref int buffers)
    {
      fixed (int* numPtr = &buffers)
        GL.Delegates.glGenBuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenBuffers", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GenBuffers(int n, int* buffers)
    {
      GL.Delegates.glGenBuffers(n, (uint*) buffers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGenBuffers", Version = "1.1")]
    public static unsafe void GenBuffers(int n, uint[] buffers)
    {
      fixed (uint* buffers1 = buffers)
        GL.Delegates.glGenBuffers(n, buffers1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenBuffers", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GenBuffers(int n, ref uint buffers)
    {
      fixed (uint* buffers1 = &buffers)
        GL.Delegates.glGenBuffers(n, buffers1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenBuffers", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GenBuffers(int n, uint* buffers)
    {
      GL.Delegates.glGenBuffers(n, buffers);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenTextures", Version = "1.1")]
    public static unsafe void GenTextures(int n, int[] textures)
    {
      fixed (int* numPtr = textures)
        GL.Delegates.glGenTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenTextures", Version = "1.1")]
    public static unsafe void GenTextures(int n, ref int textures)
    {
      fixed (int* numPtr = &textures)
        GL.Delegates.glGenTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, int* textures)
    {
      GL.Delegates.glGenTextures(n, (uint*) textures);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGenTextures", Version = "1.1")]
    public static unsafe void GenTextures(int n, uint[] textures)
    {
      fixed (uint* textures1 = textures)
        GL.Delegates.glGenTextures(n, textures1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, ref uint textures)
    {
      fixed (uint* textures1 = &textures)
        GL.Delegates.glGenTextures(n, textures1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGenTextures", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, uint* textures)
    {
      GL.Delegates.glGenTextures(n, textures);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetBooleanv", Version = "1.1")]
    public static unsafe void GetBoolean(All pname, bool[] @params)
    {
      fixed (bool* params1 = @params)
        GL.Delegates.glGetBooleanv(pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetBooleanv", Version = "1.1")]
    public static unsafe void GetBoolean(All pname, ref bool @params)
    {
      fixed (bool* params1 = &@params)
        GL.Delegates.glGetBooleanv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetBooleanv", Version = "1.1")]
    public static unsafe void GetBoolean(All pname, bool* @params)
    {
      GL.Delegates.glGetBooleanv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetBufferParameteriv", Version = "1.1")]
    public static unsafe void GetBufferParameter(All target, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetBufferParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetBufferParameteriv", Version = "1.1")]
    public static unsafe void GetBufferParameter(All target, All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetBufferParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetBufferParameteriv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GetBufferParameter(All target, All pname, int* @params)
    {
      GL.Delegates.glGetBufferParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanef", Version = "1.1")]
    public static unsafe void GetClipPlane(All pname, float[] eqn)
    {
      fixed (float* eqn1 = eqn)
        GL.Delegates.glGetClipPlanef(pname, eqn1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanef", Version = "1.1")]
    public static unsafe void GetClipPlane(All pname, ref float eqn)
    {
      fixed (float* eqn1 = &eqn)
        GL.Delegates.glGetClipPlanef(pname, eqn1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanef", Version = "1.1")]
    public static unsafe void GetClipPlane(All pname, float* eqn)
    {
      GL.Delegates.glGetClipPlanef(pname, eqn);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanex", Version = "1.1")]
    public static unsafe void GetClipPlanex(All pname, int[] eqn)
    {
      fixed (int* eqn1 = eqn)
        GL.Delegates.glGetClipPlanex(pname, eqn1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanex", Version = "1.1")]
    public static unsafe void GetClipPlanex(All pname, ref int eqn)
    {
      fixed (int* eqn1 = &eqn)
        GL.Delegates.glGetClipPlanex(pname, eqn1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanex", Version = "1.1")]
    public static unsafe void GetClipPlanex(All pname, int* eqn)
    {
      GL.Delegates.glGetClipPlanex(pname, eqn);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetError", Version = "1.1")]
    public static All GetError()
    {
      return GL.Delegates.glGetError();
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetFixedv", Version = "1.1")]
    public static unsafe void GetFixed(All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetFixedv(pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetFixedv", Version = "1.1")]
    public static unsafe void GetFixed(All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetFixedv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetFixedv", Version = "1.1")]
    public static unsafe void GetFixed(All pname, int* @params)
    {
      GL.Delegates.glGetFixedv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetFloatv", Version = "1.1")]
    public static unsafe void GetFloat(All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetFloatv(pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetFloatv", Version = "1.1")]
    public static unsafe void GetFloat(All pname, ref float @params)
    {
      fixed (float* params1 = &@params)
        GL.Delegates.glGetFloatv(pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetFloatv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GetFloat(All pname, float* @params)
    {
      GL.Delegates.glGetFloatv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetIntegerv", Version = "1.1")]
    public static unsafe void GetInteger(All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetIntegerv(pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetIntegerv", Version = "1.1")]
    public static unsafe void GetInteger(All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetIntegerv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetIntegerv", Version = "1.1")]
    public static unsafe void GetInteger(All pname, int* @params)
    {
      GL.Delegates.glGetIntegerv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetLightfv", Version = "1.1")]
    public static unsafe void GetLight(All light, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetLightfv(light, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetLightfv", Version = "1.1")]
    public static unsafe void GetLight(All light, All pname, ref float @params)
    {
      fixed (float* params1 = &@params)
        GL.Delegates.glGetLightfv(light, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetLightfv", Version = "1.1")]
    public static unsafe void GetLight(All light, All pname, float* @params)
    {
      GL.Delegates.glGetLightfv(light, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetLightxv", Version = "1.1")]
    public static unsafe void GetLightx(All light, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetLightxv(light, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetLightxv", Version = "1.1")]
    public static unsafe void GetLightx(All light, All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetLightxv(light, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetLightxv", Version = "1.1")]
    public static unsafe void GetLightx(All light, All pname, int* @params)
    {
      GL.Delegates.glGetLightxv(light, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetMaterialfv", Version = "1.1")]
    public static unsafe void GetMaterial(All face, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetMaterialfv(face, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetMaterialfv", Version = "1.1")]
    public static unsafe void GetMaterial(All face, All pname, ref float @params)
    {
      fixed (float* params1 = &@params)
        GL.Delegates.glGetMaterialfv(face, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetMaterialfv", Version = "1.1")]
    public static unsafe void GetMaterial(All face, All pname, float* @params)
    {
      GL.Delegates.glGetMaterialfv(face, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetMaterialxv", Version = "1.1")]
    public static unsafe void GetMaterialx(All face, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetMaterialxv(face, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetMaterialxv", Version = "1.1")]
    public static unsafe void GetMaterialx(All face, All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetMaterialxv(face, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetMaterialxv", Version = "1.1")]
    public static unsafe void GetMaterialx(All face, All pname, int* @params)
    {
      GL.Delegates.glGetMaterialxv(face, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer(All pname, IntPtr @params)
    {
      GL.Delegates.glGetPointerv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer<T1>(All pname, [In, Out] T1[] @params) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetPointerv(pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer<T1>(All pname, [In, Out] T1[,] @params) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetPointerv(pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer<T1>(All pname, [In, Out] T1[,,] @params) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetPointerv(pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetPointerv", Version = "1.1")]
    public static void GetPointer<T1>(All pname, [In, Out] ref T1 @params) where T1 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetPointerv(pname, gcHandle.AddrOfPinnedObject());
        @params = (T1) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetString", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe string GetString(All name)
    {
      return new string((sbyte*) (void*) GL.Delegates.glGetString(name));
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnvfv", Version = "1.1")]
    public static unsafe void GetTexEnv(All env, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetTexEnvfv(env, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnvfv", Version = "1.1")]
    public static unsafe void GetTexEnv(All env, All pname, ref float @params)
    {
      fixed (float* params1 = &@params)
        GL.Delegates.glGetTexEnvfv(env, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnvfv", Version = "1.1")]
    public static unsafe void GetTexEnv(All env, All pname, float* @params)
    {
      GL.Delegates.glGetTexEnvfv(env, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnviv", Version = "1.1")]
    public static unsafe void GetTexEnv(All env, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexEnviv(env, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnviv", Version = "1.1")]
    public static unsafe void GetTexEnv(All env, All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetTexEnviv(env, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnviv", Version = "1.1")]
    public static unsafe void GetTexEnv(All env, All pname, int* @params)
    {
      GL.Delegates.glGetTexEnviv(env, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnvxv", Version = "1.1")]
    public static unsafe void GetTexEnvx(All env, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexEnvxv(env, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnvxv", Version = "1.1")]
    public static unsafe void GetTexEnvx(All env, All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetTexEnvxv(env, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnvxv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GetTexEnvx(All env, All pname, int* @params)
    {
      GL.Delegates.glGetTexEnvxv(env, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameterfv", Version = "1.1")]
    public static unsafe void GetTexParameter(All target, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetTexParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameterfv", Version = "1.1")]
    public static unsafe void GetTexParameter(All target, All pname, ref float @params)
    {
      fixed (float* params1 = &@params)
        GL.Delegates.glGetTexParameterfv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameterfv", Version = "1.1")]
    public static unsafe void GetTexParameter(All target, All pname, float* @params)
    {
      GL.Delegates.glGetTexParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameteriv", Version = "1.1")]
    public static unsafe void GetTexParameter(All target, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameteriv", Version = "1.1")]
    public static unsafe void GetTexParameter(All target, All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetTexParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameteriv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void GetTexParameter(All target, All pname, int* @params)
    {
      GL.Delegates.glGetTexParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameterxv", Version = "1.1")]
    public static unsafe void GetTexParameterx(All target, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexParameterxv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameterxv", Version = "1.1")]
    public static unsafe void GetTexParameterx(All target, All pname, ref int @params)
    {
      fixed (int* params1 = &@params)
        GL.Delegates.glGetTexParameterxv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameterxv", Version = "1.1")]
    public static unsafe void GetTexParameterx(All target, All pname, int* @params)
    {
      GL.Delegates.glGetTexParameterxv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glHint", Version = "1.1")]
    public static void Hint(All target, All mode)
    {
      GL.Delegates.glHint(target, mode);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glIsBuffer", Version = "1.1")]
    public static bool IsBuffer(int buffer)
    {
      return GL.Delegates.glIsBuffer((uint) buffer);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glIsBuffer", Version = "1.1")]
    [CLSCompliant(false)]
    public static bool IsBuffer(uint buffer)
    {
      return GL.Delegates.glIsBuffer(buffer);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glIsEnabled", Version = "1.1")]
    public static bool IsEnabled(All cap)
    {
      return GL.Delegates.glIsEnabled(cap);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glIsTexture", Version = "1.1")]
    public static bool IsTexture(int texture)
    {
      return GL.Delegates.glIsTexture((uint) texture);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glIsTexture", Version = "1.1")]
    public static bool IsTexture(uint texture)
    {
      return GL.Delegates.glIsTexture(texture);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightf", Version = "1.1")]
    public static void Light(All light, All pname, float param)
    {
      GL.Delegates.glLightf(light, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightfv", Version = "1.1")]
    public static unsafe void Light(All light, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glLightfv(light, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glLightfv", Version = "1.1")]
    public static unsafe void Light(All light, All pname, float* @params)
    {
      GL.Delegates.glLightfv(light, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightModelf", Version = "1.1")]
    public static void LightModel(All pname, float param)
    {
      GL.Delegates.glLightModelf(pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightModelfv", Version = "1.1")]
    public static unsafe void LightModel(All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glLightModelfv(pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightModelfv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void LightModel(All pname, float* @params)
    {
      GL.Delegates.glLightModelfv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightModelx", Version = "1.1")]
    public static void LightModelx(All pname, int param)
    {
      GL.Delegates.glLightModelx(pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightModelxv", Version = "1.1")]
    public static unsafe void LightModelx(All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glLightModelxv(pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightModelxv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void LightModelx(All pname, int* @params)
    {
      GL.Delegates.glLightModelxv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightx", Version = "1.1")]
    public static void Lightx(All light, All pname, int param)
    {
      GL.Delegates.glLightx(light, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightxv", Version = "1.1")]
    public static unsafe void Lightx(All light, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glLightxv(light, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLightxv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void Lightx(All light, All pname, int* @params)
    {
      GL.Delegates.glLightxv(light, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLineWidth", Version = "1.1")]
    public static void LineWidth(float width)
    {
      GL.Delegates.glLineWidth(width);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLineWidthx", Version = "1.1")]
    public static void LineWidthx(int width)
    {
      GL.Delegates.glLineWidthx(width);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLoadIdentity", Version = "1.1")]
    public static void LoadIdentity()
    {
      GL.Delegates.glLoadIdentity();
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLoadMatrixf", Version = "1.1")]
    public static unsafe void LoadMatrix(float[] m)
    {
      fixed (float* m1 = m)
        GL.Delegates.glLoadMatrixf(m1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLoadMatrixf", Version = "1.1")]
    public static unsafe void LoadMatrix(ref float m)
    {
      fixed (float* m1 = &m)
        GL.Delegates.glLoadMatrixf(m1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glLoadMatrixf", Version = "1.1")]
    public static unsafe void LoadMatrix(float* m)
    {
      GL.Delegates.glLoadMatrixf(m);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLoadMatrixx", Version = "1.1")]
    public static unsafe void LoadMatrixx(int[] m)
    {
      fixed (int* m1 = m)
        GL.Delegates.glLoadMatrixx(m1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLoadMatrixx", Version = "1.1")]
    public static unsafe void LoadMatrixx(ref int m)
    {
      fixed (int* m1 = &m)
        GL.Delegates.glLoadMatrixx(m1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glLoadMatrixx", Version = "1.1")]
    public static unsafe void LoadMatrixx(int* m)
    {
      GL.Delegates.glLoadMatrixx(m);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glLogicOp", Version = "1.1")]
    public static void LogicOp(All opcode)
    {
      GL.Delegates.glLogicOp(opcode);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMaterialf", Version = "1.1")]
    public static void Material(All face, All pname, float param)
    {
      GL.Delegates.glMaterialf(face, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMaterialfv", Version = "1.1")]
    public static unsafe void Material(All face, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glMaterialfv(face, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glMaterialfv", Version = "1.1")]
    public static unsafe void Material(All face, All pname, float* @params)
    {
      GL.Delegates.glMaterialfv(face, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMaterialx", Version = "1.1")]
    public static void Materialx(All face, All pname, int param)
    {
      GL.Delegates.glMaterialx(face, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMaterialxv", Version = "1.1")]
    public static unsafe void Materialx(All face, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glMaterialxv(face, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMaterialxv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void Materialx(All face, All pname, int* @params)
    {
      GL.Delegates.glMaterialxv(face, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMatrixMode", Version = "1.1")]
    public static void MatrixMode(All mode)
    {
      GL.Delegates.glMatrixMode(mode);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMultiTexCoord4f", Version = "1.1")]
    public static void MultiTexCoord4(All target, float s, float t, float r, float q)
    {
      GL.Delegates.glMultiTexCoord4f(target, s, t, r, q);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMultiTexCoord4x", Version = "1.1")]
    public static void MultiTexCoord4x(All target, int s, int t, int r, int q)
    {
      GL.Delegates.glMultiTexCoord4x(target, s, t, r, q);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMultMatrixf", Version = "1.1")]
    public static unsafe void MultMatrix(float[] m)
    {
      fixed (float* m1 = m)
        GL.Delegates.glMultMatrixf(m1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMultMatrixf", Version = "1.1")]
    public static unsafe void MultMatrix(ref float m)
    {
      fixed (float* m1 = &m)
        GL.Delegates.glMultMatrixf(m1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMultMatrixf", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void MultMatrix(float* m)
    {
      GL.Delegates.glMultMatrixf(m);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMultMatrixx", Version = "1.1")]
    public static unsafe void MultMatrixx(int[] m)
    {
      fixed (int* m1 = m)
        GL.Delegates.glMultMatrixx(m1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glMultMatrixx", Version = "1.1")]
    public static unsafe void MultMatrixx(ref int m)
    {
      fixed (int* m1 = &m)
        GL.Delegates.glMultMatrixx(m1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glMultMatrixx", Version = "1.1")]
    public static unsafe void MultMatrixx(int* m)
    {
      GL.Delegates.glMultMatrixx(m);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glNormal3f", Version = "1.1")]
    public static void Normal3(float nx, float ny, float nz)
    {
      GL.Delegates.glNormal3f(nx, ny, nz);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glNormal3x", Version = "1.1")]
    public static void Normal3x(int nx, int ny, int nz)
    {
      GL.Delegates.glNormal3x(nx, ny, nz);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer(All type, int stride, IntPtr pointer)
    {
      GL.Delegates.glNormalPointer(type, stride, pointer);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer<T2>(All type, int stride, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer<T2>(All type, int stride, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer<T2>(All type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glNormalPointer", Version = "1.1")]
    public static void NormalPointer<T2>(All type, int stride, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glNormalPointer(type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glOrthof", Version = "1.1")]
    public static void Ortho(float left, float right, float bottom, float top, float zNear, float zFar)
    {
      GL.Delegates.glOrthof(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glOrthox", Version = "1.1")]
    public static void Orthox(int left, int right, int bottom, int top, int zNear, int zFar)
    {
      GL.Delegates.glOrthox(left, right, bottom, top, zNear, zFar);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPixelStorei", Version = "1.1")]
    public static void PixelStore(All pname, int param)
    {
      GL.Delegates.glPixelStorei(pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPointParameterf", Version = "1.1")]
    public static void PointParameter(All pname, float param)
    {
      GL.Delegates.glPointParameterf(pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPointParameterfv", Version = "1.1")]
    public static unsafe void PointParameter(All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glPointParameterfv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glPointParameterfv", Version = "1.1")]
    public static unsafe void PointParameter(All pname, float* @params)
    {
      GL.Delegates.glPointParameterfv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPointParameterx", Version = "1.1")]
    public static void PointParameterx(All pname, int param)
    {
      GL.Delegates.glPointParameterx(pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPointParameterxv", Version = "1.1")]
    public static unsafe void PointParameterx(All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glPointParameterxv(pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glPointParameterxv", Version = "1.1")]
    public static unsafe void PointParameterx(All pname, int* @params)
    {
      GL.Delegates.glPointParameterxv(pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPointSize", Version = "1.1")]
    public static void PointSize(float size)
    {
      GL.Delegates.glPointSize(size);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPointSizex", Version = "1.1")]
    public static void PointSizex(int size)
    {
      GL.Delegates.glPointSizex(size);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPolygonOffset", Version = "1.1")]
    public static void PolygonOffset(float factor, float units)
    {
      GL.Delegates.glPolygonOffset(factor, units);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPolygonOffsetx", Version = "1.1")]
    public static void PolygonOffsetx(int factor, int units)
    {
      GL.Delegates.glPolygonOffsetx(factor, units);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPopMatrix", Version = "1.1")]
    public static void PopMatrix()
    {
      GL.Delegates.glPopMatrix();
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glPushMatrix", Version = "1.1")]
    public static void PushMatrix()
    {
      GL.Delegates.glPushMatrix();
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glReadPixels", Version = "1.1")]
    public static void ReadPixels(int x, int y, int width, int height, All format, All type, IntPtr pixels)
    {
      GL.Delegates.glReadPixels(x, y, width, height, format, type, pixels);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glReadPixels", Version = "1.1")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In, Out] T6[] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glReadPixels", Version = "1.1")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In, Out] T6[,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glReadPixels", Version = "1.1")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In, Out] T6[,,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glReadPixels", Version = "1.1")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, All format, All type, [In, Out] ref T6 pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T6) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glRotatef", Version = "1.1")]
    public static void Rotate(float angle, float x, float y, float z)
    {
      GL.Delegates.glRotatef(angle, x, y, z);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glRotatex", Version = "1.1")]
    public static void Rotatex(int angle, int x, int y, int z)
    {
      GL.Delegates.glRotatex(angle, x, y, z);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glSampleCoverage", Version = "1.1")]
    public static void SampleCoverage(float value, bool invert)
    {
      GL.Delegates.glSampleCoverage(value, invert);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glSampleCoveragex", Version = "1.1")]
    public static void SampleCoveragex(int value, bool invert)
    {
      GL.Delegates.glSampleCoveragex(value, invert);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glScalef", Version = "1.1")]
    public static void Scale(float x, float y, float z)
    {
      GL.Delegates.glScalef(x, y, z);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glScalex", Version = "1.1")]
    public static void Scalex(int x, int y, int z)
    {
      GL.Delegates.glScalex(x, y, z);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glScissor", Version = "1.1")]
    public static void Scissor(int x, int y, int width, int height)
    {
      GL.Delegates.glScissor(x, y, width, height);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glShadeModel", Version = "1.1")]
    public static void ShadeModel(All mode)
    {
      GL.Delegates.glShadeModel(mode);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glStencilFunc", Version = "1.1")]
    public static void StencilFunc(All func, int @ref, int mask)
    {
      GL.Delegates.glStencilFunc(func, @ref, (uint) mask);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glStencilFunc", Version = "1.1")]
    public static void StencilFunc(All func, int @ref, uint mask)
    {
      GL.Delegates.glStencilFunc(func, @ref, mask);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glStencilMask", Version = "1.1")]
    public static void StencilMask(int mask)
    {
      GL.Delegates.glStencilMask((uint) mask);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glStencilMask", Version = "1.1")]
    [CLSCompliant(false)]
    public static void StencilMask(uint mask)
    {
      GL.Delegates.glStencilMask(mask);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glStencilOp", Version = "1.1")]
    public static void StencilOp(All fail, All zfail, All zpass)
    {
      GL.Delegates.glStencilOp(fail, zfail, zpass);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer(int size, All type, int stride, IntPtr pointer)
    {
      GL.Delegates.glTexCoordPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer<T3>(int size, All type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer<T3>(int size, All type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer<T3>(int size, All type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexCoordPointer", Version = "1.1")]
    public static void TexCoordPointer<T3>(int size, All type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexCoordPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvf", Version = "1.1")]
    public static void TexEnv(All target, All pname, float param)
    {
      GL.Delegates.glTexEnvf(target, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvfv", Version = "1.1")]
    public static unsafe void TexEnv(All target, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glTexEnvfv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvfv", Version = "1.1")]
    public static unsafe void TexEnv(All target, All pname, float* @params)
    {
      GL.Delegates.glTexEnvfv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvi", Version = "1.1")]
    public static void TexEnv(All target, All pname, int param)
    {
      GL.Delegates.glTexEnvi(target, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnviv", Version = "1.1")]
    public static unsafe void TexEnv(All target, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexEnviv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnviv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void TexEnv(All target, All pname, int* @params)
    {
      GL.Delegates.glTexEnviv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvx", Version = "1.1")]
    public static void TexEnvx(All target, All pname, int param)
    {
      GL.Delegates.glTexEnvx(target, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvxv", Version = "1.1")]
    public static unsafe void TexEnvx(All target, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexEnvxv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvxv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void TexEnvx(All target, All pname, int* @params)
    {
      GL.Delegates.glTexEnvxv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexImage2D", Version = "1.1")]
    public static void TexImage2D(All target, int level, int internalformat, int width, int height, int border, All format, All type, IntPtr pixels)
    {
      GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexImage2D", Version = "1.1")]
    public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In, Out] T8[] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexImage2D", Version = "1.1")]
    public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In, Out] T8[,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexImage2D", Version = "1.1")]
    public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In, Out] T8[,,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexImage2D", Version = "1.1")]
    public static void TexImage2D<T8>(All target, int level, int internalformat, int width, int height, int border, All format, All type, [In, Out] ref T8 pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameterf", Version = "1.1")]
    public static void TexParameter(All target, All pname, float param)
    {
      GL.Delegates.glTexParameterf(target, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameterfv", Version = "1.1")]
    public static unsafe void TexParameter(All target, All pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glTexParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameterfv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void TexParameter(All target, All pname, float* @params)
    {
      GL.Delegates.glTexParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameteri", Version = "1.1")]
    public static void TexParameter(All target, All pname, int param)
    {
      GL.Delegates.glTexParameteri(target, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameteriv", Version = "1.1")]
    public static unsafe void TexParameter(All target, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexParameteriv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameteriv", Version = "1.1")]
    public static unsafe void TexParameter(All target, All pname, int* @params)
    {
      GL.Delegates.glTexParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameterx", Version = "1.1")]
    public static void TexParameterx(All target, All pname, int param)
    {
      GL.Delegates.glTexParameterx(target, pname, param);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameterxv", Version = "1.1")]
    public static unsafe void TexParameterx(All target, All pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexParameterxv(target, pname, params1);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameterxv", Version = "1.1")]
    [CLSCompliant(false)]
    public static unsafe void TexParameterx(All target, All pname, int* @params)
    {
      GL.Delegates.glTexParameterxv(target, pname, @params);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, IntPtr pixels)
    {
      GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In, Out] T8[] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In, Out] T8[,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In, Out] T8[,,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTexSubImage2D", Version = "1.1")]
    public static void TexSubImage2D<T8>(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, [In, Out] ref T8 pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTranslatef", Version = "1.1")]
    public static void Translate(float x, float y, float z)
    {
      GL.Delegates.glTranslatef(x, y, z);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glTranslatex", Version = "1.1")]
    public static void Translatex(int x, int y, int z)
    {
      GL.Delegates.glTranslatex(x, y, z);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer(int size, All type, int stride, IntPtr pointer)
    {
      GL.Delegates.glVertexPointer(size, type, stride, pointer);
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer<T3>(int size, All type, int stride, [In, Out] T3[] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer<T3>(int size, All type, int stride, [In, Out] T3[,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer<T3>(int size, All type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glVertexPointer", Version = "1.1")]
    public static void VertexPointer<T3>(int size, All type, int stride, [In, Out] ref T3 pointer) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexPointer(size, type, stride, gcHandle.AddrOfPinnedObject());
        pointer = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "1.1", EntryPoint = "glViewport", Version = "1.1")]
    public static void Viewport(int x, int y, int width, int height)
    {
      GL.Delegates.glViewport(x, y, width, height);
    }

    public static class NV
    {
      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFencesNV", Version = "1.1")]
      public static unsafe void DeleteFences(int n, int[] fences)
      {
        fixed (int* numPtr = fences)
          GL.Delegates.glDeleteFencesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFencesNV", Version = "1.1")]
      public static unsafe void DeleteFences(int n, ref int fences)
      {
        fixed (int* numPtr = &fences)
          GL.Delegates.glDeleteFencesNV(n, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFencesNV", Version = "1.1")]
      public static unsafe void DeleteFences(int n, int* fences)
      {
        GL.Delegates.glDeleteFencesNV(n, (uint*) fences);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFencesNV", Version = "1.1")]
      public static unsafe void DeleteFences(int n, uint[] fences)
      {
        fixed (uint* fences1 = fences)
          GL.Delegates.glDeleteFencesNV(n, fences1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFencesNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFences(int n, ref uint fences)
      {
        fixed (uint* fences1 = &fences)
          GL.Delegates.glDeleteFencesNV(n, fences1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFencesNV", Version = "1.1")]
      public static unsafe void DeleteFences(int n, uint* fences)
      {
        GL.Delegates.glDeleteFencesNV(n, fences);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glFinishFenceNV", Version = "1.1")]
      public static void FinishFence(int fence)
      {
        GL.Delegates.glFinishFenceNV((uint) fence);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glFinishFenceNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static void FinishFence(uint fence)
      {
        GL.Delegates.glFinishFenceNV(fence);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFencesNV", Version = "1.1")]
      public static unsafe void GenFences(int n, int[] fences)
      {
        fixed (int* numPtr = fences)
          GL.Delegates.glGenFencesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFencesNV", Version = "1.1")]
      public static unsafe void GenFences(int n, ref int fences)
      {
        fixed (int* numPtr = &fences)
          GL.Delegates.glGenFencesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFencesNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GenFences(int n, int* fences)
      {
        GL.Delegates.glGenFencesNV(n, (uint*) fences);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFencesNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GenFences(int n, uint[] fences)
      {
        fixed (uint* fences1 = fences)
          GL.Delegates.glGenFencesNV(n, fences1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFencesNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GenFences(int n, ref uint fences)
      {
        fixed (uint* fences1 = &fences)
          GL.Delegates.glGenFencesNV(n, fences1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFencesNV", Version = "1.1")]
      public static unsafe void GenFences(int n, uint* fences)
      {
        GL.Delegates.glGenFencesNV(n, fences);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFenceivNV", Version = "1.1")]
      public static unsafe void GetFence(int fence, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFenceivNV((uint) fence, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFenceivNV", Version = "1.1")]
      public static unsafe void GetFence(int fence, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetFenceivNV((uint) fence, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFenceivNV", Version = "1.1")]
      public static unsafe void GetFence(int fence, All pname, int* @params)
      {
        GL.Delegates.glGetFenceivNV((uint) fence, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFenceivNV", Version = "1.1")]
      public static unsafe void GetFence(uint fence, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFenceivNV(fence, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFenceivNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetFence(uint fence, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetFenceivNV(fence, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFenceivNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetFence(uint fence, All pname, int* @params)
      {
        GL.Delegates.glGetFenceivNV(fence, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glIsFenceNV", Version = "1.1")]
      public static bool IsFence(int fence)
      {
        return GL.Delegates.glIsFenceNV((uint) fence);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glIsFenceNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static bool IsFence(uint fence)
      {
        return GL.Delegates.glIsFenceNV(fence);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glSetFenceNV", Version = "1.1")]
      public static void SetFence(int fence, All condition)
      {
        GL.Delegates.glSetFenceNV((uint) fence, condition);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glSetFenceNV", Version = "1.1")]
      public static void SetFence(uint fence, All condition)
      {
        GL.Delegates.glSetFenceNV(fence, condition);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTestFenceNV", Version = "1.1")]
      public static bool TestFence(int fence)
      {
        return GL.Delegates.glTestFenceNV((uint) fence);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTestFenceNV", Version = "1.1")]
      [CLSCompliant(false)]
      public static bool TestFence(uint fence)
      {
        return GL.Delegates.glTestFenceNV(fence);
      }
    }

    public static class Oes
    {
      [AutoGenerated(Category = "1.1", EntryPoint = "glAlphaFuncxOES", Version = "1.1")]
      public static void AlphaFuncx(All func, int @ref)
      {
        GL.Delegates.glAlphaFuncxOES(func, @ref);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glBindFramebufferOES", Version = "1.1")]
      public static void BindFramebuffer(All target, int framebuffer)
      {
        GL.Delegates.glBindFramebufferOES(target, (uint) framebuffer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glBindFramebufferOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static void BindFramebuffer(All target, uint framebuffer)
      {
        GL.Delegates.glBindFramebufferOES(target, framebuffer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glBindRenderbufferOES", Version = "1.1")]
      public static void BindRenderbuffer(All target, int renderbuffer)
      {
        GL.Delegates.glBindRenderbufferOES(target, (uint) renderbuffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glBindRenderbufferOES", Version = "1.1")]
      public static void BindRenderbuffer(All target, uint renderbuffer)
      {
        GL.Delegates.glBindRenderbufferOES(target, renderbuffer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glBlendEquationOES", Version = "1.1")]
      public static void BlendEquation(All mode)
      {
        GL.Delegates.glBlendEquationOES(mode);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glBlendEquationSeparateOES", Version = "1.1")]
      public static void BlendEquationSeparate(All modeRGB, All modeAlpha)
      {
        GL.Delegates.glBlendEquationSeparateOES(modeRGB, modeAlpha);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glBlendFuncSeparateOES", Version = "1.1")]
      public static void BlendFuncSeparate(All srcRGB, All dstRGB, All srcAlpha, All dstAlpha)
      {
        GL.Delegates.glBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glCheckFramebufferStatusOES", Version = "1.1")]
      public static All CheckFramebufferStatus(All target)
      {
        return GL.Delegates.glCheckFramebufferStatusOES(target);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glClearColorxOES", Version = "1.1")]
      public static void ClearColorx(int red, int green, int blue, int alpha)
      {
        GL.Delegates.glClearColorxOES(red, green, blue, alpha);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glClearDepthfOES", Version = "1.1")]
      public static void ClearDepth(float depth)
      {
        GL.Delegates.glClearDepthfOES(depth);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glClearDepthxOES", Version = "1.1")]
      public static void ClearDepthx(int depth)
      {
        GL.Delegates.glClearDepthxOES(depth);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanefOES", Version = "1.1")]
      public static unsafe void ClipPlane(All plane, float[] equation)
      {
        fixed (float* equation1 = equation)
          GL.Delegates.glClipPlanefOES(plane, equation1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanefOES", Version = "1.1")]
      public static unsafe void ClipPlane(All plane, ref float equation)
      {
        fixed (float* equation1 = &equation)
          GL.Delegates.glClipPlanefOES(plane, equation1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanefOES", Version = "1.1")]
      public static unsafe void ClipPlane(All plane, float* equation)
      {
        GL.Delegates.glClipPlanefOES(plane, equation);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanexOES", Version = "1.1")]
      public static unsafe void ClipPlanex(All plane, int[] equation)
      {
        fixed (int* equation1 = equation)
          GL.Delegates.glClipPlanexOES(plane, equation1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanexOES", Version = "1.1")]
      public static unsafe void ClipPlanex(All plane, ref int equation)
      {
        fixed (int* equation1 = &equation)
          GL.Delegates.glClipPlanexOES(plane, equation1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glClipPlanexOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void ClipPlanex(All plane, int* equation)
      {
        GL.Delegates.glClipPlanexOES(plane, equation);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glColor4xOES", Version = "1.1")]
      public static void Color4x(int red, int green, int blue, int alpha)
      {
        GL.Delegates.glColor4xOES(red, green, blue, alpha);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glCurrentPaletteMatrixOES", Version = "1.1")]
      public static void CurrentPaletteMatrix(int matrixpaletteindex)
      {
        GL.Delegates.glCurrentPaletteMatrixOES((uint) matrixpaletteindex);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glCurrentPaletteMatrixOES", Version = "1.1")]
      public static void CurrentPaletteMatrix(uint matrixpaletteindex)
      {
        GL.Delegates.glCurrentPaletteMatrixOES(matrixpaletteindex);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFramebuffersOES", Version = "1.1")]
      public static unsafe void DeleteFramebuffers(int n, int[] framebuffers)
      {
        fixed (int* numPtr = framebuffers)
          GL.Delegates.glDeleteFramebuffersOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFramebuffersOES", Version = "1.1")]
      public static unsafe void DeleteFramebuffers(int n, ref int framebuffers)
      {
        fixed (int* numPtr = &framebuffers)
          GL.Delegates.glDeleteFramebuffersOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFramebuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFramebuffers(int n, int* framebuffers)
      {
        GL.Delegates.glDeleteFramebuffersOES(n, (uint*) framebuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFramebuffersOES", Version = "1.1")]
      public static unsafe void DeleteFramebuffers(int n, uint[] framebuffers)
      {
        fixed (uint* framebuffers1 = framebuffers)
          GL.Delegates.glDeleteFramebuffersOES(n, framebuffers1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFramebuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFramebuffers(int n, ref uint framebuffers)
      {
        fixed (uint* framebuffers1 = &framebuffers)
          GL.Delegates.glDeleteFramebuffersOES(n, framebuffers1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteFramebuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFramebuffers(int n, uint* framebuffers)
      {
        GL.Delegates.glDeleteFramebuffersOES(n, framebuffers);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteRenderbuffersOES", Version = "1.1")]
      public static unsafe void DeleteRenderbuffers(int n, int[] renderbuffers)
      {
        fixed (int* numPtr = renderbuffers)
          GL.Delegates.glDeleteRenderbuffersOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteRenderbuffersOES", Version = "1.1")]
      public static unsafe void DeleteRenderbuffers(int n, ref int renderbuffers)
      {
        fixed (int* numPtr = &renderbuffers)
          GL.Delegates.glDeleteRenderbuffersOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteRenderbuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void DeleteRenderbuffers(int n, int* renderbuffers)
      {
        GL.Delegates.glDeleteRenderbuffersOES(n, (uint*) renderbuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteRenderbuffersOES", Version = "1.1")]
      public static unsafe void DeleteRenderbuffers(int n, uint[] renderbuffers)
      {
        fixed (uint* renderbuffers1 = renderbuffers)
          GL.Delegates.glDeleteRenderbuffersOES(n, renderbuffers1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteRenderbuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void DeleteRenderbuffers(int n, ref uint renderbuffers)
      {
        fixed (uint* renderbuffers1 = &renderbuffers)
          GL.Delegates.glDeleteRenderbuffersOES(n, renderbuffers1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDeleteRenderbuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void DeleteRenderbuffers(int n, uint* renderbuffers)
      {
        GL.Delegates.glDeleteRenderbuffersOES(n, renderbuffers);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDepthRangefOES", Version = "1.1")]
      public static void DepthRange(float zNear, float zFar)
      {
        GL.Delegates.glDepthRangefOES(zNear, zFar);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDepthRangexOES", Version = "1.1")]
      public static void DepthRangex(int zNear, int zFar)
      {
        GL.Delegates.glDepthRangexOES(zNear, zFar);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexfOES", Version = "1.1")]
      public static void DrawTex(float x, float y, float z, float width, float height)
      {
        GL.Delegates.glDrawTexfOES(x, y, z, width, height);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexfvOES", Version = "1.1")]
      public static unsafe void DrawTex(float[] coords)
      {
        fixed (float* coords1 = coords)
          GL.Delegates.glDrawTexfvOES(coords1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexfvOES", Version = "1.1")]
      public static unsafe void DrawTex(ref float coords)
      {
        fixed (float* coords1 = &coords)
          GL.Delegates.glDrawTexfvOES(coords1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexfvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void DrawTex(float* coords)
      {
        GL.Delegates.glDrawTexfvOES(coords);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexiOES", Version = "1.1")]
      public static void DrawTex(int x, int y, int z, int width, int height)
      {
        GL.Delegates.glDrawTexiOES(x, y, z, width, height);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexivOES", Version = "1.1")]
      public static unsafe void DrawTex(int[] coords)
      {
        fixed (int* coords1 = coords)
          GL.Delegates.glDrawTexivOES(coords1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexivOES", Version = "1.1")]
      public static unsafe void DrawTex(ref int coords)
      {
        fixed (int* coords1 = &coords)
          GL.Delegates.glDrawTexivOES(coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexivOES", Version = "1.1")]
      public static unsafe void DrawTex(int* coords)
      {
        GL.Delegates.glDrawTexivOES(coords);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexsOES", Version = "1.1")]
      public static void DrawTex(short x, short y, short z, short width, short height)
      {
        GL.Delegates.glDrawTexsOES(x, y, z, width, height);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexsvOES", Version = "1.1")]
      public static unsafe void DrawTex(short[] coords)
      {
        fixed (short* coords1 = coords)
          GL.Delegates.glDrawTexsvOES(coords1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexsvOES", Version = "1.1")]
      public static unsafe void DrawTex(ref short coords)
      {
        fixed (short* coords1 = &coords)
          GL.Delegates.glDrawTexsvOES(coords1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexsvOES", Version = "1.1")]
      public static unsafe void DrawTex(short* coords)
      {
        GL.Delegates.glDrawTexsvOES(coords);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexxOES", Version = "1.1")]
      public static void DrawTexx(int x, int y, int z, int width, int height)
      {
        GL.Delegates.glDrawTexxOES(x, y, z, width, height);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexxvOES", Version = "1.1")]
      public static unsafe void DrawTexx(int[] coords)
      {
        fixed (int* coords1 = coords)
          GL.Delegates.glDrawTexxvOES(coords1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexxvOES", Version = "1.1")]
      public static unsafe void DrawTexx(ref int coords)
      {
        fixed (int* coords1 = &coords)
          GL.Delegates.glDrawTexxvOES(coords1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glDrawTexxvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void DrawTexx(int* coords)
      {
        GL.Delegates.glDrawTexxvOES(coords);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glEGLImageTargetRenderbufferStorageOES", Version = "1.1")]
      public static void EGLImageTargetRenderbufferStorage(All target, IntPtr image)
      {
        GL.Delegates.glEGLImageTargetRenderbufferStorageOES(target, image);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glEGLImageTargetTexture2DOES", Version = "1.1")]
      public static void EGLImageTargetTexture2D(All target, IntPtr image)
      {
        GL.Delegates.glEGLImageTargetTexture2DOES(target, image);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glFogxOES", Version = "1.1")]
      public static void Fogx(All pname, int param)
      {
        GL.Delegates.glFogxOES(pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glFogxvOES", Version = "1.1")]
      public static unsafe void Fogx(All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glFogxvOES(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glFogxvOES", Version = "1.1")]
      public static unsafe void Fogx(All pname, int* @params)
      {
        GL.Delegates.glFogxvOES(pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glFramebufferRenderbufferOES", Version = "1.1")]
      public static void FramebufferRenderbuffer(All target, All attachment, All renderbuffertarget, int renderbuffer)
      {
        GL.Delegates.glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, (uint) renderbuffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glFramebufferRenderbufferOES", Version = "1.1")]
      public static void FramebufferRenderbuffer(All target, All attachment, All renderbuffertarget, uint renderbuffer)
      {
        GL.Delegates.glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glFramebufferTexture2DOES", Version = "1.1")]
      public static void FramebufferTexture2D(All target, All attachment, All textarget, int texture, int level)
      {
        GL.Delegates.glFramebufferTexture2DOES(target, attachment, textarget, (uint) texture, level);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glFramebufferTexture2DOES", Version = "1.1")]
      public static void FramebufferTexture2D(All target, All attachment, All textarget, uint texture, int level)
      {
        GL.Delegates.glFramebufferTexture2DOES(target, attachment, textarget, texture, level);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glFrustumfOES", Version = "1.1")]
      public static void Frustum(float left, float right, float bottom, float top, float zNear, float zFar)
      {
        GL.Delegates.glFrustumfOES(left, right, bottom, top, zNear, zFar);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glFrustumxOES", Version = "1.1")]
      public static void Frustumx(int left, int right, int bottom, int top, int zNear, int zFar)
      {
        GL.Delegates.glFrustumxOES(left, right, bottom, top, zNear, zFar);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenerateMipmapOES", Version = "1.1")]
      public static void GenerateMipmap(All target)
      {
        GL.Delegates.glGenerateMipmapOES(target);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFramebuffersOES", Version = "1.1")]
      public static unsafe void GenFramebuffers(int n, int[] framebuffers)
      {
        fixed (int* numPtr = framebuffers)
          GL.Delegates.glGenFramebuffersOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFramebuffersOES", Version = "1.1")]
      public static unsafe void GenFramebuffers(int n, ref int framebuffers)
      {
        fixed (int* numPtr = &framebuffers)
          GL.Delegates.glGenFramebuffersOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFramebuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GenFramebuffers(int n, int* framebuffers)
      {
        GL.Delegates.glGenFramebuffersOES(n, (uint*) framebuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFramebuffersOES", Version = "1.1")]
      public static unsafe void GenFramebuffers(int n, uint[] framebuffers)
      {
        fixed (uint* framebuffers1 = framebuffers)
          GL.Delegates.glGenFramebuffersOES(n, framebuffers1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFramebuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GenFramebuffers(int n, ref uint framebuffers)
      {
        fixed (uint* framebuffers1 = &framebuffers)
          GL.Delegates.glGenFramebuffersOES(n, framebuffers1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenFramebuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GenFramebuffers(int n, uint* framebuffers)
      {
        GL.Delegates.glGenFramebuffersOES(n, framebuffers);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenRenderbuffersOES", Version = "1.1")]
      public static unsafe void GenRenderbuffers(int n, int[] renderbuffers)
      {
        fixed (int* numPtr = renderbuffers)
          GL.Delegates.glGenRenderbuffersOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenRenderbuffersOES", Version = "1.1")]
      public static unsafe void GenRenderbuffers(int n, ref int renderbuffers)
      {
        fixed (int* numPtr = &renderbuffers)
          GL.Delegates.glGenRenderbuffersOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenRenderbuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GenRenderbuffers(int n, int* renderbuffers)
      {
        GL.Delegates.glGenRenderbuffersOES(n, (uint*) renderbuffers);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGenRenderbuffersOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GenRenderbuffers(int n, uint[] renderbuffers)
      {
        fixed (uint* renderbuffers1 = renderbuffers)
          GL.Delegates.glGenRenderbuffersOES(n, renderbuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGenRenderbuffersOES", Version = "1.1")]
      public static unsafe void GenRenderbuffers(int n, ref uint renderbuffers)
      {
        fixed (uint* renderbuffers1 = &renderbuffers)
          GL.Delegates.glGenRenderbuffersOES(n, renderbuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGenRenderbuffersOES", Version = "1.1")]
      public static unsafe void GenRenderbuffers(int n, uint* renderbuffers)
      {
        GL.Delegates.glGenRenderbuffersOES(n, renderbuffers);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetBufferPointervOES", Version = "1.1")]
      public static void GetBufferPointer(All target, All pname, IntPtr @params)
      {
        GL.Delegates.glGetBufferPointervOES(target, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetBufferPointervOES", Version = "1.1")]
      public static void GetBufferPointer<T2>(All target, All pname, [In, Out] T2[] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervOES(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetBufferPointervOES", Version = "1.1")]
      public static void GetBufferPointer<T2>(All target, All pname, [In, Out] T2[,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervOES(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetBufferPointervOES", Version = "1.1")]
      public static void GetBufferPointer<T2>(All target, All pname, [In, Out] T2[,,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervOES(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetBufferPointervOES", Version = "1.1")]
      public static void GetBufferPointer<T2>(All target, All pname, [In, Out] ref T2 @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervOES(target, pname, gcHandle.AddrOfPinnedObject());
          @params = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanefOES", Version = "1.1")]
      public static unsafe void GetClipPlane(All pname, float[] eqn)
      {
        fixed (float* eqn1 = eqn)
          GL.Delegates.glGetClipPlanefOES(pname, eqn1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanefOES", Version = "1.1")]
      public static unsafe void GetClipPlane(All pname, ref float eqn)
      {
        fixed (float* eqn1 = &eqn)
          GL.Delegates.glGetClipPlanefOES(pname, eqn1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanefOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetClipPlane(All pname, float* eqn)
      {
        GL.Delegates.glGetClipPlanefOES(pname, eqn);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanexOES", Version = "1.1")]
      public static unsafe void GetClipPlanex(All pname, int[] eqn)
      {
        fixed (int* eqn1 = eqn)
          GL.Delegates.glGetClipPlanexOES(pname, eqn1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanexOES", Version = "1.1")]
      public static unsafe void GetClipPlanex(All pname, ref int eqn)
      {
        fixed (int* eqn1 = &eqn)
          GL.Delegates.glGetClipPlanexOES(pname, eqn1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetClipPlanexOES", Version = "1.1")]
      public static unsafe void GetClipPlanex(All pname, int* eqn)
      {
        GL.Delegates.glGetClipPlanexOES(pname, eqn);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFixedvOES", Version = "1.1")]
      public static unsafe void GetFixed(All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFixedvOES(pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFixedvOES", Version = "1.1")]
      public static unsafe void GetFixed(All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetFixedvOES(pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFixedvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetFixed(All pname, int* @params)
      {
        GL.Delegates.glGetFixedvOES(pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFramebufferAttachmentParameterivOES", Version = "1.1")]
      public static unsafe void GetFramebufferAttachmentParameter(All target, All attachment, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFramebufferAttachmentParameterivOES", Version = "1.1")]
      public static unsafe void GetFramebufferAttachmentParameter(All target, All attachment, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetFramebufferAttachmentParameterivOES", Version = "1.1")]
      public static unsafe void GetFramebufferAttachmentParameter(All target, All attachment, All pname, int* @params)
      {
        GL.Delegates.glGetFramebufferAttachmentParameterivOES(target, attachment, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetLightxvOES", Version = "1.1")]
      public static unsafe void GetLightx(All light, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetLightxvOES(light, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetLightxvOES", Version = "1.1")]
      public static unsafe void GetLightx(All light, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetLightxvOES(light, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetLightxvOES", Version = "1.1")]
      public static unsafe void GetLightx(All light, All pname, int* @params)
      {
        GL.Delegates.glGetLightxvOES(light, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetMaterialxvOES", Version = "1.1")]
      public static unsafe void GetMaterialx(All face, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetMaterialxvOES(face, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetMaterialxvOES", Version = "1.1")]
      public static unsafe void GetMaterialx(All face, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetMaterialxvOES(face, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetMaterialxvOES", Version = "1.1")]
      public static unsafe void GetMaterialx(All face, All pname, int* @params)
      {
        GL.Delegates.glGetMaterialxvOES(face, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetRenderbufferParameterivOES", Version = "1.1")]
      public static unsafe void GetRenderbufferParameter(All target, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetRenderbufferParameterivOES(target, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetRenderbufferParameterivOES", Version = "1.1")]
      public static unsafe void GetRenderbufferParameter(All target, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetRenderbufferParameterivOES(target, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetRenderbufferParameterivOES", Version = "1.1")]
      public static unsafe void GetRenderbufferParameter(All target, All pname, int* @params)
      {
        GL.Delegates.glGetRenderbufferParameterivOES(target, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnvxvOES", Version = "1.1")]
      public static unsafe void GetTexEnvx(All env, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTexEnvxvOES(env, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnvxvOES", Version = "1.1")]
      public static unsafe void GetTexEnvx(All env, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetTexEnvxvOES(env, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexEnvxvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetTexEnvx(All env, All pname, int* @params)
      {
        GL.Delegates.glGetTexEnvxvOES(env, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexGenfvOES", Version = "1.1")]
      public static unsafe void GetTexGen(All coord, All pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glGetTexGenfvOES(coord, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexGenfvOES", Version = "1.1")]
      public static unsafe void GetTexGen(All coord, All pname, ref float @params)
      {
        fixed (float* params1 = &@params)
          GL.Delegates.glGetTexGenfvOES(coord, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexGenfvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetTexGen(All coord, All pname, float* @params)
      {
        GL.Delegates.glGetTexGenfvOES(coord, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexGenivOES", Version = "1.1")]
      public static unsafe void GetTexGen(All coord, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTexGenivOES(coord, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexGenivOES", Version = "1.1")]
      public static unsafe void GetTexGen(All coord, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetTexGenivOES(coord, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexGenivOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetTexGen(All coord, All pname, int* @params)
      {
        GL.Delegates.glGetTexGenivOES(coord, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexGenxvOES", Version = "1.1")]
      public static unsafe void GetTexGenx(All coord, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTexGenxvOES(coord, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexGenxvOES", Version = "1.1")]
      public static unsafe void GetTexGenx(All coord, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetTexGenxvOES(coord, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexGenxvOES", Version = "1.1")]
      public static unsafe void GetTexGenx(All coord, All pname, int* @params)
      {
        GL.Delegates.glGetTexGenxvOES(coord, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameterxvOES", Version = "1.1")]
      public static unsafe void GetTexParameterx(All target, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetTexParameterxvOES(target, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameterxvOES", Version = "1.1")]
      public static unsafe void GetTexParameterx(All target, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glGetTexParameterxvOES(target, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetTexParameterxvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetTexParameterx(All target, All pname, int* @params)
      {
        GL.Delegates.glGetTexParameterxvOES(target, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glIsFramebufferOES", Version = "1.1")]
      public static bool IsFramebuffer(int framebuffer)
      {
        return GL.Delegates.glIsFramebufferOES((uint) framebuffer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glIsFramebufferOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static bool IsFramebuffer(uint framebuffer)
      {
        return GL.Delegates.glIsFramebufferOES(framebuffer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glIsRenderbufferOES", Version = "1.1")]
      public static bool IsRenderbuffer(int renderbuffer)
      {
        return GL.Delegates.glIsRenderbufferOES((uint) renderbuffer);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glIsRenderbufferOES", Version = "1.1")]
      public static bool IsRenderbuffer(uint renderbuffer)
      {
        return GL.Delegates.glIsRenderbufferOES(renderbuffer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glLightModelxOES", Version = "1.1")]
      public static void LightModelx(All pname, int param)
      {
        GL.Delegates.glLightModelxOES(pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glLightModelxvOES", Version = "1.1")]
      public static unsafe void LightModelx(All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glLightModelxvOES(pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glLightModelxvOES", Version = "1.1")]
      public static unsafe void LightModelx(All pname, int* @params)
      {
        GL.Delegates.glLightModelxvOES(pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glLightxOES", Version = "1.1")]
      public static void Lightx(All light, All pname, int param)
      {
        GL.Delegates.glLightxOES(light, pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glLightxvOES", Version = "1.1")]
      public static unsafe void Lightx(All light, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glLightxvOES(light, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glLightxvOES", Version = "1.1")]
      public static unsafe void Lightx(All light, All pname, int* @params)
      {
        GL.Delegates.glLightxvOES(light, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glLineWidthxOES", Version = "1.1")]
      public static void LineWidthx(int width)
      {
        GL.Delegates.glLineWidthxOES(width);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glLoadMatrixxOES", Version = "1.1")]
      public static unsafe void LoadMatrixx(int[] m)
      {
        fixed (int* m1 = m)
          GL.Delegates.glLoadMatrixxOES(m1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glLoadMatrixxOES", Version = "1.1")]
      public static unsafe void LoadMatrixx(ref int m)
      {
        fixed (int* m1 = &m)
          GL.Delegates.glLoadMatrixxOES(m1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glLoadMatrixxOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void LoadMatrixx(int* m)
      {
        GL.Delegates.glLoadMatrixxOES(m);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glLoadPaletteFromModelViewMatrixOES", Version = "1.1")]
      public static void LoadPaletteFromModelViewMatrix()
      {
        GL.Delegates.glLoadPaletteFromModelViewMatrixOES();
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMapBufferOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static IntPtr MapBuffer(All target, All access)
      {
        return GL.Delegates.glMapBufferOES(target, access);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMaterialxOES", Version = "1.1")]
      public static void Materialx(All face, All pname, int param)
      {
        GL.Delegates.glMaterialxOES(face, pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMaterialxvOES", Version = "1.1")]
      public static unsafe void Materialx(All face, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glMaterialxvOES(face, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glMaterialxvOES", Version = "1.1")]
      public static unsafe void Materialx(All face, All pname, int* @params)
      {
        GL.Delegates.glMaterialxvOES(face, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMatrixIndexPointerOES", Version = "1.1")]
      public static void MatrixIndexPointer(int size, All type, int stride, IntPtr pointer)
      {
        GL.Delegates.glMatrixIndexPointerOES(size, type, stride, pointer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMatrixIndexPointerOES", Version = "1.1")]
      public static void MatrixIndexPointer<T3>(int size, All type, int stride, [In, Out] T3[] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMatrixIndexPointerOES(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMatrixIndexPointerOES", Version = "1.1")]
      public static void MatrixIndexPointer<T3>(int size, All type, int stride, [In, Out] T3[,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMatrixIndexPointerOES(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMatrixIndexPointerOES", Version = "1.1")]
      public static void MatrixIndexPointer<T3>(int size, All type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMatrixIndexPointerOES(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMatrixIndexPointerOES", Version = "1.1")]
      public static void MatrixIndexPointer<T3>(int size, All type, int stride, [In, Out] ref T3 pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMatrixIndexPointerOES(size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMultiTexCoord4xOES", Version = "1.1")]
      public static void MultiTexCoord4x(All target, int s, int t, int r, int q)
      {
        GL.Delegates.glMultiTexCoord4xOES(target, s, t, r, q);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMultMatrixxOES", Version = "1.1")]
      public static unsafe void MultMatrixx(int[] m)
      {
        fixed (int* m1 = m)
          GL.Delegates.glMultMatrixxOES(m1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glMultMatrixxOES", Version = "1.1")]
      public static unsafe void MultMatrixx(ref int m)
      {
        fixed (int* m1 = &m)
          GL.Delegates.glMultMatrixxOES(m1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glMultMatrixxOES", Version = "1.1")]
      public static unsafe void MultMatrixx(int* m)
      {
        GL.Delegates.glMultMatrixxOES(m);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glNormal3xOES", Version = "1.1")]
      public static void Normal3x(int nx, int ny, int nz)
      {
        GL.Delegates.glNormal3xOES(nx, ny, nz);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glOrthofOES", Version = "1.1")]
      public static void Ortho(float left, float right, float bottom, float top, float zNear, float zFar)
      {
        GL.Delegates.glOrthofOES(left, right, bottom, top, zNear, zFar);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glOrthoxOES", Version = "1.1")]
      public static void Orthox(int left, int right, int bottom, int top, int zNear, int zFar)
      {
        GL.Delegates.glOrthoxOES(left, right, bottom, top, zNear, zFar);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPointParameterxOES", Version = "1.1")]
      public static void PointParameterx(All pname, int param)
      {
        GL.Delegates.glPointParameterxOES(pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPointParameterxvOES", Version = "1.1")]
      public static unsafe void PointParameterx(All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glPointParameterxvOES(pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPointParameterxvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void PointParameterx(All pname, int* @params)
      {
        GL.Delegates.glPointParameterxvOES(pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPointSizePointerOES", Version = "1.1")]
      public static void PointSizePointer(All type, int stride, IntPtr pointer)
      {
        GL.Delegates.glPointSizePointerOES(type, stride, pointer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPointSizePointerOES", Version = "1.1")]
      public static void PointSizePointer<T2>(All type, int stride, [In, Out] T2[] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glPointSizePointerOES(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPointSizePointerOES", Version = "1.1")]
      public static void PointSizePointer<T2>(All type, int stride, [In, Out] T2[,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glPointSizePointerOES(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPointSizePointerOES", Version = "1.1")]
      public static void PointSizePointer<T2>(All type, int stride, [In, Out] T2[,,] pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glPointSizePointerOES(type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPointSizePointerOES", Version = "1.1")]
      public static void PointSizePointer<T2>(All type, int stride, [In, Out] ref T2 pointer) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glPointSizePointerOES(type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPointSizexOES", Version = "1.1")]
      public static void PointSizex(int size)
      {
        GL.Delegates.glPointSizexOES(size);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glPolygonOffsetxOES", Version = "1.1")]
      public static void PolygonOffsetx(int factor, int units)
      {
        GL.Delegates.glPolygonOffsetxOES(factor, units);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glQueryMatrixxOES", Version = "1.1")]
      public static unsafe int QueryMatrixx(int[] mantissa, int[] exponent)
      {
        fixed (int* mantissa1 = mantissa)
          fixed (int* exponent1 = exponent)
            return GL.Delegates.glQueryMatrixxOES(mantissa1, exponent1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glQueryMatrixxOES", Version = "1.1")]
      public static unsafe int QueryMatrixx(ref int mantissa, ref int exponent)
      {
        fixed (int* mantissa1 = &mantissa)
          fixed (int* exponent1 = &exponent)
            return GL.Delegates.glQueryMatrixxOES(mantissa1, exponent1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glQueryMatrixxOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe int QueryMatrixx(int* mantissa, int* exponent)
      {
        return GL.Delegates.glQueryMatrixxOES(mantissa, exponent);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glRenderbufferStorageOES", Version = "1.1")]
      public static void RenderbufferStorage(All target, All internalformat, int width, int height)
      {
        GL.Delegates.glRenderbufferStorageOES(target, internalformat, width, height);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glRotatexOES", Version = "1.1")]
      public static void Rotatex(int angle, int x, int y, int z)
      {
        GL.Delegates.glRotatexOES(angle, x, y, z);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glSampleCoveragexOES", Version = "1.1")]
      public static void SampleCoveragex(int value, bool invert)
      {
        GL.Delegates.glSampleCoveragexOES(value, invert);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glScalexOES", Version = "1.1")]
      public static void Scalex(int x, int y, int z)
      {
        GL.Delegates.glScalexOES(x, y, z);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvxOES", Version = "1.1")]
      public static void TexEnvx(All target, All pname, int param)
      {
        GL.Delegates.glTexEnvxOES(target, pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvxvOES", Version = "1.1")]
      public static unsafe void TexEnvx(All target, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glTexEnvxvOES(target, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexEnvxvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexEnvx(All target, All pname, int* @params)
      {
        GL.Delegates.glTexEnvxvOES(target, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexGenfOES", Version = "1.1")]
      public static void TexGen(All coord, All pname, float param)
      {
        GL.Delegates.glTexGenfOES(coord, pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexGenfvOES", Version = "1.1")]
      public static unsafe void TexGen(All coord, All pname, float[] @params)
      {
        fixed (float* params1 = @params)
          GL.Delegates.glTexGenfvOES(coord, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexGenfvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexGen(All coord, All pname, float* @params)
      {
        GL.Delegates.glTexGenfvOES(coord, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexGeniOES", Version = "1.1")]
      public static void TexGen(All coord, All pname, int param)
      {
        GL.Delegates.glTexGeniOES(coord, pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexGenivOES", Version = "1.1")]
      public static unsafe void TexGen(All coord, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glTexGenivOES(coord, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexGenivOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexGen(All coord, All pname, int* @params)
      {
        GL.Delegates.glTexGenivOES(coord, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexGenxOES", Version = "1.1")]
      public static void TexGenx(All coord, All pname, int param)
      {
        GL.Delegates.glTexGenxOES(coord, pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexGenxvOES", Version = "1.1")]
      public static unsafe void TexGenx(All coord, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glTexGenxvOES(coord, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexGenxvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexGenx(All coord, All pname, int* @params)
      {
        GL.Delegates.glTexGenxvOES(coord, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameterxOES", Version = "1.1")]
      public static void TexParameterx(All target, All pname, int param)
      {
        GL.Delegates.glTexParameterxOES(target, pname, param);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameterxvOES", Version = "1.1")]
      public static unsafe void TexParameterx(All target, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glTexParameterxvOES(target, pname, params1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTexParameterxvOES", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void TexParameterx(All target, All pname, int* @params)
      {
        GL.Delegates.glTexParameterxvOES(target, pname, @params);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glTranslatexOES", Version = "1.1")]
      public static void Translatex(int x, int y, int z)
      {
        GL.Delegates.glTranslatexOES(x, y, z);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glUnmapBufferOES", Version = "1.1")]
      public static bool UnmapBuffer(All target)
      {
        return GL.Delegates.glUnmapBufferOES(target);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glWeightPointerOES", Version = "1.1")]
      public static void WeightPointer(int size, All type, int stride, IntPtr pointer)
      {
        GL.Delegates.glWeightPointerOES(size, type, stride, pointer);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glWeightPointerOES", Version = "1.1")]
      public static void WeightPointer<T3>(int size, All type, int stride, [In, Out] T3[] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glWeightPointerOES(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glWeightPointerOES", Version = "1.1")]
      public static void WeightPointer<T3>(int size, All type, int stride, [In, Out] T3[,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glWeightPointerOES(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glWeightPointerOES", Version = "1.1")]
      public static void WeightPointer<T3>(int size, All type, int stride, [In, Out] T3[,,] pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glWeightPointerOES(size, type, stride, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glWeightPointerOES", Version = "1.1")]
      public static void WeightPointer<T3>(int size, All type, int stride, [In, Out] ref T3 pointer) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glWeightPointerOES(size, type, stride, gcHandle.AddrOfPinnedObject());
          pointer = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    public static class Qcom
    {
      [AutoGenerated(Category = "1.1", EntryPoint = "glDisableDriverControlQCOM", Version = "1.1")]
      public static void DisableDriverControl(int driverControl)
      {
        GL.Delegates.glDisableDriverControlQCOM((uint) driverControl);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glDisableDriverControlQCOM", Version = "1.1")]
      public static void DisableDriverControl(uint driverControl)
      {
        GL.Delegates.glDisableDriverControlQCOM(driverControl);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glEnableDriverControlQCOM", Version = "1.1")]
      public static void EnableDriverControl(int driverControl)
      {
        GL.Delegates.glEnableDriverControlQCOM((uint) driverControl);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glEnableDriverControlQCOM", Version = "1.1")]
      public static void EnableDriverControl(uint driverControl)
      {
        GL.Delegates.glEnableDriverControlQCOM(driverControl);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlsQCOM", Version = "1.1")]
      public static unsafe void GetDriverControl(int[] num, int size, int[] driverControls)
      {
        fixed (int* num1 = num)
          fixed (int* numPtr = driverControls)
            GL.Delegates.glGetDriverControlsQCOM(num1, size, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlsQCOM", Version = "1.1")]
      public static unsafe void GetDriverControl(int[] num, int size, uint[] driverControls)
      {
        fixed (int* num1 = num)
          fixed (uint* driverControls1 = driverControls)
            GL.Delegates.glGetDriverControlsQCOM(num1, size, driverControls1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlsQCOM", Version = "1.1")]
      public static unsafe void GetDriverControl(ref int num, int size, ref int driverControls)
      {
        fixed (int* num1 = &num)
          fixed (int* numPtr = &driverControls)
            GL.Delegates.glGetDriverControlsQCOM(num1, size, (uint*) numPtr);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlsQCOM", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetDriverControl(ref int num, int size, ref uint driverControls)
      {
        fixed (int* num1 = &num)
          fixed (uint* driverControls1 = &driverControls)
            GL.Delegates.glGetDriverControlsQCOM(num1, size, driverControls1);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlsQCOM", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetDriverControl(int* num, int size, int* driverControls)
      {
        GL.Delegates.glGetDriverControlsQCOM(num, size, (uint*) driverControls);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlsQCOM", Version = "1.1")]
      public static unsafe void GetDriverControl(int* num, int size, uint* driverControls)
      {
        GL.Delegates.glGetDriverControlsQCOM(num, size, driverControls);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlStringQCOM", Version = "1.1")]
      public static unsafe void GetDriverControlString(int driverControl, int bufSize, int[] length, string driverControlString)
      {
        fixed (int* length1 = length)
          GL.Delegates.glGetDriverControlStringQCOM((uint) driverControl, bufSize, length1, driverControlString);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlStringQCOM", Version = "1.1")]
      public static unsafe void GetDriverControlString(int driverControl, int bufSize, ref int length, string driverControlString)
      {
        fixed (int* length1 = &length)
          GL.Delegates.glGetDriverControlStringQCOM((uint) driverControl, bufSize, length1, driverControlString);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlStringQCOM", Version = "1.1")]
      public static unsafe void GetDriverControlString(int driverControl, int bufSize, int* length, string driverControlString)
      {
        GL.Delegates.glGetDriverControlStringQCOM((uint) driverControl, bufSize, length, driverControlString);
      }

      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlStringQCOM", Version = "1.1")]
      [CLSCompliant(false)]
      public static unsafe void GetDriverControlString(uint driverControl, int bufSize, int[] length, string driverControlString)
      {
        fixed (int* length1 = length)
          GL.Delegates.glGetDriverControlStringQCOM(driverControl, bufSize, length1, driverControlString);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlStringQCOM", Version = "1.1")]
      public static unsafe void GetDriverControlString(uint driverControl, int bufSize, ref int length, string driverControlString)
      {
        fixed (int* length1 = &length)
          GL.Delegates.glGetDriverControlStringQCOM(driverControl, bufSize, length1, driverControlString);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "1.1", EntryPoint = "glGetDriverControlStringQCOM", Version = "1.1")]
      public static unsafe void GetDriverControlString(uint driverControl, int bufSize, int* length, string driverControlString)
      {
        GL.Delegates.glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);
      }
    }

    internal static class Core
    {
      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glActiveTexture")]
      internal static void ActiveTexture(All texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glAlphaFunc")]
      internal static void AlphaFunc(All func, float @ref);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glAlphaFuncx")]
      internal static void AlphaFuncx(All func, int @ref);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glAlphaFuncxOES")]
      internal static void AlphaFuncxOES(All func, int @ref);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBindBuffer")]
      internal static void BindBuffer(All target, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBindFramebufferOES")]
      internal static void BindFramebufferOES(All target, uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBindRenderbufferOES")]
      internal static void BindRenderbufferOES(All target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBindTexture")]
      internal static void BindTexture(All target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBlendEquationOES")]
      internal static void BlendEquationOES(All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBlendEquationSeparateOES")]
      internal static void BlendEquationSeparateOES(All modeRGB, All modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBlendFunc")]
      internal static void BlendFunc(All sfactor, All dfactor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBlendFuncSeparateOES")]
      internal static void BlendFuncSeparateOES(All srcRGB, All dstRGB, All srcAlpha, All dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBufferData")]
      internal static void BufferData(All target, IntPtr size, IntPtr data, All usage);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glBufferSubData")]
      internal static void BufferSubData(All target, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCheckFramebufferStatusOES")]
      internal static All CheckFramebufferStatusOES(All target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClear")]
      internal static void Clear(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearColor")]
      internal static void ClearColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearColorx")]
      internal static void ClearColorx(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearColorxOES")]
      internal static void ClearColorxOES(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearDepthf")]
      internal static void ClearDepthf(float depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearDepthfOES")]
      internal static void ClearDepthfOES(float depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearDepthx")]
      internal static void ClearDepthx(int depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearDepthxOES")]
      internal static void ClearDepthxOES(int depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClearStencil")]
      internal static void ClearStencil(int s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClientActiveTexture")]
      internal static void ClientActiveTexture(All texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClipPlanef")]
      internal static void ClipPlanef(All plane, float* equation);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClipPlanefIMG")]
      internal static void ClipPlanefIMG(All p, float* eqn);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClipPlanefOES")]
      internal static void ClipPlanefOES(All plane, float* equation);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClipPlanex")]
      internal static void ClipPlanex(All plane, int* equation);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClipPlanexIMG")]
      internal static void ClipPlanexIMG(All p, int* eqn);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glClipPlanexOES")]
      internal static void ClipPlanexOES(All plane, int* equation);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColor4f")]
      internal static void Color4f(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColor4ub")]
      internal static void Color4ub(byte red, byte green, byte blue, byte alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColor4x")]
      internal static void Color4x(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColor4xOES")]
      internal static void Color4xOES(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColorMask")]
      internal static void ColorMask(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glColorPointer")]
      internal static void ColorPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCompressedTexImage2D")]
      internal static void CompressedTexImage2D(All target, int level, All internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCompressedTexSubImage2D")]
      internal static void CompressedTexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCopyTexImage2D")]
      internal static void CopyTexImage2D(All target, int level, All internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCopyTexSubImage2D")]
      internal static void CopyTexSubImage2D(All target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCullFace")]
      internal static void CullFace(All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glCurrentPaletteMatrixOES")]
      internal static void CurrentPaletteMatrixOES(uint matrixpaletteindex);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDeleteBuffers")]
      internal static void DeleteBuffers(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDeleteFencesNV")]
      internal static void DeleteFencesNV(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDeleteFramebuffersOES")]
      internal static void DeleteFramebuffersOES(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDeleteRenderbuffersOES")]
      internal static void DeleteRenderbuffersOES(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDeleteTextures")]
      internal static void DeleteTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthFunc")]
      internal static void DepthFunc(All func);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthMask")]
      internal static void DepthMask(bool flag);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthRangef")]
      internal static void DepthRangef(float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthRangefOES")]
      internal static void DepthRangefOES(float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthRangex")]
      internal static void DepthRangex(int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDepthRangexOES")]
      internal static void DepthRangexOES(int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDisable")]
      internal static void Disable(All cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDisableClientState")]
      internal static void DisableClientState(All array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDisableDriverControlQCOM")]
      internal static void DisableDriverControlQCOM(uint driverControl);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawArrays")]
      internal static void DrawArrays(All mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawElements")]
      internal static void DrawElements(All mode, int count, All type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawTexfOES")]
      internal static void DrawTexfOES(float x, float y, float z, float width, float height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawTexfvOES")]
      internal static void DrawTexfvOES(float* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawTexiOES")]
      internal static void DrawTexiOES(int x, int y, int z, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawTexivOES")]
      internal static void DrawTexivOES(int* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawTexsOES")]
      internal static void DrawTexsOES(short x, short y, short z, short width, short height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawTexsvOES")]
      internal static void DrawTexsvOES(short* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawTexxOES")]
      internal static void DrawTexxOES(int x, int y, int z, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glDrawTexxvOES")]
      internal static void DrawTexxvOES(int* coords);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glEGLImageTargetRenderbufferStorageOES")]
      internal static void EGLImageTargetRenderbufferStorageOES(All target, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glEGLImageTargetTexture2DOES")]
      internal static void EGLImageTargetTexture2DOES(All target, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glEnable")]
      internal static void Enable(All cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glEnableClientState")]
      internal static void EnableClientState(All array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glEnableDriverControlQCOM")]
      internal static void EnableDriverControlQCOM(uint driverControl);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFinish")]
      internal static void Finish();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFinishFenceNV")]
      internal static void FinishFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFlush")]
      internal static void Flush();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogf")]
      internal static void Fogf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogfv")]
      internal static void Fogfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogx")]
      internal static void Fogx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogxOES")]
      internal static void FogxOES(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogxv")]
      internal static void Fogxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFogxvOES")]
      internal static void FogxvOES(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFramebufferRenderbufferOES")]
      internal static void FramebufferRenderbufferOES(All target, All attachment, All renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFramebufferTexture2DOES")]
      internal static void FramebufferTexture2DOES(All target, All attachment, All textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFrontFace")]
      internal static void FrontFace(All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFrustumf")]
      internal static void Frustumf(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFrustumfOES")]
      internal static void FrustumfOES(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFrustumx")]
      internal static void Frustumx(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glFrustumxOES")]
      internal static void FrustumxOES(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGenBuffers")]
      internal static void GenBuffers(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGenerateMipmapOES")]
      internal static void GenerateMipmapOES(All target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGenFencesNV")]
      internal static void GenFencesNV(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGenFramebuffersOES")]
      internal static void GenFramebuffersOES(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGenRenderbuffersOES")]
      internal static void GenRenderbuffersOES(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGenTextures")]
      internal static void GenTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetBooleanv")]
      internal static void GetBooleanv(All pname, bool* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetBufferParameteriv")]
      internal static void GetBufferParameteriv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetBufferPointervOES")]
      internal static void GetBufferPointervOES(All target, All pname, IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetClipPlanef")]
      internal static void GetClipPlanef(All pname, float* eqn);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetClipPlanefOES")]
      internal static void GetClipPlanefOES(All pname, float* eqn);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetClipPlanex")]
      internal static void GetClipPlanex(All pname, int* eqn);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetClipPlanexOES")]
      internal static void GetClipPlanexOES(All pname, int* eqn);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetDriverControlsQCOM")]
      internal static void GetDriverControlsQCOM(int* num, int size, uint* driverControls);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetDriverControlStringQCOM")]
      internal static void GetDriverControlStringQCOM(uint driverControl, int bufSize, int* length, string driverControlString);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetError")]
      internal static All GetError();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetFenceivNV")]
      internal static void GetFenceivNV(uint fence, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetFixedv")]
      internal static void GetFixedv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetFixedvOES")]
      internal static void GetFixedvOES(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetFloatv")]
      internal static void GetFloatv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetFramebufferAttachmentParameterivOES")]
      internal static void GetFramebufferAttachmentParameterivOES(All target, All attachment, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetIntegerv")]
      internal static void GetIntegerv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetLightfv")]
      internal static void GetLightfv(All light, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetLightxv")]
      internal static void GetLightxv(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetLightxvOES")]
      internal static void GetLightxvOES(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetMaterialfv")]
      internal static void GetMaterialfv(All face, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetMaterialxv")]
      internal static void GetMaterialxv(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetMaterialxvOES")]
      internal static void GetMaterialxvOES(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetPointerv")]
      internal static void GetPointerv(All pname, IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetRenderbufferParameterivOES")]
      internal static void GetRenderbufferParameterivOES(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetString")]
      internal static IntPtr GetString(All name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexEnvfv")]
      internal static void GetTexEnvfv(All env, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexEnviv")]
      internal static void GetTexEnviv(All env, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexEnvxv")]
      internal static void GetTexEnvxv(All env, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexEnvxvOES")]
      internal static void GetTexEnvxvOES(All env, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexGenfvOES")]
      internal static void GetTexGenfvOES(All coord, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexGenivOES")]
      internal static void GetTexGenivOES(All coord, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexGenxvOES")]
      internal static void GetTexGenxvOES(All coord, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexParameterfv")]
      internal static void GetTexParameterfv(All target, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexParameteriv")]
      internal static void GetTexParameteriv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexParameterxv")]
      internal static void GetTexParameterxv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glGetTexParameterxvOES")]
      internal static void GetTexParameterxvOES(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glHint")]
      internal static void Hint(All target, All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glIsBuffer")]
      internal static bool IsBuffer(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glIsEnabled")]
      internal static bool IsEnabled(All cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glIsFenceNV")]
      internal static bool IsFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glIsFramebufferOES")]
      internal static bool IsFramebufferOES(uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glIsRenderbufferOES")]
      internal static bool IsRenderbufferOES(uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glIsTexture")]
      internal static bool IsTexture(uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightf")]
      internal static void Lightf(All light, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightfv")]
      internal static void Lightfv(All light, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelf")]
      internal static void LightModelf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelfv")]
      internal static void LightModelfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelx")]
      internal static void LightModelx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelxOES")]
      internal static void LightModelxOES(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelxv")]
      internal static void LightModelxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightModelxvOES")]
      internal static void LightModelxvOES(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightx")]
      internal static void Lightx(All light, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightxOES")]
      internal static void LightxOES(All light, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightxv")]
      internal static void Lightxv(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLightxvOES")]
      internal static void LightxvOES(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLineWidth")]
      internal static void LineWidth(float width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLineWidthx")]
      internal static void LineWidthx(int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLineWidthxOES")]
      internal static void LineWidthxOES(int width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLoadIdentity")]
      internal static void LoadIdentity();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLoadMatrixf")]
      internal static void LoadMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLoadMatrixx")]
      internal static void LoadMatrixx(int* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLoadMatrixxOES")]
      internal static void LoadMatrixxOES(int* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLoadPaletteFromModelViewMatrixOES")]
      internal static void LoadPaletteFromModelViewMatrixOES();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glLogicOp")]
      internal static void LogicOp(All opcode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMapBufferOES")]
      internal static IntPtr MapBufferOES(All target, All access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialf")]
      internal static void Materialf(All face, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialfv")]
      internal static void Materialfv(All face, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialx")]
      internal static void Materialx(All face, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialxOES")]
      internal static void MaterialxOES(All face, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialxv")]
      internal static void Materialxv(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMaterialxvOES")]
      internal static void MaterialxvOES(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMatrixIndexPointerOES")]
      internal static void MatrixIndexPointerOES(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMatrixMode")]
      internal static void MatrixMode(All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultiTexCoord4f")]
      internal static void MultiTexCoord4f(All target, float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultiTexCoord4x")]
      internal static void MultiTexCoord4x(All target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultiTexCoord4xOES")]
      internal static void MultiTexCoord4xOES(All target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultMatrixf")]
      internal static void MultMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultMatrixx")]
      internal static void MultMatrixx(int* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glMultMatrixxOES")]
      internal static void MultMatrixxOES(int* m);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glNormal3f")]
      internal static void Normal3f(float nx, float ny, float nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glNormal3x")]
      internal static void Normal3x(int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glNormal3xOES")]
      internal static void Normal3xOES(int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glNormalPointer")]
      internal static void NormalPointer(All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glOrthof")]
      internal static void Orthof(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glOrthofOES")]
      internal static void OrthofOES(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glOrthox")]
      internal static void Orthox(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glOrthoxOES")]
      internal static void OrthoxOES(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPixelStorei")]
      internal static void PixelStorei(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointParameterf")]
      internal static void PointParameterf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointParameterfv")]
      internal static void PointParameterfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointParameterx")]
      internal static void PointParameterx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointParameterxOES")]
      internal static void PointParameterxOES(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointParameterxv")]
      internal static void PointParameterxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointParameterxvOES")]
      internal static void PointParameterxvOES(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointSize")]
      internal static void PointSize(float size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointSizePointerOES")]
      internal static void PointSizePointerOES(All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointSizex")]
      internal static void PointSizex(int size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPointSizexOES")]
      internal static void PointSizexOES(int size);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPolygonOffset")]
      internal static void PolygonOffset(float factor, float units);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPolygonOffsetx")]
      internal static void PolygonOffsetx(int factor, int units);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPolygonOffsetxOES")]
      internal static void PolygonOffsetxOES(int factor, int units);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPopMatrix")]
      internal static void PopMatrix();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glPushMatrix")]
      internal static void PushMatrix();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glQueryMatrixxOES")]
      internal static int QueryMatrixxOES(int* mantissa, int* exponent);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glReadPixels")]
      internal static void ReadPixels(int x, int y, int width, int height, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glRenderbufferStorageOES")]
      internal static void RenderbufferStorageOES(All target, All internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glRotatef")]
      internal static void Rotatef(float angle, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glRotatex")]
      internal static void Rotatex(int angle, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glRotatexOES")]
      internal static void RotatexOES(int angle, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glSampleCoverage")]
      internal static void SampleCoverage(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glSampleCoveragex")]
      internal static void SampleCoveragex(int value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glSampleCoveragexOES")]
      internal static void SampleCoveragexOES(int value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glScalef")]
      internal static void Scalef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glScalex")]
      internal static void Scalex(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glScalexOES")]
      internal static void ScalexOES(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glScissor")]
      internal static void Scissor(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glSetFenceNV")]
      internal static void SetFenceNV(uint fence, All condition);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glShadeModel")]
      internal static void ShadeModel(All mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glStencilFunc")]
      internal static void StencilFunc(All func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glStencilMask")]
      internal static void StencilMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glStencilOp")]
      internal static void StencilOp(All fail, All zfail, All zpass);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTestFenceNV")]
      internal static bool TestFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexCoordPointer")]
      internal static void TexCoordPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvf")]
      internal static void TexEnvf(All target, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvfv")]
      internal static void TexEnvfv(All target, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvi")]
      internal static void TexEnvi(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnviv")]
      internal static void TexEnviv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvx")]
      internal static void TexEnvx(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvxOES")]
      internal static void TexEnvxOES(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvxv")]
      internal static void TexEnvxv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexEnvxvOES")]
      internal static void TexEnvxvOES(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexGenfOES")]
      internal static void TexGenfOES(All coord, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexGenfvOES")]
      internal static void TexGenfvOES(All coord, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexGeniOES")]
      internal static void TexGeniOES(All coord, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexGenivOES")]
      internal static void TexGenivOES(All coord, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexGenxOES")]
      internal static void TexGenxOES(All coord, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexGenxvOES")]
      internal static void TexGenxvOES(All coord, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexImage2D")]
      internal static void TexImage2D(All target, int level, int internalformat, int width, int height, int border, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameterf")]
      internal static void TexParameterf(All target, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameterfv")]
      internal static void TexParameterfv(All target, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameteri")]
      internal static void TexParameteri(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameteriv")]
      internal static void TexParameteriv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameterx")]
      internal static void TexParameterx(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameterxOES")]
      internal static void TexParameterxOES(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameterxv")]
      internal static void TexParameterxv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexParameterxvOES")]
      internal static void TexParameterxvOES(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTexSubImage2D")]
      internal static void TexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTranslatef")]
      internal static void Translatef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTranslatex")]
      internal static void Translatex(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glTranslatexOES")]
      internal static void TranslatexOES(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glUnmapBufferOES")]
      internal static bool UnmapBufferOES(All target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glVertexPointer")]
      internal static void VertexPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glViewport")]
      internal static void Viewport(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLES.dll", EntryPoint = "glWeightPointerOES")]
      internal static void WeightPointerOES(int size, All type, int stride, IntPtr pointer);
    }

    internal static class Delegates
    {
      internal static GL.Delegates.ActiveTexture glActiveTexture;
      internal static GL.Delegates.AlphaFunc glAlphaFunc;
      internal static GL.Delegates.AlphaFuncx glAlphaFuncx;
      internal static GL.Delegates.AlphaFuncxOES glAlphaFuncxOES;
      internal static GL.Delegates.BindBuffer glBindBuffer;
      internal static GL.Delegates.BindFramebufferOES glBindFramebufferOES;
      internal static GL.Delegates.BindRenderbufferOES glBindRenderbufferOES;
      internal static GL.Delegates.BindTexture glBindTexture;
      internal static GL.Delegates.BlendEquationOES glBlendEquationOES;
      internal static GL.Delegates.BlendEquationSeparateOES glBlendEquationSeparateOES;
      internal static GL.Delegates.BlendFunc glBlendFunc;
      internal static GL.Delegates.BlendFuncSeparateOES glBlendFuncSeparateOES;
      internal static GL.Delegates.BufferData glBufferData;
      internal static GL.Delegates.BufferSubData glBufferSubData;
      internal static GL.Delegates.CheckFramebufferStatusOES glCheckFramebufferStatusOES;
      internal static GL.Delegates.Clear glClear;
      internal static GL.Delegates.ClearColor glClearColor;
      internal static GL.Delegates.ClearColorx glClearColorx;
      internal static GL.Delegates.ClearColorxOES glClearColorxOES;
      internal static GL.Delegates.ClearDepthf glClearDepthf;
      internal static GL.Delegates.ClearDepthfOES glClearDepthfOES;
      internal static GL.Delegates.ClearDepthx glClearDepthx;
      internal static GL.Delegates.ClearDepthxOES glClearDepthxOES;
      internal static GL.Delegates.ClearStencil glClearStencil;
      internal static GL.Delegates.ClientActiveTexture glClientActiveTexture;
      internal static GL.Delegates.ClipPlanef glClipPlanef;
      internal static GL.Delegates.ClipPlanefIMG glClipPlanefIMG;
      internal static GL.Delegates.ClipPlanefOES glClipPlanefOES;
      internal static GL.Delegates.ClipPlanex glClipPlanex;
      internal static GL.Delegates.ClipPlanexIMG glClipPlanexIMG;
      internal static GL.Delegates.ClipPlanexOES glClipPlanexOES;
      internal static GL.Delegates.Color4f glColor4f;
      internal static GL.Delegates.Color4ub glColor4ub;
      internal static GL.Delegates.Color4x glColor4x;
      internal static GL.Delegates.Color4xOES glColor4xOES;
      internal static GL.Delegates.ColorMask glColorMask;
      internal static GL.Delegates.ColorPointer glColorPointer;
      internal static GL.Delegates.CompressedTexImage2D glCompressedTexImage2D;
      internal static GL.Delegates.CompressedTexSubImage2D glCompressedTexSubImage2D;
      internal static GL.Delegates.CopyTexImage2D glCopyTexImage2D;
      internal static GL.Delegates.CopyTexSubImage2D glCopyTexSubImage2D;
      internal static GL.Delegates.CullFace glCullFace;
      internal static GL.Delegates.CurrentPaletteMatrixOES glCurrentPaletteMatrixOES;
      internal static GL.Delegates.DeleteBuffers glDeleteBuffers;
      internal static GL.Delegates.DeleteFencesNV glDeleteFencesNV;
      internal static GL.Delegates.DeleteFramebuffersOES glDeleteFramebuffersOES;
      internal static GL.Delegates.DeleteRenderbuffersOES glDeleteRenderbuffersOES;
      internal static GL.Delegates.DeleteTextures glDeleteTextures;
      internal static GL.Delegates.DepthFunc glDepthFunc;
      internal static GL.Delegates.DepthMask glDepthMask;
      internal static GL.Delegates.DepthRangef glDepthRangef;
      internal static GL.Delegates.DepthRangefOES glDepthRangefOES;
      internal static GL.Delegates.DepthRangex glDepthRangex;
      internal static GL.Delegates.DepthRangexOES glDepthRangexOES;
      internal static GL.Delegates.Disable glDisable;
      internal static GL.Delegates.DisableClientState glDisableClientState;
      internal static GL.Delegates.DisableDriverControlQCOM glDisableDriverControlQCOM;
      internal static GL.Delegates.DrawArrays glDrawArrays;
      internal static GL.Delegates.DrawElements glDrawElements;
      internal static GL.Delegates.DrawTexfOES glDrawTexfOES;
      internal static GL.Delegates.DrawTexfvOES glDrawTexfvOES;
      internal static GL.Delegates.DrawTexiOES glDrawTexiOES;
      internal static GL.Delegates.DrawTexivOES glDrawTexivOES;
      internal static GL.Delegates.DrawTexsOES glDrawTexsOES;
      internal static GL.Delegates.DrawTexsvOES glDrawTexsvOES;
      internal static GL.Delegates.DrawTexxOES glDrawTexxOES;
      internal static GL.Delegates.DrawTexxvOES glDrawTexxvOES;
      internal static GL.Delegates.EGLImageTargetRenderbufferStorageOES glEGLImageTargetRenderbufferStorageOES;
      internal static GL.Delegates.EGLImageTargetTexture2DOES glEGLImageTargetTexture2DOES;
      internal static GL.Delegates.Enable glEnable;
      internal static GL.Delegates.EnableClientState glEnableClientState;
      internal static GL.Delegates.EnableDriverControlQCOM glEnableDriverControlQCOM;
      internal static GL.Delegates.Finish glFinish;
      internal static GL.Delegates.FinishFenceNV glFinishFenceNV;
      internal static GL.Delegates.Flush glFlush;
      internal static GL.Delegates.Fogf glFogf;
      internal static GL.Delegates.Fogfv glFogfv;
      internal static GL.Delegates.Fogx glFogx;
      internal static GL.Delegates.FogxOES glFogxOES;
      internal static GL.Delegates.Fogxv glFogxv;
      internal static GL.Delegates.FogxvOES glFogxvOES;
      internal static GL.Delegates.FramebufferRenderbufferOES glFramebufferRenderbufferOES;
      internal static GL.Delegates.FramebufferTexture2DOES glFramebufferTexture2DOES;
      internal static GL.Delegates.FrontFace glFrontFace;
      internal static GL.Delegates.Frustumf glFrustumf;
      internal static GL.Delegates.FrustumfOES glFrustumfOES;
      internal static GL.Delegates.Frustumx glFrustumx;
      internal static GL.Delegates.FrustumxOES glFrustumxOES;
      internal static GL.Delegates.GenBuffers glGenBuffers;
      internal static GL.Delegates.GenerateMipmapOES glGenerateMipmapOES;
      internal static GL.Delegates.GenFencesNV glGenFencesNV;
      internal static GL.Delegates.GenFramebuffersOES glGenFramebuffersOES;
      internal static GL.Delegates.GenRenderbuffersOES glGenRenderbuffersOES;
      internal static GL.Delegates.GenTextures glGenTextures;
      internal static GL.Delegates.GetBooleanv glGetBooleanv;
      internal static GL.Delegates.GetBufferParameteriv glGetBufferParameteriv;
      internal static GL.Delegates.GetBufferPointervOES glGetBufferPointervOES;
      internal static GL.Delegates.GetClipPlanef glGetClipPlanef;
      internal static GL.Delegates.GetClipPlanefOES glGetClipPlanefOES;
      internal static GL.Delegates.GetClipPlanex glGetClipPlanex;
      internal static GL.Delegates.GetClipPlanexOES glGetClipPlanexOES;
      internal static GL.Delegates.GetDriverControlsQCOM glGetDriverControlsQCOM;
      internal static GL.Delegates.GetDriverControlStringQCOM glGetDriverControlStringQCOM;
      internal static GL.Delegates.GetError glGetError;
      internal static GL.Delegates.GetFenceivNV glGetFenceivNV;
      internal static GL.Delegates.GetFixedv glGetFixedv;
      internal static GL.Delegates.GetFixedvOES glGetFixedvOES;
      internal static GL.Delegates.GetFloatv glGetFloatv;
      internal static GL.Delegates.GetFramebufferAttachmentParameterivOES glGetFramebufferAttachmentParameterivOES;
      internal static GL.Delegates.GetIntegerv glGetIntegerv;
      internal static GL.Delegates.GetLightfv glGetLightfv;
      internal static GL.Delegates.GetLightxv glGetLightxv;
      internal static GL.Delegates.GetLightxvOES glGetLightxvOES;
      internal static GL.Delegates.GetMaterialfv glGetMaterialfv;
      internal static GL.Delegates.GetMaterialxv glGetMaterialxv;
      internal static GL.Delegates.GetMaterialxvOES glGetMaterialxvOES;
      internal static GL.Delegates.GetPointerv glGetPointerv;
      internal static GL.Delegates.GetRenderbufferParameterivOES glGetRenderbufferParameterivOES;
      internal static GL.Delegates.GetString glGetString;
      internal static GL.Delegates.GetTexEnvfv glGetTexEnvfv;
      internal static GL.Delegates.GetTexEnviv glGetTexEnviv;
      internal static GL.Delegates.GetTexEnvxv glGetTexEnvxv;
      internal static GL.Delegates.GetTexEnvxvOES glGetTexEnvxvOES;
      internal static GL.Delegates.GetTexGenfvOES glGetTexGenfvOES;
      internal static GL.Delegates.GetTexGenivOES glGetTexGenivOES;
      internal static GL.Delegates.GetTexGenxvOES glGetTexGenxvOES;
      internal static GL.Delegates.GetTexParameterfv glGetTexParameterfv;
      internal static GL.Delegates.GetTexParameteriv glGetTexParameteriv;
      internal static GL.Delegates.GetTexParameterxv glGetTexParameterxv;
      internal static GL.Delegates.GetTexParameterxvOES glGetTexParameterxvOES;
      internal static GL.Delegates.Hint glHint;
      internal static GL.Delegates.IsBuffer glIsBuffer;
      internal static GL.Delegates.IsEnabled glIsEnabled;
      internal static GL.Delegates.IsFenceNV glIsFenceNV;
      internal static GL.Delegates.IsFramebufferOES glIsFramebufferOES;
      internal static GL.Delegates.IsRenderbufferOES glIsRenderbufferOES;
      internal static GL.Delegates.IsTexture glIsTexture;
      internal static GL.Delegates.Lightf glLightf;
      internal static GL.Delegates.Lightfv glLightfv;
      internal static GL.Delegates.LightModelf glLightModelf;
      internal static GL.Delegates.LightModelfv glLightModelfv;
      internal static GL.Delegates.LightModelx glLightModelx;
      internal static GL.Delegates.LightModelxOES glLightModelxOES;
      internal static GL.Delegates.LightModelxv glLightModelxv;
      internal static GL.Delegates.LightModelxvOES glLightModelxvOES;
      internal static GL.Delegates.Lightx glLightx;
      internal static GL.Delegates.LightxOES glLightxOES;
      internal static GL.Delegates.Lightxv glLightxv;
      internal static GL.Delegates.LightxvOES glLightxvOES;
      internal static GL.Delegates.LineWidth glLineWidth;
      internal static GL.Delegates.LineWidthx glLineWidthx;
      internal static GL.Delegates.LineWidthxOES glLineWidthxOES;
      internal static GL.Delegates.LoadIdentity glLoadIdentity;
      internal static GL.Delegates.LoadMatrixf glLoadMatrixf;
      internal static GL.Delegates.LoadMatrixx glLoadMatrixx;
      internal static GL.Delegates.LoadMatrixxOES glLoadMatrixxOES;
      internal static GL.Delegates.LoadPaletteFromModelViewMatrixOES glLoadPaletteFromModelViewMatrixOES;
      internal static GL.Delegates.LogicOp glLogicOp;
      internal static GL.Delegates.MapBufferOES glMapBufferOES;
      internal static GL.Delegates.Materialf glMaterialf;
      internal static GL.Delegates.Materialfv glMaterialfv;
      internal static GL.Delegates.Materialx glMaterialx;
      internal static GL.Delegates.MaterialxOES glMaterialxOES;
      internal static GL.Delegates.Materialxv glMaterialxv;
      internal static GL.Delegates.MaterialxvOES glMaterialxvOES;
      internal static GL.Delegates.MatrixIndexPointerOES glMatrixIndexPointerOES;
      internal static GL.Delegates.MatrixMode glMatrixMode;
      internal static GL.Delegates.MultiTexCoord4f glMultiTexCoord4f;
      internal static GL.Delegates.MultiTexCoord4x glMultiTexCoord4x;
      internal static GL.Delegates.MultiTexCoord4xOES glMultiTexCoord4xOES;
      internal static GL.Delegates.MultMatrixf glMultMatrixf;
      internal static GL.Delegates.MultMatrixx glMultMatrixx;
      internal static GL.Delegates.MultMatrixxOES glMultMatrixxOES;
      internal static GL.Delegates.Normal3f glNormal3f;
      internal static GL.Delegates.Normal3x glNormal3x;
      internal static GL.Delegates.Normal3xOES glNormal3xOES;
      internal static GL.Delegates.NormalPointer glNormalPointer;
      internal static GL.Delegates.Orthof glOrthof;
      internal static GL.Delegates.OrthofOES glOrthofOES;
      internal static GL.Delegates.Orthox glOrthox;
      internal static GL.Delegates.OrthoxOES glOrthoxOES;
      internal static GL.Delegates.PixelStorei glPixelStorei;
      internal static GL.Delegates.PointParameterf glPointParameterf;
      internal static GL.Delegates.PointParameterfv glPointParameterfv;
      internal static GL.Delegates.PointParameterx glPointParameterx;
      internal static GL.Delegates.PointParameterxOES glPointParameterxOES;
      internal static GL.Delegates.PointParameterxv glPointParameterxv;
      internal static GL.Delegates.PointParameterxvOES glPointParameterxvOES;
      internal static GL.Delegates.PointSize glPointSize;
      internal static GL.Delegates.PointSizePointerOES glPointSizePointerOES;
      internal static GL.Delegates.PointSizex glPointSizex;
      internal static GL.Delegates.PointSizexOES glPointSizexOES;
      internal static GL.Delegates.PolygonOffset glPolygonOffset;
      internal static GL.Delegates.PolygonOffsetx glPolygonOffsetx;
      internal static GL.Delegates.PolygonOffsetxOES glPolygonOffsetxOES;
      internal static GL.Delegates.PopMatrix glPopMatrix;
      internal static GL.Delegates.PushMatrix glPushMatrix;
      internal static GL.Delegates.QueryMatrixxOES glQueryMatrixxOES;
      internal static GL.Delegates.ReadPixels glReadPixels;
      internal static GL.Delegates.RenderbufferStorageOES glRenderbufferStorageOES;
      internal static GL.Delegates.Rotatef glRotatef;
      internal static GL.Delegates.Rotatex glRotatex;
      internal static GL.Delegates.RotatexOES glRotatexOES;
      internal static GL.Delegates.SampleCoverage glSampleCoverage;
      internal static GL.Delegates.SampleCoveragex glSampleCoveragex;
      internal static GL.Delegates.SampleCoveragexOES glSampleCoveragexOES;
      internal static GL.Delegates.Scalef glScalef;
      internal static GL.Delegates.Scalex glScalex;
      internal static GL.Delegates.ScalexOES glScalexOES;
      internal static GL.Delegates.Scissor glScissor;
      internal static GL.Delegates.SetFenceNV glSetFenceNV;
      internal static GL.Delegates.ShadeModel glShadeModel;
      internal static GL.Delegates.StencilFunc glStencilFunc;
      internal static GL.Delegates.StencilMask glStencilMask;
      internal static GL.Delegates.StencilOp glStencilOp;
      internal static GL.Delegates.TestFenceNV glTestFenceNV;
      internal static GL.Delegates.TexCoordPointer glTexCoordPointer;
      internal static GL.Delegates.TexEnvf glTexEnvf;
      internal static GL.Delegates.TexEnvfv glTexEnvfv;
      internal static GL.Delegates.TexEnvi glTexEnvi;
      internal static GL.Delegates.TexEnviv glTexEnviv;
      internal static GL.Delegates.TexEnvx glTexEnvx;
      internal static GL.Delegates.TexEnvxOES glTexEnvxOES;
      internal static GL.Delegates.TexEnvxv glTexEnvxv;
      internal static GL.Delegates.TexEnvxvOES glTexEnvxvOES;
      internal static GL.Delegates.TexGenfOES glTexGenfOES;
      internal static GL.Delegates.TexGenfvOES glTexGenfvOES;
      internal static GL.Delegates.TexGeniOES glTexGeniOES;
      internal static GL.Delegates.TexGenivOES glTexGenivOES;
      internal static GL.Delegates.TexGenxOES glTexGenxOES;
      internal static GL.Delegates.TexGenxvOES glTexGenxvOES;
      internal static GL.Delegates.TexImage2D glTexImage2D;
      internal static GL.Delegates.TexParameterf glTexParameterf;
      internal static GL.Delegates.TexParameterfv glTexParameterfv;
      internal static GL.Delegates.TexParameteri glTexParameteri;
      internal static GL.Delegates.TexParameteriv glTexParameteriv;
      internal static GL.Delegates.TexParameterx glTexParameterx;
      internal static GL.Delegates.TexParameterxOES glTexParameterxOES;
      internal static GL.Delegates.TexParameterxv glTexParameterxv;
      internal static GL.Delegates.TexParameterxvOES glTexParameterxvOES;
      internal static GL.Delegates.TexSubImage2D glTexSubImage2D;
      internal static GL.Delegates.Translatef glTranslatef;
      internal static GL.Delegates.Translatex glTranslatex;
      internal static GL.Delegates.TranslatexOES glTranslatexOES;
      internal static GL.Delegates.UnmapBufferOES glUnmapBufferOES;
      internal static GL.Delegates.VertexPointer glVertexPointer;
      internal static GL.Delegates.Viewport glViewport;
      internal static GL.Delegates.WeightPointerOES glWeightPointerOES;

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ActiveTexture(All texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AlphaFunc(All func, float @ref);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AlphaFuncx(All func, int @ref);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AlphaFuncxOES(All func, int @ref);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBuffer(All target, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindFramebufferOES(All target, uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindRenderbufferOES(All target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindTexture(All target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationOES(All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationSeparateOES(All modeRGB, All modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFunc(All sfactor, All dfactor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFuncSeparateOES(All srcRGB, All dstRGB, All srcAlpha, All dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferData(All target, IntPtr size, IntPtr data, All usage);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferSubData(All target, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate All CheckFramebufferStatusOES(All target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Clear(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearColorx(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearColorxOES(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepthf(float depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepthfOES(float depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepthx(int depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepthxOES(int depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearStencil(int s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClientActiveTexture(All texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClipPlanef(All plane, float* equation);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClipPlanefIMG(All p, float* eqn);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClipPlanefOES(All plane, float* equation);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClipPlanex(All plane, int* equation);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClipPlanexIMG(All p, int* eqn);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClipPlanexOES(All plane, int* equation);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4f(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4ub(byte red, byte green, byte blue, byte alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4x(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Color4xOES(int red, int green, int blue, int alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorMask(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage2D(All target, int level, All internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexImage2D(All target, int level, All internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage2D(All target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CullFace(All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CurrentPaletteMatrixOES(uint matrixpaletteindex);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteBuffers(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteFencesNV(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteFramebuffersOES(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteRenderbuffersOES(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthFunc(All func);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthMask(bool flag);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangef(float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangefOES(float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangex(int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangexOES(int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Disable(All cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableClientState(All array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableDriverControlQCOM(uint driverControl);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawArrays(All mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElements(All mode, int count, All type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTexfOES(float x, float y, float z, float width, float height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTexfvOES(float* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTexiOES(int x, int y, int z, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTexivOES(int* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTexsOES(short x, short y, short z, short width, short height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTexsvOES(short* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTexxOES(int x, int y, int z, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawTexxvOES(int* coords);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EGLImageTargetRenderbufferStorageOES(All target, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EGLImageTargetTexture2DOES(All target, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Enable(All cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableClientState(All array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableDriverControlQCOM(uint driverControl);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Finish();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FinishFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Flush();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogxOES(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Fogxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FogxvOES(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferRenderbufferOES(All target, All attachment, All renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture2DOES(All target, All attachment, All textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FrontFace(All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Frustumf(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FrustumfOES(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Frustumx(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FrustumxOES(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenBuffers(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenerateMipmapOES(All target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenFencesNV(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenFramebuffersOES(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenRenderbuffersOES(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBooleanv(All pname, bool* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferParameteriv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferPointervOES(All target, All pname, IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetClipPlanef(All pname, float* eqn);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetClipPlanefOES(All pname, float* eqn);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetClipPlanex(All pname, int* eqn);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetClipPlanexOES(All pname, int* eqn);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetDriverControlsQCOM(int* num, int size, uint* driverControls);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetDriverControlStringQCOM(uint driverControl, int bufSize, int* length, string driverControlString);

      [SuppressUnmanagedCodeSecurity]
      internal delegate All GetError();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFenceivNV(uint fence, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFixedv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFixedvOES(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFloatv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFramebufferAttachmentParameterivOES(All target, All attachment, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetIntegerv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetLightfv(All light, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetLightxv(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetLightxvOES(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMaterialfv(All face, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMaterialxv(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetMaterialxvOES(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPointerv(All pname, IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetRenderbufferParameterivOES(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr GetString(All name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexEnvfv(All env, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexEnviv(All env, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexEnvxv(All env, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexEnvxvOES(All env, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexGenfvOES(All coord, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexGenivOES(All coord, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexGenxvOES(All coord, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterfv(All target, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameteriv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterxv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterxvOES(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Hint(All target, All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsBuffer(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsEnabled(All cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsFramebufferOES(uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsRenderbufferOES(uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsTexture(uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightf(All light, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightfv(All light, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelxOES(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightModelxvOES(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightx(All light, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightxOES(All light, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Lightxv(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LightxvOES(All light, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LineWidth(float width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LineWidthx(int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LineWidthxOES(int width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadIdentity();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadMatrixx(int* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadMatrixxOES(int* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LoadPaletteFromModelViewMatrixOES();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LogicOp(All opcode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr MapBufferOES(All target, All access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialf(All face, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialfv(All face, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialx(All face, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MaterialxOES(All face, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Materialxv(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MaterialxvOES(All face, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixIndexPointerOES(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MatrixMode(All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4f(All target, float s, float t, float r, float q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4x(All target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiTexCoord4xOES(All target, int s, int t, int r, int q);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultMatrixf(float* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultMatrixx(int* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultMatrixxOES(int* m);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3f(float nx, float ny, float nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3x(int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Normal3xOES(int nx, int ny, int nz);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void NormalPointer(All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Orthof(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void OrthofOES(float left, float right, float bottom, float top, float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Orthox(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void OrthoxOES(int left, int right, int bottom, int top, int zNear, int zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelStorei(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterf(All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterfv(All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterx(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterxOES(All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterxv(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointParameterxvOES(All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointSize(float size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointSizePointerOES(All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointSizex(int size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PointSizexOES(int size);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonOffset(float factor, float units);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonOffsetx(int factor, int units);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonOffsetxOES(int factor, int units);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PopMatrix();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PushMatrix();

      [SuppressUnmanagedCodeSecurity]
      internal delegate int QueryMatrixxOES(int* mantissa, int* exponent);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReadPixels(int x, int y, int width, int height, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorageOES(All target, All internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rotatef(float angle, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Rotatex(int angle, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RotatexOES(int angle, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleCoverage(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleCoveragex(int value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleCoveragexOES(int value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scalef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scalex(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ScalexOES(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scissor(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SetFenceNV(uint fence, All condition);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShadeModel(All mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilFunc(All func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilOp(All fail, All zfail, All zpass);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool TestFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexCoordPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvf(All target, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvfv(All target, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvi(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnviv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvx(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvxOES(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvxv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexEnvxvOES(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGenfOES(All coord, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGenfvOES(All coord, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGeniOES(All coord, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGenivOES(All coord, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGenxOES(All coord, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexGenxvOES(All coord, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage2D(All target, int level, int internalformat, int width, int height, int border, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterf(All target, All pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterfv(All target, All pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameteri(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameteriv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterx(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterxOES(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterxv(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterxvOES(All target, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage2D(All target, int level, int xoffset, int yoffset, int width, int height, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Translatef(float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Translatex(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TranslatexOES(int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool UnmapBufferOES(All target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexPointer(int size, All type, int stride, IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Viewport(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void WeightPointerOES(int size, All type, int stride, IntPtr pointer);
    }
  }
}
