// Type: OpenTK.Graphics.ES20.GL
// Assembly: OpenTK, Version=1.1.0.0, Culture=neutral, PublicKeyToken=bad199fe84eb3df4
// MVID: FE2CFFE8-B942-430E-8C15-E783DB6F0AD6
// Assembly location: F:\Program Files (x86)\FEZ\OpenTK.dll

using OpenTK;
using OpenTK.Graphics;
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace OpenTK.Graphics.ES20
{
  public sealed class GL : GraphicsBindingsBase
  {
    private static readonly object sync_root = new object();
    private const string Library = "libGLESv2.dll";

    protected override object SyncRoot
    {
      get
      {
        return GL.sync_root;
      }
    }

    static GL()
    {
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glActiveTexture", Version = "2.0")]
    public static void ActiveTexture(TextureUnit texture)
    {
      GL.Delegates.glActiveTexture(texture);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glAttachShader", Version = "2.0")]
    public static void AttachShader(int program, int shader)
    {
      GL.Delegates.glAttachShader((uint) program, (uint) shader);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glAttachShader", Version = "2.0")]
    public static void AttachShader(uint program, uint shader)
    {
      GL.Delegates.glAttachShader(program, shader);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBindAttribLocation", Version = "2.0")]
    public static void BindAttribLocation(int program, int index, string name)
    {
      GL.Delegates.glBindAttribLocation((uint) program, (uint) index, name);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glBindAttribLocation", Version = "2.0")]
    public static void BindAttribLocation(uint program, uint index, string name)
    {
      GL.Delegates.glBindAttribLocation(program, index, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBindBuffer", Version = "2.0")]
    public static void BindBuffer(BufferTarget target, int buffer)
    {
      GL.Delegates.glBindBuffer(target, (uint) buffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glBindBuffer", Version = "2.0")]
    public static void BindBuffer(BufferTarget target, uint buffer)
    {
      GL.Delegates.glBindBuffer(target, buffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBindFramebuffer", Version = "2.0")]
    public static void BindFramebuffer(FramebufferTarget target, int framebuffer)
    {
      GL.Delegates.glBindFramebuffer(target, (uint) framebuffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBindFramebuffer", Version = "2.0")]
    [CLSCompliant(false)]
    public static void BindFramebuffer(FramebufferTarget target, uint framebuffer)
    {
      GL.Delegates.glBindFramebuffer(target, framebuffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBindRenderbuffer", Version = "2.0")]
    public static void BindRenderbuffer(RenderbufferTarget target, int renderbuffer)
    {
      GL.Delegates.glBindRenderbuffer(target, (uint) renderbuffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBindRenderbuffer", Version = "2.0")]
    [CLSCompliant(false)]
    public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
    {
      GL.Delegates.glBindRenderbuffer(target, renderbuffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBindTexture", Version = "2.0")]
    public static void BindTexture(TextureTarget target, int texture)
    {
      GL.Delegates.glBindTexture(target, (uint) texture);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBindTexture", Version = "2.0")]
    [CLSCompliant(false)]
    public static void BindTexture(TextureTarget target, uint texture)
    {
      GL.Delegates.glBindTexture(target, texture);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBlendColor", Version = "2.0")]
    public static void BlendColor(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glBlendColor(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBlendEquation", Version = "2.0")]
    public static void BlendEquation(BlendEquationMode mode)
    {
      GL.Delegates.glBlendEquation(mode);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBlendEquationSeparate", Version = "2.0")]
    public static void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha)
    {
      GL.Delegates.glBlendEquationSeparate(modeRGB, modeAlpha);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBlendFunc", Version = "2.0")]
    public static void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor)
    {
      GL.Delegates.glBlendFunc(sfactor, dfactor);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBlendFuncSeparate", Version = "2.0")]
    public static void BlendFuncSeparate(BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha)
    {
      GL.Delegates.glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferData", Version = "2.0")]
    public static void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsage usage)
    {
      GL.Delegates.glBufferData(target, size, data, usage);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferData", Version = "2.0")]
    public static void BufferData<T2>(BufferTarget target, IntPtr size, [In, Out] T2[] data, BufferUsage usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferData", Version = "2.0")]
    public static void BufferData<T2>(BufferTarget target, IntPtr size, [In, Out] T2[,] data, BufferUsage usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferData", Version = "2.0")]
    public static void BufferData<T2>(BufferTarget target, IntPtr size, [In, Out] T2[,,] data, BufferUsage usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferData", Version = "2.0")]
    public static void BufferData<T2>(BufferTarget target, IntPtr size, [In, Out] ref T2 data, BufferUsage usage) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferData(target, size, gcHandle.AddrOfPinnedObject(), usage);
        data = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferSubData", Version = "2.0")]
    public static void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
    {
      GL.Delegates.glBufferSubData(target, offset, size, data);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferSubData", Version = "2.0")]
    public static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] T3[] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferSubData", Version = "2.0")]
    public static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] T3[,] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferSubData", Version = "2.0")]
    public static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] T3[,,] data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glBufferSubData", Version = "2.0")]
    public static void BufferSubData<T3>(BufferTarget target, IntPtr offset, IntPtr size, [In, Out] ref T3 data) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glBufferSubData(target, offset, size, gcHandle.AddrOfPinnedObject());
        data = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCheckFramebufferStatus", Version = "2.0")]
    public static FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target)
    {
      return GL.Delegates.glCheckFramebufferStatus(target);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glClear", Version = "2.0")]
    public static void Clear(ClearBufferMask mask)
    {
      GL.Delegates.glClear(mask);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glClearColor", Version = "2.0")]
    public static void ClearColor(float red, float green, float blue, float alpha)
    {
      GL.Delegates.glClearColor(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glClearDepthf", Version = "2.0")]
    public static void ClearDepth(float depth)
    {
      GL.Delegates.glClearDepthf(depth);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glClearStencil", Version = "2.0")]
    public static void ClearStencil(int s)
    {
      GL.Delegates.glClearStencil(s);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glColorMask", Version = "2.0")]
    public static void ColorMask(bool red, bool green, bool blue, bool alpha)
    {
      GL.Delegates.glColorMask(red, green, blue, alpha);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompileShader", Version = "2.0")]
    public static void CompileShader(int shader)
    {
      GL.Delegates.glCompileShader((uint) shader);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompileShader", Version = "2.0")]
    [CLSCompliant(false)]
    public static void CompileShader(uint shader)
    {
      GL.Delegates.glCompileShader(shader);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage2D", Version = "2.0")]
    public static void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage2D", Version = "2.0")]
    public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] T7[] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage2D", Version = "2.0")]
    public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage2D", Version = "2.0")]
    public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] T7[,,] data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage2D", Version = "2.0")]
    public static void CompressedTexImage2D<T7>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, [In, Out] ref T7 data) where T7 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T7) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage2D", Version = "2.0")]
    public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data)
    {
      GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage2D", Version = "2.0")]
    public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T8[] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage2D", Version = "2.0")]
    public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T8[,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage2D", Version = "2.0")]
    public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] T8[,,] data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage2D", Version = "2.0")]
    public static void CompressedTexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, [In, Out] ref T8 data) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, gcHandle.AddrOfPinnedObject());
        data = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCopyTexImage2D", Version = "2.0")]
    public static void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border)
    {
      GL.Delegates.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCopyTexSubImage2D", Version = "2.0")]
    public static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
    {
      GL.Delegates.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCreateProgram", Version = "2.0")]
    public static int CreateProgram()
    {
      return GL.Delegates.glCreateProgram();
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCreateShader", Version = "2.0")]
    public static int CreateShader(ShaderType type)
    {
      return GL.Delegates.glCreateShader(type);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glCullFace", Version = "2.0")]
    public static void CullFace(CullFaceMode mode)
    {
      GL.Delegates.glCullFace(mode);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteBuffers", Version = "2.0")]
    public static unsafe void DeleteBuffers(int n, int[] buffers)
    {
      fixed (int* numPtr = buffers)
        GL.Delegates.glDeleteBuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteBuffers", Version = "2.0")]
    public static unsafe void DeleteBuffers(int n, ref int buffers)
    {
      fixed (int* numPtr = &buffers)
        GL.Delegates.glDeleteBuffers(n, (uint*) numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteBuffers", Version = "2.0")]
    public static unsafe void DeleteBuffers(int n, int* buffers)
    {
      GL.Delegates.glDeleteBuffers(n, (uint*) buffers);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteBuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteBuffers(int n, uint[] buffers)
    {
      fixed (uint* buffers1 = buffers)
        GL.Delegates.glDeleteBuffers(n, buffers1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteBuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteBuffers(int n, ref uint buffers)
    {
      fixed (uint* buffers1 = &buffers)
        GL.Delegates.glDeleteBuffers(n, buffers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteBuffers", Version = "2.0")]
    public static unsafe void DeleteBuffers(int n, uint* buffers)
    {
      GL.Delegates.glDeleteBuffers(n, buffers);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFramebuffers", Version = "2.0")]
    public static unsafe void DeleteFramebuffers(int n, int[] framebuffers)
    {
      fixed (int* numPtr = framebuffers)
        GL.Delegates.glDeleteFramebuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFramebuffers", Version = "2.0")]
    public static unsafe void DeleteFramebuffers(int n, ref int framebuffers)
    {
      fixed (int* numPtr = &framebuffers)
        GL.Delegates.glDeleteFramebuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFramebuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteFramebuffers(int n, int* framebuffers)
    {
      GL.Delegates.glDeleteFramebuffers(n, (uint*) framebuffers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFramebuffers", Version = "2.0")]
    public static unsafe void DeleteFramebuffers(int n, uint[] framebuffers)
    {
      fixed (uint* framebuffers1 = framebuffers)
        GL.Delegates.glDeleteFramebuffers(n, framebuffers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFramebuffers", Version = "2.0")]
    public static unsafe void DeleteFramebuffers(int n, ref uint framebuffers)
    {
      fixed (uint* framebuffers1 = &framebuffers)
        GL.Delegates.glDeleteFramebuffers(n, framebuffers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFramebuffers", Version = "2.0")]
    public static unsafe void DeleteFramebuffers(int n, uint* framebuffers)
    {
      GL.Delegates.glDeleteFramebuffers(n, framebuffers);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteProgram", Version = "2.0")]
    public static void DeleteProgram(int program)
    {
      GL.Delegates.glDeleteProgram((uint) program);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteProgram", Version = "2.0")]
    [CLSCompliant(false)]
    public static void DeleteProgram(uint program)
    {
      GL.Delegates.glDeleteProgram(program);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteRenderbuffers", Version = "2.0")]
    public static unsafe void DeleteRenderbuffers(int n, int[] renderbuffers)
    {
      fixed (int* numPtr = renderbuffers)
        GL.Delegates.glDeleteRenderbuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteRenderbuffers", Version = "2.0")]
    public static unsafe void DeleteRenderbuffers(int n, ref int renderbuffers)
    {
      fixed (int* numPtr = &renderbuffers)
        GL.Delegates.glDeleteRenderbuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteRenderbuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteRenderbuffers(int n, int* renderbuffers)
    {
      GL.Delegates.glDeleteRenderbuffers(n, (uint*) renderbuffers);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteRenderbuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteRenderbuffers(int n, uint[] renderbuffers)
    {
      fixed (uint* renderbuffers1 = renderbuffers)
        GL.Delegates.glDeleteRenderbuffers(n, renderbuffers1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteRenderbuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteRenderbuffers(int n, ref uint renderbuffers)
    {
      fixed (uint* renderbuffers1 = &renderbuffers)
        GL.Delegates.glDeleteRenderbuffers(n, renderbuffers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteRenderbuffers", Version = "2.0")]
    public static unsafe void DeleteRenderbuffers(int n, uint* renderbuffers)
    {
      GL.Delegates.glDeleteRenderbuffers(n, renderbuffers);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteShader", Version = "2.0")]
    public static void DeleteShader(int shader)
    {
      GL.Delegates.glDeleteShader((uint) shader);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteShader", Version = "2.0")]
    [CLSCompliant(false)]
    public static void DeleteShader(uint shader)
    {
      GL.Delegates.glDeleteShader(shader);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteTextures", Version = "2.0")]
    public static unsafe void DeleteTextures(int n, int[] textures)
    {
      fixed (int* numPtr = textures)
        GL.Delegates.glDeleteTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteTextures", Version = "2.0")]
    public static unsafe void DeleteTextures(int n, ref int textures)
    {
      fixed (int* numPtr = &textures)
        GL.Delegates.glDeleteTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteTextures", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void DeleteTextures(int n, int* textures)
    {
      GL.Delegates.glDeleteTextures(n, (uint*) textures);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteTextures", Version = "2.0")]
    public static unsafe void DeleteTextures(int n, uint[] textures)
    {
      fixed (uint* textures1 = textures)
        GL.Delegates.glDeleteTextures(n, textures1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteTextures", Version = "2.0")]
    public static unsafe void DeleteTextures(int n, ref uint textures)
    {
      fixed (uint* textures1 = &textures)
        GL.Delegates.glDeleteTextures(n, textures1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteTextures", Version = "2.0")]
    public static unsafe void DeleteTextures(int n, uint* textures)
    {
      GL.Delegates.glDeleteTextures(n, textures);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDepthFunc", Version = "2.0")]
    public static void DepthFunc(DepthFunction func)
    {
      GL.Delegates.glDepthFunc(func);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDepthMask", Version = "2.0")]
    public static void DepthMask(bool flag)
    {
      GL.Delegates.glDepthMask(flag);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDepthRangef", Version = "2.0")]
    public static void DepthRange(float zNear, float zFar)
    {
      GL.Delegates.glDepthRangef(zNear, zFar);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDetachShader", Version = "2.0")]
    public static void DetachShader(int program, int shader)
    {
      GL.Delegates.glDetachShader((uint) program, (uint) shader);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDetachShader", Version = "2.0")]
    [CLSCompliant(false)]
    public static void DetachShader(uint program, uint shader)
    {
      GL.Delegates.glDetachShader(program, shader);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDisable", Version = "2.0")]
    public static void Disable(EnableCap cap)
    {
      GL.Delegates.glDisable(cap);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDisableVertexAttribArray", Version = "2.0")]
    public static void DisableVertexAttribArray(int index)
    {
      GL.Delegates.glDisableVertexAttribArray((uint) index);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glDisableVertexAttribArray", Version = "2.0")]
    public static void DisableVertexAttribArray(uint index)
    {
      GL.Delegates.glDisableVertexAttribArray(index);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDrawArrays", Version = "2.0")]
    public static void DrawArrays(BeginMode mode, int first, int count)
    {
      GL.Delegates.glDrawArrays(mode, first, count);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDrawElements", Version = "2.0")]
    public static void DrawElements(BeginMode mode, int count, DrawElementsType type, IntPtr indices)
    {
      GL.Delegates.glDrawElements(mode, count, type, indices);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDrawElements", Version = "2.0")]
    public static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDrawElements", Version = "2.0")]
    public static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDrawElements", Version = "2.0")]
    public static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] T3[,,] indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glDrawElements", Version = "2.0")]
    public static void DrawElements<T3>(BeginMode mode, int count, DrawElementsType type, [In, Out] ref T3 indices) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glDrawElements(mode, count, type, gcHandle.AddrOfPinnedObject());
        indices = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glEnable", Version = "2.0")]
    public static void Enable(EnableCap cap)
    {
      GL.Delegates.glEnable(cap);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glEnableVertexAttribArray", Version = "2.0")]
    public static void EnableVertexAttribArray(int index)
    {
      GL.Delegates.glEnableVertexAttribArray((uint) index);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glEnableVertexAttribArray", Version = "2.0")]
    public static void EnableVertexAttribArray(uint index)
    {
      GL.Delegates.glEnableVertexAttribArray(index);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glFinish", Version = "2.0")]
    public static void Finish()
    {
      GL.Delegates.glFinish();
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glFlush", Version = "2.0")]
    public static void Flush()
    {
      GL.Delegates.glFlush();
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glFramebufferRenderbuffer", Version = "2.0")]
    public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferSlot attachment, RenderbufferTarget renderbuffertarget, int renderbuffer)
    {
      GL.Delegates.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, (uint) renderbuffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glFramebufferRenderbuffer", Version = "2.0")]
    [CLSCompliant(false)]
    public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferSlot attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
    {
      GL.Delegates.glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glFramebufferTexture2D", Version = "2.0")]
    public static void FramebufferTexture2D(FramebufferTarget target, FramebufferSlot attachment, TextureTarget textarget, int texture, int level)
    {
      GL.Delegates.glFramebufferTexture2D(target, attachment, textarget, (uint) texture, level);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glFramebufferTexture2D", Version = "2.0")]
    public static void FramebufferTexture2D(FramebufferTarget target, FramebufferSlot attachment, TextureTarget textarget, uint texture, int level)
    {
      GL.Delegates.glFramebufferTexture2D(target, attachment, textarget, texture, level);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glFramebufferTexture2DMultisampleIMG", Version = "2.0")]
    public static void FramebufferTexture2DMultisampleIMG()
    {
      GL.Delegates.glFramebufferTexture2DMultisampleIMG();
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glFrontFace", Version = "2.0")]
    public static void FrontFace(FrontFaceDirection mode)
    {
      GL.Delegates.glFrontFace(mode);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenBuffers", Version = "2.0")]
    public static unsafe void GenBuffers(int n, [Out] int[] buffers)
    {
      fixed (int* numPtr = buffers)
        GL.Delegates.glGenBuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenBuffers", Version = "2.0")]
    public static unsafe void GenBuffers(int n, out int buffers)
    {
      fixed (int* numPtr = &buffers)
      {
        GL.Delegates.glGenBuffers(n, (uint*) numPtr);
        buffers = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGenBuffers", Version = "2.0")]
    public static unsafe void GenBuffers(int n, [Out] int* buffers)
    {
      GL.Delegates.glGenBuffers(n, (uint*) buffers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGenBuffers", Version = "2.0")]
    public static unsafe void GenBuffers(int n, [Out] uint[] buffers)
    {
      fixed (uint* buffers1 = buffers)
        GL.Delegates.glGenBuffers(n, buffers1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGenBuffers", Version = "2.0")]
    public static unsafe void GenBuffers(int n, out uint buffers)
    {
      fixed (uint* buffers1 = &buffers)
      {
        GL.Delegates.glGenBuffers(n, buffers1);
        buffers = *buffers1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenBuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GenBuffers(int n, [Out] uint* buffers)
    {
      GL.Delegates.glGenBuffers(n, buffers);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenerateMipmap", Version = "2.0")]
    public static void GenerateMipmap(TextureTarget target)
    {
      GL.Delegates.glGenerateMipmap(target);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenFramebuffers", Version = "2.0")]
    public static unsafe void GenFramebuffers(int n, [Out] int[] framebuffers)
    {
      fixed (int* numPtr = framebuffers)
        GL.Delegates.glGenFramebuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenFramebuffers", Version = "2.0")]
    public static unsafe void GenFramebuffers(int n, out int framebuffers)
    {
      fixed (int* numPtr = &framebuffers)
      {
        GL.Delegates.glGenFramebuffers(n, (uint*) numPtr);
        framebuffers = *numPtr;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGenFramebuffers", Version = "2.0")]
    public static unsafe void GenFramebuffers(int n, [Out] int* framebuffers)
    {
      GL.Delegates.glGenFramebuffers(n, (uint*) framebuffers);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGenFramebuffers", Version = "2.0")]
    public static unsafe void GenFramebuffers(int n, [Out] uint[] framebuffers)
    {
      fixed (uint* framebuffers1 = framebuffers)
        GL.Delegates.glGenFramebuffers(n, framebuffers1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenFramebuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GenFramebuffers(int n, out uint framebuffers)
    {
      fixed (uint* framebuffers1 = &framebuffers)
      {
        GL.Delegates.glGenFramebuffers(n, framebuffers1);
        framebuffers = *framebuffers1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGenFramebuffers", Version = "2.0")]
    public static unsafe void GenFramebuffers(int n, [Out] uint* framebuffers)
    {
      GL.Delegates.glGenFramebuffers(n, framebuffers);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenRenderbuffers", Version = "2.0")]
    public static unsafe void GenRenderbuffers(int n, [Out] int[] renderbuffers)
    {
      fixed (int* numPtr = renderbuffers)
        GL.Delegates.glGenRenderbuffers(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenRenderbuffers", Version = "2.0")]
    public static unsafe void GenRenderbuffers(int n, out int renderbuffers)
    {
      fixed (int* numPtr = &renderbuffers)
      {
        GL.Delegates.glGenRenderbuffers(n, (uint*) numPtr);
        renderbuffers = *numPtr;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenRenderbuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GenRenderbuffers(int n, [Out] int* renderbuffers)
    {
      GL.Delegates.glGenRenderbuffers(n, (uint*) renderbuffers);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenRenderbuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GenRenderbuffers(int n, [Out] uint[] renderbuffers)
    {
      fixed (uint* renderbuffers1 = renderbuffers)
        GL.Delegates.glGenRenderbuffers(n, renderbuffers1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenRenderbuffers", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GenRenderbuffers(int n, out uint renderbuffers)
    {
      fixed (uint* renderbuffers1 = &renderbuffers)
      {
        GL.Delegates.glGenRenderbuffers(n, renderbuffers1);
        renderbuffers = *renderbuffers1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGenRenderbuffers", Version = "2.0")]
    public static unsafe void GenRenderbuffers(int n, [Out] uint* renderbuffers)
    {
      GL.Delegates.glGenRenderbuffers(n, renderbuffers);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenTextures", Version = "2.0")]
    public static unsafe void GenTextures(int n, [Out] int[] textures)
    {
      fixed (int* numPtr = textures)
        GL.Delegates.glGenTextures(n, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenTextures", Version = "2.0")]
    public static unsafe void GenTextures(int n, out int textures)
    {
      fixed (int* numPtr = &textures)
      {
        GL.Delegates.glGenTextures(n, (uint*) numPtr);
        textures = *numPtr;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenTextures", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, [Out] int* textures)
    {
      GL.Delegates.glGenTextures(n, (uint*) textures);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGenTextures", Version = "2.0")]
    public static unsafe void GenTextures(int n, [Out] uint[] textures)
    {
      fixed (uint* textures1 = textures)
        GL.Delegates.glGenTextures(n, textures1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenTextures", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, out uint textures)
    {
      fixed (uint* textures1 = &textures)
      {
        GL.Delegates.glGenTextures(n, textures1);
        textures = *textures1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGenTextures", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GenTextures(int n, [Out] uint* textures)
    {
      GL.Delegates.glGenTextures(n, textures);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    public static unsafe void GetActiveAttrib(int program, int index, int bufsize, [Out] int[] length, [Out] int[] size, [Out] ActiveAttribType[] type, [Out] StringBuilder name)
    {
      fixed (int* length1 = length)
        fixed (int* size1 = size)
          fixed (ActiveAttribType* type1 = type)
            GL.Delegates.glGetActiveAttrib((uint) program, (uint) index, bufsize, length1, size1, type1, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    public static unsafe void GetActiveAttrib(int program, int index, int bufsize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveAttribType* type1 = &type)
          {
            GL.Delegates.glGetActiveAttrib((uint) program, (uint) index, bufsize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    public static unsafe void GetActiveAttrib(int program, int index, int bufsize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveAttrib((uint) program, (uint) index, bufsize, length, size, type, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveAttrib(uint program, uint index, int bufsize, [Out] int[] length, [Out] int[] size, [Out] ActiveAttribType[] type, [Out] StringBuilder name)
    {
      fixed (int* length1 = length)
        fixed (int* size1 = size)
          fixed (ActiveAttribType* type1 = type)
            GL.Delegates.glGetActiveAttrib(program, index, bufsize, length1, size1, type1, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveAttrib(uint program, uint index, int bufsize, out int length, out int size, out ActiveAttribType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveAttribType* type1 = &type)
          {
            GL.Delegates.glGetActiveAttrib(program, index, bufsize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveAttrib", Version = "2.0")]
    public static unsafe void GetActiveAttrib(uint program, uint index, int bufsize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveAttrib(program, index, bufsize, length, size, type, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    public static unsafe void GetActiveUniform(int program, int index, int bufsize, [Out] int[] length, [Out] int[] size, [Out] ActiveUniformType[] type, [Out] StringBuilder name)
    {
      fixed (int* length1 = length)
        fixed (int* size1 = size)
          fixed (ActiveUniformType* type1 = type)
            GL.Delegates.glGetActiveUniform((uint) program, (uint) index, bufsize, length1, size1, type1, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    public static unsafe void GetActiveUniform(int program, int index, int bufsize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveUniformType* type1 = &type)
          {
            GL.Delegates.glGetActiveUniform((uint) program, (uint) index, bufsize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniform(int program, int index, int bufsize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveUniform((uint) program, (uint) index, bufsize, length, size, type, name);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    public static unsafe void GetActiveUniform(uint program, uint index, int bufsize, [Out] int[] length, [Out] int[] size, [Out] ActiveUniformType[] type, [Out] StringBuilder name)
    {
      fixed (int* length1 = length)
        fixed (int* size1 = size)
          fixed (ActiveUniformType* type1 = type)
            GL.Delegates.glGetActiveUniform(program, index, bufsize, length1, size1, type1, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniform(uint program, uint index, int bufsize, out int length, out int size, out ActiveUniformType type, [Out] StringBuilder name)
    {
      fixed (int* length1 = &length)
        fixed (int* size1 = &size)
          fixed (ActiveUniformType* type1 = &type)
          {
            GL.Delegates.glGetActiveUniform(program, index, bufsize, length1, size1, type1, name);
            length = *length1;
            size = *size1;
            type = *type1;
          }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetActiveUniform", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetActiveUniform(uint program, uint index, int bufsize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name)
    {
      GL.Delegates.glGetActiveUniform(program, index, bufsize, length, size, type, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    public static unsafe void GetAttachedShaders(int program, int maxcount, [Out] int[] count, [Out] int[] shaders)
    {
      fixed (int* count1 = count)
        fixed (int* numPtr = shaders)
          GL.Delegates.glGetAttachedShaders((uint) program, maxcount, count1, (uint*) numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    public static unsafe void GetAttachedShaders(int program, int maxcount, out int count, out int shaders)
    {
      fixed (int* count1 = &count)
        fixed (int* numPtr = &shaders)
        {
          GL.Delegates.glGetAttachedShaders((uint) program, maxcount, count1, (uint*) numPtr);
          count = *count1;
          shaders = *numPtr;
        }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetAttachedShaders(int program, int maxcount, [Out] int* count, [Out] int* shaders)
    {
      GL.Delegates.glGetAttachedShaders((uint) program, maxcount, count, (uint*) shaders);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetAttachedShaders(uint program, int maxcount, [Out] int[] count, [Out] uint[] shaders)
    {
      fixed (int* count1 = count)
        fixed (uint* shaders1 = shaders)
          GL.Delegates.glGetAttachedShaders(program, maxcount, count1, shaders1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    public static unsafe void GetAttachedShaders(uint program, int maxcount, out int count, out uint shaders)
    {
      fixed (int* count1 = &count)
        fixed (uint* shaders1 = &shaders)
        {
          GL.Delegates.glGetAttachedShaders(program, maxcount, count1, shaders1);
          count = *count1;
          shaders = *shaders1;
        }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetAttachedShaders", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetAttachedShaders(uint program, int maxcount, [Out] int* count, [Out] uint* shaders)
    {
      GL.Delegates.glGetAttachedShaders(program, maxcount, count, shaders);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetAttribLocation", Version = "2.0")]
    public static int GetAttribLocation(int program, string name)
    {
      return GL.Delegates.glGetAttribLocation((uint) program, name);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetAttribLocation", Version = "2.0")]
    public static int GetAttribLocation(uint program, string name)
    {
      return GL.Delegates.glGetAttribLocation(program, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetBooleanv", Version = "2.0")]
    public static unsafe void GetBoolean(GetPName pname, [Out] bool[] @params)
    {
      fixed (bool* params1 = @params)
        GL.Delegates.glGetBooleanv(pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetBooleanv", Version = "2.0")]
    public static unsafe void GetBoolean(GetPName pname, out bool @params)
    {
      fixed (bool* params1 = &@params)
      {
        GL.Delegates.glGetBooleanv(pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetBooleanv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetBoolean(GetPName pname, [Out] bool* @params)
    {
      GL.Delegates.glGetBooleanv(pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetBufferParameteriv", Version = "2.0")]
    public static unsafe void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetBufferParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetBufferParameteriv", Version = "2.0")]
    public static unsafe void GetBufferParameter(BufferTarget target, BufferParameterName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetBufferParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetBufferParameteriv", Version = "2.0")]
    public static unsafe void GetBufferParameter(BufferTarget target, BufferParameterName pname, [Out] int* @params)
    {
      GL.Delegates.glGetBufferParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetError", Version = "2.0")]
    public static ErrorCode GetError()
    {
      return GL.Delegates.glGetError();
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetFloatv", Version = "2.0")]
    public static unsafe void GetFloat(GetPName pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetFloatv(pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetFloatv", Version = "2.0")]
    public static unsafe void GetFloat(GetPName pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetFloatv(pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetFloatv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetFloat(GetPName pname, [Out] float* @params)
    {
      GL.Delegates.glGetFloatv(pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv", Version = "2.0")]
    public static unsafe void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferSlot attachment, FramebufferParameterName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetFramebufferAttachmentParameteriv(target, attachment, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv", Version = "2.0")]
    public static unsafe void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferSlot attachment, FramebufferParameterName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetFramebufferAttachmentParameteriv(target, attachment, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv", Version = "2.0")]
    public static unsafe void GetFramebufferAttachmentParameter(FramebufferTarget target, FramebufferSlot attachment, FramebufferParameterName pname, [Out] int* @params)
    {
      GL.Delegates.glGetFramebufferAttachmentParameteriv(target, attachment, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetIntegerv", Version = "2.0")]
    public static unsafe void GetInteger(GetPName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetIntegerv(pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetIntegerv", Version = "2.0")]
    public static unsafe void GetInteger(GetPName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetIntegerv(pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetIntegerv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetInteger(GetPName pname, [Out] int* @params)
    {
      GL.Delegates.glGetIntegerv(pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    public static unsafe void GetProgramInfoLog(int program, int bufsize, [Out] int[] length, [Out] StringBuilder infolog)
    {
      fixed (int* length1 = length)
        GL.Delegates.glGetProgramInfoLog((uint) program, bufsize, length1, infolog);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    public static unsafe void GetProgramInfoLog(int program, int bufsize, out int length, [Out] StringBuilder infolog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetProgramInfoLog((uint) program, bufsize, length1, infolog);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramInfoLog(int program, int bufsize, [Out] int* length, [Out] StringBuilder infolog)
    {
      GL.Delegates.glGetProgramInfoLog((uint) program, bufsize, length, infolog);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetProgramInfoLog(uint program, int bufsize, [Out] int[] length, [Out] StringBuilder infolog)
    {
      fixed (int* length1 = length)
        GL.Delegates.glGetProgramInfoLog(program, bufsize, length1, infolog);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    public static unsafe void GetProgramInfoLog(uint program, int bufsize, out int length, [Out] StringBuilder infolog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetProgramInfoLog(program, bufsize, length1, infolog);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramInfoLog", Version = "2.0")]
    public static unsafe void GetProgramInfoLog(uint program, int bufsize, [Out] int* length, [Out] StringBuilder infolog)
    {
      GL.Delegates.glGetProgramInfoLog(program, bufsize, length, infolog);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    public static unsafe void GetProgram(int program, ProgramParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetProgramiv((uint) program, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    public static unsafe void GetProgram(int program, ProgramParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetProgramiv((uint) program, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetProgram(int program, ProgramParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetProgramiv((uint) program, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetProgram(uint program, ProgramParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetProgramiv(program, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetProgram(uint program, ProgramParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetProgramiv(program, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramiv", Version = "2.0")]
    public static unsafe void GetProgram(uint program, ProgramParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetProgramiv(program, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetRenderbufferParameteriv", Version = "2.0")]
    public static unsafe void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetRenderbufferParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetRenderbufferParameteriv", Version = "2.0")]
    public static unsafe void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetRenderbufferParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetRenderbufferParameteriv", Version = "2.0")]
    public static unsafe void GetRenderbufferParameter(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params)
    {
      GL.Delegates.glGetRenderbufferParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    public static unsafe void GetShaderInfoLog(int shader, int bufsize, [Out] int[] length, [Out] StringBuilder infolog)
    {
      fixed (int* length1 = length)
        GL.Delegates.glGetShaderInfoLog((uint) shader, bufsize, length1, infolog);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    public static unsafe void GetShaderInfoLog(int shader, int bufsize, out int length, [Out] StringBuilder infolog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetShaderInfoLog((uint) shader, bufsize, length1, infolog);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetShaderInfoLog(int shader, int bufsize, [Out] int* length, [Out] StringBuilder infolog)
    {
      GL.Delegates.glGetShaderInfoLog((uint) shader, bufsize, length, infolog);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    public static unsafe void GetShaderInfoLog(uint shader, int bufsize, [Out] int[] length, [Out] StringBuilder infolog)
    {
      fixed (int* length1 = length)
        GL.Delegates.glGetShaderInfoLog(shader, bufsize, length1, infolog);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetShaderInfoLog(uint shader, int bufsize, out int length, [Out] StringBuilder infolog)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetShaderInfoLog(shader, bufsize, length1, infolog);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderInfoLog", Version = "2.0")]
    public static unsafe void GetShaderInfoLog(uint shader, int bufsize, [Out] int* length, [Out] StringBuilder infolog)
    {
      GL.Delegates.glGetShaderInfoLog(shader, bufsize, length, infolog);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(int shader, ShaderParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetShaderiv((uint) shader, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(int shader, ShaderParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetShaderiv((uint) shader, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetShader(int shader, ShaderParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetShaderiv((uint) shader, pname, @params);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(uint shader, ShaderParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetShaderiv(shader, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(uint shader, ShaderParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetShaderiv(shader, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderiv", Version = "2.0")]
    public static unsafe void GetShader(uint shader, ShaderParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetShaderiv(shader, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderPrecisionFormat", Version = "2.0")]
    public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int[] range, [Out] int[] precision)
    {
      fixed (int* range1 = range)
        fixed (int* precision1 = precision)
          GL.Delegates.glGetShaderPrecisionFormat(shadertype, precisiontype, range1, precision1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderPrecisionFormat", Version = "2.0")]
    public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, out int range, out int precision)
    {
      fixed (int* range1 = &range)
        fixed (int* precision1 = &precision)
        {
          GL.Delegates.glGetShaderPrecisionFormat(shadertype, precisiontype, range1, precision1);
          range = *range1;
          precision = *precision1;
        }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderPrecisionFormat", Version = "2.0")]
    public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int* range, [Out] int* precision)
    {
      GL.Delegates.glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    public static unsafe void GetShaderSource(int shader, int bufsize, [Out] int[] length, [Out] StringBuilder source)
    {
      fixed (int* length1 = length)
        GL.Delegates.glGetShaderSource((uint) shader, bufsize, length1, source);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    public static unsafe void GetShaderSource(int shader, int bufsize, out int length, [Out] StringBuilder source)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetShaderSource((uint) shader, bufsize, length1, source);
        length = *length1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetShaderSource(int shader, int bufsize, [Out] int* length, [Out] StringBuilder source)
    {
      GL.Delegates.glGetShaderSource((uint) shader, bufsize, length, source);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    public static unsafe void GetShaderSource(uint shader, int bufsize, [Out] int[] length, [Out] StringBuilder source)
    {
      fixed (int* length1 = length)
        GL.Delegates.glGetShaderSource(shader, bufsize, length1, source);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    public static unsafe void GetShaderSource(uint shader, int bufsize, out int length, [Out] StringBuilder source)
    {
      fixed (int* length1 = &length)
      {
        GL.Delegates.glGetShaderSource(shader, bufsize, length1, source);
        length = *length1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetShaderSource", Version = "2.0")]
    public static unsafe void GetShaderSource(uint shader, int bufsize, [Out] int* length, [Out] StringBuilder source)
    {
      GL.Delegates.glGetShaderSource(shader, bufsize, length, source);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetString", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe string GetString(StringName name)
    {
      return new string((sbyte*) (void*) GL.Delegates.glGetString(name));
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetTexParameterfv", Version = "2.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetTexParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetTexParameterfv", Version = "2.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetTexParameterfv(target, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetTexParameterfv", Version = "2.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetTexParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetTexParameteriv", Version = "2.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetTexParameteriv(target, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetTexParameteriv", Version = "2.0")]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetTexParameteriv(target, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetTexParameteriv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetTexParameter(TextureTarget target, GetTextureParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetTexParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    public static unsafe void GetUniform(int program, int location, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetUniformfv((uint) program, location, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    public static unsafe void GetUniform(int program, int location, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetUniformfv((uint) program, location, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(int program, int location, [Out] float* @params)
    {
      GL.Delegates.glGetUniformfv((uint) program, location, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(uint program, int location, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetUniformfv(program, location, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(uint program, int location, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetUniformfv(program, location, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformfv", Version = "2.0")]
    public static unsafe void GetUniform(uint program, int location, [Out] float* @params)
    {
      GL.Delegates.glGetUniformfv(program, location, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    public static unsafe void GetUniform(int program, int location, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetUniformiv((uint) program, location, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    public static unsafe void GetUniform(int program, int location, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetUniformiv((uint) program, location, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(int program, int location, [Out] int* @params)
    {
      GL.Delegates.glGetUniformiv((uint) program, location, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetUniform(uint program, int location, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetUniformiv(program, location, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    public static unsafe void GetUniform(uint program, int location, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetUniformiv(program, location, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformiv", Version = "2.0")]
    public static unsafe void GetUniform(uint program, int location, [Out] int* @params)
    {
      GL.Delegates.glGetUniformiv(program, location, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformLocation", Version = "2.0")]
    public static int GetUniformLocation(int program, string name)
    {
      return GL.Delegates.glGetUniformLocation((uint) program, name);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetUniformLocation", Version = "2.0")]
    public static int GetUniformLocation(uint program, string name)
    {
      return GL.Delegates.glGetUniformLocation(program, name);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetVertexAttribfv((uint) index, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribfv((uint) index, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetVertexAttribfv((uint) index, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glGetVertexAttribfv(index, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, out float @params)
    {
      fixed (float* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribfv(index, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] float* @params)
    {
      GL.Delegates.glGetVertexAttribfv(index, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetVertexAttribiv((uint) index, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribiv((uint) index, pname, params1);
        @params = *params1;
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(int index, VertexAttribParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetVertexAttribiv((uint) index, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glGetVertexAttribiv(index, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, out int @params)
    {
      fixed (int* params1 = &@params)
      {
        GL.Delegates.glGetVertexAttribiv(index, pname, params1);
        @params = *params1;
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribiv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void GetVertexAttrib(uint index, VertexAttribParameter pname, [Out] int* @params)
    {
      GL.Delegates.glGetVertexAttribiv(index, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer(int index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
    {
      GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, pointer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(int index, VertexAttribPointerParameter pname, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv((uint) index, pname, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    [CLSCompliant(false)]
    public static void GetVertexAttribPointer(uint index, VertexAttribPointerParameter pname, [Out] IntPtr pointer)
    {
      GL.Delegates.glGetVertexAttribPointerv(index, pname, pointer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In, Out] T2[] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv(index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    [CLSCompliant(false)]
    public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In, Out] T2[,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv(index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In, Out] T2[,,] pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv(index, pname, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glGetVertexAttribPointerv", Version = "2.0")]
    [CLSCompliant(false)]
    public static void GetVertexAttribPointer<T2>(uint index, VertexAttribPointerParameter pname, [In, Out] ref T2 pointer) where T2 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pointer, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glGetVertexAttribPointerv(index, pname, gcHandle.AddrOfPinnedObject());
        pointer = (T2) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glHint", Version = "2.0")]
    public static void Hint(HintTarget target, HintMode mode)
    {
      GL.Delegates.glHint(target, mode);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glIsBuffer", Version = "2.0")]
    public static bool IsBuffer(int buffer)
    {
      return GL.Delegates.glIsBuffer((uint) buffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glIsBuffer", Version = "2.0")]
    public static bool IsBuffer(uint buffer)
    {
      return GL.Delegates.glIsBuffer(buffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glIsEnabled", Version = "2.0")]
    public static bool IsEnabled(EnableCap cap)
    {
      return GL.Delegates.glIsEnabled(cap);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glIsFramebuffer", Version = "2.0")]
    public static bool IsFramebuffer(int framebuffer)
    {
      return GL.Delegates.glIsFramebuffer((uint) framebuffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glIsFramebuffer", Version = "2.0")]
    [CLSCompliant(false)]
    public static bool IsFramebuffer(uint framebuffer)
    {
      return GL.Delegates.glIsFramebuffer(framebuffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glIsProgram", Version = "2.0")]
    public static bool IsProgram(int program)
    {
      return GL.Delegates.glIsProgram((uint) program);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glIsProgram", Version = "2.0")]
    public static bool IsProgram(uint program)
    {
      return GL.Delegates.glIsProgram(program);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glIsRenderbuffer", Version = "2.0")]
    public static bool IsRenderbuffer(int renderbuffer)
    {
      return GL.Delegates.glIsRenderbuffer((uint) renderbuffer);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glIsRenderbuffer", Version = "2.0")]
    public static bool IsRenderbuffer(uint renderbuffer)
    {
      return GL.Delegates.glIsRenderbuffer(renderbuffer);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glIsShader", Version = "2.0")]
    public static bool IsShader(int shader)
    {
      return GL.Delegates.glIsShader((uint) shader);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glIsShader", Version = "2.0")]
    [CLSCompliant(false)]
    public static bool IsShader(uint shader)
    {
      return GL.Delegates.glIsShader(shader);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glIsTexture", Version = "2.0")]
    public static bool IsTexture(int texture)
    {
      return GL.Delegates.glIsTexture((uint) texture);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glIsTexture", Version = "2.0")]
    public static bool IsTexture(uint texture)
    {
      return GL.Delegates.glIsTexture(texture);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glLineWidth", Version = "2.0")]
    public static void LineWidth(float width)
    {
      GL.Delegates.glLineWidth(width);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glLinkProgram", Version = "2.0")]
    public static void LinkProgram(int program)
    {
      GL.Delegates.glLinkProgram((uint) program);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glLinkProgram", Version = "2.0")]
    public static void LinkProgram(uint program)
    {
      GL.Delegates.glLinkProgram(program);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glPixelStorei", Version = "2.0")]
    public static void PixelStore(PixelStoreParameter pname, int param)
    {
      GL.Delegates.glPixelStorei(pname, param);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glPolygonOffset", Version = "2.0")]
    public static void PolygonOffset(float factor, float units)
    {
      GL.Delegates.glPolygonOffset(factor, units);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glReadPixels", Version = "2.0")]
    public static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glReadPixels(x, y, width, height, format, type, pixels);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glReadPixels", Version = "2.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glReadPixels", Version = "2.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glReadPixels", Version = "2.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In, Out] T6[,,] pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glReadPixels", Version = "2.0")]
    public static void ReadPixels<T6>(int x, int y, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T6 pixels) where T6 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glReadPixels(x, y, width, height, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T6) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glReleaseShaderCompiler", Version = "2.0")]
    public static void ReleaseShaderCompiler()
    {
      GL.Delegates.glReleaseShaderCompiler();
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glRenderbufferStorage", Version = "2.0")]
    public static void RenderbufferStorage(RenderbufferTarget target, RenderbufferInternalFormat internalformat, int width, int height)
    {
      GL.Delegates.glRenderbufferStorage(target, internalformat, width, height);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glRenderbufferStorageMultisampleIMG", Version = "2.0")]
    public static void RenderbufferStorageMultisampleIMG()
    {
      GL.Delegates.glRenderbufferStorageMultisampleIMG();
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glSampleCoverage", Version = "2.0")]
    public static void SampleCoverage(float value, bool invert)
    {
      GL.Delegates.glSampleCoverage(value, invert);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glScissor", Version = "2.0")]
    public static void Scissor(int x, int y, int width, int height)
    {
      GL.Delegates.glScissor(x, y, width, height);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary(int n, int[] shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
    {
      fixed (int* numPtr = shaders)
        GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, binary, length);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, int[] shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, int[] shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, int[] shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, int[] shaders, ShaderBinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      fixed (int* numPtr = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary(int n, ref int shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
    {
      fixed (int* numPtr = &shaders)
        GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, binary, length);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, ref int shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, ref int shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, ref int shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      fixed (int* numPtr = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, ref int shaders, ShaderBinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      fixed (int* numPtr = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, (uint*) numPtr, binaryformat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary(int n, int* shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
    {
      GL.Delegates.glShaderBinary(n, (uint*) shaders, binaryformat, binary, length);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, int* shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(n, (uint*) shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, int* shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(n, (uint*) shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, int* shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(n, (uint*) shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int n, int* shaders, ShaderBinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(n, (uint*) shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        binary = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary(int n, uint[] shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
    {
      fixed (uint* shaders1 = shaders)
        GL.Delegates.glShaderBinary(n, shaders1, binaryformat, binary, length);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, uint[] shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, uint[] shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int n, uint[] shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int n, uint[] shaders, ShaderBinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary(int n, ref uint shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
    {
      fixed (uint* shaders1 = &shaders)
        GL.Delegates.glShaderBinary(n, shaders1, binaryformat, binary, length);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, ref uint shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int n, ref uint shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, ref uint shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int n, ref uint shaders, ShaderBinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      fixed (uint* shaders1 = &shaders)
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glShaderBinary(n, shaders1, binaryformat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary(int n, uint* shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length)
    {
      GL.Delegates.glShaderBinary(n, shaders, binaryformat, binary, length);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int n, uint* shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(n, shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    public static unsafe void ShaderBinary<T3>(int n, uint* shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(n, shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int n, uint* shaders, ShaderBinaryFormat binaryformat, [In, Out] T3[,,] binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(n, shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderBinary", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderBinary<T3>(int n, uint* shaders, ShaderBinaryFormat binaryformat, [In, Out] ref T3 binary, int length) where T3 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glShaderBinary(n, shaders, binaryformat, gcHandle.AddrOfPinnedObject(), length);
        binary = (T3) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderSource", Version = "2.0")]
    public static unsafe void ShaderSource(int shader, int count, string[] @string, int[] length)
    {
      fixed (int* length1 = length)
        GL.Delegates.glShaderSource((uint) shader, count, @string, length1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderSource", Version = "2.0")]
    public static unsafe void ShaderSource(int shader, int count, string[] @string, ref int length)
    {
      fixed (int* length1 = &length)
        GL.Delegates.glShaderSource((uint) shader, count, @string, length1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderSource", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderSource(int shader, int count, string[] @string, int* length)
    {
      GL.Delegates.glShaderSource((uint) shader, count, @string, length);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderSource", Version = "2.0")]
    public static unsafe void ShaderSource(uint shader, int count, string[] @string, int[] length)
    {
      fixed (int* length1 = length)
        GL.Delegates.glShaderSource(shader, count, @string, length1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderSource", Version = "2.0")]
    public static unsafe void ShaderSource(uint shader, int count, string[] @string, ref int length)
    {
      fixed (int* length1 = &length)
        GL.Delegates.glShaderSource(shader, count, @string, length1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glShaderSource", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void ShaderSource(uint shader, int count, string[] @string, int* length)
    {
      GL.Delegates.glShaderSource(shader, count, @string, length);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilFunc", Version = "2.0")]
    public static void StencilFunc(StencilFunction func, int @ref, int mask)
    {
      GL.Delegates.glStencilFunc(func, @ref, (uint) mask);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilFunc", Version = "2.0")]
    public static void StencilFunc(StencilFunction func, int @ref, uint mask)
    {
      GL.Delegates.glStencilFunc(func, @ref, mask);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilFuncSeparate", Version = "2.0")]
    public static void StencilFuncSeparate(CullFaceMode face, StencilFunction func, int @ref, int mask)
    {
      GL.Delegates.glStencilFuncSeparate(face, func, @ref, (uint) mask);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilFuncSeparate", Version = "2.0")]
    [CLSCompliant(false)]
    public static void StencilFuncSeparate(CullFaceMode face, StencilFunction func, int @ref, uint mask)
    {
      GL.Delegates.glStencilFuncSeparate(face, func, @ref, mask);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilMask", Version = "2.0")]
    public static void StencilMask(int mask)
    {
      GL.Delegates.glStencilMask((uint) mask);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilMask", Version = "2.0")]
    public static void StencilMask(uint mask)
    {
      GL.Delegates.glStencilMask(mask);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilMaskSeparate", Version = "2.0")]
    public static void StencilMaskSeparate(CullFaceMode face, int mask)
    {
      GL.Delegates.glStencilMaskSeparate(face, (uint) mask);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilMaskSeparate", Version = "2.0")]
    [CLSCompliant(false)]
    public static void StencilMaskSeparate(CullFaceMode face, uint mask)
    {
      GL.Delegates.glStencilMaskSeparate(face, mask);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilOp", Version = "2.0")]
    public static void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass)
    {
      GL.Delegates.glStencilOp(fail, zfail, zpass);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glStencilOpSeparate", Version = "2.0")]
    public static void StencilOpSeparate(CullFaceMode face, StencilOp fail, StencilOp zfail, StencilOp zpass)
    {
      GL.Delegates.glStencilOpSeparate(face, fail, zfail, zpass);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage2D", Version = "2.0")]
    public static void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage2D", Version = "2.0")]
    public static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T8[] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage2D", Version = "2.0")]
    public static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T8[,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage2D", Version = "2.0")]
    public static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] T8[,,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage2D", Version = "2.0")]
    public static void TexImage2D<T8>(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, [In, Out] ref T8 pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexParameterf", Version = "2.0")]
    public static void TexParameter(TextureTarget target, TextureParameterName pname, float param)
    {
      GL.Delegates.glTexParameterf(target, pname, param);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexParameterfv", Version = "2.0")]
    public static unsafe void TexParameter(TextureTarget target, TextureParameterName pname, float[] @params)
    {
      fixed (float* params1 = @params)
        GL.Delegates.glTexParameterfv(target, pname, params1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexParameterfv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void TexParameter(TextureTarget target, TextureParameterName pname, float* @params)
    {
      GL.Delegates.glTexParameterfv(target, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexParameteri", Version = "2.0")]
    public static void TexParameter(TextureTarget target, TextureParameterName pname, int param)
    {
      GL.Delegates.glTexParameteri(target, pname, param);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexParameteriv", Version = "2.0")]
    public static unsafe void TexParameter(TextureTarget target, TextureParameterName pname, int[] @params)
    {
      fixed (int* params1 = @params)
        GL.Delegates.glTexParameteriv(target, pname, params1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glTexParameteriv", Version = "2.0")]
    public static unsafe void TexParameter(TextureTarget target, TextureParameterName pname, int* @params)
    {
      GL.Delegates.glTexParameteriv(target, pname, @params);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage2D", Version = "2.0")]
    public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
    {
      GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage2D", Version = "2.0")]
    public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T8[] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage2D", Version = "2.0")]
    public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T8[,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage2D", Version = "2.0")]
    public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] T8[,,] pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage2D", Version = "2.0")]
    public static void TexSubImage2D<T8>(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, [In, Out] ref T8 pixels) where T8 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, gcHandle.AddrOfPinnedObject());
        pixels = (T8) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform1f", Version = "2.0")]
    public static void Uniform1(int location, float x)
    {
      GL.Delegates.glUniform1f(location, x);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform1fv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glUniform1fv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform1fv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glUniform1fv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform1fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform1(int location, int count, float* v)
    {
      GL.Delegates.glUniform1fv(location, count, v);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform1i", Version = "2.0")]
    public static void Uniform1(int location, int x)
    {
      GL.Delegates.glUniform1i(location, x);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform1iv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glUniform1iv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform1iv", Version = "2.0")]
    public static unsafe void Uniform1(int location, int count, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glUniform1iv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform1iv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform1(int location, int count, int* v)
    {
      GL.Delegates.glUniform1iv(location, count, v);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform2f", Version = "2.0")]
    public static void Uniform2(int location, float x, float y)
    {
      GL.Delegates.glUniform2f(location, x, y);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform2fv", Version = "2.0")]
    public static unsafe void Uniform2(int location, int count, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glUniform2fv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform2fv", Version = "2.0")]
    public static unsafe void Uniform2(int location, int count, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glUniform2fv(location, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform2fv", Version = "2.0")]
    public static unsafe void Uniform2(int location, int count, float* v)
    {
      GL.Delegates.glUniform2fv(location, count, v);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform2i", Version = "2.0")]
    public static void Uniform2(int location, int x, int y)
    {
      GL.Delegates.glUniform2i(location, x, y);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform2iv", Version = "2.0")]
    public static unsafe void Uniform2(int location, int count, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glUniform2iv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform2iv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void Uniform2(int location, int count, int* v)
    {
      GL.Delegates.glUniform2iv(location, count, v);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform3f", Version = "2.0")]
    public static void Uniform3(int location, float x, float y, float z)
    {
      GL.Delegates.glUniform3f(location, x, y, z);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform3fv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glUniform3fv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform3fv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glUniform3fv(location, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform3fv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, float* v)
    {
      GL.Delegates.glUniform3fv(location, count, v);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform3i", Version = "2.0")]
    public static void Uniform3(int location, int x, int y, int z)
    {
      GL.Delegates.glUniform3i(location, x, y, z);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform3iv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glUniform3iv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform3iv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glUniform3iv(location, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform3iv", Version = "2.0")]
    public static unsafe void Uniform3(int location, int count, int* v)
    {
      GL.Delegates.glUniform3iv(location, count, v);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform4f", Version = "2.0")]
    public static void Uniform4(int location, float x, float y, float z, float w)
    {
      GL.Delegates.glUniform4f(location, x, y, z, w);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform4fv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, float[] v)
    {
      fixed (float* v1 = v)
        GL.Delegates.glUniform4fv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform4fv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, ref float v)
    {
      fixed (float* v1 = &v)
        GL.Delegates.glUniform4fv(location, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform4fv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, float* v)
    {
      GL.Delegates.glUniform4fv(location, count, v);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform4i", Version = "2.0")]
    public static void Uniform4(int location, int x, int y, int z, int w)
    {
      GL.Delegates.glUniform4i(location, x, y, z, w);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform4iv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, int[] v)
    {
      fixed (int* v1 = v)
        GL.Delegates.glUniform4iv(location, count, v1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform4iv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, ref int v)
    {
      fixed (int* v1 = &v)
        GL.Delegates.glUniform4iv(location, count, v1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glUniform4iv", Version = "2.0")]
    public static unsafe void Uniform4(int location, int count, int* v)
    {
      GL.Delegates.glUniform4iv(location, count, v);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniformMatrix2fv", Version = "2.0")]
    public static unsafe void UniformMatrix2(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix2fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniformMatrix2fv", Version = "2.0")]
    public static unsafe void UniformMatrix2(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix2fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniformMatrix2fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix2(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix2fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniformMatrix3fv", Version = "2.0")]
    public static unsafe void UniformMatrix3(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix3fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniformMatrix3fv", Version = "2.0")]
    public static unsafe void UniformMatrix3(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix3fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniformMatrix3fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void UniformMatrix3(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix3fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniformMatrix4fv", Version = "2.0")]
    public static unsafe void UniformMatrix4(int location, int count, bool transpose, float[] value)
    {
      fixed (float* numPtr = value)
        GL.Delegates.glUniformMatrix4fv(location, count, transpose, numPtr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUniformMatrix4fv", Version = "2.0")]
    public static unsafe void UniformMatrix4(int location, int count, bool transpose, ref float value)
    {
      fixed (float* numPtr = &value)
        GL.Delegates.glUniformMatrix4fv(location, count, transpose, numPtr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glUniformMatrix4fv", Version = "2.0")]
    public static unsafe void UniformMatrix4(int location, int count, bool transpose, float* value)
    {
      GL.Delegates.glUniformMatrix4fv(location, count, transpose, value);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUseProgram", Version = "2.0")]
    public static void UseProgram(int program)
    {
      GL.Delegates.glUseProgram((uint) program);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glUseProgram", Version = "2.0")]
    [CLSCompliant(false)]
    public static void UseProgram(uint program)
    {
      GL.Delegates.glUseProgram(program);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glValidateProgram", Version = "2.0")]
    public static void ValidateProgram(int program)
    {
      GL.Delegates.glValidateProgram((uint) program);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glValidateProgram", Version = "2.0")]
    public static void ValidateProgram(uint program)
    {
      GL.Delegates.glValidateProgram(program);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib1f", Version = "2.0")]
    public static void VertexAttrib1(int indx, float x)
    {
      GL.Delegates.glVertexAttrib1f((uint) indx, x);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib1f", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttrib1(uint indx, float x)
    {
      GL.Delegates.glVertexAttrib1f(indx, x);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib1fv", Version = "2.0")]
    public static unsafe void VertexAttrib1(int indx, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glVertexAttrib1fv((uint) indx, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib1fv", Version = "2.0")]
    public static unsafe void VertexAttrib1(int indx, float* values)
    {
      GL.Delegates.glVertexAttrib1fv((uint) indx, values);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib1fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib1(uint indx, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glVertexAttrib1fv(indx, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib1fv", Version = "2.0")]
    public static unsafe void VertexAttrib1(uint indx, float* values)
    {
      GL.Delegates.glVertexAttrib1fv(indx, values);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib2f", Version = "2.0")]
    public static void VertexAttrib2(int indx, float x, float y)
    {
      GL.Delegates.glVertexAttrib2f((uint) indx, x, y);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib2f", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttrib2(uint indx, float x, float y)
    {
      GL.Delegates.glVertexAttrib2f(indx, x, y);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int indx, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glVertexAttrib2fv((uint) indx, values1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int indx, ref float values)
    {
      fixed (float* values1 = &values)
        GL.Delegates.glVertexAttrib2fv((uint) indx, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    public static unsafe void VertexAttrib2(int indx, float* values)
    {
      GL.Delegates.glVertexAttrib2fv((uint) indx, values);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib2(uint indx, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glVertexAttrib2fv(indx, values1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib2(uint indx, ref float values)
    {
      fixed (float* values1 = &values)
        GL.Delegates.glVertexAttrib2fv(indx, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib2fv", Version = "2.0")]
    public static unsafe void VertexAttrib2(uint indx, float* values)
    {
      GL.Delegates.glVertexAttrib2fv(indx, values);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib3f", Version = "2.0")]
    public static void VertexAttrib3(int indx, float x, float y, float z)
    {
      GL.Delegates.glVertexAttrib3f((uint) indx, x, y, z);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib3f", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttrib3(uint indx, float x, float y, float z)
    {
      GL.Delegates.glVertexAttrib3f(indx, x, y, z);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    public static unsafe void VertexAttrib3(int indx, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glVertexAttrib3fv((uint) indx, values1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    public static unsafe void VertexAttrib3(int indx, ref float values)
    {
      fixed (float* values1 = &values)
        GL.Delegates.glVertexAttrib3fv((uint) indx, values1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(int indx, float* values)
    {
      GL.Delegates.glVertexAttrib3fv((uint) indx, values);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(uint indx, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glVertexAttrib3fv(indx, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    public static unsafe void VertexAttrib3(uint indx, ref float values)
    {
      fixed (float* values1 = &values)
        GL.Delegates.glVertexAttrib3fv(indx, values1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib3fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib3(uint indx, float* values)
    {
      GL.Delegates.glVertexAttrib3fv(indx, values);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib4f", Version = "2.0")]
    public static void VertexAttrib4(int indx, float x, float y, float z, float w)
    {
      GL.Delegates.glVertexAttrib4f((uint) indx, x, y, z, w);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib4f", Version = "2.0")]
    public static void VertexAttrib4(uint indx, float x, float y, float z, float w)
    {
      GL.Delegates.glVertexAttrib4f(indx, x, y, z, w);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int indx, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glVertexAttrib4fv((uint) indx, values1);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int indx, ref float values)
    {
      fixed (float* values1 = &values)
        GL.Delegates.glVertexAttrib4fv((uint) indx, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    public static unsafe void VertexAttrib4(int indx, float* values)
    {
      GL.Delegates.glVertexAttrib4fv((uint) indx, values);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    [CLSCompliant(false)]
    public static unsafe void VertexAttrib4(uint indx, float[] values)
    {
      fixed (float* values1 = values)
        GL.Delegates.glVertexAttrib4fv(indx, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    public static unsafe void VertexAttrib4(uint indx, ref float values)
    {
      fixed (float* values1 = &values)
        GL.Delegates.glVertexAttrib4fv(indx, values1);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttrib4fv", Version = "2.0")]
    public static unsafe void VertexAttrib4(uint indx, float* values)
    {
      GL.Delegates.glVertexAttrib4fv(indx, values);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer(int indx, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr ptr)
    {
      GL.Delegates.glVertexAttribPointer((uint) indx, size, type, normalized, stride, ptr);
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(int indx, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[] ptr) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) ptr, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer((uint) indx, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(int indx, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[,] ptr) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) ptr, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer((uint) indx, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(int indx, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[,,] ptr) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) ptr, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer((uint) indx, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(int indx, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] ref T5 ptr) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) ptr, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer((uint) indx, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        ptr = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttribPointer(uint indx, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr ptr)
    {
      GL.Delegates.glVertexAttribPointer(indx, size, type, normalized, stride, ptr);
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(uint indx, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[] ptr) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) ptr, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer(indx, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttribPointer<T5>(uint indx, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[,] ptr) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) ptr, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer(indx, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    [CLSCompliant(false)]
    public static void VertexAttribPointer<T5>(uint indx, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] T5[,,] ptr) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) ptr, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer(indx, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [CLSCompliant(false)]
    [AutoGenerated(Category = "2.0", EntryPoint = "glVertexAttribPointer", Version = "2.0")]
    public static void VertexAttribPointer<T5>(uint indx, int size, VertexAttribPointerType type, bool normalized, int stride, [In, Out] ref T5 ptr) where T5 : struct
    {
      GCHandle gcHandle = GCHandle.Alloc((object) ptr, GCHandleType.Pinned);
      try
      {
        GL.Delegates.glVertexAttribPointer(indx, size, type, normalized, stride, gcHandle.AddrOfPinnedObject());
        ptr = (T5) gcHandle.Target;
      }
      finally
      {
        gcHandle.Free();
      }
    }

    [AutoGenerated(Category = "2.0", EntryPoint = "glViewport", Version = "2.0")]
    public static void Viewport(int x, int y, int width, int height)
    {
      GL.Delegates.glViewport(x, y, width, height);
    }

    public static void ClearColor(Color color)
    {
      GL.ClearColor((float) color.R / (float) byte.MaxValue, (float) color.G / (float) byte.MaxValue, (float) color.B / (float) byte.MaxValue, (float) color.A / (float) byte.MaxValue);
    }

    public static void ClearColor(Color4 color)
    {
      GL.ClearColor(color.R, color.G, color.B, color.A);
    }

    public static void BlendColor(Color color)
    {
      GL.BlendColor((float) color.R / (float) byte.MaxValue, (float) color.G / (float) byte.MaxValue, (float) color.B / (float) byte.MaxValue, (float) color.A / (float) byte.MaxValue);
    }

    public static void BlendColor(Color4 color)
    {
      GL.BlendColor(color.R, color.G, color.B, color.A);
    }

    [CLSCompliant(false)]
    public static void Uniform2(int location, ref Vector2 vector)
    {
      GL.Uniform2(location, vector.X, vector.Y);
    }

    [CLSCompliant(false)]
    public static void Uniform3(int location, ref Vector3 vector)
    {
      GL.Uniform3(location, vector.X, vector.Y, vector.Z);
    }

    [CLSCompliant(false)]
    public static void Uniform4(int location, ref Vector4 vector)
    {
      GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
    }

    public static void Uniform2(int location, Vector2 vector)
    {
      GL.Uniform2(location, vector.X, vector.Y);
    }

    public static void Uniform3(int location, Vector3 vector)
    {
      GL.Uniform3(location, vector.X, vector.Y, vector.Z);
    }

    public static void Uniform4(int location, Vector4 vector)
    {
      GL.Uniform4(location, vector.X, vector.Y, vector.Z, vector.W);
    }

    public static void Uniform4(int location, Color4 color)
    {
      GL.Uniform4(location, color.R, color.G, color.B, color.A);
    }

    public static void Uniform4(int location, Quaternion quaternion)
    {
      GL.Uniform4(location, quaternion.X, quaternion.Y, quaternion.Z, quaternion.W);
    }

    public static unsafe void UniformMatrix4(int location, bool transpose, ref Matrix4 matrix)
    {
      fixed (float* numPtr = &matrix.Row0.X)
        GL.UniformMatrix4(location, 1, transpose, numPtr);
    }

    public static string GetActiveAttrib(int program, int index, out int size, out ActiveAttribType type)
    {
      int num;
      GL.GetProgram(program, ProgramParameter.ActiveAttributeMaxLength, out num);
      StringBuilder name = new StringBuilder(num == 0 ? 1 : num * 2);
      GL.GetActiveAttrib(program, index, name.Capacity, out num, out size, out type, name);
      return ((object) name).ToString();
    }

    public static string GetActiveUniform(int program, int uniformIndex, out int size, out ActiveUniformType type)
    {
      int num;
      GL.GetProgram(program, ProgramParameter.ActiveUniformMaxLength, out num);
      StringBuilder name = new StringBuilder(num == 0 ? 1 : num);
      GL.GetActiveUniform(program, uniformIndex, name.Capacity, out num, out size, out type, name);
      return ((object) name).ToString();
    }

    public static unsafe void ShaderSource(int shader, string @string)
    {
      int length = @string.Length;
      GL.ShaderSource((uint) shader, 1, new string[1]
      {
        @string
      }, &length);
    }

    public static string GetShaderInfoLog(int shader)
    {
      string info;
      GL.GetShaderInfoLog(shader, out info);
      return info;
    }

    public static unsafe void GetShaderInfoLog(int shader, out string info)
    {
      int @params;
      GL.GetShader(shader, ShaderParameter.InfoLogLength, out @params);
      if (@params == 0)
      {
        info = string.Empty;
      }
      else
      {
        StringBuilder infolog = new StringBuilder(@params * 2);
        GL.GetShaderInfoLog((uint) shader, infolog.Capacity, &@params, infolog);
        info = ((object) infolog).ToString();
      }
    }

    public static string GetProgramInfoLog(int program)
    {
      string info;
      GL.GetProgramInfoLog(program, out info);
      return info;
    }

    public static unsafe void GetProgramInfoLog(int program, out string info)
    {
      int @params;
      GL.GetProgram(program, ProgramParameter.InfoLogLength, out @params);
      if (@params == 0)
      {
        info = string.Empty;
      }
      else
      {
        StringBuilder infolog = new StringBuilder(@params * 2);
        GL.GetProgramInfoLog((uint) program, infolog.Capacity, &@params, infolog);
        info = ((object) infolog).ToString();
      }
    }

    [CLSCompliant(false)]
    public static void VertexAttrib2(int index, ref Vector2 v)
    {
      GL.VertexAttrib2(index, v.X, v.Y);
    }

    [CLSCompliant(false)]
    public static void VertexAttrib3(int index, ref Vector3 v)
    {
      GL.VertexAttrib3(index, v.X, v.Y, v.Z);
    }

    [CLSCompliant(false)]
    public static void VertexAttrib4(int index, ref Vector4 v)
    {
      GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
    }

    public static void VertexAttrib2(int index, Vector2 v)
    {
      GL.VertexAttrib2(index, v.X, v.Y);
    }

    public static void VertexAttrib3(int index, Vector3 v)
    {
      GL.VertexAttrib3(index, v.X, v.Y, v.Z);
    }

    public static void VertexAttrib4(int index, Vector4 v)
    {
      GL.VertexAttrib4(index, v.X, v.Y, v.Z, v.W);
    }

    public static void VertexAttribPointer(int index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset)
    {
      GL.VertexAttribPointer(index, size, type, normalized, stride, (IntPtr) offset);
    }

    [CLSCompliant(false)]
    public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, int offset)
    {
      GL.VertexAttribPointer(index, size, type, normalized, stride, (IntPtr) offset);
    }

    public static void DrawElements(BeginMode mode, int count, DrawElementsType type, int offset)
    {
      GL.DrawElements(mode, count, type, new IntPtr(offset));
    }

    public static int GenTexture()
    {
      int textures;
      GL.GenTextures(1, out textures);
      return textures;
    }

    public static void DeleteTexture(int id)
    {
      GL.DeleteTextures(1, ref id);
    }

    public static unsafe void GetFloat(GetPName pname, out Vector2 vector)
    {
      fixed (Vector2* vector2Ptr = &vector)
        GL.GetFloat(pname, (float*) vector2Ptr);
    }

    public static unsafe void GetFloat(GetPName pname, out Vector3 vector)
    {
      fixed (Vector3* vector3Ptr = &vector)
        GL.GetFloat(pname, (float*) vector3Ptr);
    }

    public static unsafe void GetFloat(GetPName pname, out Vector4 vector)
    {
      fixed (Vector4* vector4Ptr = &vector)
        GL.GetFloat(pname, (float*) vector4Ptr);
    }

    public static unsafe void GetFloat(GetPName pname, out Matrix4 matrix)
    {
      fixed (Matrix4* matrix4Ptr = &matrix)
        GL.GetFloat(pname, (float*) matrix4Ptr);
    }

    public static void Viewport(Size size)
    {
      GL.Viewport(0, 0, size.Width, size.Height);
    }

    public static void Viewport(Point location, Size size)
    {
      GL.Viewport(location.X, location.Y, size.Width, size.Height);
    }

    public static void Viewport(Rectangle rectangle)
    {
      GL.Viewport(rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height);
    }

    public static class Amd
    {
      [AutoGenerated(Category = "2.0", EntryPoint = "glBeginPerfMonitorAMD", Version = "2.0")]
      public static void BeginPerfMonitor(int monitor)
      {
        GL.Delegates.glBeginPerfMonitorAMD((uint) monitor);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glBeginPerfMonitorAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static void BeginPerfMonitor(uint monitor)
      {
        GL.Delegates.glBeginPerfMonitorAMD(monitor);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeletePerfMonitorsAMD", Version = "2.0")]
      public static unsafe void DeletePerfMonitors(int n, int[] monitors)
      {
        fixed (int* numPtr = monitors)
          GL.Delegates.glDeletePerfMonitorsAMD(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeletePerfMonitorsAMD", Version = "2.0")]
      public static unsafe void DeletePerfMonitors(int n, ref int monitors)
      {
        fixed (int* numPtr = &monitors)
          GL.Delegates.glDeletePerfMonitorsAMD(n, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glDeletePerfMonitorsAMD", Version = "2.0")]
      public static unsafe void DeletePerfMonitors(int n, int* monitors)
      {
        GL.Delegates.glDeletePerfMonitorsAMD(n, (uint*) monitors);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeletePerfMonitorsAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void DeletePerfMonitors(int n, uint[] monitors)
      {
        fixed (uint* monitors1 = monitors)
          GL.Delegates.glDeletePerfMonitorsAMD(n, monitors1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeletePerfMonitorsAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void DeletePerfMonitors(int n, ref uint monitors)
      {
        fixed (uint* monitors1 = &monitors)
          GL.Delegates.glDeletePerfMonitorsAMD(n, monitors1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glDeletePerfMonitorsAMD", Version = "2.0")]
      public static unsafe void DeletePerfMonitors(int n, uint* monitors)
      {
        GL.Delegates.glDeletePerfMonitorsAMD(n, monitors);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glEndPerfMonitorAMD", Version = "2.0")]
      public static void EndPerfMonitor(int monitor)
      {
        GL.Delegates.glEndPerfMonitorAMD((uint) monitor);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glEndPerfMonitorAMD", Version = "2.0")]
      public static void EndPerfMonitor(uint monitor)
      {
        GL.Delegates.glEndPerfMonitorAMD(monitor);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenPerfMonitorsAMD", Version = "2.0")]
      public static unsafe void GenPerfMonitors(int n, [Out] int[] monitors)
      {
        fixed (int* numPtr = monitors)
          GL.Delegates.glGenPerfMonitorsAMD(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenPerfMonitorsAMD", Version = "2.0")]
      public static unsafe void GenPerfMonitors(int n, out int monitors)
      {
        fixed (int* numPtr = &monitors)
        {
          GL.Delegates.glGenPerfMonitorsAMD(n, (uint*) numPtr);
          monitors = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGenPerfMonitorsAMD", Version = "2.0")]
      public static unsafe void GenPerfMonitors(int n, [Out] int* monitors)
      {
        GL.Delegates.glGenPerfMonitorsAMD(n, (uint*) monitors);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenPerfMonitorsAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GenPerfMonitors(int n, [Out] uint[] monitors)
      {
        fixed (uint* monitors1 = monitors)
          GL.Delegates.glGenPerfMonitorsAMD(n, monitors1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGenPerfMonitorsAMD", Version = "2.0")]
      public static unsafe void GenPerfMonitors(int n, out uint monitors)
      {
        fixed (uint* monitors1 = &monitors)
        {
          GL.Delegates.glGenPerfMonitorsAMD(n, monitors1);
          monitors = *monitors1;
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenPerfMonitorsAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GenPerfMonitors(int n, [Out] uint* monitors)
      {
        GL.Delegates.glGenPerfMonitorsAMD(n, monitors);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounterData(int monitor, All pname, int dataSize, [Out] int[] data, [Out] int[] bytesWritten)
      {
        fixed (int* numPtr = data)
          fixed (int* bytesWritten1 = bytesWritten)
            GL.Delegates.glGetPerfMonitorCounterDataAMD((uint) monitor, pname, dataSize, (uint*) numPtr, bytesWritten1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounterData(int monitor, All pname, int dataSize, out int data, out int bytesWritten)
      {
        fixed (int* numPtr = &data)
          fixed (int* bytesWritten1 = &bytesWritten)
          {
            GL.Delegates.glGetPerfMonitorCounterDataAMD((uint) monitor, pname, dataSize, (uint*) numPtr, bytesWritten1);
            data = *numPtr;
            bytesWritten = *bytesWritten1;
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounterData(int monitor, All pname, int dataSize, [Out] int* data, [Out] int* bytesWritten)
      {
        GL.Delegates.glGetPerfMonitorCounterDataAMD((uint) monitor, pname, dataSize, (uint*) data, bytesWritten);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounterData(uint monitor, All pname, int dataSize, [Out] uint[] data, [Out] int[] bytesWritten)
      {
        fixed (uint* data1 = data)
          fixed (int* bytesWritten1 = bytesWritten)
            GL.Delegates.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data1, bytesWritten1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounterData(uint monitor, All pname, int dataSize, out uint data, out int bytesWritten)
      {
        fixed (uint* data1 = &data)
          fixed (int* bytesWritten1 = &bytesWritten)
          {
            GL.Delegates.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data1, bytesWritten1);
            data = *data1;
            bytesWritten = *bytesWritten1;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterDataAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounterData(uint monitor, All pname, int dataSize, [Out] uint* data, [Out] int* bytesWritten)
      {
        GL.Delegates.glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      public static void GetPerfMonitorCounterInfo(int group, int counter, All pname, [Out] IntPtr data)
      {
        GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, data);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      public static void GetPerfMonitorCounterInfo<T3>(int group, int counter, All pname, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      public static void GetPerfMonitorCounterInfo<T3>(int group, int counter, All pname, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      public static void GetPerfMonitorCounterInfo<T3>(int group, int counter, All pname, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      public static void GetPerfMonitorCounterInfo<T3>(int group, int counter, All pname, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD((uint) group, (uint) counter, pname, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      public static void GetPerfMonitorCounterInfo(uint group, uint counter, All pname, [Out] IntPtr data)
      {
        GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, All pname, [In, Out] T3[] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, All pname, [In, Out] T3[,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, All pname, [In, Out] T3[,,] data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterInfoAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static void GetPerfMonitorCounterInfo<T3>(uint group, uint counter, All pname, [In, Out] ref T3 data) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetPerfMonitorCounterInfoAMD(group, counter, pname, gcHandle.AddrOfPinnedObject());
          data = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounters(int group, [Out] int[] numCounters, [Out] int[] maxActiveCounters, int counterSize, [Out] int[] counters)
      {
        fixed (int* numCounters1 = numCounters)
          fixed (int* maxActiveCounters1 = maxActiveCounters)
            fixed (int* numPtr = counters)
              GL.Delegates.glGetPerfMonitorCountersAMD((uint) group, numCounters1, maxActiveCounters1, counterSize, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounters(int group, out int numCounters, out int maxActiveCounters, int counterSize, out int counters)
      {
        fixed (int* numCounters1 = &numCounters)
          fixed (int* maxActiveCounters1 = &maxActiveCounters)
            fixed (int* numPtr = &counters)
            {
              GL.Delegates.glGetPerfMonitorCountersAMD((uint) group, numCounters1, maxActiveCounters1, counterSize, (uint*) numPtr);
              numCounters = *numCounters1;
              maxActiveCounters = *maxActiveCounters1;
              counters = *numPtr;
            }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounters(int group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] int* counters)
      {
        GL.Delegates.glGetPerfMonitorCountersAMD((uint) group, numCounters, maxActiveCounters, counterSize, (uint*) counters);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounters(uint group, [Out] int[] numCounters, [Out] int[] maxActiveCounters, int counterSize, [Out] uint[] counters)
      {
        fixed (int* numCounters1 = numCounters)
          fixed (int* maxActiveCounters1 = maxActiveCounters)
            fixed (uint* counters1 = counters)
              GL.Delegates.glGetPerfMonitorCountersAMD(group, numCounters1, maxActiveCounters1, counterSize, counters1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounters(uint group, out int numCounters, out int maxActiveCounters, int counterSize, out uint counters)
      {
        fixed (int* numCounters1 = &numCounters)
          fixed (int* maxActiveCounters1 = &maxActiveCounters)
            fixed (uint* counters1 = &counters)
            {
              GL.Delegates.glGetPerfMonitorCountersAMD(group, numCounters1, maxActiveCounters1, counterSize, counters1);
              numCounters = *numCounters1;
              maxActiveCounters = *maxActiveCounters1;
              counters = *counters1;
            }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCountersAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounters(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint* counters)
      {
        GL.Delegates.glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounterString(int group, int counter, int bufSize, [Out] int[] length, [Out] StringBuilder counterString)
      {
        fixed (int* length1 = length)
          GL.Delegates.glGetPerfMonitorCounterStringAMD((uint) group, (uint) counter, bufSize, length1, counterString);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounterString(int group, int counter, int bufSize, out int length, [Out] StringBuilder counterString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetPerfMonitorCounterStringAMD((uint) group, (uint) counter, bufSize, length1, counterString);
          length = *length1;
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounterString(int group, int counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString)
      {
        GL.Delegates.glGetPerfMonitorCounterStringAMD((uint) group, (uint) counter, bufSize, length, counterString);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, [Out] int[] length, [Out] StringBuilder counterString)
      {
        fixed (int* length1 = length)
          GL.Delegates.glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length1, counterString);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, out int length, [Out] StringBuilder counterString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length1, counterString);
          length = *length1;
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorCounterStringAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorCounterString(uint group, uint counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString)
      {
        GL.Delegates.glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroup([Out] int[] numGroups, int groupsSize, [Out] int[] groups)
      {
        fixed (int* numGroups1 = numGroups)
          fixed (int* numPtr = groups)
            GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups1, groupsSize, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroup([Out] int[] numGroups, int groupsSize, [Out] uint[] groups)
      {
        fixed (int* numGroups1 = numGroups)
          fixed (uint* groups1 = groups)
            GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups1, groupsSize, groups1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroup(out int numGroups, int groupsSize, out int groups)
      {
        fixed (int* numGroups1 = &numGroups)
          fixed (int* numPtr = &groups)
          {
            GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups1, groupsSize, (uint*) numPtr);
            numGroups = *numGroups1;
            groups = *numPtr;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroup(out int numGroups, int groupsSize, out uint groups)
      {
        fixed (int* numGroups1 = &numGroups)
          fixed (uint* groups1 = &groups)
          {
            GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups1, groupsSize, groups1);
            numGroups = *numGroups1;
            groups = *groups1;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] int* groups)
      {
        GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups, groupsSize, (uint*) groups);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupsAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroup([Out] int* numGroups, int groupsSize, [Out] uint* groups)
      {
        GL.Delegates.glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroupString(int group, int bufSize, [Out] int[] length, [Out] StringBuilder groupString)
      {
        fixed (int* length1 = length)
          GL.Delegates.glGetPerfMonitorGroupStringAMD((uint) group, bufSize, length1, groupString);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroupString(int group, int bufSize, out int length, [Out] StringBuilder groupString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetPerfMonitorGroupStringAMD((uint) group, bufSize, length1, groupString);
          length = *length1;
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorGroupString(int group, int bufSize, [Out] int* length, [Out] StringBuilder groupString)
      {
        GL.Delegates.glGetPerfMonitorGroupStringAMD((uint) group, bufSize, length, groupString);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetPerfMonitorGroupString(uint group, int bufSize, [Out] int[] length, [Out] StringBuilder groupString)
      {
        fixed (int* length1 = length)
          GL.Delegates.glGetPerfMonitorGroupStringAMD(group, bufSize, length1, groupString);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroupString(uint group, int bufSize, out int length, [Out] StringBuilder groupString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetPerfMonitorGroupStringAMD(group, bufSize, length1, groupString);
          length = *length1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetPerfMonitorGroupStringAMD", Version = "2.0")]
      public static unsafe void GetPerfMonitorGroupString(uint group, int bufSize, [Out] int* length, [Out] StringBuilder groupString)
      {
        GL.Delegates.glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "2.0")]
      public static unsafe void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, int[] countersList)
      {
        fixed (int* numPtr = countersList)
          GL.Delegates.glSelectPerfMonitorCountersAMD((uint) monitor, enable, (uint) group, numCounters, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "2.0")]
      public static unsafe void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, ref int countersList)
      {
        fixed (int* numPtr = &countersList)
          GL.Delegates.glSelectPerfMonitorCountersAMD((uint) monitor, enable, (uint) group, numCounters, (uint*) numPtr);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "2.0")]
      public static unsafe void SelectPerfMonitorCounters(int monitor, bool enable, int group, int numCounters, int* countersList)
      {
        GL.Delegates.glSelectPerfMonitorCountersAMD((uint) monitor, enable, (uint) group, numCounters, (uint*) countersList);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, uint[] countersList)
      {
        fixed (uint* countersList1 = countersList)
          GL.Delegates.glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, countersList1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "2.0")]
      public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, ref uint countersList)
      {
        fixed (uint* countersList1 = &countersList)
          GL.Delegates.glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, countersList1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glSelectPerfMonitorCountersAMD", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void SelectPerfMonitorCounters(uint monitor, bool enable, uint group, int numCounters, uint* countersList)
      {
        GL.Delegates.glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, countersList);
      }
    }

    public static class Angle
    {
      [AutoGenerated(Category = "2.0", EntryPoint = "glBlitFramebufferANGLE", Version = "2.0")]
      public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, All filter)
      {
        GL.Delegates.glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, (uint) mask, filter);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glBlitFramebufferANGLE", Version = "2.0")]
      public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, All filter)
      {
        GL.Delegates.glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glRenderbufferStorageMultisampleANGLE", Version = "2.0")]
      public static void RenderbufferStorageMultisample(All target, int samples, All internalformat, int width, int height)
      {
        GL.Delegates.glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
      }
    }

    public static class Apple
    {
      [AutoGenerated(Category = "2.0", EntryPoint = "glRenderbufferStorageMultisampleAPPLE", Version = "2.0")]
      public static void RenderbufferStorageMultisample()
      {
        GL.Delegates.glRenderbufferStorageMultisampleAPPLE();
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glResolveMultisampleFramebufferAPPLE", Version = "2.0")]
      public static void ResolveMultisampleFramebuffer()
      {
        GL.Delegates.glResolveMultisampleFramebufferAPPLE();
      }
    }

    public static class Ext
    {
      [AutoGenerated(Category = "2.0", EntryPoint = "glDiscardFramebufferEXT", Version = "2.0")]
      public static unsafe void DiscardFramebuffer(All target, int numAttachments, All[] attachments)
      {
        fixed (All* attachments1 = attachments)
          GL.Delegates.glDiscardFramebufferEXT(target, numAttachments, attachments1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDiscardFramebufferEXT", Version = "2.0")]
      public static unsafe void DiscardFramebuffer(All target, int numAttachments, ref All attachments)
      {
        fixed (All* attachments1 = &attachments)
          GL.Delegates.glDiscardFramebufferEXT(target, numAttachments, attachments1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glDiscardFramebufferEXT", Version = "2.0")]
      public static unsafe void DiscardFramebuffer(All target, int numAttachments, All* attachments)
      {
        GL.Delegates.glDiscardFramebufferEXT(target, numAttachments, attachments);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawArraysEXT", Version = "2.0")]
      public static unsafe void MultiDrawArrays(All mode, int[] first, int[] count, int primcount)
      {
        fixed (int* first1 = first)
          fixed (int* count1 = count)
            GL.Delegates.glMultiDrawArraysEXT(mode, first1, count1, primcount);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawArraysEXT", Version = "2.0")]
      public static unsafe void MultiDrawArrays(All mode, ref int first, ref int count, int primcount)
      {
        fixed (int* first1 = &first)
          fixed (int* count1 = &count)
            GL.Delegates.glMultiDrawArraysEXT(mode, first1, count1, primcount);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawArraysEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void MultiDrawArrays(All mode, int* first, int* count, int primcount)
      {
        GL.Delegates.glMultiDrawArraysEXT(mode, first, count, primcount);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements(All mode, int[] first, All type, IntPtr indices, int primcount)
      {
        fixed (int* first1 = first)
          GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, indices, primcount);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, int[] first, All type, [In, Out] T3[] indices, int primcount) where T3 : struct
      {
        fixed (int* first1 = first)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, int[] first, All type, [In, Out] T3[,] indices, int primcount) where T3 : struct
      {
        fixed (int* first1 = first)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, int[] first, All type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
      {
        fixed (int* first1 = first)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, int[] first, All type, [In, Out] ref T3 indices, int primcount) where T3 : struct
      {
        fixed (int* first1 = first)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, gcHandle.AddrOfPinnedObject(), primcount);
            indices = (T3) gcHandle.Target;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements(All mode, ref int first, All type, IntPtr indices, int primcount)
      {
        fixed (int* first1 = &first)
          GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, indices, primcount);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, ref int first, All type, [In, Out] T3[] indices, int primcount) where T3 : struct
      {
        fixed (int* first1 = &first)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, ref int first, All type, [In, Out] T3[,] indices, int primcount) where T3 : struct
      {
        fixed (int* first1 = &first)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, ref int first, All type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
      {
        fixed (int* first1 = &first)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, gcHandle.AddrOfPinnedObject(), primcount);
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, ref int first, All type, [In, Out] ref T3 indices, int primcount) where T3 : struct
      {
        fixed (int* first1 = &first)
        {
          GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
          try
          {
            GL.Delegates.glMultiDrawElementsEXT(mode, first1, type, gcHandle.AddrOfPinnedObject(), primcount);
            indices = (T3) gcHandle.Target;
          }
          finally
          {
            gcHandle.Free();
          }
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void MultiDrawElements(All mode, int* first, All type, IntPtr indices, int primcount)
      {
        GL.Delegates.glMultiDrawElementsEXT(mode, first, type, indices, primcount);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, int* first, All type, [In, Out] T3[] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsEXT(mode, first, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void MultiDrawElements<T3>(All mode, int* first, All type, [In, Out] T3[,] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsEXT(mode, first, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void MultiDrawElements<T3>(All mode, int* first, All type, [In, Out] T3[,,] indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsEXT(mode, first, type, gcHandle.AddrOfPinnedObject(), primcount);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glMultiDrawElementsEXT", Version = "2.0")]
      public static unsafe void MultiDrawElements<T3>(All mode, int* first, All type, [In, Out] ref T3 indices, int primcount) where T3 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) indices, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glMultiDrawElementsEXT(mode, first, type, gcHandle.AddrOfPinnedObject(), primcount);
          indices = (T3) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }
    }

    public static class NV
    {
      [AutoGenerated(Category = "2.0", EntryPoint = "glCoverageMaskNV", Version = "2.0")]
      public static void CoverageMask(bool mask)
      {
        GL.Delegates.glCoverageMaskNV(mask);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCoverageOperationNV", Version = "2.0")]
      public static void CoverageOperation(All operation)
      {
        GL.Delegates.glCoverageOperationNV(operation);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFencesNV", Version = "2.0")]
      public static unsafe void DeleteFences(int n, int[] fences)
      {
        fixed (int* numPtr = fences)
          GL.Delegates.glDeleteFencesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFencesNV", Version = "2.0")]
      public static unsafe void DeleteFences(int n, ref int fences)
      {
        fixed (int* numPtr = &fences)
          GL.Delegates.glDeleteFencesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFencesNV", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFences(int n, int* fences)
      {
        GL.Delegates.glDeleteFencesNV(n, (uint*) fences);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFencesNV", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void DeleteFences(int n, uint[] fences)
      {
        fixed (uint* fences1 = fences)
          GL.Delegates.glDeleteFencesNV(n, fences1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFencesNV", Version = "2.0")]
      public static unsafe void DeleteFences(int n, ref uint fences)
      {
        fixed (uint* fences1 = &fences)
          GL.Delegates.glDeleteFencesNV(n, fences1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteFencesNV", Version = "2.0")]
      public static unsafe void DeleteFences(int n, uint* fences)
      {
        GL.Delegates.glDeleteFencesNV(n, fences);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glFinishFenceNV", Version = "2.0")]
      public static void FinishFence(int fence)
      {
        GL.Delegates.glFinishFenceNV((uint) fence);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glFinishFenceNV", Version = "2.0")]
      [CLSCompliant(false)]
      public static void FinishFence(uint fence)
      {
        GL.Delegates.glFinishFenceNV(fence);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenFencesNV", Version = "2.0")]
      public static unsafe void GenFences(int n, [Out] int[] fences)
      {
        fixed (int* numPtr = fences)
          GL.Delegates.glGenFencesNV(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenFencesNV", Version = "2.0")]
      public static unsafe void GenFences(int n, out int fences)
      {
        fixed (int* numPtr = &fences)
        {
          GL.Delegates.glGenFencesNV(n, (uint*) numPtr);
          fences = *numPtr;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGenFencesNV", Version = "2.0")]
      public static unsafe void GenFences(int n, [Out] int* fences)
      {
        GL.Delegates.glGenFencesNV(n, (uint*) fences);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGenFencesNV", Version = "2.0")]
      public static unsafe void GenFences(int n, [Out] uint[] fences)
      {
        fixed (uint* fences1 = fences)
          GL.Delegates.glGenFencesNV(n, fences1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGenFencesNV", Version = "2.0")]
      public static unsafe void GenFences(int n, out uint fences)
      {
        fixed (uint* fences1 = &fences)
        {
          GL.Delegates.glGenFencesNV(n, fences1);
          fences = *fences1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGenFencesNV", Version = "2.0")]
      public static unsafe void GenFences(int n, [Out] uint* fences)
      {
        GL.Delegates.glGenFencesNV(n, fences);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetFenceivNV", Version = "2.0")]
      public static unsafe void GetFence(int fence, All pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFenceivNV((uint) fence, pname, params1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetFenceivNV", Version = "2.0")]
      public static unsafe void GetFence(int fence, All pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFenceivNV((uint) fence, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetFenceivNV", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetFence(int fence, All pname, [Out] int* @params)
      {
        GL.Delegates.glGetFenceivNV((uint) fence, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetFenceivNV", Version = "2.0")]
      public static unsafe void GetFence(uint fence, All pname, [Out] int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glGetFenceivNV(fence, pname, params1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetFenceivNV", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetFence(uint fence, All pname, out int @params)
      {
        fixed (int* params1 = &@params)
        {
          GL.Delegates.glGetFenceivNV(fence, pname, params1);
          @params = *params1;
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetFenceivNV", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetFence(uint fence, All pname, [Out] int* @params)
      {
        GL.Delegates.glGetFenceivNV(fence, pname, @params);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glIsFenceNV", Version = "2.0")]
      public static bool IsFence(int fence)
      {
        return GL.Delegates.glIsFenceNV((uint) fence);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glIsFenceNV", Version = "2.0")]
      public static bool IsFence(uint fence)
      {
        return GL.Delegates.glIsFenceNV(fence);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glSetFenceNV", Version = "2.0")]
      public static void SetFence(int fence, All condition)
      {
        GL.Delegates.glSetFenceNV((uint) fence, condition);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glSetFenceNV", Version = "2.0")]
      [CLSCompliant(false)]
      public static void SetFence(uint fence, All condition)
      {
        GL.Delegates.glSetFenceNV(fence, condition);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTestFenceNV", Version = "2.0")]
      public static bool TestFence(int fence)
      {
        return GL.Delegates.glTestFenceNV((uint) fence);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glTestFenceNV", Version = "2.0")]
      public static bool TestFence(uint fence)
      {
        return GL.Delegates.glTestFenceNV(fence);
      }
    }

    public static class Oes
    {
      [AutoGenerated(Category = "2.0", EntryPoint = "glBindVertexArrayOES", Version = "2.0")]
      public static void BindVertexArray(int array)
      {
        GL.Delegates.glBindVertexArrayOES((uint) array);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glBindVertexArrayOES", Version = "2.0")]
      public static void BindVertexArray(uint array)
      {
        GL.Delegates.glBindVertexArrayOES(array);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage3DOES", Version = "2.0")]
      public static void CompressedTexImage3D(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
      {
        GL.Delegates.glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage3DOES", Version = "2.0")]
      public static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T8[] data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage3DOES", Version = "2.0")]
      public static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T8[,] data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage3DOES", Version = "2.0")]
      public static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] T8[,,] data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexImage3DOES", Version = "2.0")]
      public static void CompressedTexImage3D<T8>(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, [In, Out] ref T8 data) where T8 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, gcHandle.AddrOfPinnedObject());
          data = (T8) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage3DOES", Version = "2.0")]
      public static void CompressedTexSubImage3D(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, IntPtr data)
      {
        GL.Delegates.glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage3DOES", Version = "2.0")]
      public static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In, Out] T10[] data) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage3DOES", Version = "2.0")]
      public static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In, Out] T10[,] data) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage3DOES", Version = "2.0")]
      public static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In, Out] T10[,,] data) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCompressedTexSubImage3DOES", Version = "2.0")]
      public static void CompressedTexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, [In, Out] ref T10 data) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) data, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, gcHandle.AddrOfPinnedObject());
          data = (T10) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glCopyTexSubImage3DOES", Version = "2.0")]
      public static void CopyTexSubImage3D(All target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
      {
        GL.Delegates.glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteVertexArraysOES", Version = "2.0")]
      public static unsafe void DeleteVertexArrays(int n, int[] arrays)
      {
        fixed (int* numPtr = arrays)
          GL.Delegates.glDeleteVertexArraysOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteVertexArraysOES", Version = "2.0")]
      public static unsafe void DeleteVertexArrays(int n, ref int arrays)
      {
        fixed (int* numPtr = &arrays)
          GL.Delegates.glDeleteVertexArraysOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteVertexArraysOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void DeleteVertexArrays(int n, int* arrays)
      {
        GL.Delegates.glDeleteVertexArraysOES(n, (uint*) arrays);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteVertexArraysOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void DeleteVertexArrays(int n, uint[] arrays)
      {
        fixed (uint* arrays1 = arrays)
          GL.Delegates.glDeleteVertexArraysOES(n, arrays1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteVertexArraysOES", Version = "2.0")]
      public static unsafe void DeleteVertexArrays(int n, ref uint arrays)
      {
        fixed (uint* arrays1 = &arrays)
          GL.Delegates.glDeleteVertexArraysOES(n, arrays1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glDeleteVertexArraysOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void DeleteVertexArrays(int n, uint* arrays)
      {
        GL.Delegates.glDeleteVertexArraysOES(n, arrays);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glEGLImageTargetRenderbufferStorageOES", Version = "2.0")]
      public static void EGLImageTargetRenderbufferStorage(All target, IntPtr image)
      {
        GL.Delegates.glEGLImageTargetRenderbufferStorageOES(target, image);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glEGLImageTargetTexture2DOES", Version = "2.0")]
      public static void EGLImageTargetTexture2D(All target, IntPtr image)
      {
        GL.Delegates.glEGLImageTargetTexture2DOES(target, image);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glFramebufferTexture3DOES", Version = "2.0")]
      public static void FramebufferTexture3D(All target, All attachment, All textarget, int texture, int level, int zoffset)
      {
        GL.Delegates.glFramebufferTexture3DOES(target, attachment, textarget, (uint) texture, level, zoffset);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glFramebufferTexture3DOES", Version = "2.0")]
      public static void FramebufferTexture3D(All target, All attachment, All textarget, uint texture, int level, int zoffset)
      {
        GL.Delegates.glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenVertexArraysOES", Version = "2.0")]
      public static unsafe void GenVertexArrays(int n, [Out] int[] arrays)
      {
        fixed (int* numPtr = arrays)
          GL.Delegates.glGenVertexArraysOES(n, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenVertexArraysOES", Version = "2.0")]
      public static unsafe void GenVertexArrays(int n, out int arrays)
      {
        fixed (int* numPtr = &arrays)
        {
          GL.Delegates.glGenVertexArraysOES(n, (uint*) numPtr);
          arrays = *numPtr;
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenVertexArraysOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GenVertexArrays(int n, [Out] int* arrays)
      {
        GL.Delegates.glGenVertexArraysOES(n, (uint*) arrays);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGenVertexArraysOES", Version = "2.0")]
      public static unsafe void GenVertexArrays(int n, [Out] uint[] arrays)
      {
        fixed (uint* arrays1 = arrays)
          GL.Delegates.glGenVertexArraysOES(n, arrays1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenVertexArraysOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GenVertexArrays(int n, out uint arrays)
      {
        fixed (uint* arrays1 = &arrays)
        {
          GL.Delegates.glGenVertexArraysOES(n, arrays1);
          arrays = *arrays1;
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGenVertexArraysOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GenVertexArrays(int n, [Out] uint* arrays)
      {
        GL.Delegates.glGenVertexArraysOES(n, arrays);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetBufferPointervOES", Version = "2.0")]
      public static void GetBufferPointer(All target, All pname, [Out] IntPtr @params)
      {
        GL.Delegates.glGetBufferPointervOES(target, pname, @params);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetBufferPointervOES", Version = "2.0")]
      public static void GetBufferPointer<T2>(All target, All pname, [In, Out] T2[] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervOES(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetBufferPointervOES", Version = "2.0")]
      public static void GetBufferPointer<T2>(All target, All pname, [In, Out] T2[,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervOES(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetBufferPointervOES", Version = "2.0")]
      public static void GetBufferPointer<T2>(All target, All pname, [In, Out] T2[,,] @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervOES(target, pname, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetBufferPointervOES", Version = "2.0")]
      public static void GetBufferPointer<T2>(All target, All pname, [In, Out] ref T2 @params) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetBufferPointervOES(target, pname, gcHandle.AddrOfPinnedObject());
          @params = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [Out] IntPtr binary)
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
            GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, binary);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In, Out] T4[] binary) where T4 : struct
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In, Out] T4[,] binary) where T4 : struct
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In, Out] ref T4 binary) where T4 : struct
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              binary = (T4) gcHandle.Target;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary(int program, int bufSize, out int length, out All binaryFormat, [Out] IntPtr binary)
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, binary);
            length = *length1;
            binaryFormat = *binaryFormat1;
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In, Out] T4[] binary) where T4 : struct
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              length = *length1;
              binaryFormat = *binaryFormat1;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In, Out] T4[,] binary) where T4 : struct
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              length = *length1;
              binaryFormat = *binaryFormat1;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              length = *length1;
              binaryFormat = *binaryFormat1;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, out int length, out All binaryFormat, [In, Out] ref T4 binary) where T4 : struct
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              length = *length1;
              binaryFormat = *binaryFormat1;
              binary = (T4) gcHandle.Target;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramBinary(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [Out] IntPtr binary)
      {
        GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length, binaryFormat, binary);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In, Out] T4[] binary) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In, Out] T4[,] binary) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(int program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In, Out] ref T4 binary) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramBinaryOES((uint) program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
          binary = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramBinary(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [Out] IntPtr binary)
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
            GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, binary);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In, Out] T4[] binary) where T4 : struct
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In, Out] T4[,] binary) where T4 : struct
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int[] length, [Out] All[] binaryFormat, [In, Out] ref T4 binary) where T4 : struct
      {
        fixed (int* length1 = length)
          fixed (All* binaryFormat1 = binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              binary = (T4) gcHandle.Target;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary(uint program, int bufSize, out int length, out All binaryFormat, [Out] IntPtr binary)
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, binary);
            length = *length1;
            binaryFormat = *binaryFormat1;
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In, Out] T4[] binary) where T4 : struct
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              length = *length1;
              binaryFormat = *binaryFormat1;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In, Out] T4[,] binary) where T4 : struct
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              length = *length1;
              binaryFormat = *binaryFormat1;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              length = *length1;
              binaryFormat = *binaryFormat1;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, out int length, out All binaryFormat, [In, Out] ref T4 binary) where T4 : struct
      {
        fixed (int* length1 = &length)
          fixed (All* binaryFormat1 = &binaryFormat)
          {
            GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
            try
            {
              GL.Delegates.glGetProgramBinaryOES(program, bufSize, length1, binaryFormat1, gcHandle.AddrOfPinnedObject());
              length = *length1;
              binaryFormat = *binaryFormat1;
              binary = (T4) gcHandle.Target;
            }
            finally
            {
              gcHandle.Free();
            }
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [Out] IntPtr binary)
      {
        GL.Delegates.glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In, Out] T4[] binary) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramBinaryOES(program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In, Out] T4[,] binary) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramBinaryOES(program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In, Out] T4[,,] binary) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramBinaryOES(program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetProgramBinaryOES", Version = "2.0")]
      public static unsafe void GetProgramBinary<T4>(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [In, Out] ref T4 binary) where T4 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glGetProgramBinaryOES(program, bufSize, length, binaryFormat, gcHandle.AddrOfPinnedObject());
          binary = (T4) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glIsVertexArrayOES", Version = "2.0")]
      public static bool IsVertexArray(int array)
      {
        return GL.Delegates.glIsVertexArrayOES((uint) array);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glIsVertexArrayOES", Version = "2.0")]
      public static bool IsVertexArray(uint array)
      {
        return GL.Delegates.glIsVertexArrayOES(array);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glMapBufferOES", Version = "2.0")]
      public static IntPtr MapBuffer(All target, All access)
      {
        return GL.Delegates.glMapBufferOES(target, access);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      public static void ProgramBinary(int program, All binaryFormat, IntPtr binary, int length)
      {
        GL.Delegates.glProgramBinaryOES((uint) program, binaryFormat, binary, length);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      public static void ProgramBinary<T2>(int program, All binaryFormat, [In, Out] T2[] binary, int length) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramBinaryOES((uint) program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      public static void ProgramBinary<T2>(int program, All binaryFormat, [In, Out] T2[,] binary, int length) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramBinaryOES((uint) program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      public static void ProgramBinary<T2>(int program, All binaryFormat, [In, Out] T2[,,] binary, int length) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramBinaryOES((uint) program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      public static void ProgramBinary<T2>(int program, All binaryFormat, [In, Out] ref T2 binary, int length) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramBinaryOES((uint) program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      public static void ProgramBinary(uint program, All binaryFormat, IntPtr binary, int length)
      {
        GL.Delegates.glProgramBinaryOES(program, binaryFormat, binary, length);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      public static void ProgramBinary<T2>(uint program, All binaryFormat, [In, Out] T2[] binary, int length) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramBinaryOES(program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      public static void ProgramBinary<T2>(uint program, All binaryFormat, [In, Out] T2[,] binary, int length) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramBinaryOES(program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      public static void ProgramBinary<T2>(uint program, All binaryFormat, [In, Out] T2[,,] binary, int length) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramBinaryOES(program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glProgramBinaryOES", Version = "2.0")]
      [CLSCompliant(false)]
      public static void ProgramBinary<T2>(uint program, All binaryFormat, [In, Out] ref T2 binary, int length) where T2 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) binary, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glProgramBinaryOES(program, binaryFormat, gcHandle.AddrOfPinnedObject(), length);
          binary = (T2) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage3DOES", Version = "2.0")]
      public static void TexImage3D(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, IntPtr pixels)
      {
        GL.Delegates.glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage3DOES", Version = "2.0")]
      public static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In, Out] T9[] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage3DOES", Version = "2.0")]
      public static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In, Out] T9[,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage3DOES", Version = "2.0")]
      public static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In, Out] T9[,,] pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexImage3DOES", Version = "2.0")]
      public static void TexImage3D<T9>(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, [In, Out] ref T9 pixels) where T9 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T9) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage3DOES", Version = "2.0")]
      public static void TexSubImage3D(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, IntPtr pixels)
      {
        GL.Delegates.glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage3DOES", Version = "2.0")]
      public static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In, Out] T10[] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage3DOES", Version = "2.0")]
      public static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In, Out] T10[,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage3DOES", Version = "2.0")]
      public static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In, Out] T10[,,] pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glTexSubImage3DOES", Version = "2.0")]
      public static void TexSubImage3D<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In, Out] ref T10 pixels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) pixels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
          pixels = (T10) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glUnmapBufferOES", Version = "2.0")]
      public static bool UnmapBuffer(All target)
      {
        return GL.Delegates.glUnmapBufferOES(target);
      }
    }

    public static class Qcom
    {
      [AutoGenerated(Category = "2.0", EntryPoint = "glDisableDriverControlQCOM", Version = "2.0")]
      public static void DisableDriverControl(int driverControl)
      {
        GL.Delegates.glDisableDriverControlQCOM((uint) driverControl);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glDisableDriverControlQCOM", Version = "2.0")]
      public static void DisableDriverControl(uint driverControl)
      {
        GL.Delegates.glDisableDriverControlQCOM(driverControl);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glEnableDriverControlQCOM", Version = "2.0")]
      public static void EnableDriverControl(int driverControl)
      {
        GL.Delegates.glEnableDriverControlQCOM((uint) driverControl);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glEnableDriverControlQCOM", Version = "2.0")]
      public static void EnableDriverControl(uint driverControl)
      {
        GL.Delegates.glEnableDriverControlQCOM(driverControl);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glEndTilingQCOM", Version = "2.0")]
      public static void EndTiling(int preserveMask)
      {
        GL.Delegates.glEndTilingQCOM((uint) preserveMask);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glEndTilingQCOM", Version = "2.0")]
      public static void EndTiling(uint preserveMask)
      {
        GL.Delegates.glEndTilingQCOM(preserveMask);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBufferPointervQCOM", Version = "2.0")]
      public static void ExtGetBufferPointer(All target, IntPtr @params)
      {
        GL.Delegates.glExtGetBufferPointervQCOM(target, @params);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBufferPointervQCOM", Version = "2.0")]
      public static void ExtGetBufferPointer<T1>(All target, [In, Out] T1[] @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glExtGetBufferPointervQCOM(target, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBufferPointervQCOM", Version = "2.0")]
      public static void ExtGetBufferPointer<T1>(All target, [In, Out] T1[,] @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glExtGetBufferPointervQCOM(target, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBufferPointervQCOM", Version = "2.0")]
      public static void ExtGetBufferPointer<T1>(All target, [In, Out] T1[,,] @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glExtGetBufferPointervQCOM(target, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBufferPointervQCOM", Version = "2.0")]
      public static void ExtGetBufferPointer<T1>(All target, [In, Out] ref T1 @params) where T1 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) @params, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glExtGetBufferPointervQCOM(target, gcHandle.AddrOfPinnedObject());
          @params = (T1) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetBuffers(int[] buffers, int maxBuffers, int[] numBuffers)
      {
        fixed (int* numPtr = buffers)
          fixed (int* numBuffers1 = numBuffers)
            GL.Delegates.glExtGetBuffersQCOM((uint*) numPtr, maxBuffers, numBuffers1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetBuffers(ref int buffers, int maxBuffers, ref int numBuffers)
      {
        fixed (int* numPtr = &buffers)
          fixed (int* numBuffers1 = &numBuffers)
            GL.Delegates.glExtGetBuffersQCOM((uint*) numPtr, maxBuffers, numBuffers1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBuffersQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetBuffers(int* buffers, int maxBuffers, int* numBuffers)
      {
        GL.Delegates.glExtGetBuffersQCOM((uint*) buffers, maxBuffers, numBuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetBuffers(uint[] buffers, int maxBuffers, int[] numBuffers)
      {
        fixed (uint* buffers1 = buffers)
          fixed (int* numBuffers1 = numBuffers)
            GL.Delegates.glExtGetBuffersQCOM(buffers1, maxBuffers, numBuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetBuffers(ref uint buffers, int maxBuffers, ref int numBuffers)
      {
        fixed (uint* buffers1 = &buffers)
          fixed (int* numBuffers1 = &numBuffers)
            GL.Delegates.glExtGetBuffersQCOM(buffers1, maxBuffers, numBuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetBuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetBuffers(uint* buffers, int maxBuffers, int* numBuffers)
      {
        GL.Delegates.glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetFramebuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetFramebuffers(int[] framebuffers, int maxFramebuffers, int[] numFramebuffers)
      {
        fixed (int* numPtr = framebuffers)
          fixed (int* numFramebuffers1 = numFramebuffers)
            GL.Delegates.glExtGetFramebuffersQCOM((uint*) numPtr, maxFramebuffers, numFramebuffers1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetFramebuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetFramebuffers(ref int framebuffers, int maxFramebuffers, ref int numFramebuffers)
      {
        fixed (int* numPtr = &framebuffers)
          fixed (int* numFramebuffers1 = &numFramebuffers)
            GL.Delegates.glExtGetFramebuffersQCOM((uint*) numPtr, maxFramebuffers, numFramebuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetFramebuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetFramebuffers(int* framebuffers, int maxFramebuffers, int* numFramebuffers)
      {
        GL.Delegates.glExtGetFramebuffersQCOM((uint*) framebuffers, maxFramebuffers, numFramebuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetFramebuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetFramebuffers(uint[] framebuffers, int maxFramebuffers, int[] numFramebuffers)
      {
        fixed (uint* framebuffers1 = framebuffers)
          fixed (int* numFramebuffers1 = numFramebuffers)
            GL.Delegates.glExtGetFramebuffersQCOM(framebuffers1, maxFramebuffers, numFramebuffers1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetFramebuffersQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetFramebuffers(ref uint framebuffers, int maxFramebuffers, ref int numFramebuffers)
      {
        fixed (uint* framebuffers1 = &framebuffers)
          fixed (int* numFramebuffers1 = &numFramebuffers)
            GL.Delegates.glExtGetFramebuffersQCOM(framebuffers1, maxFramebuffers, numFramebuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetFramebuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetFramebuffers(uint* framebuffers, int maxFramebuffers, int* numFramebuffers)
      {
        GL.Delegates.glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramBinarySourceQCOM", Version = "2.0")]
      public static unsafe void ExtGetProgramBinarySource(int program, All shadertype, string source, int[] length)
      {
        fixed (int* length1 = length)
          GL.Delegates.glExtGetProgramBinarySourceQCOM((uint) program, shadertype, source, length1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramBinarySourceQCOM", Version = "2.0")]
      public static unsafe void ExtGetProgramBinarySource(int program, All shadertype, string source, ref int length)
      {
        fixed (int* length1 = &length)
          GL.Delegates.glExtGetProgramBinarySourceQCOM((uint) program, shadertype, source, length1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramBinarySourceQCOM", Version = "2.0")]
      public static unsafe void ExtGetProgramBinarySource(int program, All shadertype, string source, int* length)
      {
        GL.Delegates.glExtGetProgramBinarySourceQCOM((uint) program, shadertype, source, length);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramBinarySourceQCOM", Version = "2.0")]
      public static unsafe void ExtGetProgramBinarySource(uint program, All shadertype, string source, int[] length)
      {
        fixed (int* length1 = length)
          GL.Delegates.glExtGetProgramBinarySourceQCOM(program, shadertype, source, length1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramBinarySourceQCOM", Version = "2.0")]
      public static unsafe void ExtGetProgramBinarySource(uint program, All shadertype, string source, ref int length)
      {
        fixed (int* length1 = &length)
          GL.Delegates.glExtGetProgramBinarySourceQCOM(program, shadertype, source, length1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramBinarySourceQCOM", Version = "2.0")]
      public static unsafe void ExtGetProgramBinarySource(uint program, All shadertype, string source, int* length)
      {
        GL.Delegates.glExtGetProgramBinarySourceQCOM(program, shadertype, source, length);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramsQCOM", Version = "2.0")]
      public static unsafe void ExtGetProgram(int[] programs, int maxPrograms, int[] numPrograms)
      {
        fixed (int* numPtr = programs)
          fixed (int* numPrograms1 = numPrograms)
            GL.Delegates.glExtGetProgramsQCOM((uint*) numPtr, maxPrograms, numPrograms1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramsQCOM", Version = "2.0")]
      public static unsafe void ExtGetProgram(ref int programs, int maxPrograms, ref int numPrograms)
      {
        fixed (int* numPtr = &programs)
          fixed (int* numPrograms1 = &numPrograms)
            GL.Delegates.glExtGetProgramsQCOM((uint*) numPtr, maxPrograms, numPrograms1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramsQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetProgram(int* programs, int maxPrograms, int* numPrograms)
      {
        GL.Delegates.glExtGetProgramsQCOM((uint*) programs, maxPrograms, numPrograms);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramsQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetProgram(uint[] programs, int maxPrograms, int[] numPrograms)
      {
        fixed (uint* programs1 = programs)
          fixed (int* numPrograms1 = numPrograms)
            GL.Delegates.glExtGetProgramsQCOM(programs1, maxPrograms, numPrograms1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramsQCOM", Version = "2.0")]
      public static unsafe void ExtGetProgram(ref uint programs, int maxPrograms, ref int numPrograms)
      {
        fixed (uint* programs1 = &programs)
          fixed (int* numPrograms1 = &numPrograms)
            GL.Delegates.glExtGetProgramsQCOM(programs1, maxPrograms, numPrograms1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetProgramsQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetProgram(uint* programs, int maxPrograms, int* numPrograms)
      {
        GL.Delegates.glExtGetProgramsQCOM(programs, maxPrograms, numPrograms);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetRenderbuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetRenderbuffers(int[] renderbuffers, int maxRenderbuffers, int[] numRenderbuffers)
      {
        fixed (int* numPtr = renderbuffers)
          fixed (int* numRenderbuffers1 = numRenderbuffers)
            GL.Delegates.glExtGetRenderbuffersQCOM((uint*) numPtr, maxRenderbuffers, numRenderbuffers1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetRenderbuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetRenderbuffers(ref int renderbuffers, int maxRenderbuffers, ref int numRenderbuffers)
      {
        fixed (int* numPtr = &renderbuffers)
          fixed (int* numRenderbuffers1 = &numRenderbuffers)
            GL.Delegates.glExtGetRenderbuffersQCOM((uint*) numPtr, maxRenderbuffers, numRenderbuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetRenderbuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetRenderbuffers(int* renderbuffers, int maxRenderbuffers, int* numRenderbuffers)
      {
        GL.Delegates.glExtGetRenderbuffersQCOM((uint*) renderbuffers, maxRenderbuffers, numRenderbuffers);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetRenderbuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetRenderbuffers(uint[] renderbuffers, int maxRenderbuffers, int[] numRenderbuffers)
      {
        fixed (uint* renderbuffers1 = renderbuffers)
          fixed (int* numRenderbuffers1 = numRenderbuffers)
            GL.Delegates.glExtGetRenderbuffersQCOM(renderbuffers1, maxRenderbuffers, numRenderbuffers1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetRenderbuffersQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetRenderbuffers(ref uint renderbuffers, int maxRenderbuffers, ref int numRenderbuffers)
      {
        fixed (uint* renderbuffers1 = &renderbuffers)
          fixed (int* numRenderbuffers1 = &numRenderbuffers)
            GL.Delegates.glExtGetRenderbuffersQCOM(renderbuffers1, maxRenderbuffers, numRenderbuffers1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetRenderbuffersQCOM", Version = "2.0")]
      public static unsafe void ExtGetRenderbuffers(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers)
      {
        GL.Delegates.glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetShadersQCOM", Version = "2.0")]
      public static unsafe void ExtGetShaders(int[] shaders, int maxShaders, int[] numShaders)
      {
        fixed (int* numPtr = shaders)
          fixed (int* numShaders1 = numShaders)
            GL.Delegates.glExtGetShadersQCOM((uint*) numPtr, maxShaders, numShaders1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetShadersQCOM", Version = "2.0")]
      public static unsafe void ExtGetShaders(ref int shaders, int maxShaders, ref int numShaders)
      {
        fixed (int* numPtr = &shaders)
          fixed (int* numShaders1 = &numShaders)
            GL.Delegates.glExtGetShadersQCOM((uint*) numPtr, maxShaders, numShaders1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetShadersQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetShaders(int* shaders, int maxShaders, int* numShaders)
      {
        GL.Delegates.glExtGetShadersQCOM((uint*) shaders, maxShaders, numShaders);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetShadersQCOM", Version = "2.0")]
      public static unsafe void ExtGetShaders(uint[] shaders, int maxShaders, int[] numShaders)
      {
        fixed (uint* shaders1 = shaders)
          fixed (int* numShaders1 = numShaders)
            GL.Delegates.glExtGetShadersQCOM(shaders1, maxShaders, numShaders1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetShadersQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetShaders(ref uint shaders, int maxShaders, ref int numShaders)
      {
        fixed (uint* shaders1 = &shaders)
          fixed (int* numShaders1 = &numShaders)
            GL.Delegates.glExtGetShadersQCOM(shaders1, maxShaders, numShaders1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetShadersQCOM", Version = "2.0")]
      public static unsafe void ExtGetShaders(uint* shaders, int maxShaders, int* numShaders)
      {
        GL.Delegates.glExtGetShadersQCOM(shaders, maxShaders, numShaders);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexLevelParameterivQCOM", Version = "2.0")]
      public static unsafe void ExtGetTexLevelParameter(int texture, All face, int level, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glExtGetTexLevelParameterivQCOM((uint) texture, face, level, pname, params1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexLevelParameterivQCOM", Version = "2.0")]
      public static unsafe void ExtGetTexLevelParameter(int texture, All face, int level, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glExtGetTexLevelParameterivQCOM((uint) texture, face, level, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexLevelParameterivQCOM", Version = "2.0")]
      public static unsafe void ExtGetTexLevelParameter(int texture, All face, int level, All pname, int* @params)
      {
        GL.Delegates.glExtGetTexLevelParameterivQCOM((uint) texture, face, level, pname, @params);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexLevelParameterivQCOM", Version = "2.0")]
      public static unsafe void ExtGetTexLevelParameter(uint texture, All face, int level, All pname, int[] @params)
      {
        fixed (int* params1 = @params)
          GL.Delegates.glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexLevelParameterivQCOM", Version = "2.0")]
      public static unsafe void ExtGetTexLevelParameter(uint texture, All face, int level, All pname, ref int @params)
      {
        fixed (int* params1 = &@params)
          GL.Delegates.glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexLevelParameterivQCOM", Version = "2.0")]
      public static unsafe void ExtGetTexLevelParameter(uint texture, All face, int level, All pname, int* @params)
      {
        GL.Delegates.glExtGetTexLevelParameterivQCOM(texture, face, level, pname, @params);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexSubImageQCOM", Version = "2.0")]
      public static void ExtGetTexSubImage(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, IntPtr texels)
      {
        GL.Delegates.glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexSubImageQCOM", Version = "2.0")]
      public static void ExtGetTexSubImage<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In, Out] T10[] texels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) texels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexSubImageQCOM", Version = "2.0")]
      public static void ExtGetTexSubImage<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In, Out] T10[,] texels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) texels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexSubImageQCOM", Version = "2.0")]
      public static void ExtGetTexSubImage<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In, Out] T10[,,] texels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) texels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexSubImageQCOM", Version = "2.0")]
      public static void ExtGetTexSubImage<T10>(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, [In, Out] ref T10 texels) where T10 : struct
      {
        GCHandle gcHandle = GCHandle.Alloc((object) texels, GCHandleType.Pinned);
        try
        {
          GL.Delegates.glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, gcHandle.AddrOfPinnedObject());
          texels = (T10) gcHandle.Target;
        }
        finally
        {
          gcHandle.Free();
        }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexturesQCOM", Version = "2.0")]
      public static unsafe void ExtGetTextures(int[] textures, int maxTextures, int[] numTextures)
      {
        fixed (int* numPtr = textures)
          fixed (int* numTextures1 = numTextures)
            GL.Delegates.glExtGetTexturesQCOM((uint*) numPtr, maxTextures, numTextures1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexturesQCOM", Version = "2.0")]
      public static unsafe void ExtGetTextures(ref int textures, int maxTextures, ref int numTextures)
      {
        fixed (int* numPtr = &textures)
          fixed (int* numTextures1 = &numTextures)
            GL.Delegates.glExtGetTexturesQCOM((uint*) numPtr, maxTextures, numTextures1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexturesQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetTextures(int* textures, int maxTextures, int* numTextures)
      {
        GL.Delegates.glExtGetTexturesQCOM((uint*) textures, maxTextures, numTextures);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexturesQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetTextures(uint[] textures, int maxTextures, int[] numTextures)
      {
        fixed (uint* textures1 = textures)
          fixed (int* numTextures1 = numTextures)
            GL.Delegates.glExtGetTexturesQCOM(textures1, maxTextures, numTextures1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexturesQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void ExtGetTextures(ref uint textures, int maxTextures, ref int numTextures)
      {
        fixed (uint* textures1 = &textures)
          fixed (int* numTextures1 = &numTextures)
            GL.Delegates.glExtGetTexturesQCOM(textures1, maxTextures, numTextures1);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtGetTexturesQCOM", Version = "2.0")]
      public static unsafe void ExtGetTextures(uint* textures, int maxTextures, int* numTextures)
      {
        GL.Delegates.glExtGetTexturesQCOM(textures, maxTextures, numTextures);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtIsProgramBinaryQCOM", Version = "2.0")]
      public static bool ExtIsProgramBinary(int program)
      {
        return GL.Delegates.glExtIsProgramBinaryQCOM((uint) program);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glExtIsProgramBinaryQCOM", Version = "2.0")]
      public static bool ExtIsProgramBinary(uint program)
      {
        return GL.Delegates.glExtIsProgramBinaryQCOM(program);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glExtTexObjectStateOverrideiQCOM", Version = "2.0")]
      public static void ExtTexObjectStateOverride(All target, All pname, int param)
      {
        GL.Delegates.glExtTexObjectStateOverrideiQCOM(target, pname, param);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlsQCOM", Version = "2.0")]
      public static unsafe void GetDriverControl([Out] int[] num, int size, [Out] int[] driverControls)
      {
        fixed (int* num1 = num)
          fixed (int* numPtr = driverControls)
            GL.Delegates.glGetDriverControlsQCOM(num1, size, (uint*) numPtr);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlsQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetDriverControl([Out] int[] num, int size, [Out] uint[] driverControls)
      {
        fixed (int* num1 = num)
          fixed (uint* driverControls1 = driverControls)
            GL.Delegates.glGetDriverControlsQCOM(num1, size, driverControls1);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlsQCOM", Version = "2.0")]
      public static unsafe void GetDriverControl(out int num, int size, out int driverControls)
      {
        fixed (int* num1 = &num)
          fixed (int* numPtr = &driverControls)
          {
            GL.Delegates.glGetDriverControlsQCOM(num1, size, (uint*) numPtr);
            num = *num1;
            driverControls = *numPtr;
          }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlsQCOM", Version = "2.0")]
      public static unsafe void GetDriverControl(out int num, int size, out uint driverControls)
      {
        fixed (int* num1 = &num)
          fixed (uint* driverControls1 = &driverControls)
          {
            GL.Delegates.glGetDriverControlsQCOM(num1, size, driverControls1);
            num = *num1;
            driverControls = *driverControls1;
          }
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlsQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetDriverControl([Out] int* num, int size, [Out] int* driverControls)
      {
        GL.Delegates.glGetDriverControlsQCOM(num, size, (uint*) driverControls);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlsQCOM", Version = "2.0")]
      public static unsafe void GetDriverControl([Out] int* num, int size, [Out] uint* driverControls)
      {
        GL.Delegates.glGetDriverControlsQCOM(num, size, driverControls);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlStringQCOM", Version = "2.0")]
      public static unsafe void GetDriverControlString(int driverControl, int bufSize, [Out] int[] length, [Out] StringBuilder driverControlString)
      {
        fixed (int* length1 = length)
          GL.Delegates.glGetDriverControlStringQCOM((uint) driverControl, bufSize, length1, driverControlString);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlStringQCOM", Version = "2.0")]
      public static unsafe void GetDriverControlString(int driverControl, int bufSize, out int length, [Out] StringBuilder driverControlString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetDriverControlStringQCOM((uint) driverControl, bufSize, length1, driverControlString);
          length = *length1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlStringQCOM", Version = "2.0")]
      public static unsafe void GetDriverControlString(int driverControl, int bufSize, [Out] int* length, [Out] StringBuilder driverControlString)
      {
        GL.Delegates.glGetDriverControlStringQCOM((uint) driverControl, bufSize, length, driverControlString);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlStringQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static unsafe void GetDriverControlString(uint driverControl, int bufSize, [Out] int[] length, [Out] StringBuilder driverControlString)
      {
        fixed (int* length1 = length)
          GL.Delegates.glGetDriverControlStringQCOM(driverControl, bufSize, length1, driverControlString);
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlStringQCOM", Version = "2.0")]
      public static unsafe void GetDriverControlString(uint driverControl, int bufSize, out int length, [Out] StringBuilder driverControlString)
      {
        fixed (int* length1 = &length)
        {
          GL.Delegates.glGetDriverControlStringQCOM(driverControl, bufSize, length1, driverControlString);
          length = *length1;
        }
      }

      [CLSCompliant(false)]
      [AutoGenerated(Category = "2.0", EntryPoint = "glGetDriverControlStringQCOM", Version = "2.0")]
      public static unsafe void GetDriverControlString(uint driverControl, int bufSize, [Out] int* length, [Out] StringBuilder driverControlString)
      {
        GL.Delegates.glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glStartTilingQCOM", Version = "2.0")]
      public static void StartTiling(int x, int y, int width, int height, int preserveMask)
      {
        GL.Delegates.glStartTilingQCOM((uint) x, (uint) y, (uint) width, (uint) height, (uint) preserveMask);
      }

      [AutoGenerated(Category = "2.0", EntryPoint = "glStartTilingQCOM", Version = "2.0")]
      [CLSCompliant(false)]
      public static void StartTiling(uint x, uint y, uint width, uint height, uint preserveMask)
      {
        GL.Delegates.glStartTilingQCOM(x, y, width, height, preserveMask);
      }
    }

    internal static class Core
    {
      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glActiveTexture")]
      internal static void ActiveTexture(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glAttachShader")]
      internal static void AttachShader(uint program, uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBeginPerfMonitorAMD")]
      internal static void BeginPerfMonitorAMD(uint monitor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBindAttribLocation")]
      internal static void BindAttribLocation(uint program, uint index, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBindBuffer")]
      internal static void BindBuffer(BufferTarget target, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBindFramebuffer")]
      internal static void BindFramebuffer(FramebufferTarget target, uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBindRenderbuffer")]
      internal static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBindTexture")]
      internal static void BindTexture(TextureTarget target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBindVertexArrayOES")]
      internal static void BindVertexArrayOES(uint array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBlendColor")]
      internal static void BlendColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBlendEquation")]
      internal static void BlendEquation(BlendEquationMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBlendEquationSeparate")]
      internal static void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBlendFunc")]
      internal static void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBlendFuncSeparate")]
      internal static void BlendFuncSeparate(BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBlitFramebufferANGLE")]
      internal static void BlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, All filter);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBufferData")]
      internal static void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsage usage);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glBufferSubData")]
      internal static void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCheckFramebufferStatus")]
      internal static FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glClear")]
      internal static void Clear(ClearBufferMask mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glClearColor")]
      internal static void ClearColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glClearDepthf")]
      internal static void ClearDepthf(float depth);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glClearStencil")]
      internal static void ClearStencil(int s);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glColorMask")]
      internal static void ColorMask(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCompileShader")]
      internal static void CompileShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCompressedTexImage2D")]
      internal static void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCompressedTexImage3DOES")]
      internal static void CompressedTexImage3DOES(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCompressedTexSubImage2D")]
      internal static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCompressedTexSubImage3DOES")]
      internal static void CompressedTexSubImage3DOES(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCopyTexImage2D")]
      internal static void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCopyTexSubImage2D")]
      internal static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCopyTexSubImage3DOES")]
      internal static void CopyTexSubImage3DOES(All target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCoverageMaskNV")]
      internal static void CoverageMaskNV(bool mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCoverageOperationNV")]
      internal static void CoverageOperationNV(All operation);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCreateProgram")]
      internal static int CreateProgram();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCreateShader")]
      internal static int CreateShader(ShaderType type);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glCullFace")]
      internal static void CullFace(CullFaceMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDeleteBuffers")]
      internal static void DeleteBuffers(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDeleteFencesNV")]
      internal static void DeleteFencesNV(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDeleteFramebuffers")]
      internal static void DeleteFramebuffers(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDeletePerfMonitorsAMD")]
      internal static void DeletePerfMonitorsAMD(int n, uint* monitors);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDeleteProgram")]
      internal static void DeleteProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDeleteRenderbuffers")]
      internal static void DeleteRenderbuffers(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDeleteShader")]
      internal static void DeleteShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDeleteTextures")]
      internal static void DeleteTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDeleteVertexArraysOES")]
      internal static void DeleteVertexArraysOES(int n, uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDepthFunc")]
      internal static void DepthFunc(DepthFunction func);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDepthMask")]
      internal static void DepthMask(bool flag);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDepthRangef")]
      internal static void DepthRangef(float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDetachShader")]
      internal static void DetachShader(uint program, uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDisable")]
      internal static void Disable(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDisableDriverControlQCOM")]
      internal static void DisableDriverControlQCOM(uint driverControl);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDisableVertexAttribArray")]
      internal static void DisableVertexAttribArray(uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDiscardFramebufferEXT")]
      internal static void DiscardFramebufferEXT(All target, int numAttachments, All* attachments);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDrawArrays")]
      internal static void DrawArrays(BeginMode mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glDrawElements")]
      internal static void DrawElements(BeginMode mode, int count, DrawElementsType type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glEGLImageTargetRenderbufferStorageOES")]
      internal static void EGLImageTargetRenderbufferStorageOES(All target, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glEGLImageTargetTexture2DOES")]
      internal static void EGLImageTargetTexture2DOES(All target, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glEnable")]
      internal static void Enable(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glEnableDriverControlQCOM")]
      internal static void EnableDriverControlQCOM(uint driverControl);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glEnableVertexAttribArray")]
      internal static void EnableVertexAttribArray(uint index);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glEndPerfMonitorAMD")]
      internal static void EndPerfMonitorAMD(uint monitor);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glEndTilingQCOM")]
      internal static void EndTilingQCOM(uint preserveMask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetBufferPointervQCOM")]
      internal static void ExtGetBufferPointervQCOM(All target, IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetBuffersQCOM")]
      internal static void ExtGetBuffersQCOM(uint* buffers, int maxBuffers, int* numBuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetFramebuffersQCOM")]
      internal static void ExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, int* numFramebuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetProgramBinarySourceQCOM")]
      internal static void ExtGetProgramBinarySourceQCOM(uint program, All shadertype, string source, int* length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetProgramsQCOM")]
      internal static void ExtGetProgramsQCOM(uint* programs, int maxPrograms, int* numPrograms);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetRenderbuffersQCOM")]
      internal static void ExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetShadersQCOM")]
      internal static void ExtGetShadersQCOM(uint* shaders, int maxShaders, int* numShaders);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetTexLevelParameterivQCOM")]
      internal static void ExtGetTexLevelParameterivQCOM(uint texture, All face, int level, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetTexSubImageQCOM")]
      internal static void ExtGetTexSubImageQCOM(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, IntPtr texels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtGetTexturesQCOM")]
      internal static void ExtGetTexturesQCOM(uint* textures, int maxTextures, int* numTextures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtIsProgramBinaryQCOM")]
      internal static bool ExtIsProgramBinaryQCOM(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glExtTexObjectStateOverrideiQCOM")]
      internal static void ExtTexObjectStateOverrideiQCOM(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glFinish")]
      internal static void Finish();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glFinishFenceNV")]
      internal static void FinishFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glFlush")]
      internal static void Flush();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glFramebufferRenderbuffer")]
      internal static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferSlot attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glFramebufferTexture2D")]
      internal static void FramebufferTexture2D(FramebufferTarget target, FramebufferSlot attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glFramebufferTexture2DMultisampleIMG")]
      internal static void FramebufferTexture2DMultisampleIMG();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glFramebufferTexture3DOES")]
      internal static void FramebufferTexture3DOES(All target, All attachment, All textarget, uint texture, int level, int zoffset);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glFrontFace")]
      internal static void FrontFace(FrontFaceDirection mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGenBuffers")]
      internal static void GenBuffers(int n, [Out] uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGenerateMipmap")]
      internal static void GenerateMipmap(TextureTarget target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGenFencesNV")]
      internal static void GenFencesNV(int n, [Out] uint* fences);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGenFramebuffers")]
      internal static void GenFramebuffers(int n, [Out] uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGenPerfMonitorsAMD")]
      internal static void GenPerfMonitorsAMD(int n, [Out] uint* monitors);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGenRenderbuffers")]
      internal static void GenRenderbuffers(int n, [Out] uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGenTextures")]
      internal static void GenTextures(int n, [Out] uint* textures);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGenVertexArraysOES")]
      internal static void GenVertexArraysOES(int n, [Out] uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetActiveAttrib")]
      internal static void GetActiveAttrib(uint program, uint index, int bufsize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetActiveUniform")]
      internal static void GetActiveUniform(uint program, uint index, int bufsize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetAttachedShaders")]
      internal static void GetAttachedShaders(uint program, int maxcount, [Out] int* count, [Out] uint* shaders);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetAttribLocation")]
      internal static int GetAttribLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetBooleanv")]
      internal static void GetBooleanv(GetPName pname, [Out] bool* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetBufferParameteriv")]
      internal static void GetBufferParameteriv(BufferTarget target, BufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetBufferPointervOES")]
      internal static void GetBufferPointervOES(All target, All pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetDriverControlsQCOM")]
      internal static void GetDriverControlsQCOM([Out] int* num, int size, [Out] uint* driverControls);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetDriverControlStringQCOM")]
      internal static void GetDriverControlStringQCOM(uint driverControl, int bufSize, [Out] int* length, [Out] StringBuilder driverControlString);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetError")]
      internal static ErrorCode GetError();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetFenceivNV")]
      internal static void GetFenceivNV(uint fence, All pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetFloatv")]
      internal static void GetFloatv(GetPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
      internal static void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferSlot attachment, FramebufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetIntegerv")]
      internal static void GetIntegerv(GetPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
      internal static void GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, [Out] uint* data, [Out] int* bytesWritten);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
      internal static void GetPerfMonitorCounterInfoAMD(uint group, uint counter, All pname, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetPerfMonitorCountersAMD")]
      internal static void GetPerfMonitorCountersAMD(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint* counters);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
      internal static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetPerfMonitorGroupsAMD")]
      internal static void GetPerfMonitorGroupsAMD([Out] int* numGroups, int groupsSize, [Out] uint* groups);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
      internal static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, [Out] int* length, [Out] StringBuilder groupString);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetProgramBinaryOES")]
      internal static void GetProgramBinaryOES(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [Out] IntPtr binary);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetProgramInfoLog")]
      internal static void GetProgramInfoLog(uint program, int bufsize, [Out] int* length, [Out] StringBuilder infolog);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetProgramiv")]
      internal static void GetProgramiv(uint program, ProgramParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetRenderbufferParameteriv")]
      internal static void GetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetShaderInfoLog")]
      internal static void GetShaderInfoLog(uint shader, int bufsize, [Out] int* length, [Out] StringBuilder infolog);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetShaderiv")]
      internal static void GetShaderiv(uint shader, ShaderParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetShaderPrecisionFormat")]
      internal static void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int* range, [Out] int* precision);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetShaderSource")]
      internal static void GetShaderSource(uint shader, int bufsize, [Out] int* length, [Out] StringBuilder source);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetString")]
      internal static IntPtr GetString(StringName name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetTexParameterfv")]
      internal static void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetTexParameteriv")]
      internal static void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetUniformfv")]
      internal static void GetUniformfv(uint program, int location, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetUniformiv")]
      internal static void GetUniformiv(uint program, int location, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetUniformLocation")]
      internal static int GetUniformLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetVertexAttribfv")]
      internal static void GetVertexAttribfv(uint index, VertexAttribParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetVertexAttribiv")]
      internal static void GetVertexAttribiv(uint index, VertexAttribParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glGetVertexAttribPointerv")]
      internal static void GetVertexAttribPointerv(uint index, VertexAttribPointerParameter pname, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glHint")]
      internal static void Hint(HintTarget target, HintMode mode);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glIsBuffer")]
      internal static bool IsBuffer(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glIsEnabled")]
      internal static bool IsEnabled(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glIsFenceNV")]
      internal static bool IsFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glIsFramebuffer")]
      internal static bool IsFramebuffer(uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glIsProgram")]
      internal static bool IsProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glIsRenderbuffer")]
      internal static bool IsRenderbuffer(uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glIsShader")]
      internal static bool IsShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glIsTexture")]
      internal static bool IsTexture(uint texture);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glIsVertexArrayOES")]
      internal static bool IsVertexArrayOES(uint array);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glLineWidth")]
      internal static void LineWidth(float width);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glLinkProgram")]
      internal static void LinkProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glMapBufferOES")]
      internal static IntPtr MapBufferOES(All target, All access);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glMultiDrawArraysEXT")]
      internal static void MultiDrawArraysEXT(All mode, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glMultiDrawElementsEXT")]
      internal static void MultiDrawElementsEXT(All mode, int* first, All type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glPixelStorei")]
      internal static void PixelStorei(PixelStoreParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glPolygonOffset")]
      internal static void PolygonOffset(float factor, float units);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glProgramBinaryOES")]
      internal static void ProgramBinaryOES(uint program, All binaryFormat, IntPtr binary, int length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glReadPixels")]
      internal static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glReleaseShaderCompiler")]
      internal static void ReleaseShaderCompiler();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glRenderbufferStorage")]
      internal static void RenderbufferStorage(RenderbufferTarget target, RenderbufferInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glRenderbufferStorageMultisampleANGLE")]
      internal static void RenderbufferStorageMultisampleANGLE(All target, int samples, All internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glRenderbufferStorageMultisampleAPPLE")]
      internal static void RenderbufferStorageMultisampleAPPLE();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glRenderbufferStorageMultisampleIMG")]
      internal static void RenderbufferStorageMultisampleIMG();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glResolveMultisampleFramebufferAPPLE")]
      internal static void ResolveMultisampleFramebufferAPPLE();

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glSampleCoverage")]
      internal static void SampleCoverage(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glScissor")]
      internal static void Scissor(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glSelectPerfMonitorCountersAMD")]
      internal static void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, uint* countersList);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glSetFenceNV")]
      internal static void SetFenceNV(uint fence, All condition);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glShaderBinary")]
      internal static void ShaderBinary(int n, uint* shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glShaderSource")]
      internal static void ShaderSource(uint shader, int count, string[] @string, int* length);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glStartTilingQCOM")]
      internal static void StartTilingQCOM(uint x, uint y, uint width, uint height, uint preserveMask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glStencilFunc")]
      internal static void StencilFunc(StencilFunction func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glStencilFuncSeparate")]
      internal static void StencilFuncSeparate(CullFaceMode face, StencilFunction func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glStencilMask")]
      internal static void StencilMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glStencilMaskSeparate")]
      internal static void StencilMaskSeparate(CullFaceMode face, uint mask);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glStencilOp")]
      internal static void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glStencilOpSeparate")]
      internal static void StencilOpSeparate(CullFaceMode face, StencilOp fail, StencilOp zfail, StencilOp zpass);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glTestFenceNV")]
      internal static bool TestFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glTexImage2D")]
      internal static void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glTexImage3DOES")]
      internal static void TexImage3DOES(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glTexParameterf")]
      internal static void TexParameterf(TextureTarget target, TextureParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glTexParameterfv")]
      internal static void TexParameterfv(TextureTarget target, TextureParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glTexParameteri")]
      internal static void TexParameteri(TextureTarget target, TextureParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glTexParameteriv")]
      internal static void TexParameteriv(TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glTexSubImage2D")]
      internal static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glTexSubImage3DOES")]
      internal static void TexSubImage3DOES(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform1f")]
      internal static void Uniform1f(int location, float x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform1fv")]
      internal static void Uniform1fv(int location, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform1i")]
      internal static void Uniform1i(int location, int x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform1iv")]
      internal static void Uniform1iv(int location, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform2f")]
      internal static void Uniform2f(int location, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform2fv")]
      internal static void Uniform2fv(int location, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform2i")]
      internal static void Uniform2i(int location, int x, int y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform2iv")]
      internal static void Uniform2iv(int location, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform3f")]
      internal static void Uniform3f(int location, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform3fv")]
      internal static void Uniform3fv(int location, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform3i")]
      internal static void Uniform3i(int location, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform3iv")]
      internal static void Uniform3iv(int location, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform4f")]
      internal static void Uniform4f(int location, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform4fv")]
      internal static void Uniform4fv(int location, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform4i")]
      internal static void Uniform4i(int location, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniform4iv")]
      internal static void Uniform4iv(int location, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniformMatrix2fv")]
      internal static void UniformMatrix2fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniformMatrix3fv")]
      internal static void UniformMatrix3fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUniformMatrix4fv")]
      internal static void UniformMatrix4fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUnmapBufferOES")]
      internal static bool UnmapBufferOES(All target);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glUseProgram")]
      internal static void UseProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glValidateProgram")]
      internal static void ValidateProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glVertexAttrib1f")]
      internal static void VertexAttrib1f(uint indx, float x);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glVertexAttrib1fv")]
      internal static void VertexAttrib1fv(uint indx, float* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glVertexAttrib2f")]
      internal static void VertexAttrib2f(uint indx, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glVertexAttrib2fv")]
      internal static void VertexAttrib2fv(uint indx, float* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glVertexAttrib3f")]
      internal static void VertexAttrib3f(uint indx, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glVertexAttrib3fv")]
      internal static void VertexAttrib3fv(uint indx, float* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glVertexAttrib4f")]
      internal static void VertexAttrib4f(uint indx, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glVertexAttrib4fv")]
      internal static void VertexAttrib4fv(uint indx, float* values);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glVertexAttribPointer")]
      internal static void VertexAttribPointer(uint indx, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr ptr);

      [SuppressUnmanagedCodeSecurity]
      [DllImport("libGLESv2.dll", EntryPoint = "glViewport")]
      internal static void Viewport(int x, int y, int width, int height);
    }

    internal static class Delegates
    {
      internal static GL.Delegates.ActiveTexture glActiveTexture;
      internal static GL.Delegates.AttachShader glAttachShader;
      internal static GL.Delegates.BeginPerfMonitorAMD glBeginPerfMonitorAMD;
      internal static GL.Delegates.BindAttribLocation glBindAttribLocation;
      internal static GL.Delegates.BindBuffer glBindBuffer;
      internal static GL.Delegates.BindFramebuffer glBindFramebuffer;
      internal static GL.Delegates.BindRenderbuffer glBindRenderbuffer;
      internal static GL.Delegates.BindTexture glBindTexture;
      internal static GL.Delegates.BindVertexArrayOES glBindVertexArrayOES;
      internal static GL.Delegates.BlendColor glBlendColor;
      internal static GL.Delegates.BlendEquation glBlendEquation;
      internal static GL.Delegates.BlendEquationSeparate glBlendEquationSeparate;
      internal static GL.Delegates.BlendFunc glBlendFunc;
      internal static GL.Delegates.BlendFuncSeparate glBlendFuncSeparate;
      internal static GL.Delegates.BlitFramebufferANGLE glBlitFramebufferANGLE;
      internal static GL.Delegates.BufferData glBufferData;
      internal static GL.Delegates.BufferSubData glBufferSubData;
      internal static GL.Delegates.CheckFramebufferStatus glCheckFramebufferStatus;
      internal static GL.Delegates.Clear glClear;
      internal static GL.Delegates.ClearColor glClearColor;
      internal static GL.Delegates.ClearDepthf glClearDepthf;
      internal static GL.Delegates.ClearStencil glClearStencil;
      internal static GL.Delegates.ColorMask glColorMask;
      internal static GL.Delegates.CompileShader glCompileShader;
      internal static GL.Delegates.CompressedTexImage2D glCompressedTexImage2D;
      internal static GL.Delegates.CompressedTexImage3DOES glCompressedTexImage3DOES;
      internal static GL.Delegates.CompressedTexSubImage2D glCompressedTexSubImage2D;
      internal static GL.Delegates.CompressedTexSubImage3DOES glCompressedTexSubImage3DOES;
      internal static GL.Delegates.CopyTexImage2D glCopyTexImage2D;
      internal static GL.Delegates.CopyTexSubImage2D glCopyTexSubImage2D;
      internal static GL.Delegates.CopyTexSubImage3DOES glCopyTexSubImage3DOES;
      internal static GL.Delegates.CoverageMaskNV glCoverageMaskNV;
      internal static GL.Delegates.CoverageOperationNV glCoverageOperationNV;
      internal static GL.Delegates.CreateProgram glCreateProgram;
      internal static GL.Delegates.CreateShader glCreateShader;
      internal static GL.Delegates.CullFace glCullFace;
      internal static GL.Delegates.DeleteBuffers glDeleteBuffers;
      internal static GL.Delegates.DeleteFencesNV glDeleteFencesNV;
      internal static GL.Delegates.DeleteFramebuffers glDeleteFramebuffers;
      internal static GL.Delegates.DeletePerfMonitorsAMD glDeletePerfMonitorsAMD;
      internal static GL.Delegates.DeleteProgram glDeleteProgram;
      internal static GL.Delegates.DeleteRenderbuffers glDeleteRenderbuffers;
      internal static GL.Delegates.DeleteShader glDeleteShader;
      internal static GL.Delegates.DeleteTextures glDeleteTextures;
      internal static GL.Delegates.DeleteVertexArraysOES glDeleteVertexArraysOES;
      internal static GL.Delegates.DepthFunc glDepthFunc;
      internal static GL.Delegates.DepthMask glDepthMask;
      internal static GL.Delegates.DepthRangef glDepthRangef;
      internal static GL.Delegates.DetachShader glDetachShader;
      internal static GL.Delegates.Disable glDisable;
      internal static GL.Delegates.DisableDriverControlQCOM glDisableDriverControlQCOM;
      internal static GL.Delegates.DisableVertexAttribArray glDisableVertexAttribArray;
      internal static GL.Delegates.DiscardFramebufferEXT glDiscardFramebufferEXT;
      internal static GL.Delegates.DrawArrays glDrawArrays;
      internal static GL.Delegates.DrawElements glDrawElements;
      internal static GL.Delegates.EGLImageTargetRenderbufferStorageOES glEGLImageTargetRenderbufferStorageOES;
      internal static GL.Delegates.EGLImageTargetTexture2DOES glEGLImageTargetTexture2DOES;
      internal static GL.Delegates.Enable glEnable;
      internal static GL.Delegates.EnableDriverControlQCOM glEnableDriverControlQCOM;
      internal static GL.Delegates.EnableVertexAttribArray glEnableVertexAttribArray;
      internal static GL.Delegates.EndPerfMonitorAMD glEndPerfMonitorAMD;
      internal static GL.Delegates.EndTilingQCOM glEndTilingQCOM;
      internal static GL.Delegates.ExtGetBufferPointervQCOM glExtGetBufferPointervQCOM;
      internal static GL.Delegates.ExtGetBuffersQCOM glExtGetBuffersQCOM;
      internal static GL.Delegates.ExtGetFramebuffersQCOM glExtGetFramebuffersQCOM;
      internal static GL.Delegates.ExtGetProgramBinarySourceQCOM glExtGetProgramBinarySourceQCOM;
      internal static GL.Delegates.ExtGetProgramsQCOM glExtGetProgramsQCOM;
      internal static GL.Delegates.ExtGetRenderbuffersQCOM glExtGetRenderbuffersQCOM;
      internal static GL.Delegates.ExtGetShadersQCOM glExtGetShadersQCOM;
      internal static GL.Delegates.ExtGetTexLevelParameterivQCOM glExtGetTexLevelParameterivQCOM;
      internal static GL.Delegates.ExtGetTexSubImageQCOM glExtGetTexSubImageQCOM;
      internal static GL.Delegates.ExtGetTexturesQCOM glExtGetTexturesQCOM;
      internal static GL.Delegates.ExtIsProgramBinaryQCOM glExtIsProgramBinaryQCOM;
      internal static GL.Delegates.ExtTexObjectStateOverrideiQCOM glExtTexObjectStateOverrideiQCOM;
      internal static GL.Delegates.Finish glFinish;
      internal static GL.Delegates.FinishFenceNV glFinishFenceNV;
      internal static GL.Delegates.Flush glFlush;
      internal static GL.Delegates.FramebufferRenderbuffer glFramebufferRenderbuffer;
      internal static GL.Delegates.FramebufferTexture2D glFramebufferTexture2D;
      internal static GL.Delegates.FramebufferTexture2DMultisampleIMG glFramebufferTexture2DMultisampleIMG;
      internal static GL.Delegates.FramebufferTexture3DOES glFramebufferTexture3DOES;
      internal static GL.Delegates.FrontFace glFrontFace;
      internal static GL.Delegates.GenBuffers glGenBuffers;
      internal static GL.Delegates.GenerateMipmap glGenerateMipmap;
      internal static GL.Delegates.GenFencesNV glGenFencesNV;
      internal static GL.Delegates.GenFramebuffers glGenFramebuffers;
      internal static GL.Delegates.GenPerfMonitorsAMD glGenPerfMonitorsAMD;
      internal static GL.Delegates.GenRenderbuffers glGenRenderbuffers;
      internal static GL.Delegates.GenTextures glGenTextures;
      internal static GL.Delegates.GenVertexArraysOES glGenVertexArraysOES;
      internal static GL.Delegates.GetActiveAttrib glGetActiveAttrib;
      internal static GL.Delegates.GetActiveUniform glGetActiveUniform;
      internal static GL.Delegates.GetAttachedShaders glGetAttachedShaders;
      internal static GL.Delegates.GetAttribLocation glGetAttribLocation;
      internal static GL.Delegates.GetBooleanv glGetBooleanv;
      internal static GL.Delegates.GetBufferParameteriv glGetBufferParameteriv;
      internal static GL.Delegates.GetBufferPointervOES glGetBufferPointervOES;
      internal static GL.Delegates.GetDriverControlsQCOM glGetDriverControlsQCOM;
      internal static GL.Delegates.GetDriverControlStringQCOM glGetDriverControlStringQCOM;
      internal static GL.Delegates.GetError glGetError;
      internal static GL.Delegates.GetFenceivNV glGetFenceivNV;
      internal static GL.Delegates.GetFloatv glGetFloatv;
      internal static GL.Delegates.GetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv;
      internal static GL.Delegates.GetIntegerv glGetIntegerv;
      internal static GL.Delegates.GetPerfMonitorCounterDataAMD glGetPerfMonitorCounterDataAMD;
      internal static GL.Delegates.GetPerfMonitorCounterInfoAMD glGetPerfMonitorCounterInfoAMD;
      internal static GL.Delegates.GetPerfMonitorCountersAMD glGetPerfMonitorCountersAMD;
      internal static GL.Delegates.GetPerfMonitorCounterStringAMD glGetPerfMonitorCounterStringAMD;
      internal static GL.Delegates.GetPerfMonitorGroupsAMD glGetPerfMonitorGroupsAMD;
      internal static GL.Delegates.GetPerfMonitorGroupStringAMD glGetPerfMonitorGroupStringAMD;
      internal static GL.Delegates.GetProgramBinaryOES glGetProgramBinaryOES;
      internal static GL.Delegates.GetProgramInfoLog glGetProgramInfoLog;
      internal static GL.Delegates.GetProgramiv glGetProgramiv;
      internal static GL.Delegates.GetRenderbufferParameteriv glGetRenderbufferParameteriv;
      internal static GL.Delegates.GetShaderInfoLog glGetShaderInfoLog;
      internal static GL.Delegates.GetShaderiv glGetShaderiv;
      internal static GL.Delegates.GetShaderPrecisionFormat glGetShaderPrecisionFormat;
      internal static GL.Delegates.GetShaderSource glGetShaderSource;
      internal static GL.Delegates.GetString glGetString;
      internal static GL.Delegates.GetTexParameterfv glGetTexParameterfv;
      internal static GL.Delegates.GetTexParameteriv glGetTexParameteriv;
      internal static GL.Delegates.GetUniformfv glGetUniformfv;
      internal static GL.Delegates.GetUniformiv glGetUniformiv;
      internal static GL.Delegates.GetUniformLocation glGetUniformLocation;
      internal static GL.Delegates.GetVertexAttribfv glGetVertexAttribfv;
      internal static GL.Delegates.GetVertexAttribiv glGetVertexAttribiv;
      internal static GL.Delegates.GetVertexAttribPointerv glGetVertexAttribPointerv;
      internal static GL.Delegates.Hint glHint;
      internal static GL.Delegates.IsBuffer glIsBuffer;
      internal static GL.Delegates.IsEnabled glIsEnabled;
      internal static GL.Delegates.IsFenceNV glIsFenceNV;
      internal static GL.Delegates.IsFramebuffer glIsFramebuffer;
      internal static GL.Delegates.IsProgram glIsProgram;
      internal static GL.Delegates.IsRenderbuffer glIsRenderbuffer;
      internal static GL.Delegates.IsShader glIsShader;
      internal static GL.Delegates.IsTexture glIsTexture;
      internal static GL.Delegates.IsVertexArrayOES glIsVertexArrayOES;
      internal static GL.Delegates.LineWidth glLineWidth;
      internal static GL.Delegates.LinkProgram glLinkProgram;
      internal static GL.Delegates.MapBufferOES glMapBufferOES;
      internal static GL.Delegates.MultiDrawArraysEXT glMultiDrawArraysEXT;
      internal static GL.Delegates.MultiDrawElementsEXT glMultiDrawElementsEXT;
      internal static GL.Delegates.PixelStorei glPixelStorei;
      internal static GL.Delegates.PolygonOffset glPolygonOffset;
      internal static GL.Delegates.ProgramBinaryOES glProgramBinaryOES;
      internal static GL.Delegates.ReadPixels glReadPixels;
      internal static GL.Delegates.ReleaseShaderCompiler glReleaseShaderCompiler;
      internal static GL.Delegates.RenderbufferStorage glRenderbufferStorage;
      internal static GL.Delegates.RenderbufferStorageMultisampleANGLE glRenderbufferStorageMultisampleANGLE;
      internal static GL.Delegates.RenderbufferStorageMultisampleAPPLE glRenderbufferStorageMultisampleAPPLE;
      internal static GL.Delegates.RenderbufferStorageMultisampleIMG glRenderbufferStorageMultisampleIMG;
      internal static GL.Delegates.ResolveMultisampleFramebufferAPPLE glResolveMultisampleFramebufferAPPLE;
      internal static GL.Delegates.SampleCoverage glSampleCoverage;
      internal static GL.Delegates.Scissor glScissor;
      internal static GL.Delegates.SelectPerfMonitorCountersAMD glSelectPerfMonitorCountersAMD;
      internal static GL.Delegates.SetFenceNV glSetFenceNV;
      internal static GL.Delegates.ShaderBinary glShaderBinary;
      internal static GL.Delegates.ShaderSource glShaderSource;
      internal static GL.Delegates.StartTilingQCOM glStartTilingQCOM;
      internal static GL.Delegates.StencilFunc glStencilFunc;
      internal static GL.Delegates.StencilFuncSeparate glStencilFuncSeparate;
      internal static GL.Delegates.StencilMask glStencilMask;
      internal static GL.Delegates.StencilMaskSeparate glStencilMaskSeparate;
      internal static GL.Delegates.StencilOp glStencilOp;
      internal static GL.Delegates.StencilOpSeparate glStencilOpSeparate;
      internal static GL.Delegates.TestFenceNV glTestFenceNV;
      internal static GL.Delegates.TexImage2D glTexImage2D;
      internal static GL.Delegates.TexImage3DOES glTexImage3DOES;
      internal static GL.Delegates.TexParameterf glTexParameterf;
      internal static GL.Delegates.TexParameterfv glTexParameterfv;
      internal static GL.Delegates.TexParameteri glTexParameteri;
      internal static GL.Delegates.TexParameteriv glTexParameteriv;
      internal static GL.Delegates.TexSubImage2D glTexSubImage2D;
      internal static GL.Delegates.TexSubImage3DOES glTexSubImage3DOES;
      internal static GL.Delegates.Uniform1f glUniform1f;
      internal static GL.Delegates.Uniform1fv glUniform1fv;
      internal static GL.Delegates.Uniform1i glUniform1i;
      internal static GL.Delegates.Uniform1iv glUniform1iv;
      internal static GL.Delegates.Uniform2f glUniform2f;
      internal static GL.Delegates.Uniform2fv glUniform2fv;
      internal static GL.Delegates.Uniform2i glUniform2i;
      internal static GL.Delegates.Uniform2iv glUniform2iv;
      internal static GL.Delegates.Uniform3f glUniform3f;
      internal static GL.Delegates.Uniform3fv glUniform3fv;
      internal static GL.Delegates.Uniform3i glUniform3i;
      internal static GL.Delegates.Uniform3iv glUniform3iv;
      internal static GL.Delegates.Uniform4f glUniform4f;
      internal static GL.Delegates.Uniform4fv glUniform4fv;
      internal static GL.Delegates.Uniform4i glUniform4i;
      internal static GL.Delegates.Uniform4iv glUniform4iv;
      internal static GL.Delegates.UniformMatrix2fv glUniformMatrix2fv;
      internal static GL.Delegates.UniformMatrix3fv glUniformMatrix3fv;
      internal static GL.Delegates.UniformMatrix4fv glUniformMatrix4fv;
      internal static GL.Delegates.UnmapBufferOES glUnmapBufferOES;
      internal static GL.Delegates.UseProgram glUseProgram;
      internal static GL.Delegates.ValidateProgram glValidateProgram;
      internal static GL.Delegates.VertexAttrib1f glVertexAttrib1f;
      internal static GL.Delegates.VertexAttrib1fv glVertexAttrib1fv;
      internal static GL.Delegates.VertexAttrib2f glVertexAttrib2f;
      internal static GL.Delegates.VertexAttrib2fv glVertexAttrib2fv;
      internal static GL.Delegates.VertexAttrib3f glVertexAttrib3f;
      internal static GL.Delegates.VertexAttrib3fv glVertexAttrib3fv;
      internal static GL.Delegates.VertexAttrib4f glVertexAttrib4f;
      internal static GL.Delegates.VertexAttrib4fv glVertexAttrib4fv;
      internal static GL.Delegates.VertexAttribPointer glVertexAttribPointer;
      internal static GL.Delegates.Viewport glViewport;

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ActiveTexture(TextureUnit texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void AttachShader(uint program, uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BeginPerfMonitorAMD(uint monitor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindAttribLocation(uint program, uint index, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindBuffer(BufferTarget target, uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindFramebuffer(FramebufferTarget target, uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindTexture(TextureTarget target, uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BindVertexArrayOES(uint array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquation(BlendEquationMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlendFuncSeparate(BlendingFactorSrc srcRGB, BlendingFactorDest dstRGB, BlendingFactorSrc srcAlpha, BlendingFactorDest dstAlpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, All filter);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferData(BufferTarget target, IntPtr size, IntPtr data, BufferUsage usage);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void BufferSubData(BufferTarget target, IntPtr offset, IntPtr size, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate FramebufferErrorCode CheckFramebufferStatus(FramebufferTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Clear(ClearBufferMask mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearColor(float red, float green, float blue, float alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearDepthf(float depth);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ClearStencil(int s);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ColorMask(bool red, bool green, bool blue, bool alpha);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompileShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexImage3DOES(All target, int level, All internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CompressedTexSubImage3DOES(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, int imageSize, IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CopyTexSubImage3DOES(All target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CoverageMaskNV(bool mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CoverageOperationNV(All operation);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int CreateProgram();

      [SuppressUnmanagedCodeSecurity]
      internal delegate int CreateShader(ShaderType type);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void CullFace(CullFaceMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteBuffers(int n, uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteFencesNV(int n, uint* fences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteFramebuffers(int n, uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeletePerfMonitorsAMD(int n, uint* monitors);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteRenderbuffers(int n, uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteTextures(int n, uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DeleteVertexArraysOES(int n, uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthFunc(DepthFunction func);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthMask(bool flag);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DepthRangef(float zNear, float zFar);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DetachShader(uint program, uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Disable(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableDriverControlQCOM(uint driverControl);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DisableVertexAttribArray(uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DiscardFramebufferEXT(All target, int numAttachments, All* attachments);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawArrays(BeginMode mode, int first, int count);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void DrawElements(BeginMode mode, int count, DrawElementsType type, IntPtr indices);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EGLImageTargetRenderbufferStorageOES(All target, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EGLImageTargetTexture2DOES(All target, IntPtr image);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Enable(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableDriverControlQCOM(uint driverControl);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EnableVertexAttribArray(uint index);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndPerfMonitorAMD(uint monitor);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void EndTilingQCOM(uint preserveMask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetBufferPointervQCOM(All target, IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetBuffersQCOM(uint* buffers, int maxBuffers, int* numBuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetFramebuffersQCOM(uint* framebuffers, int maxFramebuffers, int* numFramebuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetProgramBinarySourceQCOM(uint program, All shadertype, string source, int* length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetProgramsQCOM(uint* programs, int maxPrograms, int* numPrograms);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetRenderbuffersQCOM(uint* renderbuffers, int maxRenderbuffers, int* numRenderbuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetShadersQCOM(uint* shaders, int maxShaders, int* numShaders);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetTexLevelParameterivQCOM(uint texture, All face, int level, All pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetTexSubImageQCOM(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, IntPtr texels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtGetTexturesQCOM(uint* textures, int maxTextures, int* numTextures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool ExtIsProgramBinaryQCOM(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ExtTexObjectStateOverrideiQCOM(All target, All pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Finish();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FinishFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Flush();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferRenderbuffer(FramebufferTarget target, FramebufferSlot attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture2D(FramebufferTarget target, FramebufferSlot attachment, TextureTarget textarget, uint texture, int level);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture2DMultisampleIMG();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FramebufferTexture3DOES(All target, All attachment, All textarget, uint texture, int level, int zoffset);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void FrontFace(FrontFaceDirection mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenBuffers(int n, [Out] uint* buffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenerateMipmap(TextureTarget target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenFencesNV(int n, [Out] uint* fences);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenFramebuffers(int n, [Out] uint* framebuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenPerfMonitorsAMD(int n, [Out] uint* monitors);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenRenderbuffers(int n, [Out] uint* renderbuffers);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenTextures(int n, [Out] uint* textures);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GenVertexArraysOES(int n, [Out] uint* arrays);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveAttrib(uint program, uint index, int bufsize, [Out] int* length, [Out] int* size, [Out] ActiveAttribType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetActiveUniform(uint program, uint index, int bufsize, [Out] int* length, [Out] int* size, [Out] ActiveUniformType* type, [Out] StringBuilder name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetAttachedShaders(uint program, int maxcount, [Out] int* count, [Out] uint* shaders);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetAttribLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBooleanv(GetPName pname, [Out] bool* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferParameteriv(BufferTarget target, BufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetBufferPointervOES(All target, All pname, [Out] IntPtr @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetDriverControlsQCOM([Out] int* num, int size, [Out] uint* driverControls);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetDriverControlStringQCOM(uint driverControl, int bufSize, [Out] int* length, [Out] StringBuilder driverControlString);

      [SuppressUnmanagedCodeSecurity]
      internal delegate ErrorCode GetError();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFenceivNV(uint fence, All pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFloatv(GetPName pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferSlot attachment, FramebufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetIntegerv(GetPName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorCounterDataAMD(uint monitor, All pname, int dataSize, [Out] uint* data, [Out] int* bytesWritten);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorCounterInfoAMD(uint group, uint counter, All pname, [Out] IntPtr data);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorCountersAMD(uint group, [Out] int* numCounters, [Out] int* maxActiveCounters, int counterSize, [Out] uint* counters);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, [Out] int* length, [Out] StringBuilder counterString);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorGroupsAMD([Out] int* numGroups, int groupsSize, [Out] uint* groups);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetPerfMonitorGroupStringAMD(uint group, int bufSize, [Out] int* length, [Out] StringBuilder groupString);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramBinaryOES(uint program, int bufSize, [Out] int* length, [Out] All* binaryFormat, [Out] IntPtr binary);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramInfoLog(uint program, int bufsize, [Out] int* length, [Out] StringBuilder infolog);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetProgramiv(uint program, ProgramParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetShaderInfoLog(uint shader, int bufsize, [Out] int* length, [Out] StringBuilder infolog);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetShaderiv(uint shader, ShaderParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetShaderPrecisionFormat(ShaderType shadertype, ShaderPrecision precisiontype, [Out] int* range, [Out] int* precision);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetShaderSource(uint shader, int bufsize, [Out] int* length, [Out] StringBuilder source);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr GetString(StringName name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformfv(uint program, int location, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetUniformiv(uint program, int location, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate int GetUniformLocation(uint program, string name);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribfv(uint index, VertexAttribParameter pname, [Out] float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribiv(uint index, VertexAttribParameter pname, [Out] int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void GetVertexAttribPointerv(uint index, VertexAttribPointerParameter pname, [Out] IntPtr pointer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Hint(HintTarget target, HintMode mode);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsBuffer(uint buffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsEnabled(EnableCap cap);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsFramebuffer(uint framebuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsRenderbuffer(uint renderbuffer);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsShader(uint shader);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsTexture(uint texture);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool IsVertexArrayOES(uint array);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LineWidth(float width);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void LinkProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate IntPtr MapBufferOES(All target, All access);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawArraysEXT(All mode, int* first, int* count, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void MultiDrawElementsEXT(All mode, int* first, All type, IntPtr indices, int primcount);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PixelStorei(PixelStoreParameter pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void PolygonOffset(float factor, float units);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ProgramBinaryOES(uint program, All binaryFormat, IntPtr binary, int length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ReleaseShaderCompiler();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorage(RenderbufferTarget target, RenderbufferInternalFormat internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorageMultisampleANGLE(All target, int samples, All internalformat, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorageMultisampleAPPLE();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void RenderbufferStorageMultisampleIMG();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ResolveMultisampleFramebufferAPPLE();

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SampleCoverage(float value, bool invert);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Scissor(int x, int y, int width, int height);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, uint* countersList);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void SetFenceNV(uint fence, All condition);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShaderBinary(int n, uint* shaders, ShaderBinaryFormat binaryformat, IntPtr binary, int length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ShaderSource(uint shader, int count, string[] @string, int* length);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StartTilingQCOM(uint x, uint y, uint width, uint height, uint preserveMask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilFunc(StencilFunction func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilFuncSeparate(CullFaceMode face, StencilFunction func, int @ref, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilMask(uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilMaskSeparate(CullFaceMode face, uint mask);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void StencilOpSeparate(CullFaceMode face, StencilOp fail, StencilOp zfail, StencilOp zpass);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool TestFenceNV(uint fence);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexImage3DOES(All target, int level, All internalformat, int width, int height, int depth, int border, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterf(TextureTarget target, TextureParameterName pname, float param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameterfv(TextureTarget target, TextureParameterName pname, float* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameteri(TextureTarget target, TextureParameterName pname, int param);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexParameteriv(TextureTarget target, TextureParameterName pname, int* @params);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void TexSubImage3DOES(All target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, All format, All type, IntPtr pixels);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1f(int location, float x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1fv(int location, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1i(int location, int x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform1iv(int location, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2f(int location, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2fv(int location, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2i(int location, int x, int y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform2iv(int location, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3f(int location, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3fv(int location, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3i(int location, int x, int y, int z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform3iv(int location, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4f(int location, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4fv(int location, int count, float* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4i(int location, int x, int y, int z, int w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Uniform4iv(int location, int count, int* v);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix2fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix3fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UniformMatrix4fv(int location, int count, bool transpose, float* value);

      [SuppressUnmanagedCodeSecurity]
      internal delegate bool UnmapBufferOES(All target);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void UseProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void ValidateProgram(uint program);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1f(uint indx, float x);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib1fv(uint indx, float* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2f(uint indx, float x, float y);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib2fv(uint indx, float* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3f(uint indx, float x, float y, float z);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib3fv(uint indx, float* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4f(uint indx, float x, float y, float z, float w);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttrib4fv(uint indx, float* values);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void VertexAttribPointer(uint indx, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr ptr);

      [SuppressUnmanagedCodeSecurity]
      internal delegate void Viewport(int x, int y, int width, int height);
    }
  }
}
